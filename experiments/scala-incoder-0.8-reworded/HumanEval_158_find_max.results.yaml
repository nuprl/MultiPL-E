language: scala
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxCount = words.map(_.length).max\n        var maxString\
    \ = \"\"\n        var maxCountIndex = 0\n        var curString = \"\"\n      \
    \  var curCount = 0\n\n        for (word <- words) {\n            val count =\
    \ word.count(_ != \" \")\n\n            if (maxCount > count) {\n            \
    \    maxCount = count\n                maxString = \"\"\n                maxCountIndex\
    \ = 0\n            } else if (maxCount == count) {\n                if (maxCountIndex\
    \ < words.length - 1) {\n                    maxCountIndex += 1\n            \
    \        maxString = \"\"\n                    maxCountIndex = 0\n           \
    \     }\n            }\n            \n            if (curCount == maxCount) {\n\
    \                if (curString == \"\") {\n                    curString = word\n\
    \                    curCount = count\n                } else {\n            \
    \        if (curString != word) {\n                        curString = word\n\
    \                        curCount = count\n                    } else {\n    \
    \                    curCount = count\n                    }\n               \
    \ }\n            } else {\n                if (curString != \"\") {\n        \
    \            curString = \"\"\n                    curCount = 0\n            \
    \    }\n            }\n        }\n        \n        if (maxCount == maxCountIndex\
    \ + 1) {\n            words.sortWith(_.length < _.length)\n            words.head\n\
    \        } else {\n            words.sortWith(_.length < _.length).head\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpka6ef7xu.scala:22:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = word.count(_\
    \ != \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = mutable.Map[Char, Int]()\n        for (str\
    \ <- words) {\n            for(ch <- str.toCharArray) {\n                if(!counts.contains(ch))\
    \ {\n                    counts += (ch -> 1)\n                } else {\n     \
    \               counts += (ch -> (counts(ch) + 1).toInt)\n                }\n\
    \            }\n        }\n        counts.maxBy(_._2)._1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd4ktikxv.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordSet = HashSet[String]()\n        for (word <-\
    \ words) {\n            val unique = word.map(_.toInt).distinct.length\n     \
    \       val count = wordSet(word)\n            if (unique<count) wordSet(word)=unique\n\
    \            else wordSet(word)=count\n        }\n        wordSet.max match {\n\
    \            case Some(m) =>\n                words.takeWhile(w => w < m).sorted\n\
    \            case _ =>\n                words.reverse.takeWhile(w => w < wordSet.max).sorted\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpogqp1ga0.scala:19:22 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (unique<count) wordSet(word)=unique\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m None of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m<\e[0m in \e[33mclass\e[0m\
    \ \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Boolean\n\e[31m   |\e\
    [0m  (x: Float): Boolean\n\e[31m   |\e[0m  (x: Long): Boolean\n\e[31m   |\e[0m\
    \  (x: Int): Boolean\n\e[31m   |\e[0m  (x: Char): Boolean\n\e[31m   |\e[0m  (x:\
    \ Short): Boolean\n\e[31m   |\e[0m  (x: Byte): Boolean\n\e[31m   |\e[0m match\
    \ arguments ((count : Boolean))\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpogqp1ga0.scala:19:44\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (unique<count)\
    \ wordSet(word)=unique\n\e[31m\e[31m   |\e[0m                                \
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \        Found:    (unique : Int)\n\e[31m   |\e[0m                           \
    \                 Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpogqp1ga0.scala:24:41 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                words.takeWhile(\e[36mw\e[0m => w < m).sorted\n\e[31m\e\
    [31m   |\e[0m                                         ^\e[0m\n\e[31m   |\e[0m\
    \                                         Found:    (m : Any)\n\e[31m   |\e[0m\
    \                                         Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpogqp1ga0.scala:26:16 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                words.reverse.takeWhile(\e[36mw\e[0m\
    \ => w < wordSet.max).sorted\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e\
    [0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer expl"
  stdout: ''
  timestamp: 1660009677
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var bestIndex = 0\n        var bestLength = words.length\n\
    \        var bestValue = words(bestIndex).length\n        var bestWord = words(bestIndex)\n\
    \        var nextIndex = 1\n        var nextLength = words.length\n        var\
    \ nextValue = words(nextIndex).length\n        var nextWord = words(nextIndex)\n\
    \n        while (bestIndex < nextIndex) {\n            if (nextValue > bestValue)\
    \ {\n                bestValue = nextValue\n                bestIndex = nextIndex\n\
    \                bestLength = nextLength\n                bestWord = nextWord\n\
    \                nextIndex = nextIndex + 1\n                nextLength = words.length\n\
    \                nextValue = words(nextIndex).length\n                nextWord\
    \ = words(nextIndex)\n            } else if (nextValue == bestValue) {\n     \
    \           nextLength = nextLength + 1\n                nextValue = words(nextIndex).length\n\
    \                nextWord = words(nextIndex)\n            } else {\n         \
    \       nextIndex = nextIndex + 1\n                nextLength = words.length\n\
    \                nextValue = words(nextIndex).length\n                nextWord\
    \ = words(nextIndex)\n            }\n        }\n        return bestWord\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.findMax(tmpy4y94x2g.scala:32)\n\tat Problem$.main(tmpy4y94x2g.scala:48)\n\
    \tat Problem.main(tmpy4y94x2g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordsGroup = words.groupBy(x => x).mapValues(_.size)\n\
    \        val maxValue = wordsGroup.max\n        val maxKeys = wordsGroup.keySet.filter(x\
    \ => x == maxValue)\n        val max = maxKeys.head\n        return max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp333586ua.scala:17:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxKeys\e[0m = wordsGroup.keySet.filter(\e\
    [36mx\e[0m => x == maxValue)\n\e[31m\e[31m   |\e[0m                          \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of types\
    \ String and (String, Int) cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660009676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = mutable.Map[String, Int]()\n        for (word\
    \ <- words) {\n            val count = counts(word)\n            if (count ==\
    \ null) counts(word) = 1 else {\n                counts(word) = count + 1\n  \
    \          }\n        }\n        counts\n                .sortWith(_._2 > _._2)\n\
    \                .map(_._1)\n                .head\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj00eioat.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxCount : Int = 0\n        var maxCount : String\
    \ = \"\"\n        var maxIndex = 0\n        var maxWord : String = \"\"\n    \
    \    var i = 0\n        var j = words.length\n        var c = new scala.collection.mutable.HashSet[String]()\n\
    \n        while (i < j) {\n            val tempCount = c.size\n            if\
    \ (tempCount > maxCount) {\n                maxIndex = i\n                maxWord\
    \ = words(i)\n                maxCount = tempCount\n            }\n          \
    \  i += 1\n        }\n        if (maxCount == 0) maxWord\n        else words(maxIndex)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo3uwhdjd.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mmaxCount\e[0m : \e[35mString\e\
    [0m = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCount is already defined as \e[33mvariable\e[0m \e[35mmaxCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueWords = words.groupBy(x => x).map(x => (x._1,x._2.size)).toList.sortWith(_._2\
    \ > _._2)\n        uniqueWords(0)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ucryyuu.scala:16:19\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        uniqueWords(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \  Found:    \e[1m\e[31m(\e[0mString\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e\
    [31mInt\e[0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toList).flatten\n        chars.groupBy(identity).maxBy(_._2.size).toList(0).get\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9r_suqza.scala:16:59 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        chars.groupBy(identity).maxBy(_._2.size).toList(\e\
    [31m0\e[0m).get\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value get is not a member of Char | (List[Char] |\
    \ Nothing)\n1 error found\n"
  stdout: ''
  timestamp: 1660009676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val characters = words.flatMap(word => word.distinct)\n\
    \        characters.foldLeft((\"\", 0))( (acc: (String, Int), word: Char) => {\n\
    \            val n = acc._1 + word.length\n            if (n > acc._2) {\n   \
    \             acc._1 -> n\n            } else acc\n        })\n        .get._1.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9sldvudk.scala:17:34 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mn\e[0m = acc._1 + word.length\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                             value length is not a member of Char\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp9sldvudk.scala:18:24 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (n > acc._2) {\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Found:    Int\n\e[31m   |\e[0m                    Required: String\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val count = mutable.Map[Char, Int]()\n        for (w <-\
    \ words) count(w) += 1\n\n        if (count.size == 0) \"None\"\n        else\
    \ {\n            var max = -1000\n            var maxWord = \"None\"\n       \
    \     for ((c,i) <- count.iterator)\n                if (i < max) {\n        \
    \            max = i\n                    maxWord = w\n                }\n   \
    \         maxWord\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcg4ghfjq.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val charCounts = words.map(_.toCharArray).flatten.foldLeft(Map[Char,\
    \ Int]())((m, c) => {\n            m + (c -> (m.getOrElse(c,0) + 1)))\n      \
    \  })\n        charCounts.maxBy(_._2)._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpteysum31.scala:16:45 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            m + (c -> (m.getOrElse(c,\e[31m0\e[0m) +\
    \ \e[31m1\e[0m)))\n\e[31m\e[31m   |\e[0m                                     \
    \        ^\e[0m\n\e[31m   |\e[0m                                             '}'\
    \ expected, but ')' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpteysum31.scala:17:9\
    \ ----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        })\n\e[31m\e\
    [31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         '}' expected, but ')' found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordsWithMaxCharacters =  new mutable.HashMap[String,\
    \ Int]()\n        for(word <- words){\n            val uniqueCharCount = word.distinct\n\
    \            if(uniqueCharCount.length>wordsWithMaxCharacters.size){\n       \
    \         wordsWithMaxCharacters +=((word, uniqueCharCount.length))\n        \
    \    }\n        }\n        var maxWord = \"\"\n        if(wordsWithMaxCharacters.isEmpty)\n\
    \            return \"\"\n        wordsWithMaxCharacters.foreach{\n          \
    \  case (word, uniqueCharCount) =>\n                if(maxWord.length<uniqueCharCount)\n\
    \                    maxWord = word\n        }\n        wordsWithMaxCharacters.toSeq.sortWith(_.1\
    \ < _.1)\n            .map(_.key)\n            .headOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplmwffhl8.scala:30:47 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        wordsWithMaxCharacters.toSeq.sortWith(_\e[31m.1\e\
    [0m < _\e[31m.1\e[0m)\n\e[31m\e[31m   |\e[0m                                 \
    \              ^\e[0m\n\e[31m   |\e[0m                                  ')' expected,\
    \ but number literal found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplmwffhl8.scala:15:42\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsWithMaxCharacters\e[0m =  \e[33mnew\e[0m mutable.HashMap[\e[35mString\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmplmwffhl8.scala:30:46 -----------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        wordsWithMaxCharacters.toSeq.sortWith(_\e[31m.1\e[0m < _\e[31m.1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                              ^\e[0m\n\
    \e[31m   |\e[0mMissing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0mI could\
    \ not infer the type of the parameter _$1 of expanded function:\n\e[31m   |\e\
    [0m_$1 => wordsWithMaxCharacters.toSeq.sortWith(_$1).map(_$2 => _$2.key).headOption.\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009673
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = 0\n        var maxWord = \"\"\n        for(word\
    \ <- words){\n            val count = word.count(c => c.isLetter)\n          \
    \  if(count > max){\n                max = count\n                maxWord = word\n\
    \            }\n        }\n        return maxWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp00bh5q68.scala:28)\n\tat Problem.main(tmp00bh5q68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009677
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val numUniqueChars = words.map(x => x.size).reduceLeft(_\
    \ + _)\n        if(numUniqueChars == 0) \"no unique characters\"\n        else\
    \ {\n            val sortedWords = words.sortWith(_ < _)\n            val maxLen\
    \ = sortedWords.map(_.length).max\n            val maxLenIndex = sortedWords.map(_.length).indexOf(maxLen)\
    \ + 1\n            if(maxLenIndex == sortedWords.length) sortedWords(maxLenIndex)\n\
    \            else sortedWords(maxLenIndex - 1)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.findMax(tmpupwdhnaw.scala:21)\n\tat Problem$.main(tmpupwdhnaw.scala:26)\n\
    \tat Problem.main(tmpupwdhnaw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueLetters = HashMap[String, Int]()\n        words.foreach{\n\
    \            word => word.foreach{\n                letter => uniqueLetters(letter)\
    \ += 1\n            }\n        }\n        val maxLetter = uniqueLetters.maxBy(_._2)\n\
    \        if (uniqueLetters.length == 1) {\n            return words(0)\n     \
    \   }\n        if (uniqueLetters(maxLetter) > uniqueLetters.count(_._1 == maxLetter))\
    \ {\n            return words(0)\n        } else {\n            return words(0)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk_qo_kgl.scala:18:40\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[36mletter\e\
    [0m => uniqueLetters(letter) += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                              ^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                      Found:    (letter : Char)\n\e[31m   |\e[0m            \
    \                            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpk_qo_kgl.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m (uniqueLetters.length == \e[31m1\e\
    [0m) {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue length is not a member of scala.collection.mutable.HashMap[String, Int]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk_qo_kgl.scala:25:26 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (uniqueLetters(maxLetter) > uniqueLetters.count(_._1\
    \ == maxLetter)) {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (maxLetter : (String,\
    \ Int))\n\e[31m   |\e[0m                          Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpk_qo_kgl.scala:25:59 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (uniqueLetters(maxLetter) > uniqueLetters.count(_._1\
    \ == maxLetter)) {\n\e[31m\e[31m   |\e[0m                                    \
    \                       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of types\
    \ String and (String, Int) cannot be compared with == or !=\n4 errors found\n"
  stdout: ''
  timestamp: 1660009676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val charsCount = words.foldLeft(Map[Char, Int]())((m,\
    \ word) =>\n            word foreach (c =>\n                m + (c -> (m.getOrElse(c,\
    \ 0) + 1))))\n        val max = charsCount.maxBy(_._2.toInt).toChar\n        val\
    \ found = words.find(word => charsCount.filter(_._1 == word.toChar).exists(_._2\
    \ == max))\n        found.orElse {\n            // if none of the words have max\
    \ number of unique chars, return first word in lexicographical order\n       \
    \     val sortedWords = charsCount.toList.sortBy(_._1)\n            sortedWords(0)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptna3av3b.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            word foreach (\e\
    [36mc\e[0m =>\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m      \
    \      Found:    Unit\n\e[31m   |\e[0m            Required: scala.collection.mutable.Map[Char,\
    \ Int]\n\e[31m17 |\e[0m                m + (c -> (m.getOrElse(c, \e[31m0\e[0m)\
    \ + \e[31m1\e[0m))))\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptna3av3b.scala:18:47\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = charsCount.maxBy(_._2.toInt).toChar\n\e[31m\e[31m   |\e[0m    \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \             value toChar is not a member of (Char, Int)\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmptna3av3b.scala:19:70 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfound\e[0m = words.find(\e[36mword\e\
    [0m => charsCount.filter(_._1 == word.toChar).exists(_._2 == max))\n\e[31m\e[31m\
    \   |\e[0m                                                                 ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptna3av3b.scala:23:23\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            sortedWords(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \          Found:    (Char, Int)\n\e[31m   |\e[0m            Required: Option[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxChars = 0\n        var maxWord = \"\"\n       \
    \ for (w <- words)\n        {\n            var charCount = 0\n            var\
    \ wordCount = 0\n            for (c <- w)\n            {\n                charCount\
    \ += 1\n                wordCount += 1\n                if (charCount > maxChars)\n\
    \                {\n                    maxChars = charCount\n               \
    \     maxWord = w\n                }\n            }\n        }\n        if (maxChars\
    \ > 0)\n        {\n            for (w <- words)\n            {\n             \
    \   for (c <- w)\n                {\n                    if (c != maxWord.charAt(maxWord.length\
    \ - 1)) w += c\n                }\n            }\n        }\n        maxWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg67dn1t_.scala:38:67 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                    \e[33mif\e[0m (c != maxWord.charAt(maxWord.length\
    \ - \e[31m1\e[0m)) w += c\n\e[31m\e[31m   |\e[0m                             \
    \                                    ^^^^\e[0m\n\e[31m   |\e[0m              \
    \   value += is not a member of String - did you mean w.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxCount = 0\n        var result = \"\"\n        for\
    \ (word <- words){\n            val count = word.length()\n            if(count\
    \ > maxCount){\n                result = word\n                maxCount = count\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqja1hkul.scala:28)\n\tat Problem.main(tmpqja1hkul.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.length.toLong\n        if (unique >\
    \ 1) {\n            val max = scala.collection.mutable.Map[Int, String]()\n  \
    \          for (word <- words) {\n                val numChars = word.split(\"\
    \ \").length\n                val chars = if (numChars > 1) \"many\" else \"char\"\
    \n                max.getOrElse(numChars, chars) = word\n            }\n     \
    \       max.max._2\n        } else words.head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5hceny52.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                max.getOrElse(numChars, chars) = word\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \         value update is not a member of (Int, => String) => String\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      val map = scala.collection.mutable.Map.empty[Int, String]\n\
    \      words.foreach(x => {\n        x match {\n          case \"name\" => map.update(0,\
    \ x)\n          case \"of\" => map.update(1, x)\n          case \"string\" =>\
    \ map.update(2, x)\n          case _ => map.update(3, x)\n        }\n      })\n\
    \      val ordered = map.toList\n      ordered.sortWith((x,y) => x._1 < y._1).head._2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb5cvuiww.scala:28)\n\tat Problem.main(tmpb5cvuiww.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val nums = words.groupBy(w => w.length).maxBy(_._2)._1\n\
    \        words.find(w => w.length == nums)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzlghmnzo.scala:15:59 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = words.groupBy(\e\
    [36mw\e[0m => w.length).maxBy(_._2)._1\n\e[31m\e[31m   |\e[0m                \
    \                                           ^\e[0m\n\e[31m   |\e[0mNo implicit\
    \ Ordering defined for List[String]..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m    scala.math.Ordering.ordered[\e[35mList[String]\e[0m](\n\e[31m\
    \   |\e[0m      /* missing */summon[scala.math.Ordering.AsComparable[List[String]]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type scala.math.Ordering.AsComparable[List[String]].\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.Ordering.Implicits.seqOrdering\n\e[31m\
    \   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzlghmnzo.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        words.find(\e[36mw\e\
    [0m => w.length == nums)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val m = Map(words.toSet.toSeq.groupBy(x => x).mapValues(_.size).maxBy(_._1))\n\
    \        words(m.keys.toSeq.maxBy(x => m.get(x)).get)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvugcx76b.scala:16:48 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        words(m.keys.toSeq.maxBy(\e[36mx\e[0m => m.get(x)).get)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m              value get is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.length)\n        val uniqueChars\
    \ = chars.distinct\n        uniqueChars.max match {\n            case Some(max)\
    \ => chars.find(_ == max).head\n            case None => \"\"\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnbs5gwto.scala:18:51\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m Some(max)\
    \ => chars.find(_ == max).head\n\e[31m\e[31m   |\e[0m                        \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \       Found:    Int\n\e[31m   |\e[0m                              Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnbs5gwto.scala:19:17\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m None\
    \ => \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^^\e[0m\n\e[31m\
    \   |\e[0m                 Found:    None.type\n\e[31m   |\e[0m              \
    \   Required: Int\n\e[31m   |\e[0m                 pattern type is incompatible\
    \ with expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val count = words.foldLeft(Map[Char,Int]())(_ + (_._2.toInt\
    \ -> 1))\n        val maxKey = count.maxBy(_._2)._2\n        val maxValue = count.maxBy(_._2)._1\n\
    \        val maxWord = words.filter(w => w.length == maxValue).filter(_._2 ==\
    \ maxValue).head\n        if(maxKey.toString.toCharArray.sortedList.nonEmpty){\n\
    \            words(\"sort\") match {\n                case x => x.substring(maxKey.toString.toCharArray.sortedList.indexOf(maxKey),x.toString.length).trim\n\
    \            }\n        }else{\n            maxWord\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpp73mcwxm.scala:15:52 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = words.foldLeft(Map[\e\
    [35mChar\e[0m,\e[35mInt\e[0m]())(_ + (_._2.toInt -> \e[31m1\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                    ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp73mcwxm.scala:18:71\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWord\e[0m = words.filter(\e[36mw\e[0m => w.length == maxValue).filter(_._2\
    \ == maxValue).head\n\e[31m\e[31m   |\e[0m                                   \
    \                                  ^^^^\e[0m\n\e[31m   |\e[0m                \
    \                      value _2 is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpp73mcwxm.scala:19:39 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(maxKey.toString.toCharArray.sortedList.nonEmpty){\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m           value sortedList is not a member of Array[Char]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpp73mcwxm.scala:20:18 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            words(\e[31m\"sort\"\e[0m) \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \               Found:    (\e[32m\"sort\"\e[0m : String)\n\e[31m   |\e[0m    \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpp73mcwxm.scala:21:66 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                \e[33mcase\e[0m x => x.substring(maxKey.toString.toCharArray.sortedList.indexOf(maxKey),x.toString.length).trim\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value sortedList is not a member\
    \ of Array[Char]\n5 errors found\n"
  stdout: ''
  timestamp: 1660009685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Write your answer here\n        words.foldLeft(\"\"\
    )( (maxWord, word) => maxWord.length + (word.length max 1) )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9_zgyxp7.scala:16:65\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        words.foldLeft(\e[31m\"\
    \"\e[0m)( (\e[36mmaxWord\e[0m, \e[36mword\e[0m) => maxWord.length + (word.length\
    \ max \e[31m1\e[0m) )\n\e[31m\e[31m   |\e[0m                                 \
    \                                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                                   Found:    Int\n\e[31m   |\e\
    [0m                                                        Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordMap : mutable.Map[Int, List[String]] = words.groupBy(word\
    \ => {\n            val len = word.length\n            if (len > 1) 1\n      \
    \      else if (len == 1) 0\n            else {\n                val lw = word.toLowerCase\n\
    \                val lwo = lw\n                    .replaceAll(\" \", \"\")\n\
    \                    .replaceAll(\"[^a-z]\", \"\")\n                    .length\n\
    \                lw > lwo ? 1 : 0\n            }\n        }).mapValues(_.toList).toMap\n\
    \        var maxCount = 0\n        var maxWord = \"\"\n        val keys = wordMap.keys\n\
    \        val values = wordMap.values.sortWith(_.length < _.length).reverse\n \
    \       for (k <- keys) {\n            var count = 0\n            for (l <- values)\
    \ {\n                if (k == l) count += 1\n            }\n            if (count\
    \ > maxCount) {\n                maxCount = count\n                maxWord = k\n\
    \            }\n        }\n        maxWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp15_eg812.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordMap\e[0m : mutable.Map[\e\
    [35mInt\e[0m, \e[35mList\e[0m[\e[35mString\e[0m]] = words.groupBy(\e[36mword\e\
    [0m => {\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp15_eg812.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                lw > lwo ? \e[31m1\e[0m : \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \             value ? is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660009685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      var maxCount = 1\n      var maxWord = \"\"\n      for (\
    \ word <- words ) {\n        var count = word.distinct().length\n        if (count\
    \ > maxCount) {\n          maxCount = count\n          maxWord = word\n      \
    \  }\n      }\n      return maxWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpt2b4otd_.scala:18:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mcount\e[0m = word.distinct().length\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e\
    [0m \e[35mStringOps\e[0m: (i: Int): Char\n1 error found\n"
  stdout: ''
  timestamp: 1660009680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toChar).distinct.sorted\n    \
    \    chars.takeWhile(char.isLetter).length == 1\n          match {\n         \
    \   case true => words.last\n            case false => word(words.length)\n  \
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3r0m1vag.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar).distinct.sorted\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              value toChar is not a member of String\n\e[31m\e\
    [31m-- Error: /tmp/tmp3r0m1vag.scala:15:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar).distinct.sorted\n\
    \e[31m\e[31m   |\e[0m                                                       ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mDeprecatedFloatOrdering\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3r0m1vag.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m \e[31mfalse\e[0m => word(words.length)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      Not found: word\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxCharNum = words.foldLeft(Map[String, Int]())(_\
    \ + _._2.toInt)\n        val result = words.filter(_._2.toInt == maxCharNum).sortBy(-_._1)\n\
    \        result.getOrElse(words.get(0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq40thazo.scala:15:66 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxCharNum\e[0m = words.foldLeft(Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]())(_ + _._2.toInt)\n\e[31m\e[31m   |\e[0m   \
    \                                                             ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      value _2 is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq40thazo.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = words.filter(_._2.toInt\
    \ == maxCharNum).sortBy(-_._1)\n\e[31m\e[31m   |\e[0m                        \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                                  value _2\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq40thazo.scala:16:70\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = words.filter(_._2.toInt == maxCharNum).sortBy(-_._1)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                                      value _1\
    \ is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmpq40thazo.scala:16:73\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36mresult\e[0m = words.filter(_._2.toInt == maxCharNum).sortBy(-_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mDeprecatedDoubleOrdering\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660009688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueCount = mutable.HashSet[String]()\n        var\
    \ maxCount = 0\n        var maxWord = \"\"\n        for(word <- words) {\n   \
    \         uniqueCount += word.distinct\n            if(uniqueCount.length >= maxCount)\
    \ {\n                maxCount = uniqueCount.length\n                maxWord =\
    \ word\n            }\n        }\n        uniqueCount += maxWord\n        maxWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp420h9p22.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueCount\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def uniqueWords(w : String, i : Int) : Int = {\n     \
    \       val l = words(i)\n            val l = l.toUpperCase\n            val l\
    \ = l.toLowerCase\n            val l = l.split(\"\")\n            val l = l.distinct\n\
    \            val l = l.length\n            l == w.toUpperCase\n        }\n\n \
    \       val maxLength = words.map( w =>  w.length ).max\n        val maxLength\
    \ = if (maxLength == 0) 0 else maxLength\n\n        val uniqueWordsMap = words.map(w\
    \ =>  (w, uniqueWords(w, words.indexOf(w))) ).toMap\n        uniqueWordsMap.filter(_._2\
    \ > maxLength).map(_._1).headOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpym9lzj7v.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e[0m = \e[33mif\e\
    [0m (maxLength == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m maxLength\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxLength is already defined as \e[33mvalue\e[0m \e[35mmaxLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpym9lzj7v.scala:17:16 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m            \e[33mval\e[0m \e[36ml\e[0m = l.toUpperCase\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already\
    \ defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpym9lzj7v.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36ml\e[0m = l.toLowerCase\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml\
    \ is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpym9lzj7v.scala:19:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e\
    [0m \e[36ml\e[0m = l.split(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined as \e[33mvalue\e\
    [0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpym9lzj7v.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36ml\e[0m = l.distinct\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is\
    \ already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods "
  stdout: ''
  timestamp: 1660009688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(word => word.toSet).foldLeft(Map[String,Int]())((acc,\
    \ element) => {\n            val set = acc(element.head)\n            if (set\
    \ == null) {\n                val count = element.size\n                acc((element.head)\
    \ -> count)\n            } else {\n                val count = acc((element.head)\
    \ -> acc((element.head) -> 1) + 1)\n                acc((element.head) -> count)\n\
    \            }\n        })\n        var maxCount = 0\n        for (e <- counts.keySet)\
    \ {\n            if (counts(e) > maxCount) {\n                maxCount = counts(e)\n\
    \            }\n        }\n        counts.keys.find(e => e == maxCount).map(_\
    \ + \"\").head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3pram89d.scala:16:34\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e\
    [36mset\e[0m = acc(element.head)\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    Char\n\
    \e[31m   |\e[0m                          Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmp3pram89d.scala:17:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (set == \e[31mnull\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \    Values of types Int and Null cannot be compared with == or !=\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3pram89d.scala:19:20 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                acc((element.head) -> count)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Found:    (Char, Int)\n\e[31m   |\e[0m                  \
    \  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3pram89d.scala:21:54\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m\
    \ \e[36mcount\e[0m = acc((element.head) -> acc((element.head) -> \e[31m1\e[0m)\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                                 Found:    (Char, Int)\n\e[31m   |\e[0m     \
    \                                              Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3pram89d.scala:22:20 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                acc((element.head) -> count)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Found:    (Char, Int)\n\e[31m   |\e[0m                  \
    \  Required: String"
  stdout: ''
  timestamp: 1660009688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordsWithUniqueChars = words.groupBy(c => (c))\n \
    \       val maximum = wordsWithUniqueChars.maxBy(_._2.size)\n        val wordWithMaxChars\
    \ = wordsWithUniqueChars.filter(_._2.size == maximum._2.size)\n        val wordWithMaxCharsWithMaxCharsFirst\
    \ = wordWithMaxChars.minBy(_._2._1)\n        wordWithMaxCharsWithMaxCharsFirst._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptzjj4npx.scala:18:76 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mwordWithMaxCharsWithMaxCharsFirst\e\
    [0m = wordWithMaxChars.minBy(_._2._1)\n\e[31m\e[31m   |\e[0m                 \
    \                                                      ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                value _1 is not a member of List[String]\n\
    \e[31m\e[31m-- Error: /tmp/tmptzjj4npx.scala:18:79 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mwordWithMaxCharsWithMaxCharsFirst\e\
    [0m = wordWithMaxChars.minBy(_._2._1)\n\e[31m\e[31m   |\e[0m                 \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ cmp of \e[33mmethod\e[0m \e[35mminBy\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var counts : scala.collection.mutable.Map[Char, Int] =\
    \ scala.collection.mutable.HashMap[Char, Int]()\n        var maxCount : Int =\
    \ words.size\n        var maxWord = \"\"\n        for (word <- words) {\n    \
    \        val charCount = word.chars.distinct.size\n            if (charCount >\
    \ maxCount) {\n                maxCount = charCount\n                maxWord =\
    \ word\n            }\n            if (charCount > 0) {\n                counts.put(charCount,\
    \ charCount)\n            }\n        }\n        if (counts.size == 0) {\n    \
    \        return \"\"\n        }\n        val highestCountKeys = counts.keys.toList.sortWith(_\
    \ < _)\n        val highestCountValues = counts.values.toList.sortWith(_ < _)\n\
    \        if (highestCountValues.head > highestCountValues.last)\n            return\
    \ highestCountKeys(0)\n        else\n            return highestCountKeys.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdibvonsy.scala:19:48 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mcharCount\e[0m = word.chars.distinct.size\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue size is not a member of java.util.stream.IntStream - did\
    \ you mean IntStream.skip?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdibvonsy.scala:34:35\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m            \e[33mreturn\e[0m\
    \ highestCountKeys(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    Char\n\e[31m   |\e[0m       \
    \            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdibvonsy.scala:36:36 --------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m            \e[33mreturn\e[0m highestCountKeys.head\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \       Found:    Char\n\e[31m   |\e[0m                   Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def countMap(word:String, map:Map[Char,Int]) : Map[Char,Int]\
    \ = {\n            val newMap = map.updated(word.charAt(0), map.getOrElse(word.charAt(0),0)+1)\n\
    \            val newMap = map.updated(word.charAt(word.length-1), map.getOrElse(word.charAt(word.length-1),0)+1)\n\
    \            newMap\n        }\n        def getMaxCount(words : List[String],\
    \ map: Map[Char,Int]) : Map[Char,Int] = {\n            var maxCount = Map[Char,Int]()\n\
    \            words.foreach(word => {\n                val count = map.getOrElse(word.charAt(0),0)\n\
    \                val newCount = count + 1\n                if (maxCount.exists(_._2\
    \ > newCount)) {\n                    maxCount = getMaxCount(words.filterNot(_.contains(word)),\
    \ map).updated(word.charAt(0),newCount)\n                }\n            })\n \
    \           maxCount\n        }\n        val sortedWords = words.sorted\n    \
    \    val sortedMap = countMap(sortedWords.head, Map[Char,Int]())\n        val\
    \ maxCount = getMaxCount(sortedWords, sortedMap)\n        maxCount.map(_._1).headOption.getOrElse(\"\
    empty\")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd8udxnwf.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mnewMap\e[0m = map.updated(word.charAt(word.length-\e\
    [31m1\e[0m), map.getOrElse(word.charAt(word.length-\e[31m1\e[0m),\e[31m0\e[0m)+\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMap is already defined as \e[33mvalue\e[0m \e[35mnewMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpd8udxnwf.scala:34:47 --------------------\e[0m\e[0m\n\
    \e[31m34 |\e[0m        maxCount.map(_._1).headOption.getOrElse(\e[31m\"empty\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Matchable\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      val mc = new scala.collection.mutable.HashMap[String, Int]()\n\
    \      words.foreach { word =>\n        val chars = word.grouped(2).toList\n \
    \       if(chars.isEmpty) mc.put(word, 1) else mc.put(word, chars.count(_._2).max)\n\
    \      }\n      if(mc.isEmpty) words.getOrElse(\"NULL\", null)\n      else {\n\
    \        mc.toList.sortBy(-_._2).head\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd2wmq8re.scala:18:74 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m(chars.isEmpty) mc.put(word, \e\
    [31m1\e[0m) \e[33melse\e[0m mc.put(word, chars.count(_._2).max)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \     ^^^^\e[0m\n\e[31m   |\e[0m                                      value _2\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd2wmq8re.scala:20:27\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m      \e[33mif\e[0m(mc.isEmpty)\
    \ words.getOrElse(\e[31m\"NULL\"\e[0m, \e[31mnull\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \   value getOrElse is not a member of List[String]\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpd2wmq8re.scala:22:32 --------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        mc.toList.sortBy(-_._2).head\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e\
    [31m(\e[0mString\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e[0m\e[1m\e[31m)\e\
    [0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val sortedWords = words.sortBy(_.length)\n        val\
    \ uniqueChars = mutable.Map[Char, Int]()\n        val resultString = sortedWords.map((_,\
    \ uniqueChars)).foldLeft(\"\"){ (result, word) =>\n            val uniqueCharCount\
    \ = uniqueChars(word.charAt(0))\n            if(uniqueCharCount > result.length){\n\
    \                result\n            }else{\n                result + word.substring(0,\
    \ uniqueCharCount)\n            }\n        }\n        resultString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc1h2ur4x.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc1h2ur4x.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                result +\
    \ word.substring(\e[31m0\e[0m, uniqueCharCount)\n\e[31m\e[31m   |\e[0m       \
    \                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ substring is not a member of (String, Nothing)\n2 errors found\n"
  stdout: ''
  timestamp: 1660009687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Write the code here\n        var maxUnique = -1;\n\
    \        var maxChar = 0;\n        var maxCharIndex = 0;\n        var maxCharValue\
    \ = 0;\n        var maxValue = words.size\n\n        for (i <- 0 until words.size)\
    \ {\n            var curUnique = 0;\n            var curChar = 0;\n          \
    \  var curValue = 0;\n            for (j <- 0 until words.size) {\n          \
    \      if (j == i) {\n                    continue;\n                }\n     \
    \           val w1 = words(i)\n                val w2 = words(j)\n           \
    \     val len = w1.length \n\n                if (w1 equals w2) {\n          \
    \          continue;\n                }\n\n                val chars = w1.charCount\n\
    \                val charsCount = w2.charCount\n                val value = len\
    \ - chars - charsCount\n\n                if (curUnique == 0) {\n            \
    \        curUnique = chars\n                    curChar = charsCount\n       \
    \             curValue = value\n                }\n                if (curUnique\
    \ < chars) {\n                    curUnique = chars;\n                    curChar\
    \ = charsCount;\n                    curValue = value;\n                }\n  \
    \              if (curUnique == chars && (len - charsCount > maxChar)) {\n   \
    \                 maxUnique = curUnique;\n                    maxChar = chars;\n\
    \                    maxCharIndex = j;\n                    maxCharValue = value;\n\
    \                }\n            }\n        }\n        words(maxCharIndex)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwfjiywjp.scala:28:20 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    continue;\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ continue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwfjiywjp.scala:35:20\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m                    continue;\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \              Not found: continue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpwfjiywjp.scala:38:31 ------------------------\e[0m\e[0m\n\e[31m38 |\e\
    [0m                \e[33mval\e[0m \e[36mchars\e[0m = w1.charCount\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                       value charCount is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwfjiywjp.scala:39:36 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                \e[33mval\e[0m \e[36mcharsCount\e[0m\
    \ = w2.charCount\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value charCount is not a member\
    \ of String\n4 errors found\n"
  stdout: ''
  timestamp: 1660009689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val max = words.foldLeft(0){\n            case (max, word)\
    \ => if (word.length() > max) word.length else max\n        }\n\n        val charSet\
    \ = new mutable.HashSet[String]()\n        words.foreach(word => charSet += word)\n\
    \n        if(charSet.size == max)\n            charSet.min\n        else if (charSet.size\
    \ == 1)\n            charSet.head\n        else\n            \"\"\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpraghyrmi.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcharSet\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val map = scala.collection.mutable.Map[String, Int]()\n\
    \        words.foreach( word => {\n            val count = map.get(word) match\
    \ {\n                case Some(c) => c + 1;\n                case None => {\n\
    \                    map.put(word, 1); word\n                }\n            }\n\
    \        })\n        map.maxBy(_._2)._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3dx5ro8u.scala:28)\n\tat Problem.main(tmp3dx5ro8u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueCountMap = mutable.Map[Char, Int]()\n      \
    \  val sortedWords = words.toList.sortWith((word1, word2) => word1.length < word2.length)\n\
    \        val uniqueWord = sortedWords.foldLeft((\"\", List[String]()))((uniqueWord,\
    \ word) => {\n            val uniqueChar = word.uniqueChar\n            if (uniqueCountMap.contains(uniqueChar))\
    \ {\n                (uniqueWord._1 + uniqueChar, uniqueWord._2 :+ word)\n   \
    \         } else {\n                (uniqueWord._1 + uniqueChar, uniqueWord)\n\
    \            }\n        })._2\n        uniqueWord.head //uniqueWord._2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc6ohgsc9.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueCountMap\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc6ohgsc9.scala:18:34\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m\
    \ \e[36muniqueChar\e[0m = word.uniqueChar\n\e[31m\e[31m   |\e[0m             \
    \                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \      value uniqueChar is not a member of String\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpc6ohgsc9.scala:22:45 --------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m                (uniqueWord._1 + uniqueChar, uniqueWord)\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (uniqueWord : (String, List[String]))\n\
    \e[31m   |\e[0m                         Required: List[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxCount: Int = 0\n        var maxWord: String = null\n\
    \        words.foreach(str => {\n            if (maxCount < str.unique.length)\
    \ {\n                maxCount = str.unique.length\n                maxWord = str\n\
    \            }\n        })\n        return maxWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvqnf1lx9.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (maxCount < str.unique.length)\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           value unique is not a member of String\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpvqnf1lx9.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                maxCount = str.unique.length\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                      value unique is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxCountMap : mutable.Map[Char, Int] = mutable.Map.empty\n\
    \        var maxCount : Int = Integer.MIN_VALUE\n        var maxWord = \"\"\n\
    \        var nextMaxWord = \"\"\n        for(word <- words){\n            val\
    \ charCount = word.map(c => (c, 1)).reduceByKey((a, b) => a + b)\n           \
    \ if(charCount > maxCount){\n                maxWord = word\n                maxCount\
    \ = charCount\n            }\n            else if(charCount == maxCount){\n  \
    \              nextMaxWord = word\n            }\n        }\n        if(maxCount\
    \ > maxCountMap.values.max)\n            maxWord\n        else\n            nextMaxWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsmzb61t_.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxCountMap\e[0m : mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m] = mutable.Map.empty\n\e[31m\e[31m   |\e[0m    \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsmzb61t_.scala:15:51\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxCountMap\e[0m : mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m] = mutable.Map.empty\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsmzb61t_.scala:20:50\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcharCount\e[0m = word.map(\e[36mc\e[0m => (c, \e[31m1\e[0m)).reduceByKey((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a + b)\n\e[31m\e[31m   |\e[0m                   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ reduceByKey is not a member of IndexedSeq[(Char, Int)]\n3 errors found\n"
  stdout: ''
  timestamp: 1660009689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      val set = scala.collection.mutable.Set[String]()\n     \
    \ words.foreach(x => set.add(x))\n      set.size match {\n        case 1 => \"\
    abc\".find(x => set.contains(x))\n        case 2 => \"abbc\".find(x => set.contains(x))\n\
    \        case 3 => \"abbbc\".find(x => set.contains(x))\n        case 4 => \"\
    abbbbc\".find(x => set.contains(x))\n        case 5 => \"abbbbcc\".find(x => set.contains(x))\n\
    \        case 6 => \"abbbbccc\".find(x => set.contains(x))\n        case 7 =>\
    \ \"abbbbcccc\".find(x => set.contains(x))\n        case 8 => \"abbbbccccc\".find(x\
    \ => set.contains(x))\n        case 9 => \"abbbbcccccc\".find(x => set.contains(x))\n\
    \        case 10 => \"abbbbccccccc\".find(x => set.contains(x))\n        case\
    \ 11 => \"abbbbcccccccc\".find(x => set.contains(x))\n        case 12 => \"abbbbccccccccc\"\
    .find(x => set.contains(x))\n        case 13 => \"abbbbcccccccccc\".find(x =>\
    \ set.contains(x))\n        case 14 => \"abbbbccccccccccc\".find(x => set.contains(x))\n\
    \        case 15 => \"abbbbccccccccccc\".find(x => set.contains(x))\n        case\
    \ 16 => \"abbbbccccccccccc\".find(x => set.contains(x))\n        case 17 => \"\
    abbbbccccccccccc\".find(x => set.contains(x))\n        case 18 => \"abbbbcccccccccccc\"\
    .find(x => set.contains(x))\n        case 19 => \"abbbbccccccccccccc\".find(x\
    \ => set.contains(x))\n        case 20 => \"abbbbccccccccccccc\".find(x => set.contains(x))\n\
    \        case 21 => \"abbbbccccccccccccc\".find(x => set.contains(x))\n      \
    \  case 22 => \"abbbbccccccccccccc\".find(x => set.contains(x))\n        case\
    \ 23 => \"abbbbccccccccccccc\".find(x => set.contains(x))\n        case 24 =>\
    \ \"abbbbccccccccccccc\".find(x => set.contains(x))\n        case 25 => \"abbbbccccccccccccc\"\
    .find(x => set.contains(x))\n        case 26 => \"abbbbccccccccccccc\".find(x\
    \ => set.contains(x))\n        case 27 => \"abbbbccccccccccccc\".find(x => set.contains(x))\n\
    \        case 28 => \"abbbb\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_7gpf7_4.scala:45:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mcase\e[0m \e[31m28\e[0m => \"abbbb\n\e\
    [31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                \
    \   unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmp_7gpf7_4.scala:47:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m47 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp_7gpf7_4.scala:61:0 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_7gpf7_4.scala:18:47\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mcase\e[0m \e[31m1\e\
    [0m => \e[31m\"abc\"\e[0m.find(x => set.contains(x))\n\e[31m\e[31m   |\e[0m  \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                       Found:    (x : Char)\n\e[31m   |\e[0m\
    \                                               Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_7gpf7_4.scala:19:48 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mcase\e[0m \e[31m2\e[0m => \e[31m\"abbc\"\
    \e[0m.find(x => set.contains(x))\n\e[31m\e[31m   |\e[0m                      \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \                     Found:    (x : Char)\n\e[31m   |\e[0m                  \
    \                              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_7gpf7_4.scala:20:49 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mcase\e[0m \e[31m3\e[0m => \e[31m\"abbbc\"\
    \e[0m.find(x => set.contains(x))\n\e[31m\e[31m   |\e[0m                      \
    \                          "
  stdout: ''
  timestamp: 1660009693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Write code here\n        val freqMap = mutable.HashMap[String,\
    \ Int]()\n        words.foreach(x => freqMap += x -> 1)\n        freqMap.foldLeft(List[(String,\
    \ Int)]()){(acc, e) => \n          if (acc.last == 0 || e._2 > acc.last._2) e\
    \ :: acc else acc ++ List(e)}\n            .sortBy(x => x._2)\n            .map(x\
    \ => x._1)\n            .head\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5wbegwbr.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfreqMap\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val charSet = mutable.HashMap[Char, Int]()\n        val\
    \ sortedWords = words.sortWith(_ < _)\n        val maxCount = sortedWords.foldLeft(Map[Char,\
    \ Int]()){ (map, word) =>\n            val charCountMap = (map + (word -> (map.getOrElse(word.charAt(0),\
    \ 0) + 1))).withDefaultValue(0)\n            charCountMap + (word.charAt(0) ->\
    \ (charCountMap.getOrElse(word.charAt(0), 0) + 1))\n        }\n        sortedWords.map{word\
    \ => (word, charSet(word.charAt(0)).getOrElse(0))}.\n            filter{case (word,\
    \ count) => count > maxCount.getOrElse(word.charAt(0))}\n            .head._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbdxjvge8.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcharSet\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbdxjvge8.scala:18:39 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mcharCountMap\e[0m =\
    \ (map + (word -> (map.getOrElse(word.charAt(\e[31m0\e[0m), \e[31m0\e[0m) + \e\
    [31m1\e[0m))).withDefaultValue(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    (\e[1m\e\
    [31mString\e[0m, Int)\n\e[31m   |\e[0m                                       Required:\
    \ (\e[1m\e[32mChar\e[0m, Int)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpbdxjvge8.scala:22:47 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            filter{\e[33mcase\e[0m (word, count) => count > maxCount.getOrElse(word.charAt(\e\
    [31m0\e[0m))}\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue > is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpbdxjvge8.scala:22:67 -----------------------------------------\e\
    [0m\e"
  stdout: ''
  timestamp: 1660009694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.length\n        val maxWord =\
    \ scala.math.max(words.map(_.length))\n        val maxChar = words.filter(_.length\
    \ == maxWord).map(_.length).max\n        val maxUniqueChars = words.map(_.toSet.size)\n\
    \        val firstWord = words.filter(_.length == maxChar).map(_.toLowerCase).min\n\
    \        val firstUniqueChars = words.map(_.toSet.head).min\n        val firstChar\
    \ = words.map(_.toSet.head).head\n\n        if (uniqueChars == maxUniqueChars)\
    \ {\n            firstWord\n        } else {\n            val firstWordInAlphabetOrder\
    \ = words.filter(_.length == firstChar).map(_.toLowerCase).min\n            firstWordInAlphabetOrder\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpgfno1wz9.scala:16:33 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = scala.math.max(words.map(_.length))\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (List[Int])\n\e[31m\e[31m-- Error: /tmp/tmpgfno1wz9.scala:23:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m (uniqueChars == maxUniqueChars)\
    \ {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m      Values of types Int and List[Int] cannot be compared with == or\
    \ !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660009695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Write your code here\n        val strMap: mutable.Map[String,Long]\
    \ = words.toList.groupBy(x => x).map(x => (x._1,x._2.length)).toMap\n        var\
    \ max = 0L\n        var str = \"\"\n        strMap.foreach {\n        case (str,\
    \ count) => {\n            if(count > max){\n                max = count\n   \
    \             str = str\n            }\n        }\n        }\n        if(max >\
    \ 0)\n            str\n        else\n            \"\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9gy1gckg.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mstrMap\e[0m: mutable.Map[\e\
    [35mString\e[0m,\e[35mLong\e[0m] = words.toList.groupBy(\e[36mx\e[0m => x).map(\e\
    [36mx\e[0m => (x._1,x._2.length)).toMap\n\e[31m\e[31m   |\e[0m               \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordSet = mutable.HashSet[String]()\n        val maxCount\
    \ = 0\n        var maxWord = \"\"\n        var maxWordCount = 0\n        var index\
    \ = -1\n        for(word <- words){\n            val count = wordSet.getOrElse(word,\
    \ 0) + 1\n            if(count > maxCount) {\n                maxCount = count\n\
    \                maxWord = word\n                maxWordCount = count\n      \
    \      }\n            wordSet.put(word, count)\n        }\n        wordSet.get(maxWord)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpekt8538l.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordSet\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpekt8538l.scala:23:25 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                maxCount = count\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxWord = \"\"\n        var maxCount = 0\n       \
    \ words.foreach{ word =>\n            var count = 0\n            word.foreach{\
    \ c =>\n                if (c != maxWord(0)) {\n                    count = count\
    \ + 1\n                }\n            }\n            if (count > maxCount) {\n\
    \                maxCount = count\n                maxWord = word\n          \
    \  }\n        }\n        maxWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.findMax$$anonfun$1$$anonfun$1(tmp4m7zp1i1.scala:20)\n\
    \tat Problem$.findMax$$anonfun$1$$anonfun$adapted$1(tmp4m7zp1i1.scala:22)\n\t\
    at scala.collection.StringOps$.foreach$extension(StringOps.scala:1044)\n\tat Problem$.findMax$$anonfun$1(tmp4m7zp1i1.scala:22)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat Problem$.findMax(tmp4m7zp1i1.scala:27)\n\
    \tat Problem$.main(tmp4m7zp1i1.scala:32)\n\tat Problem.main(tmp4m7zp1i1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxCount = 0\n        var maxWord = null\n       \
    \ for (word <- words) {\n            var uniqueCharCount = 0\n            for\
    \ (c <- word) {\n                if (!uniqueChars.contains(c)) {\n           \
    \         uniqueCharCount += 1\n                    uniqueChars += c\n       \
    \         }\n            }\n            if (uniqueCharCount > maxCount) {\n  \
    \              maxCount = uniqueCharCount\n                maxWord = word\n  \
    \          }\n        }\n        return maxWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpidel7g0s.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m (!uniqueChars.contains(c))\
    \ {\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     Not found: uniqueChars\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpidel7g0s.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    uniqueChars += c\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \    Not found: uniqueChars\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpidel7g0s.scala:27:26 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                maxWord = word\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                          Found:    (word\
    \ : String)\n\e[31m   |\e[0m                          Required: Null\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxCount = 0\n        var maxWord = \"\"\n       \
    \ var maxChar = \"\"\n        for (word <- words) {\n            val uniqueChar\
    \ = word.distinct\n            val wordLen = word.length\n            val uniqueCharCount\
    \ = uniqueChar.length\n            if(uniqueCharCount > maxCount) {\n        \
    \        maxCount = uniqueCharCount\n                maxWord = word\n        \
    \        maxChar = uniqueChar\n            }\n            if(wordLen > maxCount)\
    \ {\n                maxCount = wordLen\n                maxWord = word\n    \
    \            maxChar = uniqueChar\n            }\n        }\n        return maxWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8cj3ckkb.scala:37)\n\tat Problem.main(tmp8cj3ckkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        //val wordsSorted = words.toSeq.sortWith((a,b) => a.compareTo(b)\
    \ < 0)\n        val wordsSorted = words.toSeq.sortWith((a,b) => a.compareTo(b)\
    \ > 0)\n        wordsSorted.headOption.map { s => s.count(c => c.toChar == 'a')\
    \ } getOrElse \"NO\"\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9kuo0884.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        wordsSorted.headOption.map\
    \ { \e[36ms\e[0m => s.count(\e[36mc\e[0m => c.toChar == \e[31m'a'\e[0m) } getOrElse\
    \ \e[31m\"NO\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Matchable\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordCountMap = mutable.HashMap[(String, Int), Int]()\n\
    \        for (str <- words) {\n            val s = str.split(\" \")\n        \
    \    for (word <- s) {\n                if (wordCountMap.get((word, s.length))\
    \ < s.length) wordCountMap += ((word, s.length))\n            }\n        }\n \
    \       val maxKey = wordCountMap\n            .filter(_._2 > 0)\n           \
    \ .sortWith(_._2 > _._2).head\n        val maxValue: Int = wordCountMap.getOrElse(maxKey,\
    \ 0)\n        var max = List[String]()\n        for (key <- wordCountMap.keySet)\
    \ {\n            val count = wordCountMap.getOrElse(key, 0)\n            if (count\
    \ > maxValue) maxValue = count\n            max = key :: max\n        }\n    \
    \    max(0)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt9pftyqt.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordCountMap\e[0m = mutable.HashMap[(\e\
    [35mString\e[0m, \e[35mInt\e[0m), \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordSet = words.toSet.asInstanceOf[Set[String]]\n\
    \        val maxCount = words.map(x => wordSet.count(x)).max.toInt\n        val\
    \ maxIndex = words.zipWithIndex.\n          filter(_._2 == maxCount).\n      \
    \    map(_._1).\n          toList.\n          sortWith(_ < _).\n          head\n\
    \        words(maxIndex)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptykyr5pg.scala:16:52\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e\
    [0m = words.map(\e[36mx\e[0m => wordSet.count(x)).max.toInt\n\e[31m\e[31m   |\e\
    [0m                                                    ^\e[0m\n\e[31m   |\e[0m\
    \                                             Found:    (x : String)\n\e[31m \
    \  |\e[0m                                             Required: String => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptykyr5pg.scala:23:14\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        words(maxIndex)\n\e[31m\e\
    [31m   |\e[0m              ^^^^^^^^\e[0m\n\e[31m   |\e[0m              Found:\
    \    (maxIndex : String)\n\e[31m   |\e[0m              Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // your code here\n        val maxNumCharactersMap = words.map(x\
    \ => (x, 1)).toMap\n        val maxNumCharacters = maxNumCharactersMap.values.max\n\
    \        val maxNumCharactersMap = maxNumCharactersMap.filter(_._2 > 1).map(_._1)\n\
    \        maxNumCharactersMap.headOption.getOrElse(words.head)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj_ywyb1l.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxNumCharactersMap\e[0m\
    \ = maxNumCharactersMap.filter(_._2 > \e[31m1\e[0m).map(_._1)\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumCharactersMap is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxNumCharactersMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpj_ywyb1l.scala:19:48 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        maxNumCharactersMap.headOption.getOrElse(words.head)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Object\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map((_, 1)).toMap\n        var maxKey\
    \ = counts.keys.head\n        var maxValue = counts.values.head\n\n        for\
    \ (key <- counts.keys.tail) {\n            if (counts.get(key) < counts.get(maxKey))\n\
    \                maxKey = key\n            else if (counts.get(key) > counts.get(maxKey))\n\
    \                maxValue = counts.get(key)\n        }\n\n        if (maxKey ==\
    \ counts.keys.head)\n            maxValue\n        else maxKey\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxt189kaq.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (counts.get(key) < counts.get(maxKey))\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ < is not a member of Option[Int], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxt189kaq.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (counts.get(key)\
    \ > counts.get(maxKey))\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue > is not a member of Option[Int], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxt189kaq.scala:23:37\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                maxValue = counts.get(key)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Found:    Option[Int]\n\e[31m   |\e[0m   \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpxt189kaq.scala:27:12 --------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            maxValue\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (maxValue : Int)\n\e[31m   |\e[0m  \
    \          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009701
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(w => w.toSet.size).reduce((a, b)\
    \ => if (b > a) a else b)\n        var max: Int = -1\n        var maxStr = \"\"\
    \n        words.foreach { w =>\n            if (w.toSet.size > max) {\n      \
    \          max = w.toSet.size\n                maxStr = w\n            }\n   \
    \     }\n        return maxStr\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw76l4clh.scala:28)\n\tat Problem.main(tmpw76l4clh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wl = words.map(_.distinct)\n        val xl = wl.map(x\
    \ => x.size -> x)\n        val max = xl.maxBy(_._1)._1\n        xl.find(_._1 ==\
    \ max).map(x => x._2).head\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4bxe6c4q.scala:22)\n\tat Problem.main(tmp4bxe6c4q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var result = \"\"\n        val mutableSet = scala.collection.mutable.Set[String]()\n\
    \        for (word <- words) {\n            mutableSet+=word\n        }\n    \
    \    var maxSize = 0\n        var max = \"\"\n        for (word <- words) {\n\
    \            val size = word.length\n            if (size >= maxSize) {\n    \
    \            max = word\n                maxSize = size\n            }\n     \
    \   }\n        if (!mutableSet.contains(max)) {\n            max = \"aa\"\n  \
    \          maxSize = 2\n        }\n        result+=max\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptypsrhcf.scala:38)\n\tat Problem.main(tmptypsrhcf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = 0\n        var cur = \"\"\n        val res =\
    \ words.foldLeft((cur,max)) {\n            (cur,max)=> {\n                val\
    \ current = cur._2.toList.distinct\n                if(current.length>max) {\n\
    \                    (cur, max)\n                } else {\n                  \
    \  current\n                }\n            }\n        }\n        res\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo38nldvz.scala:19:37 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mcurrent\e[0m = cur._2.toList.distinct\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value toList is not a member of Int - did you mean _2.toInt?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo38nldvz.scala:21:21 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    (cur, max)\n\e[31m\e[31m   |\e[0m\
    \                     ^^^\e[0m\n\e[31m   |\e[0m                     Found:   \
    \ (cur : (String, Int))\n\e[31m   |\e[0m                     Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo38nldvz.scala:21:26\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    (cur, max)\n\
    \e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\e[31m   |\e[0m     \
    \                     Found:    (max : String)\n\e[31m   |\e[0m              \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpo38nldvz.scala:27:8 ---------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        res\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    (res : (String, Int))\n\e[31m   |\e[0m        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Write your code here\n        val unique = words.map(x\
    \ => (x, words.count(x => x == x)))).toMap\n        var max = \"zzzzzzz\"\n  \
    \      unique.foreach {\n            x =>\n                if (max < x._2) max\
    \ = x._1\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt51f37j_.scala:16:66 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36munique\e[0m = words.map(\e\
    [36mx\e[0m => (x, words.count(\e[36mx\e[0m => x == x)))).toMap\n\e[31m\e[31m \
    \  |\e[0m                                                                  ^\e\
    [0m\n\e[31m   |\e[0m                                             '}' expected,\
    \ but ')' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt51f37j_.scala:37:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m37 |\e[0m}\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0meof expected, but '}' found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpt51f37j_.scala:16:73 --------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m        \e[33mval\e[0m \e[36munique\e[0m = words.map(\e[36mx\e\
    [0m => (x, words.count(\e[36mx\e[0m => x == x)))).toMap\n\e[31m\e[31m   |\e[0m\
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Unit\n\e[31m   |\e[0m                                                   \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt51f37j_.scala:18:8\
    \ -------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        unique.foreach {\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: unique\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt51f37j_.scala:25:11\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m    assert(findMax((List[\e\
    [35mString\e[0m](\e[31m\"name\"\e[0m, \e[31m\"of\"\e[0m, \e[31m\"string\"\e[0m))).equals((\e\
    [31m\"string\"\e[0m)));\n\e[31m\e[31m   |\e[0m           ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m           Not found: findMax\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpt51f37j_.scala:26:11 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m    assert(findMax((List[\e[35mString\e[0m](\e[31m\"name\"\
    \e[0m, \e[31m\"enam\"\e["
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueSet = mutable.Set[String]()\n        words.foreach(\
    \ word => {\n            for( c <- word.chars ) {\n                if(!uniqueSet.contains(c))\
    \ {\n                    uniqueSet += c\n                }\n            }\n  \
    \      })\n        if(uniqueSet.size > 0) {\n            val maxElemSet = uniqueSet.toSeq.sortBy(\
    \ _.length)\n            val maxElem = maxElemSet(0)\n            val maxElemCount:\
    \ Int = maxElemSet.filter(_.length == maxElem.length).size\n            if(maxElemCount\
    \ > 1) {\n                return maxElem\n            } else {\n             \
    \   val firstElemSet = uniqueSet.toSeq.sortBy( _.length)\n                val\
    \ firstElem = firstElemSet(0)\n                val firstElemCount: Int = firstElemSet.filter(_.length\
    \ == firstElem.length).size\n                if(firstElemCount > 1) {\n      \
    \              return firstElem\n                } else {\n                  \
    \  return \"\"\n                }\n            }\n        } else {\n         \
    \   return \"\"\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphwc0is0_.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueSet\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphwc0is0_.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mfor\e[0m( c <- word.chars ) {\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue foreach\
    \ is not a member of java.util.stream.IntStream - did you mean IntStream.forEach?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.foldLeft(Set.empty[String]) { (s, word) => s ++\
    \ word.count() }\n            .maxBy(s => s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6m33tgdf.scala:15:72 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        words.foldLeft(Set.empty[\e[35mString\e[0m])\
    \ { (\e[36ms\e[0m, \e[36mword\e[0m) => s ++ word.count() }\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter p of \e[33mmethod\e[0m \e[35mcount\e\
    [0m in \e[33mclass\e[0m \e[35mStringOps\e[0m: (p: Char => Boolean): Int\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def count(str : String) : Int = {\n            val counts\
    \ = HashMap();\n            for(i <- 0 until str.length)\n                if(counts.getOrElse(str,\
    \ 0) + 1 > counts.getOrElse(str, i))\n                    counts.put(str.charAt(i),\
    \ counts.getOrElse(str, i) + 1)\n            counts.getOrElse(str, 1)\n      \
    \  }\n        val maxCount = words.map(count(_)).reduce(_ + _).max\n        words.sortBy(count(_))(maxCount\
    \ == count(_)).get\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0846du2n.scala:18:36\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m(counts.getOrElse(str,\
    \ \e[31m0\e[0m) + \e[31m1\e[0m > counts.getOrElse(str, i))\n\e[31m\e[31m   |\e\
    [0m                                    ^^^\e[0m\n\e[31m   |\e[0m             \
    \                       Found:    (str : String)\n\e[31m   |\e[0m            \
    \                        Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp0846du2n.scala:18:67 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                \e[33mif\e[0m(counts.getOrElse(str, \e[31m0\e\
    [0m) + \e[31m1\e[0m > counts.getOrElse(str, i))\n\e[31m\e[31m   |\e[0m       \
    \                                                            ^^^\e[0m\n\e[31m\
    \   |\e[0m                                                Found:    (str : String)\n\
    \e[31m   |\e[0m                                                Required: Nothing\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0846du2n.scala:19:41\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    counts.put(str.charAt(i),\
    \ counts.getOrElse(str, i) + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         Found:    Char\n\e[31m   |\e[0m                               Required:\
    \ Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0846du2n.scala:19:63\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    counts.put(str.charAt(i),\
    \ counts.getOrElse(str, i) + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                                                   ^^^\e[0m\n\e[31m   |\e[0m\
    \                                                Found:    (str : String)\n\e\
    [31m   |\e[0m                                                Required: Nothing\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available "
  stdout: ''
  timestamp: 1660009703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.groupBy(x => x).map(x => (x._2, x._1.size)).toMap\n\
    \        val maxKey = counts.maxKey\n        val maxVal = counts.maxValue\n  \
    \      if (maxVal == 1) {\n            words(maxKey.toInt)\n        } else {\n\
    \            words(maxKey.toInt)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdqyroz9h.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxKey\e[0m = counts.maxKey\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ maxKey is not a member of Map[List[String], Int] - did you mean counts.maxBy?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdqyroz9h.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxVal\e[0m = counts.maxValue\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ maxValue is not a member of Map[List[String], Int] - did you mean counts.mapValues?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val count = words.foldLeft(0)(_ + _.length)\n        val\
    \ unique = words.foldLeft(0)(_.distinct)\n        val max = (count.toInt, unique.toInt)\n\
    \        words(max match {\n            case (count, unique) if (count == unique)\
    \ => words\n            case _                               => words.sortWith(_\
    \ < _)\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpba0g2ili.scala:16:39 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36munique\e[0m = words.foldLeft(\e\
    [31m0\e[0m)(_.distinct)\n\e[31m\e[31m   |\e[0m                               \
    \        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong\
    \ number of parameters, expected: 2\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpba0g2ili.scala:19:57 --------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \            \e[33mcase\e[0m (count, unique) \e[33mif\e[0m (count == unique) =>\
    \ words\n\e[31m\e[31m   |\e[0m                                               \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \ Found:    (words : List[String])\n\e[31m   |\e[0m                          \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpba0g2ili.scala:20:66 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33mcase\e[0m _                               => words.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                                                \
    \    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                     Found:    List[String]\n\e[31m   |\e[0m                \
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.foldLeft(mutable.Map.empty[String,\
    \ Int]) (\n            (m, str) => m.updated(str, m.getOrElse(str, 0) + 1)\n \
    \       )\n        val maxVal = counts.maxBy(_._2)._2\n        counts.values.toList.maxBy(_.toString.length).last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ds9tvc2.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = words.foldLeft(mutable.Map.empty[\e\
    [35mString\e[0m, \e[35mInt\e[0m]) (\n\e[31m\e[31m   |\e[0m                   \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3ds9tvc2.scala:16:26 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            (\e[36mm\e[0m, \e[36mstr\e[0m) => m.updated(str, m.getOrElse(str,\
    \ \e[31m0\e[0m) + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value updated is not\
    \ a member of Any\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ds9tvc2.scala:16:41\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            (\e[36mm\e[0m,\
    \ \e[36mstr\e[0m) => m.updated(str, m.getOrElse(str, \e[31m0\e[0m) + \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value getOrElse is not a\
    \ member of Any\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ds9tvc2.scala:18:28\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxVal\e[0m = counts.maxBy(_._2)._2\n\e[31m\e[31m   |\e[0m               \
    \      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value maxBy is not\
    \ a member of Any\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ds9tvc2.scala:19:15\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        counts.values.toList.maxBy(_.toString.length).last\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ values is not a member of Any\n5 errors found\n"
  stdout: ''
  timestamp: 1660009706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordCount = mutable.Map[String, Int]()\n        for\
    \ (word <- words)\n            wordCount(word) = wordCount(word) + 1;\n      \
    \  val highestCount = wordCount.values.max;\n        val highestWord = wordCount.keys.max;\n\
    \        val highestChar = wordCount(highestWord).max;\n        if (highestCount\
    \ == 0) {\n            highestChar\n        } else {\n            val key = highestWord\
    \ +\n                    \" with \" + highestCount + \" unique characters and\
    \ \" +\n                    highestChar + \" characters in lexicographical order.\"\
    \n            val value = if (highestCount == highestChar) {\n               \
    \ highestWord\n            } else {\n                key\n            }\n    \
    \        key -> value\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpomyzq8_0.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordCount\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var charCount : Map[Char, Int] = Map()\n        for (word\
    \ <- words) {\n            charCount += word.foldLeft(Map[Char, Int]())((map,\
    \ character) => {\n                map.updated(character, map.getOrElse(character,\
    \ 0) + 1)\n                map\n            })\n        }\n        val max = charCount.keys.max\n\
    \        val charsWithMaxCount = charCount.filter(_._2 == max).map(_._1)\n   \
    \     charsWithMaxCount.toList.sorted.head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphl_gwava.scala:17:56\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            charCount += word.foldLeft(Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]())((\e[36mmap\e[0m, \e[36mcharacter\e[0m) => {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \               Found:    scala.collection.mutable.Map[Char, Int]\n\e[31m   |\e\
    [0m                       Required: (Char, Int)\n\e[31m18 |\e[0m             \
    \   map.updated(character, map.getOrElse(character, \e[31m0\e[0m) + \e[31m1\e\
    [0m)\n\e[31m19 |\e[0m                map\n\e[31m20 |\e[0m            })\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphl_gwava.scala:24:40 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        charsWithMaxCount.toList.sorted.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    Char\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val sortedWords = word.toList.sortWith(_ < _)\n      \
    \  var max = 0\n        var i = 0\n        var maxWord = \"\"\n        while (i\
    \ < sortedWords.size) {\n            if (sortedWords(i).length <= max) {\n   \
    \             max = sortedWords(i).length\n                maxWord = sortedWords(i)\n\
    \                i = i + 1\n            } else {\n                i = i + 1\n\
    \            }\n        }\n        maxWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpix9sw_73.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e[0m = word.toList.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e\
    [0m                          Not found: word\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordsWithUniqueChars = words.groupBy(word => word.length).maxBy(_._2).map(_._1)\n\
    \        val wordWithMaxNumberOfUniqueChars = wordsWithUniqueChars.head\n    \
    \    val wordWithFirstOccur = words.find(word => wordWithMaxNumberOfUniqueChars.count(_\
    \ == word.length) == words.count(_ == word))\n        wordWithFirstOccur match\
    \ {\n            case Some(word) => word\n            case None => words.head\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpu89yfxt3.scala:15:81 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordsWithUniqueChars\e[0m\
    \ = words.groupBy(\e[36mword\e[0m => word.length).maxBy(_._2).map(_._1)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                 ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for List[String]..\n\
    \e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.ordered[\e\
    [35mList[String]\e[0m](\n\e[31m   |\e[0m      /* missing */summon[scala.math.Ordering.AsComparable[List[String]]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type scala.math.Ordering.AsComparable[List[String]].\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.Ordering.Implicits.seqOrdering\n\e[31m\
    \   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max : Option[String] = None\n        var count = 0\n\
    \        for (str <- words) {\n            count += str.length\n            if\
    \ (max != None) if (count > max.get + 1) max = Some(str) else if (count == max.get\
    \ + 1) max = Some(str)\n        }\n        if (!max.isEmpty) max.get else words.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpsr4atte9.scala:19:39 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (max != None) \e[33mif\e[0m\
    \ (count > max.get + \e[31m1\e[0m) max = Some(str) \e[33melse\e[0m \e[33mif\e\
    [0m (count == max.get + \e[31m1\e[0m) max = Some(str)\n\e[31m\e[31m   |\e[0m \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m None of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m>\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m with types\n\e[31m   |\e[0m  (x: Double): Boolean\n\e[31m   |\e[0m  (x: Float):\
    \ Boolean\n\e[31m   |\e[0m  (x: Long): Boolean\n\e[31m   |\e[0m  (x: Int): Boolean\n\
    \e[31m   |\e[0m  (x: Char): Boolean\n\e[31m   |\e[0m  (x: Short): Boolean\n\e\
    [31m   |\e[0m  (x: Byte): Boolean\n\e[31m   |\e[0m match arguments (String)\n\e\
    [31m\e[31m-- Error: /tmp/tmpsr4atte9.scala:19:79 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (max != None) \e[33mif\e[0m\
    \ (count > max.get + \e[31m1\e[0m) max = Some(str) \e[33melse\e[0m \e[33mif\e\
    [0m (count == max.get + \e[31m1\e[0m) max = Some(str)\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \  ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types Int and\
    \ String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toUpperCase()).groupBy(identity).mapValues(_.size)\n\
    \        chars.maxBy(_._1)._1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9vrtossi.scala:19)\n\tat Problem.main(tmp9vrtossi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      val uniqueChars = mutable.Set[Char]()\n      var maxChar\
    \ = 0\n      var maxWord = \"\"\n      words.foreach{ word =>\n        val characterCount\
    \ = word.count(x => uniqueChars.contains(x))\n        val charCount  = word.count(x\
    \ => uniqueChars.contains(x) && uniqueChars.contains(x))\n        uniqueChars\
    \ += word.charAt(0)\n        if(characterCount > maxChar){\n          maxChar\
    \ = characterCount\n          maxWord = word\n        }\n      }\n      return\
    \ maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv_okyabf.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Use a Set to track the words with maximum number of\
    \ unique characters.\n        // Use a map to track the words with maximum number\
    \ of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track the words with maximum\
    \ number of unique characters.\n        // Use a map to track\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo_dnj40i.scala:14:49\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mfindMax\e\
    [0m(\e[36mwords\e[0m : \e[35mList\e[0m[\e[35mString\e[0m]) : \e[35mString\e[0m\
    \ = {\n\e[31m\e[31m   |\e[0m                                                 ^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  Unit\n\e[31m   |\e[0m                                                 Required:\
    \ String\n\e[31m15 |\e[0m        \e[34m// Use a Set to track the words with maximum\
    \ number of unique characters.\e[0m\n\e[31m16 |\e[0m        \e[34m// Use a map\
    \ to track the words with maximum number of unique characters.\e[0m\n\e[31m17\
    \ |\e[0m        \e[34m// Use a map to track the words with maximum number of unique\
    \ characters.\e[0m\n\e[31m18 |\e[0m        \e[34m// Use a map to track the words\
    \ with maximum number of unique characters.\e[0m\n\e[31m19 |\e[0m        \e[34m//\
    \ Use a map to track the words with maximum number of unique characters.\e[0m\n\
    \e[31m20 |\e[0m        \e[34m// Use a map to track the words with maximum number\
    \ of unique characters.\e[0m\n\e[31m21 |\e[0m        \e[34m// Use a map to track\
    \ the words with maximum number of unique characters.\e[0m\n\e[31m22 |\e[0m  \
    \      \e[34m// Use a map to track the words with maximum number of unique characters.\e\
    [0m\n\e[31m23 |\e[0m        \e[34m// Use a map to track the words with maximum\
    \ number of unique characters.\e[0m\n\e[31m24 |\e[0m        \e[34m// Use a map\
    \ to track the words with maximum number of unique characters.\e[0m\n\e[31m25\
    \ |\e[0m        \e[34m// Use a map to track the words with maximum number of unique\
    \ characters.\e[0m\n\e[31m26 |\e[0m        \e[34m// Use a map to track the words\
    \ with maximum number of unique characters.\e[0m\n\e[31m27 |\e[0m        \e[34m//\
    \ Use a map to track the words with maximum number of unique characters.\e[0m\n\
    \e[31m28 |\e[0m        \e[34m// Use a map to track the words with maximum number\
    \ of unique characters.\e[0m\n\e[31m29 |\e[0m        \e[34m// Use a map to track\
    \ the words with maximum number of unique characters.\e[0m\n\e[31m30 |\e[0m  \
    \      \e[34m// Use a map to "
  stdout: ''
  timestamp: 1660009709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordsCount = words.map(_.length).reduce((x, y) =>\
    \ x + y)\n        val maxUnique = words.map(x => x.toSet.size).reduce((x, y) =>\
    \ x max y)\n        val maxChar = words.map(x => x.toSet.size).reduce((x, y) =>\
    \ x min y)\n        val result = words.filter(x => x.toSet.size == maxUnique &&\
    \ x.toSet.size == maxChar).toList\n        result.map(x => x(0))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqz1etif_.scala:19:18\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        result.map(\e[36mx\e\
    [0m => x(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[Char]\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueSet = new mutable.LinkedHashSet[String]()\n\
    \        var max = \"\"\n        words.foreach{ word =>\n            val len =\
    \ word.length\n            var count = 0\n            for(x <- uniqueSet) {\n\
    \                count += x.length\n                if( x.startsWith(word) &&\
    \ x.endsWith(word) ) {\n                    uniqueSet.remove(word)\n         \
    \           break\n                }\n            }\n            if( count > len\
    \ ) {\n                uniqueSet += word\n                max = word\n       \
    \     }\n        }\n        return max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd27suxic.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueSet\e[0m = \e[33mnew\e\
    [0m mutable.LinkedHashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxWords = new mutable.HashMap[Int, String]()\n  \
    \      val maxLen = new mutable.HashMap[Int, Int]()\n        words.foreach(word\
    \ => {\n            if (maxLen(word.get.length) < (maxLen(word.length) +1)) {\n\
    \                maxLen(word.length) = maxLen(word.get.length) + 1\n         \
    \       maxWords(word.length) = word\n            }\n        })\n        val sortedList\
    \ = maxWords.toList.sortWith(x => x._2.length < x._1.length)\n        val result\
    \ = sortedList(0).get\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5telmoza.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxWords\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5telmoza.scala:16:25 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxLen\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        if (words.isEmpty) {\n            return \"\"\n      \
    \  }\n        var max = 0\n        var maxWord = \"\"\n        var maxWordLength\
    \ = 0\n        var wordLength = words.head.length\n        var sortedWord = words.sorted\n\
    \        for (x<-0 to words.length-1) {\n            var uniqueCount = 0\n   \
    \         var currentWord = words(x)\n            var indexOfCurrentWord = sortedWord.indexOf(0)\n\
    \            for (i<-0 to indexOfCurrentWord-1) {\n                if (currentWord.substring(i,\
    \ i+wordLength) == sortedWord(i).substring(i, i+wordLength)) {\n             \
    \       uniqueCount++\n                }\n            }\n            if (uniqueCount\
    \ > max) {\n                max = uniqueCount\n                maxWord = currentWord\n\
    \                maxWordLength = wordLength\n            }\n        }\n      \
    \  if (max > words.length-1) {\n            return findMax(words.tail)\n     \
    \   } else {\n            return maxWord\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi9ynftth.scala:29:33 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    uniqueCount++\n\e[31m\e[31m   |\e\
    [0m                                 ^\e[0m\n\e[31m   |\e[0m                  \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toList).reduce(_ ++ _)\n     \
    \   val count = chars.groupBy(_).map(x => (x._1, x._2.length))\n        val max\
    \ = count.max._2\n        var word = \"\"\n        for (word <- chars if count.exists(x\
    \ => x == max)) {\n            if (count > max) {\n                break\n   \
    \         }\n        }\n        word\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpkhpafbrs.scala:16:34 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = chars.groupBy(_).map(\e\
    [36mx\e[0m => (x._1, x._2.length))\n\e[31m\e[31m   |\e[0m                    \
    \              ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$4 of expanded\
    \ function:\n\e[31m   |\e[0m   _$4 => chars.groupBy(_$4).map(x => (x._1, x._2.length)).\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkhpafbrs.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val map = mutable.Map[Int, String]()\n        words.map(word\
    \ => {\n            val count = map.getOrElseUpdate(0, \"\")\n            count\
    \ += word.distinct\n            map.update(0, count)\n        })\n        map\
    \ max map getOrElse \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9nmm0k81.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        //Your code here\n        val maxCountMap = new HashMap[Int,\
    \ String]()\n        for(word <- words){\n            val count = maxCountMap.get(word.length)\n\
    \            if(count == null){\n                maxCountMap.put(word.length,\
    \ word)\n            }else{\n                if(count > maxCountMap.get(word.length)){\n\
    \                    maxCountMap.put(word.length, word)\n                }\n \
    \           }\n        }\n        val max = maxCountMap.keys.toList.max\n    \
    \    if(maxCountMap.values.toList.size < max){\n            return maxCountMap.values.toList.head\n\
    \        }\n        else{\n            return maxCountMap.values.toList.sortBy(_).head\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1etk2gyd.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e[0m(count > maxCountMap.get(word.length)){\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue > is\
    \ not a member of Option[String], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp1etk2gyd.scala:32:52 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mreturn\e[0m maxCountMap.values.toList.sortBy(_).head\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$1 of expanded function:\n\e[31m\
    \   |\e[0m   _$1 => maxCountMap.values.toList.sortBy(_$1).head.\n\e[31m\e[31m--\
    \ Error: /tmp/tmp1etk2gyd.scala:32:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mreturn\e[0m maxCountMap.values.toList.sortBy(_).head\n\
    \e[31m\e[31m   |\e[0m                                                      ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var highestValue = 0\n        var highestWord = \"\"\n\
    \n        for (word <- words) {\n            var uniqueCharactersCount = 0\n \
    \           for (char <- word) {\n                uniqueCharactersCount += word.count(_\
    \ == char)\n            }\n            if (uniqueCharactersCount > highestValue)\
    \ {\n                highestValue = uniqueCharactersCount\n                highestWord\
    \ = word\n            }\n        }\n\n        highestWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmao3qma2.scala:33)\n\tat Problem.main(tmpmao3qma2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxCount : Int = 0\n        var maxWord : String =\
    \ \"\"\n        words.foreach { x =>\n            val count = getUniqueCount(x)\n\
    \            if (count > maxCount) {\n                maxCount = count\n     \
    \           maxWord = x\n            }\n        }\n        maxWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpduv6g4dn.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = getUniqueCount(x)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: getUniqueCount\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        if (words.length < 1) {\n            \"\"\n        } else\
    \ {\n            val wordsCount = words.foldLeft(Map[String, Int]()){\n      \
    \          case (map, (word, count)) => {\n                    val newCount =\
    \ map.getOrElse(word, 0) + 1\n                    if (newCount > count) {\n  \
    \                      (map + ((word -> newCount) -> count))\n               \
    \     } else {\n                        (map + ((word -> count) -> newCount))\n\
    \                    }\n                }\n            }\n            val maxCount\
    \ = wordsCount.max._2\n            val maxKey = wordsCount.maxKey\n          \
    \  wordsCount.keys.find(_.toString.length == maxKey.toString.length).flatMap {\n\
    \                case key if key.toString.length == maxKey.toString.length =>\
    \ wordsCount.getOrElse(key, 0)\n            }.getOrElse(\"\")\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjub6dpkj.scala:20:49\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                    \e[33mval\e\
    [0m \e[36mnewCount\e[0m = map.getOrElse(word, \e[31m0\e[0m) + \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                 ^^^^\e[0m\n\
    \e[31m   |\e[0m                                                 Found:    (word\
    \ : Any)\n\e[31m   |\e[0m                                                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpjub6dpkj.scala:21:33\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                   \
    \ \e[33mif\e[0m (newCount > count) {\n\e[31m\e[31m   |\e[0m                  \
    \      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35m>\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\
    \e[31m   |\e[0m  (x: Double): Boolean\n\e[31m   |\e[0m  (x: Float): Boolean\n\e\
    [31m   |\e[0m  (x: Long): Boolean\n\e[31m   |\e[0m  (x: Int): Boolean\n\e[31m\
    \   |\e[0m  (x: Char): Boolean\n\e[31m   |\e[0m  (x: Short): Boolean\n\e[31m \
    \  |\e[0m  (x: Byte): Boolean\n\e[31m   |\e[0m match arguments ((count : Any))\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjub6dpkj.scala:22:32 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                        (map + ((word -> newCount) ->\
    \ count))\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    ((Any, Int), Any)\n\
    \e[31m   |\e[0m                                Required: (String, Int)\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjub6dpkj.scala:24:32 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                        (map + ((word -> count) -> newCount))\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    ((Any, Any), Int)\n\
    \e[31m   |\e[0m                                Required: (String, "
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Write code here\n        val maxLength = words.length\n\
    \        val charMap = scala.collection.mutable.HashMap[Char, Int]()\n       \
    \ words.foreach { word =>\n            word.chars.distinct.foreach { c =>\n  \
    \              if (charMap.getOrElse(c, 0) == 0) {\n                    charMap\
    \ += ((c) -> (charMap.getOrElse(c, 0) + 1))\n                } else {\n      \
    \              if (charMap.getOrElse(c, 0) > charMap.getOrElse(c, 1))\n      \
    \                  charMap += ((c) -> (charMap.getOrElse(c, 1) + 1))\n       \
    \         }\n            }\n        }\n        charMap.maxBy(_._2)._1.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6wfp4ibo.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            word.chars.distinct.foreach { \e[36mc\e[0m\
    \ =>\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue foreach is not a member of java.util.stream.IntStream - did you\
    \ mean IntStream.forEach?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6wfp4ibo.scala:28:31\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        charMap.maxBy(_._2)._1.mkString\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m      value mkString is not a member of Char - did you mean _1.toString?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxKeys = words.map(_.length).max\n        var maxValue\
    \ = words.filter(_.length == maxKeys)(0)\n        var maxIndex = 0\n        val\
    \ list = new collection.mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            if (word.length > maxKeys) {\n                list.add(word)\n\
    \            } else if (word.length == maxKeys) {\n                var count =\
    \ 0\n                for (c <- word) {\n                    if (c.toInt < maxValue.toInt)\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n                if (count > maxValue.toInt) {\n                    maxValue\
    \ = count\n                    maxIndex = list.indexOfLast(word)\n           \
    \     }\n            }\n        }\n        list.take(maxIndex).reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppzhu3g1o.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                list.add(word)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue add is not a member of scala.collection.mutable.ListBuffer[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzhu3g1o.scala:30:31 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    maxValue = count\n\e[31m\e[31m  \
    \ |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                    Found:    (count : Int)\n\e[31m   |\e[0m                \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmppzhu3g1o.scala:31:36 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m                    maxIndex = list.indexOfLast(word)\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue indexOfLast\
    \ is not a member of scala.collection.mutable.ListBuffer[String]\n3 errors found\n"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      words.foldLeft((\"\", \"\", 0))((max, str) => {\n      \
    \  (max, str.distinct().length, str)\n      })._2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsnqf03to.scala:16:9\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        (max, str.distinct().length,\
    \ str)\n\e[31m\e[31m   |\e[0m         ^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (max : (String, String, Int))\n\e[31m   |\e[0m         Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpsnqf03to.scala:16:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        (max, str.distinct().length, str)\n\e[31m\e[31m\
    \   |\e[0m              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for\
    \ parameter i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e[0m \e[35mStringOps\e\
    [0m: (i: Int): Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsnqf03to.scala:16:37\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        (max, str.distinct().length,\
    \ str)\n\e[31m\e[31m   |\e[0m                                     ^^^\e[0m\n\e\
    [31m   |\e[0m                                     Found:    (str : String)\n\e\
    [31m   |\e[0m                                     Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueLetters = words.foldLeft(new mutable.HashMap[Int,\
    \ String]()) ((a,b) => { \n            a.update(b, (if (a.getOrElse(b) != null)\
    \ a.get(b) + 1 else 1).toString)\n        })\n\n        val maxLetter = uniqueLetters.values.max\n\
    \n        uniqueLetters.maxBy(_._1)._1\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6sj9qwtq.scala:15:47 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueLetters\e[0m = words.foldLeft(\e\
    [33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mString\e[0m]()) ((\e[36ma\e\
    [0m,\e[36mb\e[0m) => { \n\e[31m\e[31m   |\e[0m                               \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp6sj9qwtq.scala:16:14 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            a.update(b, (\e[33mif\e[0m (a.getOrElse(b) != \e[31mnull\e[0m)\
    \ a.get(b) + \e[31m1\e[0m \e[33melse\e[0m \e[31m1\e[0m).toString)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value update is\
    \ not a member of Any\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6sj9qwtq.scala:16:31\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            a.update(b, (\e\
    [33mif\e[0m (a.getOrElse(b) != \e[31mnull\e[0m) a.get(b) + \e[31m1\e[0m \e[33melse\e\
    [0m \e[31m1\e[0m).toString)\n\e[31m\e[31m   |\e[0m                           \
    \  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             value getOrElse\
    \ is not a member of Any\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6sj9qwtq.scala:16:55\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            a.update(b, (\e\
    [33mif\e[0m (a.getOrElse(b) != \e[31mnull\e[0m) a.get(b) + \e[31m1\e[0m \e[33melse\e\
    [0m \e[31m1\e[0m).toString)\n\e[31m\e[31m   |\e[0m                           \
    \                          ^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                 value get is not a member of Any\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp6sj9qwtq.scala:19:38 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxLetter\e[0m = uniqueLetters.values.max\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        value values is not a member of Any\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp6sj9qwtq.scala:21:22 --------------"
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordsCount = words.map(word => (word, 1)).toMap\n\
    \        val maxWord = wordsCount.max._1._1\n        val maxCount = wordsCount.max\
    \ max 1\n        wordsCount.filter(_._2 == maxCount).map { case (word, count)\
    \ =>\n            val index = words.indexOf(word)\n            val otherWords\
    \ = words.filter(_ != word)\n            otherWords.drop(index + 1)\n        }.sortBy(_.length).head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpehv76uh0.scala:16:40 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = wordsCount.max._1._1\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      value _1 is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpehv76uh0.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = wordsCount.max\
    \ max \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue max is not a member of (String, Int), but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following\
    \ import might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpehv76uh0.scala:22:10\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        wordsCount.filter(_._2\
    \ == maxCount).map { \e[33mcase\e[0m (word, count) =>\n\e[31m19 |\e[0m       \
    \     \e[33mval\e[0m \e[36mindex\e[0m = words.indexOf(word)\n\e[31m20 |\e[0m \
    \           \e[33mval\e[0m \e[36motherWords\e[0m = words.filter(_ != word)\n\e\
    [31m21 |\e[0m            otherWords.drop(index + \e[31m1\e[0m)\n\e[31m22 |\e[0m\
    \        }.sortBy(_.length).head\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0mvalue sortBy is not a member of scala.collection.immutable.Iterable[List[String]]\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniques = words.foldLeft(Set[String]())(\n       \
    \     (uniques, word) => uniques.union(word.split(\"\").distinct))\n        var\
    \ maxCount = 0\n        var maxWord = \"\"\n        words.foreach(word => {\n\
    \            val currentCount = uniques.count(word => word == word)\n        \
    \    if (currentCount > maxCount) {\n                maxCount = currentCount\n\
    \                maxWord = word\n            }\n        })\n        return maxWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcw5fm8c5.scala:16:60\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            (\e[36muniques\e\
    [0m, \e[36mword\e[0m) => uniques.union(word.split(\e[31m\"\"\e[0m).distinct))\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    Array[String]\n\
    \e[31m   |\e[0m                                  Required: scala.collection.Set[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // write your code here\n        var max = 0\n       \
    \ var maxWrd = ''\n        var maxUniqueChars = 0\n        var maxStrWrd = ''\n\
    \        for (word <- words) {\n            val counts = word.groupBy(_).mapValues(_.size)\n\
    \            if (counts.max().toInt == maxUniqueChars) maxStrWrd = maxUniqueChars\n\
    \            else maxUniqueChars = counts.max().toInt\n            if (counts.max().toInt\
    \ == max) maxWrd = maxUniqueChars\n            else max = counts.max().toInt\n\
    \        }\n        words.reverse.head.swapWith(maxStrWrd)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp77tjugep.scala:17:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mmaxWrd\e[0m = ''\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ empty character literal\n\e[31m\e[31m-- Error: /tmp/tmp77tjugep.scala:19:24\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mvar\e[0m \e[36mmaxStrWrd\e[0m = ''\n\e[31m\e[31m   |\e[0m            \
    \            ^\e[0m\n\e[31m   |\e[0m                        empty character literal\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp77tjugep.scala:27:27 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        words.reverse.head.swapWith(maxStrWrd)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ value swapWith is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(x => x -> 1).groupBy(x => x).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxString = counts.find(x => x._2\
    \ == maxCount)\n        val maxChar = maxString._1.map(x => x.toChar).mkString\n\
    \        val index = words.indexOf(maxString._1)\n        if (maxString._2 > 1)\
    \ words(index)\n        else maxChar\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpe675vl0_.scala:17:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxString\e[0m = counts.find(\e\
    [36mx\e[0m => x._2 == maxCount)\n\e[31m\e[31m   |\e[0m                       \
    \                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of types Int and\
    \ ((String, Int), Int) cannot be compared with == or !=\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpe675vl0_.scala:18:32 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxChar\e[0m = maxString._1.map(\e\
    [36mx\e[0m => x.toChar).mkString\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value _1 is not a member of Option[((String,\
    \ Int), Int)]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe675vl0_.scala:19:44\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mindex\e[0m = words.indexOf(maxString._1)\n\e[31m\e[31m   |\e[0m          \
    \                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ _1 is not a member of Option[((String, Int), Int)]\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpe675vl0_.scala:20:22 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mif\e[0m (maxString._2 > \e[31m1\e[0m) words(index)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value _2 is not a member of Option[((String, Int), Int)]\n4 errors found\n"
  stdout: ''
  timestamp: 1660009720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.map { x => (x, words.count(y => x == y)) }\n   \
    \         .sortBy(x => -x._2)\n            .headOption\n            .map(_._1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpodnxbeys.scala:18:16\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        words.map { \e[36mx\e\
    [0m => (x, words.count(\e[36my\e[0m => x == y)) }\n\e[31m16 |\e[0m           \
    \ .sortBy(\e[36mx\e[0m => -x._2)\n\e[31m17 |\e[0m            .headOption\n\e[31m18\
    \ |\e[0m            .map(_._1)\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m  \
    \ |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e[1m\e\
    [31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordSet = mutable.HashSet[String]()\n        words.sortWith(_\
    \ < _).foreach(word => {\n            wordSet.toSet.toSeq.foreach(c => {\n   \
    \             if (word.length == 1 && word.charAt(0) == c) {\n               \
    \     wordSet.toSet -= word\n                    wordSet.toSet += word\n     \
    \           }\n                if (word.length == 1 && word.charAt(0) > c) {\n\
    \                    wordSet.toSet -= word\n                    wordSet.toSet\
    \ += word\n                }\n            })\n        })\n        wordSet.map\
    \ { w => w }.max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwu18pkti.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordSet\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val freq = mutable.Map[String, Int]()\n        words.foreach(word\
    \ => {\n            freq += (word -> 1)\n        })\n        freq.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdo2qa8nv.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfreq\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // initialize to empty strings\n        var uniqueCharCount\
    \ : Int = 0\n        var maxStr = \"\"\n        var maxCount = 0\n        var\
    \ str = \"\"\n        var maxStr = \"\"\n        var maxCount = 0\n\n        //\
    \ traverse through all words\n        for(word <- words){\n            // find\
    \ number of unique characters\n            val nChar = word.length\n         \
    \   val newCharSet = new mutable.HashSet[Char]()\n            val tempCharSet\
    \ = new mutable.HashSet[Char]()\n            val duplicateCharSet = new mutable.HashSet[Char]()\n\
    \            for(i<-0 until (nChar-1)) {\n                val char = word.charAt(i)\n\
    \                val charInWord = word.indexOf(char,i)\n                if(charInWord\
    \ != i) {\n                    tempCharSet.add(char)\n                } else {\n\
    \                    newCharSet.add(char)\n                }\n               \
    \ duplicateCharSet.add(char)\n            }\n            val nUniqueChar = tempCharSet.size\
    \ + newCharSet.size - duplicateCharSet.size\n\n            // set max string\n\
    \            if(maxCount < nUniqueChar) {\n                maxStr = \"\"\n   \
    \             maxCount = 0\n            }\n            // set max string\n   \
    \         if(maxCount < nUniqueChar) {\n                maxStr = \"\"\n      \
    \          maxCount = 0\n            }\n            // set max string\n      \
    \      if(maxCount < nUniqueChar) {\n                maxStr = \"\"\n         \
    \       maxCount = 0\n            }\n            // update max string and count\
    \ for current word\n            if(!maxStr.isEmpty) {\n                if(maxCount\
    \ < nUniqueChar) {\n                    maxStr = \"\"\n                    maxCount\
    \ = 0\n                }\n            }\n            if(!maxStr.isEmpty) {\n \
    \               if(maxCount < nUniqueChar) {\n                    maxStr = \"\"\
    \n                    maxCount = 0\n                }\n            }\n       \
    \     if(!maxStr.isEmpty) {\n                if(maxCount < nUniqueChar) {\n  \
    \                  maxStr = \"\"\n                    maxCount = 0\n         \
    \       }\n            }\n\n            // update max string and count for current\
    \ word\n            if(!maxStr.isEmpty) {\n                if(maxCount < nUniqueChar)\
    \ {\n                    maxStr = \"\"\n                    maxCount = 0\n   \
    \             }\n            }\n            if(!maxStr.isEmpty) {\n          \
    \      if(maxCount < nUniqueChar) {\n                    maxStr = \"\"\n     \
    \               maxCount = 0\n                }\n            }\n            if(!maxStr.isEmpty)\
    \ {\n                if(maxCount < nUniqueChar) {\n                    maxStr\
    \ = \"\"\n                    maxCount = 0\n                }\n            }\n\
    \n            // update max string and count for current word\n            if(!maxStr.isEmpty)\
    \ {\n                if(maxCount < nUniqueChar) {\n                    maxStr\
    \ = \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp982acj16.scala:116:0 ---------------------------\e\
    [0m\e[0m\n\e[31m116 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp982acj16.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mmaxStr\e[0m = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxStr is already defined as \e[33mvariable\e[0m \e[35mmaxStr\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp982acj16.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mvar\e[0m \e[36mmaxCount\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxCount is already\
    \ defined as \e[33mvariable\e[0m \e[35mmaxCount\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp982acj16.scala:27:33\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnewCharSet\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mChar\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp982acj16.scala:28:34 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mtempCharSet\e[0m = \e\
    [33mnew\e[0m mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp982acj16.scala:29:39 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m            \e[33mval\e[0m \e[36mduplicateCharSet\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mChar\e[0m]()"
  stdout: ''
  timestamp: 1660009716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.distinct\n        val maxUnique = unique.toSet.size\n\
    \        val indexMap = new mutable.HashMap[Int, Int]()\n        words.length\
    \ match {\n            case 1 => return words(0)\n            case _ => {\n  \
    \              val uniqueMap = unique.toMap\n                for (word <- words)\
    \ {\n                    uniqueMap.foreach(x => {\n                        if\
    \ (x == word) {\n                            indexMap += (x -> 1)\n          \
    \              }\n                        else {\n                           \
    \ indexMap += (x -> indexMap.getOrElse(x, 0) + 1)\n                        }\n\
    \                    })\n                }\n                val maxVal = indexMap.maxBy(_._2)._2\n\
    \                val res = if (maxVal == uniqueMap.size) {\n                 \
    \   words(0)\n                } else if (maxVal > uniqueMap.size) {\n        \
    \            words(0)\n                } else if (maxVal == uniqueMap.size) {\n\
    \                    words(0)\n                } else {\n                    words(0)\n\
    \                }\n                return res\n            }\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa2qrbc6d.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mindexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpa2qrbc6d.scala:21:44\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \         \e[33mval\e[0m \e[36muniqueMap\e[0m = unique.toMap\n\e[31m\e[31m   |\e\
    [0m                                            ^\e[0m\n\e[31m   |\e[0m       \
    \                              Cannot prove that String <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                     where:    K is a type\
    \ variable\n\e[31m   |\e[0m                                               V is\
    \ a type variable\n\e[31m   |\e[0m                                     .\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      var maxCount = 0;\n      var currentWord = \"\"\n      for(word\
    \ <- words) {\n        // check if the current word has already been stored\n\
    \        if (currentWord.length == 0) {\n          currentWord = word\n      \
    \  } else {\n          // check if the current word contains all unique characters\n\
    \          if (word.distinct.length == maxCount) {\n            // if it does\n\
    \            if (word.distinct < currentWord) {\n              // check if it\
    \ comes first\n              currentWord = word\n            }\n          } else\
    \ {\n            // if it doesn't\n            maxCount = word.distinct\n    \
    \        currentWord = word\n          }\n        }\n      }\n      return currentWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7jeicpqm.scala:31:28\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            maxCount = word.distinct\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Found:    String\n\e[31m   |\e[0m                    \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxCount = words.foldLeft(0) { (maxCount, word) =>\n\
    \            val uniqueCount = word.filter(_ != word).length\n            if (maxCount\
    \ > uniqueCount) maxCount else uniqueCount\n        }\n        val maxWords =\
    \ words.filter(_ != words).sortWith(_.length < maxCount)\n        if (maxCount\
    \ > maxWords.last.length) maxWords.last else maxWords.head\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_qfwc7wz.scala:16:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36muniqueCount\e[0m = word.filter(_\
    \ != word).length\n\e[31m\e[31m   |\e[0m                                     \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp_qfwc7wz.scala:19:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxWords\e[0m = words.filter(_ != words).sortWith(_.length\
    \ < maxCount)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types String and List[String] cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp_qfwc7wz.scala:19:57\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWords\e[0m = words.filter(_ != words).sortWith(_.length < maxCount)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong\
    \ number of parameters, expected: 2\n3 errors found\n"
  stdout: ''
  timestamp: 1660009721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.toList.flatMap(_.toList).groupBy(_).maxBy(_.size).toList(0).getOrElse(\"\
    No words\")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpvor6em_k.scala:15:47 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        words.toList.flatMap(_.toList).groupBy(_).maxBy(_.size).toList(\e\
    [31m0\e[0m).getOrElse(\e[31m\"No words\"\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                                       ^\e[0m\n\e[31m   |\e[0mMissing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0mI could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m_$2 => \n\e[31m   |\e[0m  words.toList.flatMap(_$1\
    \ => _$1.toList).groupBy(_$2).maxBy(_$3 => _$3.size).\n\e[31m   |\e[0m    toList\n\
    \e[31m   |\e[0m  (0).getOrElse(\e[32m\"No words\"\e[0m).\n1 error found\n"
  stdout: ''
  timestamp: 1660009718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxCharMap = new mutable.HashMap[Int, String]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         if (maxCharMap.contains(char)) maxCharMap(char) = word\n           \
    \     else maxCharMap(char) = 1\n            })\n        })\n        words.maxBy(maxCharMap.values.toList)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyh9q2uf0.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxCharMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpyh9q2uf0.scala:22:45\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ words.maxBy(maxCharMap.values.toList)\n\e[31m\e[31m   |\e[0m               \
    \                              ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mBigInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter cmp of \e[33mmethod\e[0m \e[35mmaxBy\e\
    [0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordCounts = words.map(word => word -> word.count(_\
    \ == 'a')).toMap\n        val max = wordCounts.maxBy(_._2)._1\n        wordCounts.filter\
    \ { case (word, count) => count == max }.toList.sortWith(_._1 < _._1).head\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbs9yva1b.scala:17:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        wordCounts.filter { \e[33mcase\e[0m (word, count)\
    \ => count == max }.toList.sortWith(_._1 < _._1).head\n\e[31m\e[31m   |\e[0m \
    \                                                 ^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m         Values of types Int and String cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1660009721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxCount : Int = 1\n        var maxWord = \"\"\n \
    \       for (w <- words){\n            var count : Int = 1\n            w :+ count\
    \ match {\n                case word :: _ :: tail if word.forall(c => c != w(0))\
    \ => count = 1\n                case _ => count = count + 1\n            }\n \
    \           if (count > maxCount){\n                maxCount = count\n       \
    \         maxWord = w\n            }\n        }\n        maxWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8nf7d7m8.scala:20:47 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m word :: _ :: tail \e\
    [33mif\e[0m word.forall(c => c != w(\e[31m0\e[0m)) => count = \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                                          ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                     value forall is not a member\
    \ of Any\n1 error found\n"
  stdout: ''
  timestamp: 1660009720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordsWithCounts = words.foldLeft(Map[(String, Int),\
    \ String])(\n            (map, word) => map+(word -> (map.get(word).getOrElse(0)\
    \ += 1)))\n        val max = wordsWithCounts.maxBy(_._2)._2\n        wordsWithCounts.minBy(_._1)._2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg9z0voot.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            (\e[36mmap\e[0m, \e[36mword\e[0m) => map+(word\
    \ -> (map.get(word).getOrElse(\e[31m0\e[0m) += \e[31m1\e[0m)))\n\e[31m\e[31m \
    \  |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a\
    \ member of Seq[((String, Int), String)] => \n\e[31m   |\e[0m  scala.collection.mutable.Map[(String,\
    \ Int), String], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpg9z0voot.scala:16:45 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            (\e[36mmap\e[0m, \e[36mword\e[0m) => map+(word\
    \ -> (map.get(word).getOrElse(\e[31m0\e[0m) += \e[31m1\e[0m)))\n\e[31m\e[31m \
    \  |\e[0m                                         ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \           value get is not a member of Seq[((String, Int), String)] => \n\e\
    [31m   |\e[0m             scala.collection.mutable.Map[(String, Int), String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg9z0voot.scala:17:34 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = wordsWithCounts.maxBy(_._2)._2\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m         value maxBy is not a member of Seq[((String, Int), String)] => \n\e\
    [31m   |\e[0m           scala.collection.mutable.Map[(String, Int), String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpg9z0voot.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        wordsWithCounts.minBy(_._1)._2\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value minBy\
    \ is not a member of Seq[((String, Int), String)] => \n\e[31m   |\e[0m       \
    \   scala.collection.mutable.Map[(String, Int), String]\n4 errors found\n"
  stdout: ''
  timestamp: 1660009725
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxString : String = null\n        var maxCount =\
    \ -1\n        for(word <- words) {\n            if(maxCount == -1 || word.count(_\
    \ == maxCount) > 0) {\n                maxCount = word.count(_ == maxCount)\n\
    \                maxString = word\n            }\n        }\n        maxString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvilfbezx.scala:26)\n\tat Problem.main(tmpvilfbezx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordCount = words.size\n        var maxString = \"\
    \";\n        var maxCount = 0;\n        var currentCount = 0;\n        for(i <-\
    \ 0 to wordCount - 1) {\n            currentCount = words.count(x => x == words(i));\n\
    \            if(currentCount > maxCount) {\n                maxCount = currentCount;\n\
    \                maxString = words(i);\n            }\n        }\n        return\
    \ maxString;\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnjzute2j.scala:29)\n\tat Problem.main(tmpnjzute2j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // The variable \"max\" stores the maximum number of unique\
    \ characters\n        // present in the given words.\n        var max = words.length\n\
    \        // The variable \"maxCount\" stores the number of occurrences of each\n\
    \        // unique character. This variable is initialized to 0 for all unique\n\
    \        // characters.\n        var maxCount = 0\n        for (word <- words)\
    \ {\n            val chars = word.distinct\n            // Count the number of\
    \ occurrences of each unique character\n            var count = 0\n          \
    \  for (c <- chars) {\n                if (maxCount < count) {\n             \
    \       maxCount = count\n                    max = c\n                }\n   \
    \             count += 1\n            }\n        }\n        // Return the word\
    \ with maximum number of unique characters\n        if (maxCount == words.length)\
    \ max else words.head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbl17w_84.scala:35:38\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mif\e[0m (maxCount\
    \ == words.length) max \e[33melse\e[0m words.head\n\e[31m\e[31m   |\e[0m     \
    \                                 ^^^\e[0m\n\e[31m   |\e[0m                  \
    \                    Found:    (max : Int)\n\e[31m   |\e[0m                  \
    \                    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueCount = mutable.Map[String, Int]()\n       \
    \ words.foreach(word => {\n            uniqueCount += word -> word.length\n  \
    \      })\n        var maxCount : Int = Integer.MIN_VALUE\n        var maxWord\
    \ : String = \"\"\n        var maxUniqueCharCount : Int = Integer.MIN_VALUE\n\
    \        uniqueCount.foreach(word => {\n            val count = uniqueCount(word)\n\
    \            if(count > maxCount && count > maxUniqueCharCount) {\n          \
    \      maxWord = word\n                maxCount = count\n                maxUniqueCharCount\
    \ = word.length\n            }\n        })\n        if(maxCount == maxUniqueCharCount)\
    \ {\n            maxWord\n        } else if(maxCount > maxUniqueCharCount) {\n\
    \            val sortedWords = uniqueCount.toSeq.sortBy(_._1).reverse\n      \
    \      sortedWords(0)._1\n        } else {\n            words.reverse.head.head\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm859y_cu.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueCount\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm859y_cu.scala:36:31\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m            words.reverse.head.head\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Found:    Char\n\e[31m   |\e[0m            Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = mutable.Set[Char]()\n        val characterMap\
    \ = mutable.Map[Char,Int]()\n\n        for (word <- words)\n        {\n      \
    \      val len = word.length()\n            for (i <- 0 until len)\n         \
    \   {\n                val c = word.charAt(i)\n                if (!unique.contains(c))\n\
    \                    unique += c\n                val count = characterMap.getOrElse(c,0)\n\
    \                characterMap += (c->count+1);\n            }\n        }\n   \
    \     if (characterMap.size >= unique.size)\n            characterMap.maxBy(_._2)(words)\
    \ else words.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp538v5kws.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munique\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp538v5kws.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcharacterMap\e[0m = mutable.Map[\e\
    [35mChar\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp538v5kws.scala:31:49\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            characterMap.maxBy(_._2)(words)\
    \ \e[33melse\e[0m words.sorted\n\e[31m\e[31m   |\e[0m                        \
    \                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                                Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e\
    [0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                                  \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.foldLeft(Map[Char,Int]())((m,w) =>\
    \ m.updated(w.charAt(0),(m.getOrElse(w,0)) + 1))\n        unique.maxBy(unique.values)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu9t5nl7_.scala:15:97\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munique\e\
    [0m = words.foldLeft(Map[\e[35mChar\e[0m,\e[35mInt\e[0m]())((\e[36mm\e[0m,\e[36mw\e\
    [0m) => m.updated(w.charAt(\e[31m0\e[0m),(m.getOrElse(w,\e[31m0\e[0m)) + \e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                             Found:    (w : String)\n\e[31m \
    \  |\e[0m                                                  Required: Char\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu9t5nl7_.scala:16:28\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        unique.maxBy(unique.values)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Found:    Iterable[Int]\n\e[31m   |\e[0m               \
    \      Required: ((Char, Int)) => Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpu9t5nl7_.scala:16:35 -----------------------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        unique.maxBy(unique.values)\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mBigDecimal\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter cmp of \e[33mmethod\e[0m \e[35mmaxBy\e\
    [0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordsMap : Map[String, Int] = words.toSet.map(word\
    \ => (word, 1)).toMap\n        val sortedMap : Map[String, Int] = wordsMap.sortWith((word1,\
    \ word2) => word1._2 > word2._2)\n        var maxCount : Int = 0\n        val\
    \ maxCharMap : Map[String, Int] = sortedMap.toList.sortWith((word1, word2) =>\
    \ word1._2 > word2._2).map((_, 1)).toMap\n        var maxChar : String = \"\"\n\
    \        var count = 0\n        for (key <- sortedMap) {\n            if (key._2\
    \ == maxCount) {\n                maxChar = key._1\n            }\n          \
    \  count += 1\n        }\n        if (maxCharMap.isEmpty) {\n            return\
    \ \"NONE\"\n        }\n        if (maxCount > sortedMap.getOrElse(\"NONE\", 0))\
    \ {\n            val keys = sortedMap.keySet\n            val vals = sortedMap.values.toList\n\
    \            if (vals.tail.lastOption.isDefined && vals.tail.lastOption.get.isDefined)\
    \ {\n                val max = vals.tail.lastOption.get\n                if (keys.get(keys.size\
    \ - 1) == max) {\n                    maxChar = keys.last\n                } else\
    \ {\n                    maxChar = keys.last\n                }\n            }\
    \ else {\n                maxChar = keys.last\n            }\n        } else {\n\
    \            maxChar = \"NONE\"\n        }\n        return maxChar\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpugvm5wln.scala:15:42\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordsMap\e\
    [0m : \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mInt\e[0m] = words.toSet.map(\e[36mword\e\
    [0m => (word, \e[31m1\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                    \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Found:    Map[String, Int]\n\e[31m   |\e[0m\
    \                           Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, Int]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpugvm5wln.scala:16:52 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msortedMap\e[0m : \e[35mMap\e\
    [0m[\e[35mString\e[0m, \e[35mInt\e[0m] = wordsMap.sortWith((\e[36mword1\e[0m,\
    \ \e[36mword2\e[0m) => word1._2 > word2._2)\n\e[31m\e[31m   |\e[0m           \
    \                                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value\
    \ sortWith is not a member of collection.mutable.Map[String, Int]\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpugvm5wln.scala:18:44 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxCharMap\e[0m : \e[35mMap\e\
    [0m[\e[35mString\e[0m, \e[35mInt\e[0m] = sortedMap.toList.sortWith((\e[36mword1\e\
    [0m, \e[36mword2\e[0m) => word1._2 > word2._2).map((_, \e[31m1\e[0m)).toMap\n\e\
    [31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    Map[(String, Int), Int]\n\
    \e[31m   |\e[0m                           Required: collection.mutable.Map[String,\
    \ Int]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpugvm5wln.scala:33:75\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33mif\e[0m\
    \ (vals.tail.lastOption.isDefined && vals.tail.lastOption.get.isDefined) {\n\e\
    [31m\e[31m   |\e[0m             "
  stdout: ''
  timestamp: 1660009728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.toList.map(_.toUpperCase).groupBy(_.size).maxBy(_._2)._1._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbhswt0f0.scala:15:67 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        words.toList.map(_.toUpperCase).groupBy(_.size).maxBy(_._2)._1._1\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for List[String]..\n\
    \e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mList[String]\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[List[String]]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[List[String]].\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordering.Implicits.seqOrdering\n\e[31m   |\e[0m\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660009727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Write your code here\n        val map = scala.collection.mutable.Map(\"\
    a\" -> 1, \"b\" -> 2, \"c\" -> 2, \"d\" -> 3, \"e\" -> 3, \"f\" -> 3, \"g\" ->\
    \ 4, \"h\" -> 4)\n        words.foreach(word => {\n            val maxVal = map.get(word).fold(0){\
    \ (x, a) => x > a }\n            map += (word -> maxVal)\n        })\n\n     \
    \   val max = map.values.max\n        val min = map.values.min\n        val maxKey\
    \ = map.keys.max\n\n        val maxKey = map.keySet.max\n        val maxVal =\
    \ map.values.max\n\n        val minKey = map.keySet.min\n        val minVal =\
    \ map.values.min\n\n        val maxKey = map.keySet.max\n        val maxVal =\
    \ map.values.max\n\n        val minKey = map.keySet.min\n        val minVal =\
    \ map.values.min\n\n        val maxKey = map.keySet.max\n        val maxVal =\
    \ map.values.max\n\n        val minKey = map.keySet.min\n        val minVal =\
    \ map.values.min\n\n        val maxKey = map.keySet.max\n        val maxVal =\
    \ map.values.max\n\n        val minKey = map.keySet.min\n        val minVal =\
    \ map.values.min\n\n        val maxKey = map.keySet.max\n        val maxVal =\
    \ map.values.max\n\n        val minKey = map.keySet.min\n        val minVal =\
    \ map.values.min\n\n        val maxKey = map.keySet.max\n        val maxVal =\
    \ map.values.max\n\n        val minKey = map.keySet.min\n        val minVal =\
    \ map.values.min\n\n        val maxKey = map.keySet.max\n        val maxVal =\
    \ map.values.max\n\n        val minKey = map.keySet.min\n        val minVal =\
    \ map.values.min\n\n        val maxKey = map.keySet.max\n        val maxVal =\
    \ map.values.max\n\n        val minKey = map.keySet.min\n        val minVal =\
    \ map.values.min\n\n        val maxKey = map.keySet.max\n        val maxVal =\
    \ map.values.max\n\n        val minKey = map.keySet.min\n        val minVal =\
    \ map.values.min\n\n        val maxKey = map.keySet.max\n        val maxVal =\
    \ map.values.max\n\n        val minKey = map.keySet.min\n        val minVal =\
    \ map.values.min\n\n        val maxKey = map.keySet.max\n        val maxVal =\
    \ map.values.max\n\n        val minKey = map.keySet.min\n        val minVal =\
    \ map.values.min\n\n        val maxKey = map.key\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfcnvhqvt.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxKey\e[0m = map.keySet.max\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxKey\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxKey\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfcnvhqvt.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxKey\e[0m = map.keySet.max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxKey is already defined as \e[33mvalue\e[0m \e[35mmaxKey\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfcnvhqvt.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mmaxVal\e[0m = map.values.max\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxVal is\
    \ already defined as \e[33mvalue\e[0m \e[35mmaxVal\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfcnvhqvt.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminKey\e[0m = map.keySet.min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminKey is already defined as \e[33mvalue\e[0m \e[35mminKey\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfcnvhqvt.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mminVal\e[0m = map.values.min\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminVal is\
    \ already defined as \e[33mvalue\e[0m \e[35mminVal\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same gro"
  stdout: ''
  timestamp: 1660009728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val result = words.foldRight((\"\",0)) ((word, (count,\
    \ max) ) =>\n            val chars = word.distinct\n            if(chars.length\
    \ > max) ( word, chars.length)\n            else if(chars.length == max) ( word,\
    \ max)\n            else (word, chars.length)\n        )\n        result._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5qqk4egg.scala:15:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = words.foldRight((\e\
    [31m\"\"\e[0m,\e[31m0\e[0m)) ((\e[36mword\e[0m, (count, max) ) =>\n\e[31m\e[31m\
    \   |\e[0m                                                     ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            not a legal formal\
    \ parameter\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp5qqk4egg.scala:17:28 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(chars.length > max) ( word,\
    \ chars.length)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m>\e\
    [0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double):\
    \ Boolean\n\e[31m   |\e[0m  (x: Float): Boolean\n\e[31m   |\e[0m  (x: Long): Boolean\n\
    \e[31m   |\e[0m  (x: Int): Boolean\n\e[31m   |\e[0m  (x: Char): Boolean\n\e[31m\
    \   |\e[0m  (x: Short): Boolean\n\e[31m   |\e[0m  (x: Byte): Boolean\n\e[31m \
    \  |\e[0m match arguments ((Int, Int) => Int)\n\e[31m\e[31m-- Error: /tmp/tmp5qqk4egg.scala:18:20\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \     \e[33melse\e[0m \e[33mif\e[0m(chars.length == max) ( word, max)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues\
    \ of types Int and (Int, Int) => Int cannot be compared with == or !=\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxIndex = 0\n        var maxValue = words(0)\n  \
    \      var uniqueChars = Set.empty[Char]\n        var maxLen = 0\n        for\
    \ (word <- words) {\n            val chars = word.count\n            uniqueChars\
    \ = uniqueChars + chars\n            if (chars > maxLen) {\n                maxIndex\
    \ = words.index(words.length-1)\n                maxValue = word\n           \
    \     maxLen = chars\n            } else if (chars == maxLen) {\n            \
    \    if (chars > uniqueChars.size)\n                    maxValue = word\n    \
    \            maxIndex = words.index(words.length-1)\n                maxLen =\
    \ chars\n            }\n        }\n        return maxValue\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0sfr6mwx.scala:21:40\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            uniqueChars = uniqueChars\
    \ + chars\n\e[31m\e[31m   |\e[0m                                        ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (chars : (Char => Boolean)\
    \ => Int)\n\e[31m   |\e[0m                            Required: Char\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0sfr6mwx.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (chars > maxLen) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member\
    \ of (Char => Boolean) => Int, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0sfr6mwx.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                maxIndex = words.index(words.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue index is not a member of List[String] - did you mean words.indexOf?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0sfr6mwx.scala:25:25 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                maxLen = chars\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Found:    (chars : (Char => Boolean) => Int)\n\e[31m   |\e[0m              \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp0sfr6mwx.scala:26:23\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \     } \e[33melse\e[0m \e[33mif\e[0m (chars == maxLen) {\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of types\
    \ (Char => Boolean) =>"
  stdout: ''
  timestamp: 1660009729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maximum = words.head.filter(x => x.toString.length\
    \ == words.head.size)\n        for (i<-words.tail){\n            val l = i.toString.toList\n\
    \            var j = maximum.toString.toList\n            for (x <- l){\n    \
    \            if(!j.toList.contains(x)){\n                    j.toList += x\n \
    \               }\n            }\n            maximum = j.sortWith((a, b) => a.compareTo(b))\n\
    \        }\n        maximum.toString.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvf5biate.scala:21:29 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    j.toList += x\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a\
    \ member of List[Char] - did you mean List[Char].!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpvf5biate.scala:24:54 --------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m            maximum = j.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) =>\
    \ a.compareTo(b))\n\e[31m\e[31m   |\e[0m                                     \
    \      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \         Found:    Int\n\e[31m   |\e[0m                                     \
    \      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009729
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = \"\"\n        var maxCount = -1\n        for(word\
    \ <- words){\n            val count = word.toString.count(_ == 'a')\n        \
    \    if(count > maxCount){\n                max = word\n                maxCount\
    \ = count\n            }\n        }\n        return max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpix6dxaif.scala:27)\n\tat Problem.main(tmpix6dxaif.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Write your code here\n        var uniques = HashMap[Char,Int]()\n\
    \        var largest = 0\n        var result = None\n        for(word <- words){\n\
    \            val uniqueCount = uniques.filter(_._1 == word(0)).map(_._2).reduceLeft((a,\
    \ b) => math.max(a, b))\n            if(uniqueCount > largest){\n            \
    \    largest = uniqueCount\n                result = word\n            }\n   \
    \         uniques += (word(0) -> 1)\n        }\n        if(result != None) result\n\
    \        else words.sortWith((w1, w2) => w1.length < w2.length)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn7qgl7km.scala:23:25\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                result = word\n\
    \e[31m\e[31m   |\e[0m                         ^^^^\e[0m\n\e[31m   |\e[0m     \
    \                    Found:    (word : String)\n\e[31m   |\e[0m              \
    \           Required: None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpn7qgl7km.scala:27:27 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mif\e[0m(result != None) result\n\e[31m\e[31m   |\e[0m  \
    \                         ^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \    Found:    (result : None.type)\n\e[31m   |\e[0m                         \
    \  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn7qgl7km.scala:28:27\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33melse\e[0m words.sortWith((w1,\
    \ w2) => w1.length < w2.length)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e\
    [0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m             Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Write your solution here\n        var maxCount = 0\n\
    \        val wordsWithCounts = words.groupBy(_.length).sortBy(-_._2).map(x =>\
    \ (x._1, x._2)).toList\n        val maxWord = wordsWithCounts.head._1\n      \
    \  val maxCount = wordsWithCounts.head._2\n        var found = false\n       \
    \ words.foreach(word => {\n            val thisCount = wordsWithCounts.filter(w\
    \ => w._2 == maxCount).size\n            if(!found && thisCount == maxCount &&\
    \ word < maxWord) {\n                found = true\n                maxWord = word\n\
    \            }\n        })\n        if(!found) {\n            wordsWithCounts.head._1\n\
    \        } else {\n            wordsWithCounts.sortBy(-_._2).head._1\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0lou5rji.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = wordsWithCounts.head._2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxCount is already defined as \e[33mvariable\e[0m \e[35mmaxCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp0lou5rji.scala:17:54 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33mval\e[0m \e[36mwordsWithCounts\e[0m = words.groupBy(_.length).sortBy(-_._2).map(\e\
    [36mx\e[0m => (x._1, x._2)).toList\n\e[31m\e[31m   |\e[0m                    \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \    value sortBy is not a member of Map[Int, List[String]]\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp0lou5rji.scala:25:24 -----------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m                maxWord = word\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxWord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordCount = mutable.Map[String, Int]()\n        words.foreach(word\
    \ => wordCount(word) += 1)\n        val maxWord = wordCount.maxBy(_._2)\n    \
    \    if(wordCount.get(maxWord) > 1) {\n            wordCount.remove((maxWord))\n\
    \            wordCount.minBy(_._1)._1\n        }\n        else maxWord\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8x7lvhiv.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordCount\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var characters = scala.collection.mutable.Map.empty[String,\
    \ Int]\n        var max = \"\"\n        var maxIndex = 0\n\n        for( word\
    \ <- words){\n            var count = 0\n            for( char<- word){\n    \
    \            if(characters.contains(char)){\n                    count += 1\n\
    \                }\n            }\n            characters += (word -> count)\n\
    \        }\n\n        characters.foreach((k,v) => {\n            if(v > max){\n\
    \                max = v\n                maxIndex = k\n            }\n      \
    \  })\n\n        words(maxIndex)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvqr0q6px.scala:22:39\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e[0m(characters.contains(char)){\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Found:    (char : Char)\n\e[31m\
    \   |\e[0m                                       Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpvqr0q6px.scala:30:17 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mif\e[0m(v > max){\n\e[31m\e[31m   |\e\
    [0m               ^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m>\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\
    \e[31m   |\e[0m  (x: Double): Boolean\n\e[31m   |\e[0m  (x: Float): Boolean\n\e\
    [31m   |\e[0m  (x: Long): Boolean\n\e[31m   |\e[0m  (x: Int): Boolean\n\e[31m\
    \   |\e[0m  (x: Char): Boolean\n\e[31m   |\e[0m  (x: Short): Boolean\n\e[31m \
    \  |\e[0m  (x: Byte): Boolean\n\e[31m   |\e[0m match arguments ((max : String))\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvqr0q6px.scala:31:22 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                max = v\n\e[31m\e[31m   |\e[0m      \
    \                ^\e[0m\n\e[31m   |\e[0m                      Found:    Int\n\e\
    [31m   |\e[0m                      Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpvqr0q6px.scala:32:27 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                maxIndex = k\n\e[31m\e[31m   |\e[0m \
    \                          ^\e[0m\n\e[31m   |\e[0m                           Found:\
    \    String\n\e[31m   |\e[0m                           Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      var maxCount = 0\n      var maxWord = \"\"\n      for(word\
    \ <- words) {\n        if(word.count(_).max > maxCount) {\n          maxCount\
    \ = word.count(_).max\n          maxWord = word\n        }\n      }\n      return\
    \ maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpftyuy6er.scala:18:22 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m(word.count(_).max > maxCount) {\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => word.count(_$1).max > maxCount.\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpftyuy6er.scala:19:32 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m          maxCount = word.count(_).max\n\e[31m\e[31m\
    \   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => word.count(_$2).max.\n2\
    \ errors found\n"
  stdout: ''
  timestamp: 1660009729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueCount = words.foldLeft(Map[Char, Int]()) {\n\
    \            (accumulator, next) => \n                val numOccurences = accumulator.getOrElse(next(0),\
    \ 0) + 1\n                (next.toChar -> numOccurences)\n        }\n\n      \
    \  val maxValues = uniqueCount.maxBy(_._2)\n\n        if (maxValues._2 == uniqueCount.getOrElse(maxValues._1,\
    \ 0))\n            \"\"\n        else\n            maxValues._1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvcjhkhb8.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                (next.toChar -> numOccurences)\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \   value toChar is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvcjhkhb8.scala:26:22 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            maxValues._1\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Char\n\e[31m   |\e[0m            Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxCount = new mutable.HashMap[String, Int]\n    \
    \    for (word <- words) {\n            val uniqueCount = new mutable.HashSet[String]\n\
    \            for (letter <- word) {\n                if (!uniqueCount.contains(letter))\
    \ {\n                    uniqueCount.add(letter)\n                } else {\n \
    \                   uniqueCount.remove(letter)\n                }\n          \
    \  }\n            if (uniqueCount.size == word.length) {\n                if (uniqueCount.size\
    \ == 1) {\n                    maxCount.put(word, uniqueCount.size)\n        \
    \        } else {\n                    maxCount.put(word, uniqueCount.min.size)\n\
    \                }\n            }\n        }\n        maxCount.max.foreach(key\
    \ => {\n            val maxCount = maxCount.get(key)\n            val count =\
    \ maxCount.toString.toInt\n            if (count == maxCount.size) {\n       \
    \         println(key)\n            } else {\n                println(key + \"\
    :\" + count)\n            }\n        })\n        return words.max\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppkthw9gf.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppkthw9gf.scala:17:34 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            \e[33mval\e[0m \e[36muniqueCount\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = mutable.Set[Char]()\n        val charCount\
    \ = words.map( word => word.count(_)).max\n        words.filter(word => word.count(_)\
    \ == charCount).map( word => word).max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy97y4jcn.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munique\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpy97y4jcn.scala:16:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcharCount\e[0m = words.map(\
    \ \e[36mword\e[0m => word.count(_)).max\n\e[31m\e[31m   |\e[0m               \
    \                                              ^\e[0m\n\e[31m   |\e[0mNo implicit\
    \ Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:    B is a type\
    \ variable with constraint >: (Char => Boolean) => Int\n\e[31m   |\e[0m..\n\e\
    [31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mB\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[B]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[B].\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmpy97y4jcn.scala:17:40 -----------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        words.filter(\e[36mword\e[0m => word.count(_) == charCount).map(\
    \ \e[36mword\e[0m => word).max\n\e[31m\e[31m   |\e[0m                        \
    \                ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2 of expanded\
    \ function:\n\e[31m   |\e[0m   _$2 => word.count(_$2) == charCount.\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val map = scala.collection.mutable.Map[Char, Int]()\n\
    \        var max = 0\n        for(s1 <- words) {\n            for(s2 <- words)\
    \ {\n                if(s1 === s2) {\n                    continue\n         \
    \       }\n                for(c1 <- s1.toCharArray) {\n                    val\
    \ c2 = s2.toCharArray\n                    if(c2 == null) {\n                \
    \        map.delete(c1)\n                        map.putIfAbsent(c1, 0)\n    \
    \                } else {\n                        if(c1 == c2(c1)) {\n      \
    \                      map.get(c1) += 1\n                            map.putIfAbsent(c1,\
    \ 0)\n                            continue\n                        } else {\n\
    \                            val count = map.get(c1)\n                       \
    \     map.putIfAbsent(c1, 0)\n                            map.putIfAbsent(c1,\
    \ count + 1)\n                        }\n                    }\n             \
    \   }\n            }\n        }\n        map.foreach(x => if(x > max) max = x)\n\
    \        words.filter(_.toString.length == max.toString).head\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw9_jzwx0.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e[0m(s1 === s2) {\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e[0m               value\
    \ === is not a member of String - did you mean s1.==?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpw9_jzwx0.scala:20:20 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m                    continue\n\e[31m\e[31m   |\e[0m           \
    \         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw9_jzwx0.scala:25:28\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                        map.delete(c1)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \ value delete is not a member of scala.collection.mutable.Map[Char, Int]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpw9_jzwx0.scala:26:28 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                        map.putIfAbsent(c1, \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue putIfAbsent is not a member of scala.collection.mutable.Map[Char,\
    \ Int], but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.mutableMap\
    \ AsJavaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.mutableMap\
    \ AsJavaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsJavaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.map\
    \ AsJavaMap\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw9_jzwx0.scala:29:40\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                        \
    \    map.get(c1) += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value += is not a member of Option[Int]\
    \ - did you mean Option[Int].!=?\n\e[31m\e[31m-"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // TODO: Write your code here\n        var maxCount =\
    \ 0\n        var maxWord = \"\"\n        var maxWordIdx :Int = 0\n        var\
    \ word = words.get(0) // Get the first word in the list.\n        for(i <- 1 to\
    \ words.size){\n            var wordCount = 0\n            var wordIdx = 0\n \
    \           for(j <- 1 to words.size){\n                if(i != j){\n        \
    \            if(words.get(j).equals(word))\n                        wordCount\
    \ += 1\n                }\n            }\n            if(wordCount > maxCount){\n\
    \                maxCount = wordCount\n                maxWord = word\n      \
    \          maxWordIdx = i\n            }\n        }\n        maxWord\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2ncx2idg.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mword\e[0m = words.get(\e\
    [31m0\e[0m) \e[34m// Get the first word in the list.\e[0m\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value get is not a member\
    \ of List[String] - did you mean words.seq?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2ncx2idg.scala:25:29 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m                    \e[33mif\e[0m(words.get(j).equals(word))\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue get is not\
    \ a member of List[String], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = new mutable.HashSet[String]\n        val\
    \ result = scala.math.Ordering.natural().on (_.length).reverse.compare(_, _)\n\
    \        val words = words.toSet\n        words.foreach(word => {\n          \
    \  val newWord = word.map {\n                char => char match {\n          \
    \          case 'a' =>'A'\n                    case 'b' =>'B'\n              \
    \      case 'c' =>'C'\n                    case 'd' =>'D'\n                  \
    \  case 'e' =>'E'\n                    case 'f' =>'F'\n                    case\
    \ 'g' =>'G'\n                    case 'h' =>'H'\n                    case 'i'\
    \ =>'I'\n                    case 'j' =>'J'\n                    case 'k' =>'K'\n\
    \                    case 'l' =>'L'\n                    case 'm' =>'M'\n    \
    \                case 'n' =>'N'\n                    case 'o' =>'O'\n        \
    \            case 'p' =>'P'\n                    case 'q' =>'Q'\n            \
    \        case 'r' =>'R'\n                    case 's' =>'S'\n                \
    \    case 't' =>'T'\n                    case 'u' =>'U'\n                    case\
    \ 'v' =>'V'\n                    case 'w' =>'W'\n                    case 'x'\
    \ =>'X'\n                    case 'y' =>'Y'\n                    case 'z' =>'Z'\n\
    \                    case _ =>'?'\n                }\n            }\n        \
    \    unique.addAll(newWord)\n        })\n        var max = \"\"\n        unique.foreach(char\
    \ => {\n            max = char + max\n        })\n        if(unique.size == 0)\
    \ max\n        else max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0y4h3zgc.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munique\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp0y4h3zgc.scala:16:81 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = scala.math.Ordering.natural().on\
    \ (_.length).reverse.compare(_, _)\n\e[31m\e[31m   |\e[0m                    \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0mMissing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0mI could not infer\
    \ the type of the parameter _$2 of expanded function:\n\e[31m   |\e[0m(_$2, _$3)\
    \ => \n\e[31m   |\e[0m  scala.math.Ordering.natural().on(_$1 => _$1.length).reverse.compare(_$2,\
    \ _$3).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp0y4h3zgc.scala:16:84 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = scala.math.Ordering.natural().on\
    \ (_.length).reverse.compare(_, _)\n\e[31m\e[31m   |\e[0m                    \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0mMissing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0mI could not\
    \ infer the type of the parameter _$3 of expanded function:\n\e[31m   |\e[0m(_$2,\
    \ _$3) => \n\e[31m   |\e[0m  scala.math.Ordering.natural().on(_$1 => _$1.length).reverse.compare(_$2,\
    \ _$3).\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0y4h3zgc.scala:16:41 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = scala.math.Ordering.natural().on\
    \ (_.length).reverse.compare(_, _)\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value natural\
    \ is not a member of object scala.math.Ordering\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp0y4h3zgc.scala:17:20 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        "
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = 0\n        var word = \"\"\n        for (str\
    \ <- words){\n            val counts = mutable.Map[Char, Int]()\n            for\
    \ (word <- str) {\n                if(counts(word.charAt(0)) isEmpty){\n     \
    \               counts(word.charAt(0)) = 1\n                }\n              \
    \  else{\n                    counts(word.charAt(0)) = counts(word.charAt(0))+1\n\
    \                }\n            }\n            if(counts(_) >= max){\n       \
    \         max = counts(_)\n                word = str\n            }\n       \
    \ }\n        return word\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7g4u3a49.scala:20:49 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m(counts(word.charAt(\e[31m0\e\
    [0m)) isEmpty){\n\e[31m\e[31m   |\e[0m                                       \
    \          ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7g4u3a49.scala:18:25 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e[35mChar\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E081] Type Error: /tmp/tmp7g4u3a49.scala:27:22 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m(counts(_) >= max){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => counts(_$1) >= max.\n\e\
    [31m\e[31m-- [E081] Type Error: /tmp/tmp7g4u3a49.scala:28:29 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                max = counts(_)\n\e[31m\e[31m   |\e[0m\
    \                             ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => counts(_$2).\n4 errors found\n"
  stdout: ''
  timestamp: 1660009733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = 0\n        var maxWord = \"\"\n        var maxWordLength\
    \ = 0\n        var i = 0\n        var j = 0\n        val chars = scala.collection.mutable.HashSet[Char]()\n\
    \n        for(word <- words) {\n            for(char <- word) {\n            \
    \    if(!chars.contains(char)) {\n                    chars += char\n        \
    \        }\n            }\n\n            if(chars.size > max) {\n            \
    \    max = chars.size\n                maxWord = word\n                maxWordLength\
    \ = word.length\n            }\n            chars.clear()\n        }\n\n     \
    \   if(chars.size > 0) {\n            chars.sortWith(_.compare(maxWord.charAt(0))\
    \ > 0)\n        }\n\n        return maxWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnf7zwt5h.scala:38:18 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            chars.sortWith(_.compare(maxWord.charAt(\e\
    [31m0\e[0m)) > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sortWith is not a member of scala.collection.mutable.HashSet[Char]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009738
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      val map = mutable.Map[String, Int]()\n      words.foreach{word\
    \ =>\n         word match {\n           case x if !map.contains(x) =>\n      \
    \       map.put(x, 1)\n           case x => \n             val currentCount =\
    \ map.getOrElse(x, 0)\n             val newCount = currentCount + 1\n        \
    \     map.put(x, newCount)\n         }\n      }\n      val max = map.maxBy(_._2)._1\
    \ // sort by descending number of unique chars\n      words.find(_ == max) //\
    \ return the word which appears first in lexicographical order\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14igcv66.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp14igcv66.scala:27:16 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m      words.find(_ == max) \e[34m// return the word which\
    \ appears first in lexicographical order\e[0m\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m      Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val characterCounts = words.map(word => word.map(c =>\
    \ c).distinct).map(words => words.toSeq.toSet).map(words => words.map(_ => words.size)).toMap\n\
    \        var max = characterCounts.keys.max\n        var maxChars = characterCounts.get(max)\n\
    \        var maxCharsIndex = 0\n        for (key <- characterCounts.keys) {\n\
    \            if (characterCounts.get(key) > maxChars) {\n                max =\
    \ key\n                maxChars = characterCounts.get(key)\n                maxCharsIndex\
    \ = characterCounts.keys.indexOf(key) + 1\n            }\n        }\n        characterCounts.keys.toList.take(maxCharsIndex).last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp33ftrzut.scala:15:153 ----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcharacterCounts\e[0m = words.map(\e\
    [36mword\e[0m => word.map(\e[36mc\e[0m => c).distinct).map(\e[36mwords\e[0m =>\
    \ words.toSeq.toSet).map(\e[36mwords\e[0m => words.map(_ => words.size)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                     ^\e[0m\n\e[31m   |\e[0m                   Cannot prove that\
    \ Set[B]\n\e[31m   |\e[0m\n\e[31m   |\e[0m                   where:    B is a\
    \ type variable with constraint >: Int\n\e[31m   |\e[0m                    <:<\
    \ (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                   where:    K is a\
    \ type variable\n\e[31m   |\e[0m                             V is a type variable\n\
    \e[31m   |\e[0m                   .\n1 error found\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordsWithUniqueCharactersCount = words.map(x => x.toUpperCase().distinct.length).toSet.size\n\
    \        val maxString = words.sortWith(_.toUpperCase.distinct.length < _.toUpperCase.distinct.length).head\n\
    \        val maxStringWithUniqueCharactersCount = words.sortWith(_.toUpperCase.distinct.length\
    \ < _.toUpperCase.distinct.length).last\n        (maxString, maxStringWithUniqueCharactersCount)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5jvrv_1_.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        (maxString, maxStringWithUniqueCharactersCount)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mString\e[0m\e\
    [1m\e[31m,\e[0m\e[1m\e[31m \e[0mString\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m     \
    \   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxCount = 0\n        var maxWord = List[String]()\n\
    \        for (word <- words) {\n            val count = countChars(word)\n   \
    \         if (count > maxCount) {\n                maxWord = word\n          \
    \      maxCount = count\n            }\n        }\n        if (maxCount != 0)\
    \ maxWord\n        else \"\"\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyiqwcajr.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = countChars(word)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        Not found: countChars\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpyiqwcajr.scala:20:26 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                maxWord = word\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^\e[0m\n\e[31m   |\e[0m                        \
    \  Found:    (word : String)\n\e[31m   |\e[0m                          Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyiqwcajr.scala:24:27\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mif\e[0m (maxCount\
    \ != \e[31m0\e[0m) maxWord\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (maxWord : List[String])\n\
    \e[31m   |\e[0m                           Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val result = mutable.HashMap.empty[String, Int]\n\n  \
    \      words.foreach{w => \n            val tmp = w.toSet.count\n            if(result.contains(w))\
    \ {\n                if(result(w) < tmp) {\n                    result(w) = tmp\n\
    \                }\n            } else result(w) = tmp\n        }\n\n        val\
    \ maxKey = result.maxBy(_._2)._1\n        val index = words.indexWhere{ w => w\
    \ == maxKey }\n        words(index)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8mg8frlm.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxValues = words.foldLeft(Map[Char, Int]()){\n  \
    \          (acc, word) => acc + (word -> (acc(word) + 1))\n        }\n       \
    \ var max = 0\n        for (word <- words) {\n            if (maxValues(word)\
    \ > max) {\n                max = maxValues(word)\n            }\n        }\n\
    \        words.foldLeft((List[String](), max)) { (acc,word) => \n            if\
    \ (acc._2.contains(word._1)) {\n                acc match {\n                \
    \    case (list, max) => (word :: word, max)\n                    case (list,\
    \ max) => (word :: word, acc._2)\n                    case (list, max) => (word\
    \ :: acc, max)\n                }\n            } else {\n                (word\
    \ :: acc._1, acc._2)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6uitjznl.scala:16:47\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            (\e[36macc\e[0m,\
    \ \e[36mword\e[0m) => acc + (word -> (acc(word) + \e[31m1\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                               ^^^^\e[0m\n\e[31m   |\e\
    [0m                                               Found:    (word : String)\n\e\
    [31m   |\e[0m                                               Required: Char\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6uitjznl.scala:20:26\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (maxValues(word)\
    \ > max) {\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m \
    \  |\e[0m                          Found:    (word : String)\n\e[31m   |\e[0m\
    \                          Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp6uitjznl.scala:21:32 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                max = maxValues(word)\n\e[31m\e[31m   |\e\
    [0m                                ^^^^\e[0m\n\e[31m   |\e[0m                \
    \                Found:    (word : String)\n\e[31m   |\e[0m                  \
    \              Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp6uitjznl.scala:25:23 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m            \e[33mif\e[0m (acc._2.contains(word._1)) {\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ contains is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6uitjznl.scala:25:37\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m\
    \ (acc._2.contains(word._1)) {\n\e[31m\e[31m   |\e[0m                        \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                value _1\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6uitjznl.scala:27:46\
    \ ------------------"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val res = new scala.collection.mutable.HashSet[String]\n\
    \        words.foreach { word =>\n            if (res.contains(word)) res.remove(word)\n\
    \            else res += word\n        }\n        res.toList.sortWith(_ <- res.size,\
    \ _.compareTo(_) == 0).last\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn6rffp3u.scala:20:30 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        res.toList.sortWith(_ <- res.size, _.compareTo(_)\
    \ == \e[31m0\e[0m).last\n\e[31m\e[31m   |\e[0m                              ^^\e\
    [0m\n\e[31m   |\e[0m                              ')' expected, but '<-' found\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpn6rffp3u.scala:20:28 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        res.toList.sortWith(_ <- res.size, _.compareTo(_)\
    \ == \e[31m0\e[0m).last\n\e[31m\e[31m   |\e[0m                            ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$1 of expanded function:\n\e\
    [31m   |\e[0m   _$1 => res.toList.sortWith(_$1).last.\n2 errors found\n"
  stdout: ''
  timestamp: 1660009736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordSet = scala.collection.mutable.Set.empty[String]\n\
    \        wordList.foreach(word => {\n            val unique = word.map(i => i\
    \ -32).map(i => word.indexOf(i))\n            if (unique.length > wordSet.size)\
    \ {\n                wordSet = unique\n            }\n        })\n        wordSet.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxtp1bind.scala:16:8 -------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        wordList.foreach(\e[36mword\e[0m => {\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: wordList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // (1) Create a map of each character to how many times\
    \ that character appears.\n        val map = words.foldLeft(Map[Char, Int]())\
    \ { (map, word) => \n            word.foreach(c => map += ((c, map.getOrElse(c,\
    \ 0) + 1))) \n        }\n        // (2) Get the maximum value from map.\n    \
    \    val max = (map map max _)\n        // (3) Return the corresponding key value\
    \ pair.\n        (map filter { case (_, value) => value == max } map { case (char,\
    \ count) => char })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppi49boyg.scala:17:24\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            word.foreach(\e[36mc\e\
    [0m => map += ((c, map.getOrElse(c, \e[31m0\e[0m) + \e[31m1\e[0m))) \n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Unit\n\e[31m   |\e[0m            Required:\
    \ scala.collection.mutable.Map[Char, Int]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmppi49boyg.scala:20:27 ---------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = (map map max _)\n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppi49boyg.scala:22:9 ---------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        (map filter { \e[33mcase\e[0m (_, value) => value\
    \ == max } map { \e[33mcase\e[0m (char, count) => char })\n\e[31m\e[31m   |\e\
    [0m         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Found:    scala.collection.mutable.Iterable[Char]\n\
    \e[31m   |\e[0m         Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordList = words.toList\n        val map1 = wordList.foldLeft(Map[String,\
    \ Int]().withDefaultValue(0) { (map, word) =>\n            if (map.contains(word))\
    \ map else map + (word -> (map.getOrElse(word, 0) + 1)))\n        }\n        val\
    \ map2 = map1.groupBy(_._1).mapValues(_.length)\n        val maxKey = map2.maxBy(_._2)._1\n\
    \        wordList.find(w => w.startsWith(maxKey)).head\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7wb41pj.scala:17:89 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (map.contains(word)) map \e\
    [33melse\e[0m map + (word -> (map.getOrElse(word, \e[31m0\e[0m) + \e[31m1\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                         '}' expected, but ')' found\n\e[31m\e[31m-- Error: /tmp/tmpb7wb41pj.scala:19:8\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m      \
    \  \e[33mval\e[0m \e[36mmap2\e[0m = map1.groupBy(_._1).mapValues(_.length)\n\e\
    [31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        end of statement expected\
    \ but 'val' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb7wb41pj.scala:36:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m36 |\e[0m}\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0meof expected, but '}' found\n\e[31m\e[31m-- [E081] Type\
    \ Error: /tmp/tmpb7wb41pj.scala:16:79 -----------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmap1\e[0m = wordList.foldLeft(Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]().withDefaultValue(\e[31m0\e[0m) { (\e[36mmap\e\
    [0m, \e[36mword\e[0m) =>\n\e[31m\e[31m   |\e[0m                              \
    \                                                 ^^^\e[0m\n\e[31m   |\e[0m  \
    \                      Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \                        I could not infer the type of the parameter map.\n\e\
    [31m\e[31m-- [E081] Type Error: /tmp/tmpb7wb41pj.scala:16:84 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmap1\e[0m = wordList.foldLeft(Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]().withDefaultValue(\e[31m0\e[0m) { (\e[36mmap\e\
    [0m, \e[36mword\e[0m) =>\n\e[31m\e[31m   |\e[0m                              \
    \                                                      ^^^^\e[0m\n\e[31m   |\e\
    [0m                       Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                       I could not infer the type of the parameter word.\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb7wb41pj.scala:18:9 ------"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val map = words.map(w => (w, w.length)).toMap\n      \
    \  val count = words.map(w => map.getOrElse(w,0)).sum\n        val maxValue =\
    \ words.filter( w => map.getOrElse(w,0) > count)\n        if (maxValue.size >\
    \ 1)\n            maxValue.reduce((a, b) => a.compareTo(b) < 0) ? maxValue.getOrElse(maxValue.get(1))\
    \ : maxValue.getOrElse(maxValue.get(0))\n        else\n            maxValue.getOrElse(words.get(0))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9284x86z.scala:19:116 ----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            maxValue.reduce((\e[36ma\e[0m, \e[36mb\e\
    [0m) => a.compareTo(b) < \e[31m0\e[0m) ? maxValue.getOrElse(maxValue.get(\e[31m1\e\
    [0m)) : maxValue.getOrElse(maxValue.get(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                    end of statement expected but '(' found\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9284x86z.scala:19:38 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            maxValue.reduce((\e[36ma\e[0m, \e[36mb\e[0m) =>\
    \ a.compareTo(b) < \e[31m0\e[0m) ? maxValue.getOrElse(maxValue.get(\e[31m1\e[0m))\
    \ : maxValue.getOrElse(maxValue.get(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \                                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                    Found:    Boolean\n\e[31m   |\e[0m      \
    \                                Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9284x86z.scala:19:69 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            maxValue.reduce((\e[36ma\e[0m, \e[36mb\e\
    [0m) => a.compareTo(b) < \e[31m0\e[0m) ? maxValue.getOrElse(maxValue.get(\e[31m1\e\
    [0m)) : maxValue.getOrElse(maxValue.get(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                                            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value getOrElse is not a member of\
    \ List[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9284x86z.scala:19:88\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            maxValue.reduce((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a.compareTo(b) < \e[31m0\e[0m) ? maxValue.getOrElse(maxValue.get(\e\
    [31m1\e[0m)) : maxValue.getOrElse(maxValue.get(\e[31m0\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue get is not a member of List[String"
  stdout: ''
  timestamp: 1660009742
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordsSorted = words.toList\n        wordsSorted.sortBy(x\
    \ => x.length)\n        var maxWord = wordsSorted.head\n        var maxCharCount\
    \ = 0\n        for(word <- wordsSorted) {\n            val count = word.groupBy(x\
    \ => x).size\n            if(count > maxCharCount) {\n                maxCharCount\
    \ = count\n                maxWord = word\n            }\n        }\n        maxWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn6157g52.scala:30)\n\tat Problem.main(tmpn6157g52.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxCount = 0\n        var maxWord = null\n       \
    \ for(word <- words) {\n            var count = word.distinct().length\n     \
    \       if(count > maxCount) {\n                maxCount = count\n           \
    \     maxWord = word\n            }\n        }\n        if(maxCount > 0) {\n \
    \           maxWord\n        } else {\n            \"no words with same number\
    \ of unique characters\"\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpn5l1u_b6.scala:18:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mvar\e[0m \e[36mcount\e[0m = word.distinct().length\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmissing argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e\
    [33mclass\e[0m \e[35mStringOps\e[0m: (i: Int): Char\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpn5l1u_b6.scala:21:26 --------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m                maxWord = word\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                          Found: \
    \   (word : String)\n\e[31m   |\e[0m                          Required: Null\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val result = new collection.mutable.ListBuffer[String]\n\
    \        for(w <- words) {\n            val counters = w.distinct.groupBy(c =>\
    \ c).toSeq\n            val maxCounter = counters.maxBy(_._2)._1\n           \
    \ val maxChar = w.toSet.filter(c => c == maxCounter).head\n            result\
    \ += ((maxCounter + maxChar) ++ w)\n        }\n        \n        val list = result.toSeq\n\
    \        if (list.size == 1) list.head else list.sortWith((a, b) => a > b)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe7lz1iw0.scala:20:46 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            result += ((maxCounter + maxChar) ++ w)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       value ++ is not a member of Int\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpe7lz1iw0.scala:24:56 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mif\e[0m (list.size == \e[31m1\e[0m) list.head\
    \ \e[33melse\e[0m list.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a > b)\n\e[31m\e\
    [31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Found:    \e[1m\e\
    [31mSeq\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        \
    \                                   Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Write your code here\n        var charCountMap = new\
    \ HashMap[String, Int]()\n        var maxCharCount = 0\n        for (w <- words){\n\
    \            for (c <- w.toCharArray){\n                if (!charCountMap.contains(c)){\n\
    \                    charCountMap.put(c, charCountMap.getOrElse(c, 0) + 1)\n \
    \               }\n            }\n            if (charCountMap.getOrElse(w, 0)\
    \ > maxCharCount){\n                maxCharCount = charCountMap.getOrElse(w, 0)\n\
    \            }\n        }\n        charCountMap.foreach {\n            case (k,\
    \ v) => if (v == maxCharCount) k else \"\"\n        }\n        return \"\"\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp94xgw8c8.scala:20:43\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m\
    \ (!charCountMap.contains(c)){\n\e[31m\e[31m   |\e[0m                        \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \         Found:    (c : Char)\n\e[31m   |\e[0m                              \
    \             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp94xgw8c8.scala:21:37 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                    charCountMap.put(c, charCountMap.getOrElse(c, \e[31m0\e\
    [0m) + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \   ^\e[0m\n\e[31m   |\e[0m                                     Found:    (c :\
    \ Char)\n\e[31m   |\e[0m                                     Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp94xgw8c8.scala:21:63\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    charCountMap.put(c,\
    \ charCountMap.getOrElse(c, \e[31m0\e[0m) + \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (c : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var res = \"\"\n        var count = words.foldLeft(Map[String,\
    \ Int]()) {\n            case (acc: Map[String, Int], word : String)\n       \
    \         if (acc.contains(word)) acc ++ Map(word -> acc.get(word) + 1)\n    \
    \            else {\n                    acc + (word -> 1)\n                }\n\
    \        }\n        var max = 0\n        words.foreach { word =>\n           \
    \ if (count.contains(word)) {\n                if (count.get(word) > max) {\n\
    \                    max = count.get(word)\n                    res = word\n \
    \               }\n            }\n        }\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy7i3sd6d.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33melse\e[0m {\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                '=>' expected, but\
    \ 'else' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy7i3sd6d.scala:18:40\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e\
    [0m (acc.contains(word)) acc ++ Map(word -> acc.get(word) + \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   value acc is not a member of Boolean\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpy7i3sd6d.scala:18:44 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m (acc.contains(word)) acc\
    \ ++ Map(word -> acc.get(word) + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                                    ^^\e[0m\n\e[31m   |\e[0m                \
    \                            Not found: ++\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpy7i3sd6d.scala:26:36 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                \e[33mif\e[0m (count.get(word) > max) {\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ > is not a member of Option[Int], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy7i3sd6d.scala:27:35 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    max = count.get(word)\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      Found:    Option[Int]\n\e[31m   |\e[0m                \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = \"\"\n        var maxCount = 1\n        for\
    \ (str <- words) {\n            val c = str.toCharArray\n            val count\
    \ = c.length\n            if (count > maxCount) {\n                maxCount =\
    \ count\n                max = str\n            }\n        }\n        max\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_l6gnr50.scala:29)\n\tat Problem.main(tmp_l6gnr50.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = 0\n        var i = 0\n        while(i < words.length)\
    \ {\n            val word = words(i)\n            val count = word.length\n  \
    \          val chars = word.toCharArray\n            val unique = chars.distinct\n\
    \            val uniqueSize = unique.size\n            if(uniqueSize > max) {\n\
    \                max = uniqueSize\n            }\n            i += 1\n       \
    \ }\n        words(0)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjzsno6dy.scala:31)\n\tat Problem.main(tmpjzsno6dy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxKeyValMap : Map[Char, Int] = words.foldLeft(Map[Char,\
    \ Int]()) { case (acc, x) => acc ++ x.toCharArray.groupBy(_).mapValues(_.length).toMap\
    \ }\n        if (maxKeyValMap.size == 0) \"\"\n        else if (maxKeyValMap.size\
    \ > 1) maxKeyValMap.minKey() match {\n            case (k, v) => \"string\"\n\
    \        }\n        else maxKeyValMap.maxKey() match {\n            case (k, v)\
    \ => k\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpr8r1x_5t.scala:15:125 ----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxKeyValMap\e[0m : \e[35mMap\e\
    [0m[\e[35mChar\e[0m, \e[35mInt\e[0m] = words.foldLeft(Map[\e[35mChar\e[0m, \e\
    [35mInt\e[0m]()) { \e[33mcase\e[0m (acc, x) => acc ++ x.toCharArray.groupBy(_).mapValues(_.length).toMap\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0mMissing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0mI\
    \ could not infer the type of the parameter _$1 of expanded function:\n\e[31m\
    \   |\e[0m_$1 => acc ++ x.toCharArray.groupBy(_$1).mapValues(_$2 => _$2.length).toMap.\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr8r1x_5t.scala:17:53 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (maxKeyValMap.size\
    \ > \e[31m1\e[0m) maxKeyValMap.minKey() \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue minKey is not a member of collection.mutable.Map[Char, Int] - did\
    \ you mean maxKeyValMap.minBy?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr8r1x_5t.scala:20:26\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m maxKeyValMap.maxKey()\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue maxKey is not a member of collection.mutable.Map[Char,\
    \ Int] - did you mean maxKeyValMap.maxBy?\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr8r1x_5t.scala:21:27 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            \e[33mcase\e[0m (k, v) => k\n\e[31m\e[31m   |\e[0m            \
    \               ^\e[0m\n\e[31m   |\e[0m                           Not found: k\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = 0\n        var word = \"\"\n        for (word\
    \ <- words) {\n            if (word.count(_ == 'a') > max) {\n               \
    \ max = word.count(_ == 'a')\n                word = word\n            } else\
    \ if (word.count(_ == 'a') < max) {\n                max = word.count(_ == 'a')\n\
    \                word = word\n            } else if (word.count(_ == 'a') == max)\
    \ {\n                var j = 0\n                for (i <- 0 until word.length)\n\
    \                    if (word.count(_ == 'a', i) > max) {\n                  \
    \      max = word.count(_ == 'a', i)\n                        word = word\n  \
    \                  }\n            }\n        }\n        return word\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp4tydqjnj.scala:20:21 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                word = word\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val word\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp4tydqjnj.scala:23:21\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                word\
    \ = word\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val word\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmp4tydqjnj.scala:27:35 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    \e[33mif\e[0m (word.count(_ == \e\
    [31m'a'\e[0m, i) > max) {\n\e[31m\e[31m   |\e[0m                             \
    \      ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$6 of expanded function:\n\
    \e[31m   |\e[0m   _$6 => _$6 == \e[31m'a'\e[0m.\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmp4tydqjnj.scala:28:41 -----------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                        max = word.count(_ == \e[31m'a'\e[0m, i)\n\e[31m\e\
    [31m   |\e[0m                                         ^\e[0m\n\e[31m   |\e[0m\
    \   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$7 of expanded function:\n\e[31m   |\e[0m   _$7 =>\
    \ _$7 == \e[31m'a'\e[0m.\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp4tydqjnj.scala:29:29\
    \ -----------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                   \
    \     word = word\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Reassignment to val word\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660009745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(word => count(word)).foldLeft(Map[String,\
    \ Int]()) {\n            case (acc, current) => {\n                acc ++ current.toMap.map(_\
    \ -> 1)\n            }\n        }\n        val maxValue = counts.values.max\n\
    \        val maxKey = counts.keys.find(_ == maxValue)\n        val maxString =\
    \ if(maxKey.isEmpty) None else Some(words.find(w => count(w) == maxValue))\n \
    \       maxString.orElse(words.reverse.find(_ == maxValue))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkii0acwa.scala:15:39 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = words.map(\e\
    [36mword\e[0m => count(word)).foldLeft(Map[\e[35mString\e[0m, \e[35mInt\e[0m]())\
    \ {\n\e[31m\e[31m   |\e[0m                                       ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                       Not found: count\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkii0acwa.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                acc ++ current.toMap.map(_ -> \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue toMap is not a member of Nothing, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpkii0acwa.scala:21:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxKey\e[0m = counts.keys.find(_\
    \ == maxValue)\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types String and Int cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkii0acwa.scala:22:74\
    \ -----------------"
  stdout: ''
  timestamp: 1660009750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // TODO: Write your solution\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy74i9ybn.scala:14:49\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mfindMax\e\
    [0m(\e[36mwords\e[0m : \e[35mList\e[0m[\e[35mString\e[0m]) : \e[35mString\e[0m\
    \ = {\n\e[31m\e[31m   |\e[0m                                                 ^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  Unit\n\e[31m   |\e[0m                                                 Required:\
    \ String\n\e[31m15 |\e[0m        \e[34m// TODO: Write your solution\e[0m\n\e[31m16\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val map = mutable.LinkedHashMap[Char, Int]()\n       \
    \ for (word <- words) {\n            val charCount = word.map(c => c).distinct.size\n\
    \            if (map.contains(charCount)) {\n                val value = map.getOrElse(charCount,\
    \ 0)\n                if (value < charCount) {\n                    map.clear()\n\
    \                }\n            }\n            map.update(charCount, charCount)\n\
    \        }\n        val maxValue = map.values.max\n        if (map.size == maxValue)\
    \ map.maxBy(_._1)._1\n        else if (maxValue > map.size) map.minBy(_._1)._1\n\
    \        else \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpun5b_u91.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.LinkedHashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxNum = 1\n        var result = \"\"\n        for\
    \ (word <- words) {\n            val characters = word.chars\n            val\
    \ uniqueChars = characters.distinct\n            val uniqueCharsCount = uniqueChars.length\n\
    \            if (uniqueCharsCount > maxNum) {\n                result = word\n\
    \                maxNum = uniqueCharsCount\n            }\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxzesx_ei.scala:20:47 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36muniqueCharsCount\e[0m\
    \ = uniqueChars.length\n\e[31m\e[31m   |\e[0m                                \
    \   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value length is not\
    \ a member of java.util.stream.IntStream\n1 error found\n"
  stdout: ''
  timestamp: 1660009748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val result = new mutable.HashSet[Char]()\n        words.foreach(word\
    \ => {\n            word.map(c => {\n                if (!result.contains(c))\
    \ {\n                    result += c\n                }\n            })\n    \
    \    })\n        val max = Math.max(result.size, words.length)\n        if (result.size\
    \ != max) {\n            val sortedWords = words.sortWith((a, b) => a.size - b.size)\n\
    \            sortedWords(0)\n        } else {\n            val sortedWords = words.sortWith((a,\
    \ b) => a.compareTo(b) < 0)\n            sortedWords(0)\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpltv9rof2.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpltv9rof2.scala:25:55\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e\
    [36msortedWords\e[0m = words.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a.size -\
    \ b.size)\n\e[31m\e[31m   |\e[0m                                             \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                          Found:    Int\n\e[31m   |\e[0m                    \
    \                                   Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009749
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max: String = \"\"\n        var maxCount: Int = 0\n\
    \        var newWords = words.toSet\n        for (word <- newWords) {\n      \
    \      if (word.length > (maxCount + 1)) {\n                maxCount = word.length\n\
    \                max = word\n            }\n        }\n        if (maxCount ==\
    \ words.length) {\n            maxCount = newWords.size\n            max = \"\
    a\"\n        }\n        if (maxCount == newWords.size) {\n            newWords.find(word.toList.sorted.head\
    \ == word.toList.sorted.last)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn8ddud1p.scala:29:26 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            newWords.find(word.toList.sorted.head ==\
    \ word.toList.sorted.last)\n\e[31m\e[31m   |\e[0m                          ^^^^\e\
    [0m\n\e[31m   |\e[0m                          Not found: word\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val hashSet = mutable.HashSet[String]()\n        words.map(x\
    \ => hashSet.add(x))\n        val max = hashSet.toList.sortWith(_ > _).head\n\
    \        max.head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeo06r0rp.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueCount = mutable.HashMap.empty[String, Int]\n\
    \        words.foreach( word => {\n            val uniques = uniqueCount(word)\
    \ match {\n                case None =>\n                    uniqueCount += (word\
    \ -> 1)\n                case Some(count) => if (count > uniqueCount(word)) uniqueCount\
    \ += (word -> count) else ()\n            }\n        })\n        var max = 0\n\
    \        var maxWord = words.head\n        uniqueCount.foreach((word, count) =>\
    \ {\n            if (count > max) max = count\n            maxWord = word\n  \
    \      })\n        return maxWord\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptwl38sor.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueCount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptwl38sor.scala:20:40\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e\
    [0m Some(count) => \e[33mif\e[0m (count > uniqueCount(word)) uniqueCount += (word\
    \ -> count) \e[33melse\e[0m ()\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \       Not found: count\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n       val charcount = mutable.Map[Char, Int]()\n       for (\
    \ word <- words) {\n          var n = 0\n          for (c <- word.charIterator.toList)\
    \ {\n             val oldn = charcount(c)\n             if (oldn == 0)\n     \
    \           charcount(c) = n+1\n             else\n                 charcount(c)\
    \ = oldn\n          }\n       }\n\n       val maxCount = charcount.maxBy(_._2)\n\
    \       val maxKey = charcount.keys.toList.max\n       val maxValues = charcount.values.toList.sortBy(_.toString.length)\n\
    \       val maxValue = maxValues.max\n\n       println(s\"Max count of unique\
    \ characters ${maxCount}, max key ${maxKey}, max value ${maxValue}\")\n      \
    \ maxKey.toString\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpteisbcr0.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m       \e[33mval\e[0m \e[36mcharcount\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpteisbcr0.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m          \e[33mfor\e[0m (c <- word.charIterator.toList)\
    \ {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                    value charIterator is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.foldLeft((List[String](), 0, 0)) { (temp, cur, i)\
    \ =>\n            val (max, num) = temp._2\n            if (num < max) {\n   \
    \             (temp._1 :+ cur, num + 1, i)\n            } else if (num == max)\
    \ {\n                (temp._1 :+ cur, i + 1, i)\n            } else {\n      \
    \          (temp._1 :+ cur, max, i)\n            }\n        }._1.head\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp2nbtj2fy.scala:15:64 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        words.foldLeft((List[\e[35mString\e[0m](), \e\
    [31m0\e[0m, \e[31m0\e[0m)) { (\e[36mtemp\e[0m, \e[36mcur\e[0m, \e[36mi\e[0m) =>\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 2\n\e[31m16 |\e[0m            \e[33mval\e[0m (max, num) = temp._2\n\e[31m17\
    \ |\e[0m            \e[33mif\e[0m (num < max) {\n\e[31m18 |\e[0m             \
    \   (temp._1 :+ cur, num + \e[31m1\e[0m, i)\n\e[31m19 |\e[0m            } \e[33melse\e\
    [0m \e[33mif\e[0m (num == max) {\n\e[31m20 |\e[0m                (temp._1 :+ cur,\
    \ i + \e[31m1\e[0m, i)\n\e[31m21 |\e[0m            } \e[33melse\e[0m {\n\e[31m22\
    \ |\e[0m                (temp._1 :+ cur, max, i)\n\e[31m23 |\e[0m            }\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val countMap = new mutable.HashMap[Int, String]\n    \
    \    for (word <- words) countMap += word.size -> word\n        var max = -1\n\
    \        var result: String = null\n        for ( (k, v) <- countMap ) {\n   \
    \         if (v.length > max) {\n                result = v\n                max\
    \ = v.length\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppqb5y2z9.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009749
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var result : String = \"none\"\n        var max = 0\n\
    \        var maxCount = 0\n        val chars = scala.collection.mutable.HashSet[String]()\n\
    \        words.foreach{w => chars += w}\n        chars.foreach{c => {\n      \
    \      if(charCount(c) > maxCount) {\n                result = c\n           \
    \     max = charCount(c)\n            }\n        }}\n        if(result == \"none\"\
    ) {\n            result = words.toList.head\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvk0nf2m7.scala:21:15 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(charCount(c) > maxCount) {\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \     Not found: charCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpvk0nf2m7.scala:23:22 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m                max = charCount(c)\n\e[31m\e[31m   |\e[0m                 \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: charCount\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009749
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val set = new mutable.HashSet[String]\n        for(word\
    \ <- words){\n            if(set.contains(word)){\n                set.update(word)\n\
    \            }\n            else{\n                set.add(word)\n           \
    \ }\n        }\n        val maxCount = set.size\n        if(maxCount > 1){\n \
    \           set.iterator.toList.sortBy(x => x.length).last\n        }\n      \
    \  else{\n            set.iterator.toList.head\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp34g4k2z_.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009749
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Code goes here\n        val uniqueChar = new mutable.HashSet[String]()\n\
    \        words.foreach(word => {\n            uniqueChar.addAll(word.split(\"\"\
    ).toList)\n        })\n        val sorted = uniqueChar.toList.sortWith((a, b)\
    \ => a.compareTo(b) == 0)\n        sorted.headOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphkpupcae.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36muniqueChar\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009749
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // write code here\n        val set = Set[String]()\n\
    \        for (w <- words) {\n            val ch = w.toSet.toList\n           \
    \ if (ch.size >= set.size) {\n                return w\n            }\n      \
    \      set ++= ch\n        }\n        return words.head\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfop0d_wl.scala:22:20\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            set ++= ch\n\e[31m\e\
    [31m   |\e[0m                    ^^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    (ch : List[Char])\n\e[31m   |\e[0m                    Required: IterableOnce[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val list = new scala.collection.mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            list.add(word)\n        }\n      \
    \  if (list.size == 0) \"\"\n        else {\n            val res = list.foldLeft(List[String]())((acc,\
    \ word) =>\n                val count = acc.count(_ == word)\n               \
    \ if (count > 0) (word, count) else acc\n            )\n            res.sortWith(_.length\
    \ > _.length).head\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9_ojsbt0.scala:17:17 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            list.add(word)\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue add is not a member of scala.collection.mutable.ListBuffer[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9_ojsbt0.scala:23:31 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e[0m (count > \e[31m0\e[0m)\
    \ (word, count) \e[33melse\e[0m acc\n\e[31m\e[31m   |\e[0m                   \
    \            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  Found:    (String, Int)\n\e[31m   |\e[0m                               Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max: String = \"\"\n        var maxCount: Int = 0\n\
    \        var newWords = words\n        while(newWords.length > 0) {\n        \
    \    newWords = newWords.filter(word => word.isEmpty)\n            var newCount:\
    \ Int = 0\n            for (word <- newWords) {\n                var counter =\
    \ new mutable.HashSet[Char]()\n                for (char <- word.toCharArray)\
    \ {\n                    if (!counter.contains(char)) {\n                    \
    \    counter.add(char)\n                        newCount = newCount + 1\n    \
    \                }\n                }\n                if (newCount > maxCount)\
    \ {\n                    maxCount = newCount\n                    max = word\n\
    \                }\n            }\n            newWords = newWords.filter(word\
    \ => !word.isEmpty)\n        }\n        return max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4pu28f9w.scala:22:34 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mvar\e[0m \e[36mcounter\e[0m = \e\
    [33mnew\e[0m mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009752
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxCount = 0\n        var maxWord = \"\"\n       \
    \ var chars = \"\"\n        val wordCounts = words.groupBy(w => w).toList\n\n\
    \        for (word <- words) {\n            if (wordCounts(word).size > maxCount)\
    \ {\n                maxCount = wordCounts(word).size\n                maxWord\
    \ = word\n            }\n            chars += word.map(c => c.toChar).distinct\n\
    \        }\n        maxWord\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj_oylf5z.scala:21:27\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (wordCounts(word).size\
    \ > maxCount) {\n\e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e\
    [31m   |\e[0m                           Found:    (word : String)\n\e[31m   |\e\
    [0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpj_oylf5z.scala:22:38 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                maxCount = wordCounts(word).size\n\e\
    [31m\e[31m   |\e[0m                                      ^^^^\e[0m\n\e[31m   |\e\
    [0m                                      Found:    (word : String)\n\e[31m   |\e\
    [0m                                      Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def findMax1(words1 : List[String], words2 : List[String])\
    \ : List[String] = {\n            if(words1.isEmpty){\n                return\
    \ words2\n            }\n            if(words2.isEmpty){\n                return\
    \ words1\n            }\n            val maxWord1 = words1.takeWhile(word => !words2.contains(word)).iterator\n\
    \            val maxWord2 = words2.takeWhile(word => !words1.contains(word)).iterator\n\
    \            if(maxWord1.equals(maxWord2)){\n                return findMax1(words1.dropWhile(word\
    \ => !words2.contains(word)).iterator, words2.dropWhile(word => !words1.contains(word)).iterator)\n\
    \            }\n            else{\n                val maxWord = maxWord1.concat(maxWord2)\n\
    \                return findMax1(words1.dropWhile(word => !maxWord.contains(word)).iterator,\
    \ words2.dropWhile(word => !maxWord.contains(word)).iterator)\n            }\n\
    \        }\n        val result = words.foldLeft(List[String]())((acc, x) => acc.head\
    \ == x.length ? acc :+ x.length)\n        val maxWord = result.max\n        if(maxWord\
    \ > result.head){\n            result.head\n        }\n        else{\n       \
    \     result.head\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4l9qll6s.scala:25:81\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mreturn\e\
    [0m findMax1(words1.dropWhile(\e[36mword\e[0m => !words2.contains(word)).iterator,\
    \ words2.dropWhile(\e[36mword\e[0m => !words1.contains(word)).iterator)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    \e[1m\e[31mIterator\e\
    [0m[String]\n\e[31m   |\e[0m                                Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4l9qll6s.scala:25:140\
    \ -------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mreturn\e\
    [0m findMax1(words1.dropWhile(\e[36mword\e[0m => !words2.contains(word)).iterator,\
    \ words2.dropWhile(\e[36mword\e[0m => !words1.contains(word)).iterator)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Found:    \e\
    [1m\e[31mIterator\e[0m[String]\n\e[31m   |\e[0m                              \
    \                Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4l9qll6s.scala:29:82 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                \e[33mreturn\e[0m findMax1(words1.dropWhile(\e\
    [36mword\e[0m => !maxWord.contains(word)).iterator, words2.dropWhile(\e[36mword\e\
    [0m => !maxWord.contains(word)).iterator)\n\e[31m\e[31m   |\e[0m             \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    \e[1m\e[31mIterator\e\
    [0m[String]\n\e[31m   |\e[0m                                Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-ex"
  stdout: ''
  timestamp: 1660009757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val map = mutable.HashMap[(List[String], Int), String]()\n\
    \        for (word <- words) {\n            var count = 1\n            for(c <-\
    \ word) {\n                map.getOrElseUpdate((List(c, word), count), c)\n  \
    \              count += 1\n            }\n        }\n        val max = map.values.max\n\
    \        val minKey = map.keys.min\n        if (max > 1) map[minKey]\n       \
    \ else map.keys.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp_f726pi.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap[(\e\
    [35mList\e[0m[\e[35mString\e[0m], \e[35mInt\e[0m), \e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp_f726pi.scala:25:25\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (max\
    \ > \e[31m1\e[0m) map[\e[35mminKey\e[0m]\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: type\
    \ minKey\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = \"\"\n        var maxNumber = 0\n        var\
    \ count = 0\n        for(word <- words) {\n            val length = word.length\n\
    \            var currentNumber = 0\n            var currentWord = \"\"\n     \
    \       for(c <- word) {\n                currentNumber += 1\n               \
    \ if((currentNumber == 1) || (length > currentNumber)) {\n                   \
    \ currentWord = c\n                    currentNumber = 1\n                }\n\
    \            }\n            count = count + 1\n            if(length > maxNumber)\
    \ {\n                max = word\n                maxNumber = length\n        \
    \    }\n        }\n        if(count > maxNumber) {\n            max = max\n  \
    \      }\n        return max\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ut5n1j7.scala:25:34\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    currentWord\
    \ = c\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m \
    \  |\e[0m                                  Found:    (c : Char)\n\e[31m   |\e\
    [0m                                  Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max: String = \"\"\n        var count = new mutable.Map[Char,\
    \ Int]()\n        words.foreach(w => {\n            w.toList\n            .map(c\
    \ => c -> 1)\n            .foreach(pair => count+=pair)\n        })\n        val\
    \ maxKey = count.keys.max\n        if(count.contains(maxKey)) {\n            max\
    \ = count.keys.find(c => c == maxKey)\n        } else {\n            max = \"\"\
    \n        }\n        return max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcgcts_2n.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var result = List[String]()\n        var maxChar = 0\n\
    \        var maxWord = \"\"\n        for(word <- words)\n            for(char\
    \ <- word)\n                if(char == 'a')\n                    maxChar = char\n\
    \                if(char == 'a' && maxChar < char)\n                    maxChar\
    \ = char\n            if(maxChar != 0)\n                result ::= word\n    \
    \    if(result.length == 0)\n            return \"\"\n        if(result.length\
    \ == 1)\n            return result(0)\n        var maxIndex = 0\n        for(i\
    \ <- 0 until result.length)\n            if(result(i) > result(i+1))\n       \
    \         maxIndex = i\n        return result(maxIndex)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.findMax$$anonfun$2(tmpc8rvvg_n.scala:32)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.findMax(tmpc8rvvg_n.scala:33)\n\
    \tat Problem$.main(tmpc8rvvg_n.scala:37)\n\tat Problem.main(tmpc8rvvg_n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val result = mutable.HashMap.empty[String, Int]\n    \
    \    words.foreach { word =>\n            word.toList.toSet.foreach(x => result(x,\
    \ 1)) //result(x,1) means word has only one char\n        }\n        val maxKey\
    \ = result.maxBy(_._1)\n        val maxValue = result.getOrElse(maxKey, 0)\n \
    \       if (maxValue > 1) maxKey else \"\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3uxeo485.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxList: mutable.List[String] = new mutable.ListBuffer[String]\n\
    \        val list: List[String] = words.toList\n        for (str <- list) {\n\
    \            val uniqueChar = str.size\n            if (uniqueChar > maxList.size)\
    \ {\n                maxList += str\n            } else {\n                val\
    \ cur = maxList.iterator\n                if (uniqueChar > cur._1.size) {\n  \
    \                  maxList += str\n                }\n            }\n        }\n\
    \        val minList: mutable.List[String] = new mutable.ListBuffer[String]\n\
    \        for (str <- list) {\n            val uniqueChar = str.size\n        \
    \    if (uniqueChar < minList.size) {\n                minList += str\n      \
    \      } else {\n                val cur = minList.iterator\n                if\
    \ (uniqueChar < cur._1.size) {\n                    minList += str\n         \
    \       }\n            }\n        }\n        (minList ++ maxList).sortWith(_ <\
    \ _).last\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1znu_24d.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m: mutable.List[\e\
    [35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1znu_24d.scala:15:48 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxList\e[0m: mutable.List[\e[35mString\e[0m]\
    \ = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1znu_24d.scala:28:21 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mminList\e[0m: mutable.List[\e\
    [35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1znu_24d.scala:28:48 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m        \e[33mval\e[0m \e[36mminList\e[0m: mutable.List[\e[35mString\e[0m]\
    \ = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val map = scala.collection.mutable.Map[String,Int]()\n\
    \        words.foreach(x => {\n            val value = map.getOrElse(x,0)\n  \
    \          val old = map.getOrElse(x,0)\n            map.put(x,value + 1)\n  \
    \          if(value > old) {\n                word = x\n            }\n      \
    \  })\n        words.find(x => x._1.length == words.map(x => x._1.length).max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5c8xfwdi.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                word = x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                Not found: word\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5c8xfwdi.scala:24:26 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        words.find(\e[36mx\e[0m => x._1.length == words.map(\e\
    [36mx\e[0m => x._1.length).max)\n\e[31m\e[31m   |\e[0m                       \
    \ ^^^^\e[0m\n\e[31m   |\e[0m                        value _1 is not a member of\
    \ String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var res = \"\"\n        val counts = new mutable.HashMap[String,\
    \ Int]()\n        for (wd <- words) {\n            var cnt = counts(wd)\n    \
    \        if (cnt == null) {\n                cnt = 1\n            } else {\n \
    \               cnt = cnt + 1\n            }\n            counts.put(wd, cnt)\n\
    \        }\n        for (k <- counts.keySet) {\n            if (counts(k) > counts.getOrElse(k,\
    \ 0)) {\n                res = k\n            }\n        }\n        if (res ==\
    \ \"\") {\n            Console.err.println(\"No such word exists\")\n        \
    \    System.exit(-1)\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_1klrsvy.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxSizes = words.map(word => (word, word.length)).toSet\n\
    \        words.map(word => (word, maxSizes(word))).sortBy(_._2).map(_._1).head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplybspzy3.scala:16:42\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        words.map(\e[36mword\e\
    [0m => (word, maxSizes(word))).sortBy(_._2).map(_._1).head\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                    Found:    (word : String)\n\e[31m   |\e[0m\
    \                                          Required: (String, Int)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxCount = 0.0\n        var maxWord = \"\"\n     \
    \   var wordsWithMaxCount = mutable.Set[String]()\n        for (word <- words)\
    \ {\n            var countOfWord = word.distinct().length\n            if (countOfWord\
    \ > maxCount) {\n                maxCount = countOfWord\n                maxWord\
    \ = word\n            }\n            wordsWithMaxCount += word\n        }\n  \
    \      if (wordsWithMaxCount.size == 1) {\n            maxWord = wordsWithMaxCount.head\n\
    \        }\n        if (maxCount == 0.0) {\n            return \"\"\n        }\n\
    \        wordsWithMaxCount.toList.sortBy(_.length).reverse.head\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7j8n59nn.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mwordsWithMaxCount\e[0m =\
    \ mutable.Set[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp7j8n59nn.scala:19:43\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \     \e[33mvar\e[0m \e[36mcountOfWord\e[0m = word.distinct().length\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmissing argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e\
    [33mclass\e[0m \e[35mStringOps\e[0m: (i: Int): Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660009756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val map = new scala.collection.mutable.TreeMap[String,\
    \ Int]()\n        for (word <- words) {\n            val count = map.get(word).map(_\
    \ + 1)\n            if (count.toInt > 1)\n                map.put(word, count.toInt)\n\
    \            else\n                map.put(word, count.toInt)\n        }\n   \
    \     val maxKey = map.maxKey\n        val maxValue = map.get(maxKey).getOrElse(0)\n\
    \        words.get(words.indexOf(maxKey))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxe3c08vf.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (count.toInt > \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt\
    \ is not a member of Option[Int], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxe3c08vf.scala:19:36\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                map.put(word,\
    \ count.toInt)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toInt is not a member of Option[Int], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpxe3c08vf.scala:21:36 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                map.put(word, count.toInt)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toInt is not a member of Option[Int], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxe3c08vf.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e["
  stdout: ''
  timestamp: 1660009761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def count(word : String, count : Map[Char, Int]) : (Int,\
    \ Char) = { \n            if (count.contains(char)) {\n                val count\
    \ = count(word, count) + 1\n                val newCount = mutable.Map(count +\
    \ (char -> 1))\n                (count, char)\n            }\n            else\
    \ {\n                val count = mutable.Map(count + (char -> 1))\n          \
    \      (count.size + 1, char)\n            }\n        }\n\n        val maxCount\
    \ = mutable.Map(0 -> 0)\n        val maxChar = scala.math.Ordering.Int.MinValue\n\
    \n        words.foreach(word => {\n            val count = mutable.Map[Char, Int]()\n\
    \            word.foreach(char => count(char, count))\n            if (count.size\
    \ > maxCount.size) {\n                maxCount = count\n                maxChar\
    \ = scala.math.Ordering.Int.MinValue\n            }\n        })\n\n        val\
    \ result = words.find(word => {\n            word.size == maxCount.size && count(word,\
    \ maxCount) >= maxCount\n        })\n\n        if (result != None) {\n       \
    \     result.head\n        }\n        else {\n            None\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4tr5qwn0.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (count.contains(char)) {\n\e\
    [31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m   |\e[0m \
    \                              Not found: char\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp4tr5qwn0.scala:17:28 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mcount\e[0m = count(word,\
    \ count) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                            ^\e\
    [0m\n\e[31m   |\e[0m                            Recursive \e[33mvalue\e[0m \e\
    [35mcount\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp4tr5qwn0.scala:17:40 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m                \e[33mval\e[0m \e[36mcount\e[0m = count(word, count) +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0m                                        Recursive \e[33mvalue\e\
    [0m \e[35mcount\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4tr5qwn0.scala:18:31 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m                \e[33mval\e[0m \e[36mnewCount\e[0m = mutable.Map(count + (char\
    \ -> \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4tr5qwn0.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                (count, char)\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4tr5qwn0.scala:22:2"
  stdout: ''
  timestamp: 1660009761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueCount = mutable.Map[Char,Int]()\n        var\
    \ max = \"\"\n        var maxCount = 0\n        for(word <- words){\n        \
    \    for(char <- word.toCharArray){\n                val count = uniqueCount(char)\
    \ + 1\n                uniqueCount(char) = count\n                if(count > maxCount){\n\
    \                    maxCount = count\n                    max = char\n      \
    \          }\n            }\n        }\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm35hvxy_.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueCount\e[0m = mutable.Map[\e\
    [35mChar\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm35hvxy_.scala:24:26\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    max = char\n\
    \e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      Found:    (char : Char)\n\e[31m   |\e[0m              \
    \            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueCharactersCount = mutable.Map[String, Int]()\n\
    \        words.foreach{word =>\n            val uniqueCharactersCount = word.distinct.length\n\
    \            uniqueCharactersCount(word) = uniqueCharactersCount(word) + 1\n \
    \       }\n        val maxValue = uniqueCharactersCount.max\n\n        val sortedWords\
    \ = words.sortWith(_.length < maxValue)\n        val indexOfMaxValue = sortedWords.indexOf(maxValue)\n\
    \n        if (indexOfMaxValue < 0) {\n            \"\"\n        } else {\n   \
    \         sortedWords(indexOfMaxValue)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0xhdbw4f.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueCharactersCount\e\
    [0m = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp0xhdbw4f.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            uniqueCharactersCount(word) = uniqueCharactersCount(word)\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value update is not a member of Int\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp0xhdbw4f.scala:18:42 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            uniqueCharactersCount(word) = uniqueCharactersCount(word)\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \e[33mvalue\e\
    [0m \e[35muniqueCharactersCount\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmp0xhdbw4f.scala:22:41 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e[0m = words.sortWith(_.length\
    \ < maxValue)\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n4 errors found\n"
  stdout: ''
  timestamp: 1660009760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      val chars = mutable.HashSet[Char]()\n      val max = -math.pow(26,\
    \ words.length)\n      for (word <- words) {\n        for (c <- word.toCharArray)\
    \ {\n          if (!chars(c))\n            chars += c\n        }\n      }\n  \
    \    val maxChar = chars.max\n      if (maxChar == 0)\n        \"\"\n      else\n\
    \        chars.find(c => c == maxChar).orNull\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprik9_ef5.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val countMap = mutable.Map[Char, Int]()\n        val sortedWords\
    \ = words.toList.sortWith(\n            (a, b) => b.length == a.length || (b.length\
    \ == a(b.length).length)\n        )\n        for (word <- sortedWords) {\n   \
    \         for (chr <- word.toCharArray) {\n                if (countMap.get(chr)\
    \ == null) {\n                    countMap.put(chr, 1)\n                } else\
    \ {\n                    countMap.get(chr) += 1\n                }\n         \
    \   }\n        }\n        if (countMap.values.toSeq.max() > 1) sortedWords.head\n\
    \        else sortedWords.last\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvvm6by7v.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvvm6by7v.scala:17:71 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            (\e[36ma\e[0m, \e[36mb\e[0m) => b.length\
    \ == a.length || (b.length == a(b.length).length)\n\e[31m\e[31m   |\e[0m     \
    \                                                      ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    value length is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660009761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxCount = 0\n        var maxIndex = -1\n        for(res\
    \ <- words) {\n            var currentCount = 1\n            for(i <- 0 until\
    \ res.length) {\n                if(res.length(i) == res.count(_.equalsIgnoreCase(res.charAt(i))))\
    \ {\n                    currentCount += 1\n                }\n            }\n\
    \            if(currentCount > maxCount) {\n                maxCount = currentCount\n\
    \                maxIndex = res\n            }\n        }\n        if(maxIndex\
    \ == -1) return \"\"\n        if(maxCount > 1) return maxIndex\n        else return\
    \ \"Unknow\"\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpiplen0t2.scala:20:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m(res.length(i) == res.count(_.equalsIgnoreCase(res.charAt(i))))\
    \ {\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \           too many arguments for \e[33mmethod\e[0m \e[35mlength\e[0m in \e[33mclass\e\
    [0m \e[35mString\e[0m: (): Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiplen0t2.scala:26:27\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                maxIndex = res\n\
    \e[31m\e[31m   |\e[0m                           ^^^\e[0m\n\e[31m   |\e[0m    \
    \                       Found:    (res : String)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpiplen0t2.scala:30:32 --------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mif\e[0m(maxCount > \e[31m1\e[0m) \e[33mreturn\e[0m maxIndex\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Found:    (maxIndex : Int)\n\e[31m   |\e[0m\
    \                                Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = \"\"\n        var maxC = 0\n        for (word\
    \ <- words) {\n            val uniqueC = _.distinct\n            val c = _.distinct.length\n\
    \            if (c > maxC) {\n                maxC = c\n                max =\
    \ word\n            }\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpu301vhh2.scala:18:26 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36muniqueC\e[0m = _.distinct\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => _$1.distinct.\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpu301vhh2.scala:19:20 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mc\e[0m = _.distinct.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => _$2.distinct.length.\n2\
    \ errors found\n"
  stdout: ''
  timestamp: 1660009761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val map = mutable.Map[String, Int]()\n        for (word\
    \ <- words) map.update(word, map.getOrElse(word, 0) + 1); \n        val max =\
    \ map.maxBy(_._2)._1\n        words.reverse.find(_._2 == max).getOrElse(words.head)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm_f1l5c7.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpm_f1l5c7.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        words.reverse.find(_._2 == max).getOrElse(words.head)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        value _2 is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueCharCounts = mutable.Map.empty[String, Int]\n\
    \        val wordsWithMaxNumberOfUniqueCharacters = mutable.List.empty[String]\n\
    \        for (word <- words) {\n            for (c <- word.chars) {\n        \
    \        if (!uniqueCharCounts.contains(c)) {\n                    uniqueCharCounts\
    \ += ((c) -> 1)\n                } else {\n                    uniqueCharCounts(c)\
    \ += 1\n                }\n            }\n        }\n        if (uniqueCharCounts.values.toList.max\
    \ > 1) return wordWithMaxNumberOfUniqueCharacters(uniqueCharCounts)\n        else\
    \ wordsWithMaxNumberOfUniqueCharacters(uniqueCharCounts)(0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp21ekirrw.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueCharCounts\e[0m =\
    \ mutable.Map.empty[\e[35mString\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp21ekirrw.scala:16:51 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mwordsWithMaxNumberOfUniqueCharacters\e[0m = mutable.List.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                                      \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp21ekirrw.scala:18:22 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m (c <- word.chars) {\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue foreach\
    \ is not a member of java.util.stream.IntStream - did you mean IntStream.forEach?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp21ekirrw.scala:26:59 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m (uniqueCharCounts.values.toList.max\
    \ > \e[31m1\e[0m) \e[33mreturn\e[0m wordWithMaxNumberOfUniqueCharacters(uniqueCharCounts)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \          Not found: wordWithMaxNumberOfUniqueCharacters\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009763
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val map = words.foldLeft(Map[Int, String]())((map, word)\
    \ =>\n            map + ((word.length -> (word :: map.getOrElse(word.length, List())))))\n\
    \        map.values.toList.sortWith(_.length < _.length).head.head\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz99cf8_8.scala:16:41 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            map + ((word.length -> (word :: map.getOrElse(word.length,\
    \ List())))))\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value :: is not a member\
    \ of Object\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz99cf8_8.scala:17:61\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        map.values.toList.sortWith(_.length\
    \ < _.length).head.head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Char\n\e[31m   |\e[0m        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.foldLeft(\"\"){(word, currentString) =>\n      \
    \      val unique = currentString.distinct\n            if (current.length < unique.length)\
    \ current else unique\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpku_4k_j4.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (current.length < unique.length)\
    \ current \e[33melse\e[0m unique\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: current\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpku_4k_j4.scala:17:48 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (current.length < unique.length)\
    \ current \e[33melse\e[0m unique\n\e[31m\e[31m   |\e[0m                      \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                           Not found: current\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = 0;\n        var maxWord = \"\"\n        for(word\
    \ <- words){ // iterating over each words\n            var freq = words.filter(x\
    \ => x == word).length; // count the number of unique characters in that word\n\
    \            if(freq > max){ // if the count of unique characters is greater than\
    \ the max so far\n                max = freq; // make max equal to count of unique\
    \ characters for this word\n                maxWord = word; // make maxWord the\
    \ word with maximum number of unique characters\n            }\n        }\n  \
    \      return maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq6fm_poq.scala:27)\n\tat Problem.main(tmpq6fm_poq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val set = mutable.LinkedHashSet[String]()\n        for(word\
    \ <- words){\n            for(char <- word.chars){\n                if(set.contains(char)){\n\
    \                    set.remove(char);\n                }else{\n             \
    \       set.add(char);\n                }\n            }\n        }\n        if(set.size\
    \ == words.size){\n            set.max\n        }else{\n            set.min\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_dnpha9_.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.LinkedHashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_dnpha9_.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mfor\e[0m(char <- word.chars){\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue foreach\
    \ is not a member of java.util.stream.IntStream - did you mean IntStream.forEach?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxCount = 0\n        var maxIndex = -1\n        for\
    \ (i <- 0 until words.length) {\n            val count = mutable.ListBuffer.empty[Char]\n\
    \            for (j <- 0 until words(i).length) {\n                count += words(i)(j)\n\
    \            }\n            if (count.length >= maxCount) {\n                maxCount\
    \ = count.length\n                maxIndex = i\n            }\n        }\n   \
    \     if (maxIndex >= 0) {\n            val sortedWords = words.map(x => (x, x.length))\n\
    \                .sortWith(x => (x._2, x._1))\n            sortedWords.head._1\n\
    \        } else {\n            words.head\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbp66hedx.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = mutable.ListBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmpbp66hedx.scala:29:28 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                .sortWith(x => (x._2, x._1))\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Wrong number of parameters, expected: 2\n2 errors found\n"
  stdout: ''
  timestamp: 1660009763
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val map = mutable.Map[Char, Int]()\n        words.foreach{\
    \ word =>\n            for (c <- word.toCharArray()) {\n                val count\
    \ = map.getOrElse(c, 0)\n                map.update(c, count + 1)\n          \
    \  }\n        }\n\n        val maxCounts = map.values.max\n        val maxKey\
    \ = map.keys.max\n        words.find(word => maxCounts(word) == maxCounts(maxKey))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj2s2re95.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj2s2re95.scala:25:18 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        words.find(\e[36mword\e[0m => maxCounts(word)\
    \ == maxCounts(maxKey))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = new mutable.HashMap[String, Int]()\n    \
    \    words.foreach(word => {\n            val count = (word, counts.getOrElse(word,\
    \ 0) + 1)\n            counts.put(word, count)\n        })\n        var max =\
    \ \"\"\n        for(entry <- counts.entrySet().sortWith(_.count < _.count))\n\
    \            max = entry.get._1 if (entry.get._2 > counts.getOrElse(max, 0))\n\
    \        counts.getOrElse(max, 0)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp79tv4cnm.scala:22:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            max = entry.get._1 \e[33mif\e[0m (entry.get._2\
    \ > counts.getOrElse(max, \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m              \
    \                 ^^\e[0m\n\e[31m   |\e[0m                               end of\
    \ statement expected but 'if' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp79tv4cnm.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mcounts\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009763
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map{x => x.count('a')}.sortBy(-_)\n\
    \        counts(0)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpav1dtkil.scala:15:44\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcounts\e\
    [0m = words.map{\e[36mx\e[0m => x.count(\e[31m'a'\e[0m)}.sortBy(-_)\n\e[31m\e\
    [31m   |\e[0m                                            ^^^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    (\e[31m'a'\e[0m : Char)\n\
    \e[31m   |\e[0m                                            Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpav1dtkil.scala:16:14\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        counts(\e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:   \
    \ Int\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009764
