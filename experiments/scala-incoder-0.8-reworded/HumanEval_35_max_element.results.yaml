language: scala
name: HumanEval_35_max_element
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxValue = l.head\n        val maxIndices\
    \ = l.zipWithIndex.filter { _._2 > 0 }.map { _._1 }.toSet\n        val result\
    \ = maxIndices.map { i => maxValue(i) }\n        result.max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpdkpr32q1.scala:12:43 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = maxIndices.map\
    \ { \e[36mi\e[0m => maxValue(i) }\n\e[31m\e[31m   |\e[0m                     \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \         \e[33mvalue\e[0m \e[35mmaxValue\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpdkpr32q1.scala:13:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        result.max\n\e[31m\e[31m   |\e[0m           \
    \       ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mDeprecatedDoubleOrdering\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35mmax\e[0m\
    \ in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659978507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max: Long = -1\n        var i: Long =\
    \ 0\n        for (x <- l) {\n            if (x > max) {\n                max =\
    \ x\n            }\n            i += 1\n        }\n        max\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val m = l.map(_.asInstanceOf[Long]).max\n\
    \        m match {\n            case Some(i) => i\n            case None => -1l.asInstanceOf[Long]\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbvsozlvy.scala:12:28\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m Some(i)\
    \ => i\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e\
    [0m                            Found:    (i : Any)\n\e[31m   |\e[0m          \
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbvsozlvy.scala:13:17 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m            \e[33mcase\e[0m None => -\e[31m1l\e[0m.asInstanceOf[Long]\n\
    \e[31m\e[31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m             \
    \    Found:    None.type\n\e[31m   |\e[0m                 Required: Long\n\e[31m\
    \   |\e[0m                 pattern type is incompatible with expected type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = 0\n        for(x <- l) {\n     \
    \       if(x > max) max = x\n        }\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphfau2hym.scala:12:30\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m(x >\
    \ max) max = x\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e\
    [31m   |\e[0m                              Found:    (x : Long)\n\e[31m   |\e\
    [0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        if (l.isEmpty) 0\n        else {\n       \
    \     var max = l(0)\n            var maxIdx = 0\n            val idx = l.indexOf(0)\n\
    \            while (idx != -1) {\n                if (max < l(idx)) max = l(idx)\n\
    \                maxIdx += 1\n                idx = l.indexOf(max)\n         \
    \   }\n            maxIdx\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmps5ry4i8d.scala:18:20 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                idx = l.indexOf(max)\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Reassignment to val idx\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = 0L\n        var ans = l(0)\n   \
    \     for(i <- 1 until l.size){\n            if(l(i) > max){\n               \
    \ max = l(i)\n                ans = i\n            }\n        }\n        ans\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6l8c6hvw.scala:21)\n\tat Problem.main(tmp6l8c6hvw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var maxValue : Long = -(1000000000l);\n  \
    \      var maxIndex : Int = 0;\n        var maxElement : Long = -1L;\n       \
    \ for (i <- 0 until l.length) {\n            if(l(i) > maxValue) {\n         \
    \       maxValue = l(i)\n                maxIndex = i;\n                maxElement\
    \ = maxValue;\n            }\n        }\n        maxElement\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        if (l.isEmpty) throw new Exception(\"Empty\
    \ list!\")\n        var max = l.head\n        for (e1 <- l.tail) if (e1 > max)\
    \ max = e1\n        return max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val m = scala.collection.mutable.Map(l : _*).maxBy(_._1)\n\
    \        m._1._1\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgf9nwht2.scala:10:45\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mm\e\
    [0m = scala.collection.mutable.Map(l : \e[35m_*\e[0m).maxBy(_._1)\n\e[31m\e[31m\
    \   |\e[0m                                             ^\e[0m\n\e[31m   |\e[0m\
    \                      Found:    (l : List[Long])\n\e[31m   |\e[0m           \
    \           Required: Seq[(Any, Any)] | Array[? <: (Any, Any)]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpgf9nwht2.scala:10:64 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = scala.collection.mutable.Map(l\
    \ : \e[35m_*\e[0m).maxBy(_._1)\n\e[31m\e[31m   |\e[0m                        \
    \                                        ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering\
    \ defined for Any..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \    scala.math.Ordering.ordered[\e[35mAny\e[0m](\n\e[31m   |\e[0m      /* missing\
    \ */summon[scala.math.Ordering.AsComparable[Any]]\n\e[31m   |\e[0m    )\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft((Long.MinValue, Long.MinValue))((maxValue,\
    \ currentValue) => {\n            if (currentValue > maxValue._2) {\n        \
    \        (maxValue._1, currentValue)\n            } else {\n                (currentValue,\
    \ maxValue._2)\n            }\n        })\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgwtp4dom.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        max\n\e[31m\e[31m  \
    \ |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Found:    (max : (Long, Long))\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978509
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l) { (max, elm) =>\n         \
    \   if (max < elm) max else elm\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk7y6gzvu.scala:15)\n\tat Problem.main(tmpk7y6gzvu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        if (l.isEmpty)\n            throw new java.util.NoSuchElementException(\"\
    List is empty\")\n        if (l.size == 1)\n            return l.head\n      \
    \  val max = l.head\n        var nextElement = l.head\n        val listCopy =\
    \ l.filter(_ != max) \n        listCopy.foreach { elem =>\n            if (nextElement\
    \ > elem)\n                nextElement = elem\n        }\n        max = nextElement\n\
    \        listCopy.foreach { elem =>\n            if (elem > max) max = elem\n\
    \        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpme5kvhcm.scala:21:12 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        max = nextElement\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment to val max\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpme5kvhcm.scala:23:32 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (elem > max) max = elem\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Reassignment to val max\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max: Long = l.foldLeft[Long](Long.MinValue)((max,\
    \ v) => (max max > v ? max : v));\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxabyzqe5.scala:10:87 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m: \e[35mLong\e[0m\
    \ = l.foldLeft[\e[35mLong\e[0m](Long.MinValue)((\e[36mmax\e[0m, \e[36mv\e[0m)\
    \ => (max max > v ? max : v));\n\e[31m\e[31m   |\e[0m                        \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                         expression expected but \e\
    [31m:\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxabyzqe5.scala:10:77\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m: \e[35mLong\e[0m = l.foldLeft[\e[35mLong\e[0m](Long.MinValue)((\e\
    [36mmax\e[0m, \e[36mv\e[0m) => (max max > v ? max : v));\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \ ^\e[0m\n\e[31m   |\e[0m                                                    \
    \        Not found: >\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxabyzqe5.scala:10:81\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m: \e[35mLong\e[0m = l.foldLeft[\e[35mLong\e[0m](Long.MinValue)((\e\
    [36mmax\e[0m, \e[36mv\e[0m) => (max max > v ? max : v));\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \     ^\e[0m\n\e[31m   |\e[0m                                                \
    \            Not found: ?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = 0L\n        for(i <- l) {\n    \
    \        if(i < 0) break\n            max = Math.max(max, i)\n        }\n    \
    \    max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp09dvqbpe.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m(i < \e[31m0\e[0m) break\n\e\
    [31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \             Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        if (l.isEmpty) throw new NoSuchElementException(\"\
    empty list\")\n        l.foldRight(l.head){(x, y) => if (x > y) x else y}\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val m = collection.mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (m.contains(x)) m else m.add(x))\n        m max l(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfazeqfml.scala:12:15\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        m max l(\e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m              ^^^^\e[0m\n\e[31m   |\e[0m              Found:\
    \    Long\n\e[31m   |\e[0m              Required: Ordering[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978509
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val result = l.foldLeft((-Long.MaxValue, Long.MinValue))\
    \ { (maxVal, elem) =>\n            if (elem > maxVal._2) {\n                (elem,\
    \ maxVal._1)\n            } else if (elem < maxVal._1) {\n                (maxVal._2,\
    \ elem)\n            } else {\n                (maxVal._2, maxVal._1)\n      \
    \      }\n        }._1\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplj4xhuak.scala:19:5\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978509
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = l(0)\n        for (ele <- l)\n \
    \           if (ele > max)\n                max = ele\n        return max\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0L){ (a, b) => math.max(a, b) }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978510
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0L){ (mx, i) =>\n            if(i>\
    \ mx) i\n            else mx\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n      import scala.math._\n      val m = l.max\n \
    \     l.filter { case e => e > m }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_26pzzsq.scala:12:15\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m      l.filter { \e[33mcase\e\
    [0m e => e > m }\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m      Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e\
    [31m]\e[0m\n\e[31m   |\e[0m      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978510
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft((Long.MaxValue, List[Long]()))((l,\
    \ acc) =>\n            if (acc.head > l.head) acc else (l.head, List (l.head ::\
    \ acc.tail)))\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpao91_c8c.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (acc.head > l.head) acc \e\
    [33melse\e[0m (l.head, List (l.head :: acc.tail)))\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value head is not a\
    \ member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpao91_c8c.scala:11:35\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (acc.head\
    \ > l.head) acc \e[33melse\e[0m (l.head, List (l.head :: acc.tail)))\n\e[31m\e\
    [31m   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e[0m    \
    \                               Found:    (acc : Long)\n\e[31m   |\e[0m      \
    \                             Required: (Long, List[Long])\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpao91_c8c.scala:11:73 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (acc.head > l.head) acc \e\
    [33melse\e[0m (l.head, List (l.head :: acc.tail)))\n\e[31m\e[31m   |\e[0m    \
    \                                                                 ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      value tail is not a member\
    \ of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.head\n        l.tail.foreach(x\
    \ => if (x > max) max = x)\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmptiw0ek9e.scala:11:45 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        l.tail.foreach(\e[36mx\e[0m => \e[33mif\e[0m\
    \ (x > max) max = x)\n\e[31m\e[31m   |\e[0m                                  \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \ Reassignment to val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = mutable.ArrayBuffer.empty[Long]\n\
    \        var max = l.head\n        l.foreach{\n            case i if (i < max)\
    \ => (max = i)\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpazhlgmkj.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mmax\e[0m = l.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax is already defined\
    \ as \e[33mvalue\e[0m \e[35mmax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpazhlgmkj.scala:10:18 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpazhlgmkj.scala:13:40 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m i \e[33mif\e[0m (i < max)\
    \ => (max = i)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Reassignment to val max\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978513
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.max\n        l.find(_ == maxElem).getOrElse(maxElem)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978519
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max_num = Long.MinValue\n        var max_element\
    \ = Long.MinValue\n        for(elem <- l){\n            if(elem > max_num)\n \
    \               max_num = elem\n            if(elem > max_element)\n         \
    \       max_element = elem\n        }\n        max_element\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        if(l.length < 1) l(0)\n        val m = 0l\n\
    \        var mIdx = -1\n        for(i <- 0 until l.length) {\n            val\
    \ n = l(i)\n            if(n > m) {\n                m = n\n                mIdx\
    \ = i\n            }\n        }\n        if(m == 0) mIdx else l(mIdx)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpmylwshbh.scala:16:18 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                m = n\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var maxValue = Long.MinValue\n        for\
    \ (i <- l) {\n            if (maxValue < i) maxValue = i\n        }\n        maxValue\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val list = l.toSet\n        val maxValue:\
    \ Long = list.iterator.max\n        val maxIndex: Int = list.iterator.index\n\
    \        if(maxIndex == 0)\n            maxValue\n        else\n            l.slice(maxIndex\
    \ - 1).max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3zfbgpqx.scala:12:42 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m: \e[35mInt\e\
    [0m = list.iterator.index\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue index is not a member of Iterator[Long] - did you mean\
    \ Iterator[Long].indexOf?\n\e[31m\e[31m-- Error: /tmp/tmp3zfbgpqx.scala:16:19\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \     l.slice(maxIndex - \e[31m1\e[0m).max\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter until of \e[33mmethod\e[0m\
    \ \e[35mslice\e[0m in \e[33mclass\e[0m \e[35mList\e[0m: (from: Int, until: Int):\
    \ List[Long]\n2 errors found\n"
  stdout: ''
  timestamp: 1659978517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val mn = l.min\n        val mx = l.max\n \
    \       val nn = l.length\n        val mf = mx - mn\n        val rr = nn * mf\
    \ / 2\n\n        val a = (rr * mn - nn * rr) / mf + (nn * rr - nn * mn) / mf\n\
    \        val b = mf - (rr * mn - nn * rr) / mf + (nn * rr - nn * mn) / mf\n  \
    \      val c = -(a - b)\n        val d = a + b\n\n        mx + c * Math.sqrt(d)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp20ehr3wz.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        mx + c * Math.sqrt(d)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   Found:    Double\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft((Long.MinValue, 0))((x, y) => if\
    \ (x > y) x else y)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp94dsksn.scala:10:55 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        l.foldLeft((Long.MinValue, \e[31m0\e[0m))((\e\
    [36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x > y) x \e[33melse\e[0m y)\n\e[31m\e\
    [31m   |\e[0m                                                     ^^^\e[0m\n\e\
    [31m   |\e[0mvalue > is not a member of (Long, Int), but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp94dsksn.scala:10:67 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        l.foldLeft((Long.MinValue, \e[31m0\e[0m))((\e\
    [36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x > y) x \e[33melse\e[0m y)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \ Found:    (y : Long)\n\e[31m   |\e[0m                                      \
    \             Required: (Long, Int)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = 0L\n        var maxIndex = 0\n \
    \       l.foreach { elem =>\n            if (elem > max) {\n                max\
    \ = elem\n                maxIndex = l.indexOf(elem)\n            }\n        }\n\
    \        return max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        if (l.isEmpty) 0L\n        else l.max\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var maxElem = -1\n        for(x <- l) {\n\
    \            if(x > maxElem) {\n                maxElem = x\n            }\n \
    \       }\n        maxElem\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg8l8ahid.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                maxElem = x\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (x : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l match {\n            case Nil => 0L\n  \
    \          case h :: t => math.max(h, maxElement(t.map(_)))\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkufcdo83.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m h\
    \ :: t => math.max(h, maxElement(t.map(_)))\n\e[31m\e[31m   |\e[0m           \
    \                                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                             Found:    (Long => Any) => List[Any]\n\e[31m   |\e\
    [0m                                    Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = 0.0\n        var maxElement = -1\n\
    \        var pos = 0\n        var currentMax = 0\n        for(i <- 0 until l.length)\
    \ {\n            val elem = l(i)\n            if(elem > max) {\n             \
    \   maxElement = pos\n                currentMax = elem\n                max =\
    \ elem\n            } else if(elem == max) {\n                if(elem > currentMax)\
    \ {\n                    maxElement = pos\n                    currentMax = elem\n\
    \                }\n            }\n            pos = i + 1\n        }\n      \
    \  if(maxElement == -1) return null\n        return max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpitn8_jr0.scala:18:29\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                currentMax =\
    \ elem\n\e[31m\e[31m   |\e[0m                             ^^^^\e[0m\n\e[31m  \
    \ |\e[0m                             Found:    (elem : Long)\n\e[31m   |\e[0m\
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpitn8_jr0.scala:19:20 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                max = elem\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpitn8_jr0.scala:23:33\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    currentMax\
    \ = elem\n\e[31m\e[31m   |\e[0m                                 ^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Found:    (elem : Long)\n\e[31m\
    \   |\e[0m                                 Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpitn8_jr0.scala:28:36 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m(maxElement == -\e[31m1\e[0m) \e\
    [33mreturn\e[0m \e[31mnull\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                                    Found:\
    \    Null\n\e[31m   |\e[0m                                    Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpitn8_jr0.scala:29:15\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mreturn\e[0m max\n\
    \e[31m\e[31m   |\e[0m               ^^^\e[0m\n\e[31m   |\e[0m               Found:\
    \    (max : Double)\n\e[31m   |\e[0m               Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659978520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = 0L\n        var max = -1L\n    \
    \    val map = new mutable.HashMap[Long, Long]()\n        for(x <- l) {\n    \
    \        val curMax = map.getOrElse(x, 0L)\n            if(curMax > max) {\n \
    \               max = curMax\n            }\n            map.put(x, x + 1)\n \
    \       }\n        if(map.size == l.length) {\n            return map.maxEntry.getValue\n\
    \        } else {\n            return max\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv4uoidqd.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mmax\e[0m = -\e[31m1L\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax is already\
    \ defined as \e[33mvalue\e[0m \e[35mmax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv4uoidqd.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpv4uoidqd.scala:16:20\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                max\
    \ = curMax\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max: Long = l.head\n        var maxIndex\
    \ = 0\n        for (i <- 1 until l.length) {\n            if(l(i) > max) {\n \
    \               max = l(i)\n                maxIndex = i\n            }\n    \
    \    }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpsrhxfa6k.scala:14:20 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                max = l(i)\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l.toLong) { (max, e)\
    \ =>\n          if (e > max) e else max\n        }\n        max\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        if (l.isEmpty)\n            return 0\n   \
    \     else {\n            val max = l(0)\n            l.foreach { e =>\n     \
    \           if (e > max)\n                    max = e\n            }\n       \
    \     max\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp12fzg_hh.scala:16:24 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    max = e\n\e[31m\e[31m   |\e[0m  \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment\
    \ to val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val result = l.foldLeft((0l,0l)) { (a, b)\
    \ => if (a._1 > b._1) (a._1,b._1) else (a._1, b._1) }._1\n        result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp43mvhowb.scala:10:66 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = l.foldLeft((\e\
    [31m0l\e[0m,\e[31m0l\e[0m)) { (\e[36ma\e[0m, \e[36mb\e[0m) => \e[33mif\e[0m (a._1\
    \ > b._1) (a._1,b._1) \e[33melse\e[0m (a._1, b._1) }._1\n\e[31m\e[31m   |\e[0m\
    \                                                                ^^^^\e[0m\n\e\
    [31m   |\e[0m                                        value _1 is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp43mvhowb.scala:10:78\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = l.foldLeft((\e[31m0l\e[0m,\e[31m0l\e[0m)) { (\e[36ma\e[0m, \e\
    [36mb\e[0m) => \e[33mif\e[0m (a._1 > b._1) (a._1,b._1) \e[33melse\e[0m (a._1,\
    \ b._1) }._1\n\e[31m\e[31m   |\e[0m                                          \
    \                                  ^^^^\e[0m\n\e[31m   |\e[0m                \
    \                        value _1 is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp43mvhowb.scala:10:96 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = l.foldLeft((\e\
    [31m0l\e[0m,\e[31m0l\e[0m)) { (\e[36ma\e[0m, \e[36mb\e[0m) => \e[33mif\e[0m (a._1\
    \ > b._1) (a._1,b._1) \e[33melse\e[0m (a._1, b._1) }._1\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                  ^^^^\e[0m\n\e[31m   |\e[0m                                \
    \        value _1 is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0L){\n            (a, b) => (if\
    \ (a < b) a else b)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdkgwv5wy.scala:15)\n\tat Problem.main(tmpdkgwv5wy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        // Write your code here.\n        var max\
    \ = -1\n        var maxValue = -1\n        for(i <- 0 until l.length) {\n    \
    \        val current = l(i)\n            if(current > max) {\n               \
    \ max = current\n                maxValue = i\n            }\n        }\n    \
    \    return max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi3pq2wzt.scala:16:22\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                max = current\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Found:    (current : Long)\n\e[31m   |\e[0m                \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l match {\n            case Nil => 0\n   \
    \         case x :: xs => maxElement(xs) + 1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvsat6oti.scala:17)\n\tat Problem.main(tmpvsat6oti.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max : Long = -1\n        var mid : Long\
    \ = 0\n        l.foreach { elem =>\n            if(elem > mid)\n             \
    \   max = elem\n            else\n                max = mid\n            mid =\
    \ elem\n        }\n        mid\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptaw0hzwi.scala:23)\n\tat Problem.main(tmptaw0hzwi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var m = 0\n        for(i<-l.length-1;i++){\n\
    \            val e = l(i)\n            if(m<e){\n                m = e\n     \
    \       }\n        }\n        m\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpu61c_o1n.scala:11:29 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i<-l.length-\e[31m1\e[0m;i++){\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpu61c_o1n.scala:11:15 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i<-l.length-\e[31m1\e[0m;i++){\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    value foreach is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l.toLong){case (acc, elem) =>\
    \ if (elem > acc) elem else acc}\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var result = l(0)\n        for (i <- 1 until\
    \ l.length){\n            if (l(i) > result) {\n                result = l(i)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val result = mutable.LinkedHashMap()\n   \
    \     l.foreach(l => {\n            if(result.containsKey(l)) result(l) += 1\n\
    \            else result(l) = 1 \n        })\n        val max = result.values.max\n\
    \        result.values.find(_ == max).map(_ => max)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3fb1ip39.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.LinkedHashMap()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val minValue = l.min\n        val maxValue\
    \ = l.max\n        if (minValue == maxValue) {\n            return maxValue\n\
    \        } else {\n            val maxValue = maxValue(l)\n            if (maxValue\
    \ == minValue) {\n                return maxValue\n            } else {\n    \
    \            val maxValueMinusMin = maxValue - minValue\n                l.maxWithPreserving(_\
    \ < minValue)(\n                    maxValueMinusMin, \n                    _\
    \ => minValue\n                )\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcu_hpvvh.scala:15:27 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mmaxValue\e[0m = maxValue(l)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35mmaxValue\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcu_hpvvh.scala:20:18\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                l.maxWithPreserving(_\
    \ < minValue)(\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                value maxWithPreserving is not a member of List[Long]\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = l.head\n        var i : Long = 1\n\
    \        while(i < l.length) {\n            if(max == l.head) {\n            \
    \    max = l.head\n            }\n            else if(max > l.head) {\n      \
    \          max = l.head\n            }\n            else {\n                max\
    \ = l.tail.head\n            }\n            i += 1\n        }\n        max\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhvq0x2x.scala:27)\n\tat Problem.main(tmpnhvq0x2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val result = l.head\n        if (l.tail.isEmpty)\
    \ result\n        else maxElement(l.tail) match {\n            case l2 => {\n\
    \                if (l2 > result) result else l2\n            }\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc8oqavzy.scala:19)\n\tat Problem.main(tmpc8oqavzy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        if (l.isEmpty) throw new IllegalArgumentException(\"\
    List is empty\")\n        l.headOption match {\n            case Some(first) =>\n\
    \                val maxElt = l.removeAt(0)\n                l.foldLeft(first)\
    \ { case (acc, elem) =>\n                    if (elem > maxElt)\n            \
    \            elem\n                    else\n                        acc\n   \
    \             }\n            case None =>\n                throw new IllegalArgumentException(\"\
    List is empty\")\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqcso3h9j.scala:13:31 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mval\e[0m \e[36mmaxElt\e[0m = l.removeAt(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            value removeAt is not a member of List[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978528
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(l.head) {\n            (acc: Long,\
    \ i: Long) =>\n                acc match {\n                    case -1 => i\n\
    \                    case h => if (i > h) i else h\n                }\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        // Your code goes here\n        var maxVal\
    \ = -1L;\n        var maxIdx: Int = 0\n        for (i <- l.indices) {\n      \
    \      if (l(i) > maxVal) {\n                maxVal = l(i)\n                maxIdx\
    \ = i\n            }\n        }\n        l.apply(maxIdx)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l) { (max, x) => if (max < x)\
    \ max else x }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb4n287jg.scala:13)\n\tat Problem.main(tmpb4n287jg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n      val m = scala.math.Ordering[Long](math.Ordering[Long].reverse).max(l)\n\
    \      m\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu63olzij.scala:10:73\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m      \e[33mval\e[0m \e[36mm\e\
    [0m = scala.math.Ordering[\e[35mLong\e[0m](math.Ordering[\e[35mLong\e[0m].reverse).max(l)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \          Found:    (l : List[Long])\n\e[31m   |\e[0m                       \
    \                       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val l = l filter { x => x >= 0 }\n       \
    \ val m = l.max\n        m\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpezi7ihfu.scala:10:16 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l filter { \e[36mx\e\
    [0m => x >= \e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val m  = l.foldLeft((Long.NegativeInfinity,\
    \ l.head)) {\n            case ((e, x), e2) => (if (e > e2) e else e2, x)\n  \
    \      }._1\n        m.max(0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd9tcxz3x.scala:10:34 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m  = l.foldLeft((Long.NegativeInfinity,\
    \ l.head)) {\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value NegativeInfinity is not a member\
    \ of object Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd9tcxz3x.scala:11:40\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e\
    [0m ((e, x), e2) => (\e[33mif\e[0m (e > e2) e \e[33melse\e[0m e2, x)\n\e[31m\e\
    [31m   |\e[0m                                      ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ > is not a member of Any, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd9tcxz3x.scala:13:10 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        m.max(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^\e[0m\n\e[31m   |\e[0mvalue max is not a member of Any, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe\
    \ following import might make progress towards fixing the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m\
    \   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659978531
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = 0\n        for(i <- 0 until l.length)\
    \ {\n            if(l(i) > max) {\n                max = l(i)\n            }\n\
    \        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3_8uk8r.scala:13:23\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                max = l(i)\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Found:    Long\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n      var maxElement : Long = -1\n      for( ele <-\
    \ l ) {\n          if( maxElement < ele ) {\n              maxElement = ele\n\
    \          }\n      }\n      return maxElement\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var maxValue = Long.MinValue\n        var\
    \ maxIndex = -1\n        for (i <- 0 until l.length) {\n            if (l(i) >\
    \ maxValue) {\n                maxValue = l(i)\n                maxIndex = i\n\
    \            }\n        }\n        maxValue\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.toSet.foldRight(l.max)((a, b) => if (a >\
    \ b) a else b)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0L)((x,y) => if (x > y) x else\
    \ y)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var maxElement : Long = -1\n        var maxIndex\
    \ = 0\n        for ( i <- l.indices.reverse ) {\n            if ( maxElement <\
    \ l(i) ) { maxElement = l(i) ; maxIndex = i }\n        }\n        maxIndex\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm01bi66h.scala:18)\n\tat Problem.main(tmpm01bi66h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max : Long = -1\n        l.foreach { x\
    \ => \n            if (x > max) {\n                max = x\n            }\n  \
    \      }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        // use hashMap to store count\n        //\
    \ use var instead of val for maxCount\n        var maxCount = 0\n        var maxElement\
    \ = Long.MinValue\n        var elementHashMap = new scala.collection.mutable.HashMap[Long,\
    \ Int]\n        l foreach {x => elementHashMap(x)+=1}\n        elementHashMap.foreach{case\
    \ (x,y) => if(y>maxCount) maxElement = x ; maxCount = y}\n        return maxElement\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: 1\n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat scala.Function1.apply$mcIJ$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcIJ$sp$(Function1.scala:69)\n\tat scala.collection.AbstractMap.apply$mcIJ$sp(Map.scala:405)\n\
    \tat Problem$.maxElement$$anonfun$1(tmpuevkp035.scala:15)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat Problem$.maxElement(tmpuevkp035.scala:15)\n\
    \tat Problem$.main(tmpuevkp035.scala:20)\n\tat Problem.main(tmpuevkp035.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.to"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        def max(a: Long, b: Long) : Long = if (a >\
    \ b) a else b\n        def min(a: Long, b: Long) : Long = if (a < b) a else b\n\
    \        val m = l.toArray\n        val n = l.toArray\n        val l = (m + n)\
    \ / 2\n        for ((i, j) <- l.zipWithIndex) yield {\n            val tmp = max(m(j),\
    \ n(i))\n            m(j) = tmp\n            n(i) = tmp\n        }\n        l.toArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphrmusyj_.scala:14:17 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = (m + n) / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m           \
    \      Recursive \e[33mvalue\e[0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l){ (acc, x) => if (x\
    \ > acc) x else acc }\n        l.filter(_ == max).last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = 0L\n        var maxIndex = 0\n \
    \       for (i <- l if i > max) {\n            max = i\n            maxIndex =\
    \ l.indexOf(i)\n        }\n        maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8y4iaw1d.scala:19)\n\tat Problem.main(tmp8y4iaw1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft((l, l))((acc, item) => {\n    \
    \        if (acc._2 < item._2)\n                (acc, item)\n            else\
    \ (item)\n        })._2\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkzq9a7a1.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (acc._2 < item._2)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member\
    \ of List[Long], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkzq9a7a1.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (acc._2 < item._2)\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               value _2 is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpkzq9a7a1.scala:12:17 --------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m                (acc, item)\n\e[31m\e[31m   |\e[0m                 ^^^\e\
    [0m\n\e[31m   |\e[0m                 Found:    (acc : (List[Long], List[Long]))\n\
    \e[31m   |\e[0m                 Required: List[Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpkzq9a7a1.scala:12:22 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                (acc, item)\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                      Found:  \
    \  (item : Long)\n\e[31m   |\e[0m                      Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkzq9a7a1.scala:13:18\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33melse\e[0m (item)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^\e[0m\n\e[31m   |\e[0m            \
    \      Found:    (item : Long)\n\e[31m   |\e[0m                  Required: (List[Long],\
    \ List[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = -999999999999L\n        var maxIndex\
    \ = 0\n        for (i <- l until 0){\n            if (max == -999999999999L ||\
    \ max < i) {\n                max = i\n                maxIndex = i\n        \
    \    }\n        }\n        maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwhpn18dv.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <- l until \e[31m0\e[0m){\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m       value\
    \ until is not a member of List[Long] - did you mean l.unzip?\n1 error found\n"
  stdout: ''
  timestamp: 1659978535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        if (l.isEmpty) 0\n        else l.foldLeft(0l.toLong)((x,y)\
    \ => if (y > x) y else x)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n      val maximum = l.foldLeft(0l){ (max,elem) =>\
    \ if(elem > max) elem else max }\n      maximum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = 0L\n        for (elem <- l) {\n\
    \            if (elem > max)\n                max = elem\n        }\n        max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpxge4bzhs.scala:13:20 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                max = elem\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val l1 = l.toList\n        var max = 0L\n\
    \        var index = 0\n        while (l1.length > 0) {\n            var j = l1.head\n\
    \            var k = 0\n            var i = index\n            while ((k < index)\
    \ && (j < l1.last)) {\n                if (k > i) max = j\n                k +=\
    \ 1\n                j += 1\n                i += 1\n            }\n         \
    \   if (k < index) max = j\n            if (max < l1.last) max = l1.last\n   \
    \         l1 = l1.tail\n            index += 1\n        }\n        max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp235o8iv1.scala:25:15 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            l1 = l1.tail\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val l1\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l match {\n            case Nil => 0L\n  \
    \          case x::Nil => x\n            case x :: xs => if (x < xs) x else maxElement(xs)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpn_1mzzs7.scala:13:34 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m x :: xs => \e[33mif\e[0m\
    \ (x < xs) x \e[33melse\e[0m maxElement(xs)\n\e[31m\e[31m   |\e[0m           \
    \                     ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m<\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\e\
    [31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\e[31m  \
    \ |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x: Short): Boolean\n\e[31m   |\e\
    [0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments ((xs : List[Long]))\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        if (l.isEmpty) throw new RuntimeException(\"\
    Empty list\")\n        l.foldLeft[Long](0l) { (max, elm) =>\n            val newMax\
    \ = elm.max(max)\n            if (newMax > max) max else newMax\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphdqazuoa.scala:17)\n\tat Problem.main(tmphdqazuoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978541
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var maxElem = -1l\n        l.foreach(elem\
    \ => if (elem > maxElem) maxElem = elem)\n        return maxElem\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978540
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = Long.MinValue\n        var maxIndex\
    \ = -1\n        for ((e, i) <- l.zipWithIndex) {\n            if (e > max) {\n\
    \                max = e\n                maxIndex = i\n            }\n      \
    \  }\n        return l(maxIndex)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978541
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val m = l.foldLeft(-Long.MaxValue){case (maxElem,\
    \ x) => if (x > maxElem) x else maxElem}\n        m\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = scala.math.max(l.tail.map(x => x))\n\
    \        l.find(x => x == max)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmppgwpxi1k.scala:10:29 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = scala.math.max(l.tail.map(\e\
    [36mx\e[0m => x))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e\
    [0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e\
    [31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\
    \e[31m   |\e[0mmatch arguments (List[Long])\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppgwpxi1k.scala:11:14 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        l.find(\e[36mx\e[0m => x == max)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Option[Long]\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = 0L\n        var max = l.head\n \
    \       for (i <- l.tail) {\n            if (max < i) {\n                max =\
    \ i\n            }\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph1fbetda.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mmax\e[0m = l.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax is already defined\
    \ as \e[33mvariable\e[0m \e[35mmax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l.toLong) { (max, elem) => if\
    \ (elem > max) elem else max }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978541
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, x) =>\n \
    \           if (x > max) x else max\n        }\n        max }\n    // Returns\
    \ True if there is any integer in the list greater than or equal to the given\
    \ integer.\n    // >>> greaterThanOrEqualToElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong), 10l.toLong))\n    // True\n    // >>> greaterThanOrEqualToElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong), 2l.toLong))\n    // False\n    def greaterThanOrEqualToElement(l\
    \ : List[Long], n : Long) : Boolean = {\n        val num = l.contains( n )\n \
    \       if (num) {\n            val maxEle = maxElement(l)\n            if (maxEle\
    \ >= n)\n                true\n            else false\n        }\n        else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val r = l.max\n        if (l.isEmpty) r\n\
    \        else r\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var largest = l.head\n        for (x <- l.reverse)\
    \ {\n            if (x > largest) {\n                largest = x\n           \
    \ }\n        }\n        return largest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(l.head)((x,y) => (if (y.compareTo(x)\
    \ == 1) y else x))\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978544
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0L){\n            (max, cur) =>\n\
    \                if (max < cur)\n                    cur\n                else\n\
    \                    max\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(Long.MinValue) (_ < _) ? _ : _\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpn0_szdy7.scala:10:44 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        l.foldLeft(Long.MinValue) (_ < _) ? _ : _\n\e\
    [31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$3 of expanded function:\n\e[31m   |\e\
    [0m   _$3 => l.foldLeft(Long.MinValue)((_$1, _$2) => _$1 < _$2) ? _$3:.\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpn0_szdy7.scala:10:35 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        l.foldLeft(Long.MinValue) (_ < _) ? _ : _\n\e\
    [31m\e[31m   |\e[0m                                   ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   Found:    Boolean\n\e[31m   |\e[0m     \
    \                              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l match {\n            case Nil => 0l\n  \
    \          case head :: tail => if (head > tail.max)\n                       \
    \        head \n                           else tail.max\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978545
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n      val maxElem = l.foldLeft((Long.MinValue, Long.MinValue))(\
    \ ((maxElem, curMax) => if (maxElem < curMax) maxElem else curMax) )\n      maxElem._2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4uf8dtfp.scala:10:98 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m      \e[33mval\e[0m \e[36mmaxElem\e[0m = l.foldLeft((Long.MinValue,\
    \ Long.MinValue))( ((\e[36mmaxElem\e[0m, \e[36mcurMax\e[0m) => \e[33mif\e[0m (maxElem\
    \ < curMax) maxElem \e[33melse\e[0m curMax) )\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of (Long, Long),\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp4uf8dtfp.scala:10:121 -------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m      \e[33mval\e[0m \e[36mmaxElem\e[0m = l.foldLeft((Long.MinValue,\
    \ Long.MinValue))( ((\e[36mmaxElem\e[0m, \e[36mcurMax\e[0m) => \e[33mif\e[0m (maxElem\
    \ < curMax) maxElem \e[33melse\e[0m curMax) )\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                                    ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                                   Found:    (\e[1m\e[31mcurMax\e[0m\e[1m\e[31m\
    \ \e[0m\e[1m\e[31m:\e[0m Long)\n\e[31m   |\e[0m                              \
    \                 Required: (\e[1m\e[32mLong\e[0m\e[1m\e[32m,\e[0m Long)\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l.toLong){(x,y) =>\n\
    \            y > x ? y : x\n        }\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxhs57bn4.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            y > x ? y : \e[35mx\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                      \
    \  Not found: type x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxhs57bn4.scala:11:18\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            y > x ? y : \e\
    [35mx\e[0m\n\e[31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m   \
    \             value ? is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659978544
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max : Long = -1\n        for (i <- 0 until\
    \ l.length) {\n            if (l(i) > max) {\n                max = l(i)\n   \
    \         }\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978545
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val m = l.reduceLeftOption(_>_)\n        m\
    \ match {\n            case None => -1l\n            case Some(x) => x\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv525fo53.scala:10:35\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mm\e\
    [0m = l.reduceLeftOption(_>_)\n\e[31m\e[31m   |\e[0m                         \
    \          ^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    Boolean\n\e[31m   |\e[0m                                   Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978544
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val sorted = l.sorted\n        val max = sorted.last\n\
    \        val index = sorted.indexWhere(max => max > 0)\n        sorted.take(index).last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty list\n\tat scala.collection.immutable.Nil$.last(List.scala:665)\n\
    \tat scala.collection.immutable.Nil$.last(List.scala:661)\n\tat Problem$.maxElement(tmpmqeclki5.scala:13)\n\
    \tat Problem$.main(tmpmqeclki5.scala:16)\n\tat Problem.main(tmpmqeclki5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        if (l.isEmpty) return 0\n        val max =\
    \ l(0)\n        for (i <- l.indices) {\n            if (l(i) > max) max = l(i)\n\
    \        }\n        return max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmphp5k9gcf.scala:13:32 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (l(i) > max) max = l(i)\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Reassignment to val max\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = l(0)\n        var maxPos = 1\n \
    \       for (i <- 1 to l.size) {\n            if (l(i) > max) {\n            \
    \    max = l(i)\n                maxPos = i\n            }\n        }\n      \
    \  max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.maxElement$$anonfun$1(tmpio08fd3q.scala:13)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.maxElement(tmpio08fd3q.scala:17)\n\
    \tat Problem$.main(tmpio08fd3q.scala:21)\n\tat Problem.main(tmpio08fd3q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft((Long.MinValue, Long.MaxValue))\
    \ {\n        case ((a, b), x) => (if (a > x) a else x, if (b < x) b else x)\n\
    \        }._2\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5zrh119m.scala:15)\n\tat Problem.main(tmp5zrh119m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.head\n        l.tail.foreach {\
    \ x =>\n            if (x > max)\n                max = x\n        }\n       \
    \ max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp5jat8z0n.scala:13:20 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                max = x\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val max\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978544
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = -1L\n        for (v <- l)\n    \
    \      if (v > max)\n            max = v\n        return max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(l.head){ (max, e) =>\
    \ if (e > max) e else max }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978550
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n       l.map(_.asInstanceOf[Long]).foldLeft(0l.toLong){(acc,\
    \ x) => if (x > acc) x else acc}\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978551
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        if (l.isEmpty) throw new NoSuchElementException(\"\
    Empty list\")\n        var max : Long = -1L\n        var current = 0L\n      \
    \  for (v <- l)\n            if (v > max)\n                max = v\n         \
    \   else\n                if (v == current)\n                    current = v\n\
    \                else\n                    return max\n        return max\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpupcfe6ff.scala:25)\n\tat Problem.main(tmpupcfe6ff.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978552
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l)( (maxElem, curElem)\
    \ => if (curElem > maxElem) maxElem else curElem )\n        max\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0tdkwsyo.scala:14)\n\tat Problem.main(tmp0tdkwsyo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978550
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max : Long = l.head\n        for(i<-l.tail\
    \ if i>max) max = i\n        max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978552
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxValue = l.iterator.max\n        l.find(l\
    \ => l == maxValue).getOrElse {\n            l.headOption.getOrElse(0L)\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = -1L\n        var maxIndex = -1\n\
    \        var l = l.reverse\n        for (i <- 0 until l.length) {\n          \
    \  if (l(i) > max)\n            {\n                max = l(i)\n              \
    \  maxIndex = i\n            }\n        }\n        if (max == -1L) -1L\n     \
    \   else\n        {\n            max\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgj681tb1.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36ml\e[0m = l.reverse\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvariable\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978549
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0L)((max,e)=>if(e>max) e else max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.sortBy(_.reverse).last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1bbj876s.scala:10:19 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        l.sortBy(_.reverse).last\n\e[31m\e[31m   |\e\
    [0m                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value reverse\
    \ is not a member of Long\n\e[31m\e[31m-- Error: /tmp/tmp1bbj876s.scala:10:27\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m10 |\e[0m       \
    \ l.sortBy(_.reverse).last\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mInt\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659978552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = -math.MaxLong\n        l.foreach{\
    \ e =>\n            if (e > max) {\n                max = e\n            }\n \
    \       }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppnq95dcm.scala:10:24 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mmax\e[0m = -math.MaxLong\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                value MaxLong is not a member of math\n1 error found\n"
  stdout: ''
  timestamp: 1659978552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var m = 0\n        var max = 0\n        for\
    \ (x <- l) {\n            m = math.max(x, m)\n        }\n        return math.max(m,\
    \ max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpil40j5qy.scala:13:25\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            m = math.max(x, m)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (x : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val mList = l.toSet\n        mList.foldLeft((0l,\
    \ 0l))((acc, x) => {\n            val currentMax = acc.getOrElse(x, 0l)\n    \
    \        if(x > currentMax) {\n                (x, currentMax)\n            }\
    \ else if(x < currentMax) {\n                (currentMax, x)\n            } else\
    \ {\n                acc\n            }\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxblh1vs8.scala:12:33 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mcurrentMax\e[0m = acc.getOrElse(x,\
    \ \e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value getOrElse is not a member of\
    \ (Long, Long)\n1 error found\n"
  stdout: ''
  timestamp: 1659978553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft((l.headOption.getOrElse(0l), l))\
    \ {\n            case((acc: Long, x: Long), i: Long) => if (acc < i) (x, acc)\
    \ else (i, acc)}._2._1\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0lx4idvk.scala:11:68\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m((acc:\
    \ Long, x: Long), i: Long) => \e[33mif\e[0m (acc < i) (x, acc) \e[33melse\e[0m\
    \ (i, acc)}._2._1\n\e[31m\e[31m   |\e[0m                                     \
    \                               ^^^\e[0m\n\e[31m   |\e[0m                    \
    \                              Found:    (acc : Long)\n\e[31m   |\e[0m       \
    \                                           Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0lx4idvk.scala:11:82 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m((acc: Long, x: Long), i:\
    \ Long) => \e[33mif\e[0m (acc < i) (x, acc) \e[33melse\e[0m (i, acc)}._2._1\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                           \
    \                       Found:    (acc : Long)\n\e[31m   |\e[0m              \
    \                                    Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxL = 0\n        val maxElem = 0\n  \
    \      l.foreach{ elem =>\n            if (elem > maxL) {\n                maxElem\
    \ = elem\n                maxL = elem\n            }\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6dmnf8cp.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                maxElem = elem\n\
    \e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      Found:    (elem : Long)\n\e[31m   |\e[0m              \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6dmnf8cp.scala:15:23 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m                maxL = elem\n\e[31m\e[31m   |\e[0m                   \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (elem : Long)\n\
    \e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l(0)\n        for (x <- l) {\n \
    \           if (x > max) max = x\n        }\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpqh3sgo5b.scala:12:29 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (x > max) max = x\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Reassignment to val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978550
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max: Long = 0\n        var maxIndex: Int\
    \ = 0\n        var flag: Boolean = true\n        for(i <- 0 until l.size) {\n\
    \            if(l(i) > max) {\n                max = l(i)\n                maxIndex\
    \ = i\n            }\n        }\n        if(max < 0) {\n            max = 0\n\
    \            flag = false\n        }\n        if(max > 0) {\n            var maxElement:\
    \ Long = 0\n            for(i <- 0 until l.size) {\n                if(l(i) ==\
    \ max) {\n                    maxElement = l(i)\n                }\n         \
    \   }\n            return maxElement\n        } else {\n            return l(0)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxEl = (0 until l.length).reduceLeft(_\
    \ > _ ? _ : -1l)\n        l.zipWithIndex.maxBy(_._1)._1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmplwui9tm8.scala:10:50 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxEl\e[0m = (\e[31m0\e\
    [0m until l.length).reduceLeft(_ > _ ? _ : -\e[31m1l\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                  ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 2\n1 error found\n"
  stdout: ''
  timestamp: 1659978552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var maxElem = -Infinity\n        for (i <-\
    \ l) {\n            if (i > maxElem) {\n                maxElem = i\n        \
    \    }\n        }\n        return maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0jvfhrbm.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mmaxElem\e[0m = -Infinity\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                    Not found: Infinity\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var maxElement = -1.0l\n        var maxIndex\
    \ : Int = -1\n        l.foreach(x => if (x > maxElement) maxElement = x else maxIndex\
    \ = l.indexOf(x)) // find maximum\n        if (maxIndex == -1) return 0l\n   \
    \     else return maxElement\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpn54fhxne.scala:10:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mmaxElement\e[0m = -1.0l\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Invalid literal number\n1 error found\n"
  stdout: ''
  timestamp: 1659978552
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = l.head\n        for (e <- l.tail)\
    \ {\n            if (e > max) max = e\n        }\n        return max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l) { (max, n) => if (n > max)\
    \ n else max }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n       l.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978559
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var maxVal = l.head\n        val maxIndex\
    \ = l.indexOf(0)\n        for (x <- l.tail) {\n            if (x > maxVal) {\n\
    \                maxVal = x\n                maxIndex = l.indexOf(x)\n       \
    \     }\n        }\n        maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp8p5hfa5c.scala:15:25 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                maxIndex = l.indexOf(x)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Reassignment to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        // Write your code here\n        var maxV\
    \ = -1\n        var maxV2 = -1\n        var sum = 0\n        for (i <- l) {\n\
    \            sum += i\n            if (sum > maxV) {\n                maxV = sum\n\
    \                maxV2 = i\n            }\n        }\n        return maxV2\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0u1jit5c.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            sum += i\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0u1jit5c.scala:18:24\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                maxV2 = i\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Found:    (i : Long)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = 0\n        for (elem <- l) {\n \
    \           max = math.max(max, elem)\n        }\n        max\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwhe_u1hu.scala:12:32\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            max = math.max(max,\
    \ elem)\n\e[31m\e[31m   |\e[0m                                ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Found:    (elem : Long)\n\e[31m   |\e\
    [0m                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.toSet.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978562
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val list = l.toList\n        var maxElem =\
    \ list(0)\n        for( elem <- list){\n            if(elem > maxElem){\n    \
    \            maxElem = elem\n            }\n        }\n        maxElem\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978562
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978324
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        def getMax(i: Int, list: List[Long]): Long\
    \ = {\n            if (i == l.length) list(0)\n            else getMax(i + 1,\
    \ list ::: List(l.tail.max))\n        }\n        getMax(0, l)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi3g7r1pn.scala:17)\n\tat Problem.main(tmpi3g7r1pn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978562
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        // Find the largest number in our list and\
    \ save it in a local variable.\n        var largest = l.head\n\n        // Loop\
    \ through the rest of the list and compare each element to the largest.\n    \
    \    for(i <- 1 until l.length) {\n            if(largest < l(i))\n          \
    \      largest = l(i)\n        }\n        // Return largest number.\n        largest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.min\n        val maxElt = l.filter(x\
    \ => x >= max)\n        if(maxElt.isEmpty) max else maxElt.head\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8pwjt5wx.scala:15)\n\tat Problem.main(tmp8pwjt5wx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxValue = l.foldLeft(0l) { (max, x) =>\
    \ if (max > x) max else x }\n        val maxElement = l.indexWhere(x => x == maxValue)\
    \ match { case Some(i) => i }\n        maxElement\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprq2ve4ax.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        maxElement\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (maxElement\
    \ : Any)\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val arr = l.toArray\n        val max = arr(0)\n\
    \        arr.foreach { x =>\n            if (x > max)\n                max = x\n\
    \        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp2h98eevv.scala:14:20 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                max = x\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val max\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft((0l, 1l)) {\n            case ((maxValue,\
    \ maxIndex), (nextValue, nextIndex)) =>\n                if(nextValue >= maxValue)\
    \ maxValue -> nextIndex\n                else maxIndex -> maxValue\n        }._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuuih_xnc.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mif\e[0m(nextValue >= maxValue)\
    \ maxValue -> nextIndex\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue >= is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpuuih_xnc.scala:12:54 --------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m                \e[33mif\e[0m(nextValue >= maxValue) maxValue\
    \ -> nextIndex\n\e[31m\e[31m   |\e[0m                                        \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \              Found:    (nextIndex : Any)\n\e[31m   |\e[0m                  \
    \                           Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        if (l.isEmpty) 0\n        else max(l)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpx3cm22ku.scala:11:13 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m max(l)\n\e[31m\e[31m   |\e[0m\
    \             ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((l : List[Long]))\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978559
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val m = l.min\n        val n = l.max\n   \
    \     l.reverse.foreach(i => if (i < m || i > n) println(s\"$i\") )\n        val\
    \ r = l.reverse.head\n        val m = l.min\n        val n = l.max\n        l.reverse.foreach(i\
    \ => if (i < m || i > n) println(s\"$i\") )\n        val r = l.reverse.head\n\
    \        val m = l.min\n        val n = l.max\n        l.reverse.foreach(i =>\
    \ if (i < m || i > n) println(s\"$i\") )\n        val r = l.reverse.head\n   \
    \     r\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzfoiuv_o.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.min\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzfoiuv_o.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = l.max\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as\
    \ \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzfoiuv_o.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = l.reverse.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is\
    \ already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzfoiuv_o.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = l.min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzfoiuv_o.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = l.max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzfoiuv_o.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mr\e[0m ="
  stdout: ''
  timestamp: 1659978560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = -999999999\n        val max2 = -999999999\n\
    \        for (i <- 0 until l.length) {\n            if (l(i) > max) {\n      \
    \          max2 = max\n                max = l(i)\n            } else if (l(i)\
    \ == max) {\n                max2 = l(i)\n            }\n        }\n        if\
    \ (max2 == max) {\n            max else max2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp96x1rdnu.scala:21:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            max \e[33melse\e[0m max2\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                end of statement\
    \ expected but 'else' found\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp96x1rdnu.scala:14:21\
    \ -----------------------------\e[0m\e[0m\n\e[31m14 |\e[0m                max2\
    \ = max\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val max2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp96x1rdnu.scala:15:23 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m                max = l(i)\n\e[31m\e[31m   |\e[0m        \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\
    \e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp96x1rdnu.scala:17:24 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                max2 = l(i)\n\e[31m\e[31m   |\e[0m  \
    \                     ^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    Long\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp96x1rdnu.scala:21:12 ----------------\e\
    [0m\e[0m\n\e[33m21 |\e[0m            max \e[33melse\e[0m max2\n\e[33m\e[33m  \
    \ |\e[0m            ^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in\
    \ statement position; you may be omitting necessary parentheses\n\e[33m   |\e\
    [0m\n\e[33m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1659978563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var maxElem = l.head\n        var maxIndex\
    \ = 0\n\n        for (i <- 0 until l.size) {\n            if (l(i) > maxElem)\
    \ {\n                maxElem = l(i)\n                maxIndex = i\n          \
    \  }\n        }\n\n        l(maxIndex)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        // Your code here\n        val max = l(0)\n\
    \        for (i <- l.indices) {\n            if (l(i) > max) {\n             \
    \   max = l(i)\n            }\n        }\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpybw6adej.scala:14:20 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                max = l(i)\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978559
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_.compareTo(_)\
    \ < 0) //\n        val l3 = l2.foldLeft(0l) { (r, i) => if (i == l2.length) r\
    \ else (r + i.toLong, l2.indexOf(i)) }\n        l3(l3.toSeq)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl6n2p80b.scala:12:72\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml3\e\
    [0m = l2.foldLeft(\e[31m0l\e[0m) { (\e[36mr\e[0m, \e[36mi\e[0m) => \e[33mif\e\
    [0m (i == l2.length) r \e[33melse\e[0m (r + i.toLong, l2.indexOf(i)) }\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                                  Found:    \e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e[0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m    \
    \                                               Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpl6n2p80b.scala:13:8 ------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        l3(l3.toSeq)\n\e[31m\e[31m   |\e[0m        ^^\e\
    [0m\n\e[31m   |\e[0m        \e[33mvalue\e[0m \e[35ml3\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl6n2p80b.scala:13:14\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        l3(l3.toSeq)\n\e\
    [31m\e[31m   |\e[0m           ^^^^^^^^\e[0m\n\e[31m   |\e[0m           value toSeq\
    \ is not a member of Long - did you mean l3.toInt?\n3 errors found\n"
  stdout: ''
  timestamp: 1659978564
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = Long.MinValue\n        for (x <-\
    \ l) {\n            if (max < x) max = x\n        }\n        max\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978565
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978324
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(l.head){ (max, e)\
    \ =>\n            if (max < e) {\n                e\n            } else {\n  \
    \              max\n            }\n        }\n        return maxElem\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978565
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = l(0)\n        for (x <- l)\n   \
    \         if (x > max)\n                max = x\n        return max\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978566
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = Long.MinValue // Initialize max\
    \ with minimum possible value\n        for (aElem <- l) {\n            if (aElem\
    \ > max) {\n                max = aElem\n            }\n        }\n        max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxValue = l(0)\n        l.foreach { n\
    \ =>\n            if (n < maxValue) maxValue = n\n        }\n        maxValue\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdoqzbibz.scala:12:39 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (n < maxValue) maxValue = n\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                              Reassignment to val maxValue\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft((Long.MinValue, Long.MaxValue))\
    \ { (max, cur) => if (cur > max._1) (cur, max) else (max, cur) }._1\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt6i_wwtw.scala:10:91\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        l.foldLeft((Long.MinValue,\
    \ Long.MaxValue)) { (\e[36mmax\e[0m, \e[36mcur\e[0m) => \e[33mif\e[0m (cur > max._1)\
    \ (cur, max) \e[33melse\e[0m (max, cur) }._1\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \     ^^^\e[0m\n\e[31m   |\e[0m                                          Found:\
    \    (max : (Long, Long))\n\e[31m   |\e[0m                                   \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt6i_wwtw.scala:10:102\
    \ -------------------\e[0m\e[0m\n\e[31m10 |\e[0m        l.foldLeft((Long.MinValue,\
    \ Long.MaxValue)) { (\e[36mmax\e[0m, \e[36mcur\e[0m) => \e[33mif\e[0m (cur > max._1)\
    \ (cur, max) \e[33melse\e[0m (max, cur) }._1\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \                ^^^\e[0m\n\e[31m   |\e[0m                                   \
    \       Found:    (max : (Long, Long))\n\e[31m   |\e[0m                      \
    \                    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l)((max, current) =>\n\
    \            if (current > max) current else max);\n        max.asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = l(0)\n        var max = l(0)\n \
    \       for (i <- 1 until l.length) {\n            if (l(i) > max) {\n       \
    \         max = l(i)\n            }\n        }\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpklejvrl8.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mmax\e[0m = l(\e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax is already\
    \ defined as \e[33mvariable\e[0m \e[35mmax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659978566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var maxValue = -1\n        for(value <- l){\n\
    \            if(value > maxValue){\n                maxValue = value\n       \
    \     }\n        }\n        return maxValue\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6a_yona7.scala:13:27\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                maxValue = value\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Found:    (value : Long)\n\e[31m   |\e[0m          \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = -1000\n        var maxIndex : Int\
    \ = 0\n        for (i <- 0 until l.length) {\n            if (l(i) > max) {\n\
    \                max = l(i)\n                maxIndex = i\n            }\n   \
    \     }\n        return l.get(maxIndex)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0sj_2lhp.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                max = l(i)\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Found:    Long\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0sj_2lhp.scala:18:17\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mreturn\e[0m\
    \ l.get(maxIndex)\n\e[31m\e[31m   |\e[0m               ^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue get is not a member of List[Long], but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659978570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l) { (acc,e) => if (acc > e) acc\
    \ else e }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.min\n\n        l.map { elem\
    \ =>\n            if (elem > maxElem)\n                maxElem = elem\n      \
    \      elem\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp6kh_xmph.scala:14:24 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                maxElem = elem\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxElem\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max: Long = -9223372036854775808L;\n \
    \       val maxIndex = 0L;\n        for (i<- l until (l.length -1)) {\n      \
    \      if (max < l(i))\n                max = l(i);\n            if (max >= 0)\n\
    \                maxIndex = i;\n        }\n        return l(maxIndex)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvz05hbw6.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i<- l until (l.length -\e[31m1\e\
    [0m)) {\n\e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \      value until is not a member of List[Long] - did you mean l.unzip?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpvz05hbw6.scala:18:17 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mreturn\e[0m l(maxIndex)\n\e[31m\e[31m \
    \  |\e[0m                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:\
    \    (maxIndex : Long)\n\e[31m   |\e[0m                 Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val mL = new mutable.LinkedList[Long]()\n\
    \        for (i<-l.length-1;i>=0;i--)\n            if (l(i) > mL.last) mL.mlast\
    \ = mL.get(i)\n            else if (l(i) < mL.last) mL.set(i, mL.last)\n     \
    \       else mL.set(i, mL.last)\n        mL.toList.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8umhnbw1.scala:11:31 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i<-l.length-\e[31m1\e[0m;i>=\e\
    [31m0\e[0m;i--)\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e\
    [31m   |\e[0m                               '<-' expected, but ';' found\n\e[31m\e\
    [31m-- [E032] Syntax Error: /tmp/tmp8umhnbw1.scala:11:35 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i<-l.length-\e[31m1\e[0m;i>=\e\
    [31m0\e[0m;i--)\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\
    \e[31m   |\e[0m                                   pattern expected\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8umhnbw1.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmL\e[0m = \e[33mnew\e[0m\
    \ mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8umhnbw1.scala:11:16\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i<-l.length-\e\
    [31m1\e[0m;i>=\e[31m0\e[0m;i--)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value foreach is not a member of Int\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        if (l.isEmpty) 0\n        else {\n       \
    \     val max = l.head\n            var maxId = l.indexOf(max)\n            for\
    \ (i <- 1 until l.length) {\n                if (l(i) > max) {\n             \
    \       max = l(i)\n                    maxId = i\n                }\n       \
    \     }\n            maxId\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp3802m1m1.scala:16:24 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    max = l(i)\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment\
    \ to val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.iterator.max\n        max = if\
    \ (max < 0L) 0L else max\n        max = if (max < 0L) 0L else max\n        max\
    \ = if (max < 0L) 0L else max\n        max = if (max < 0L) 0L else max\n     \
    \   max = if (max < 0L) 0L else max\n        max = if (max < 0L) 0L else max\n\
    \        max = if (max < 0L) 0L else max\n        max = if (max < 0L) 0L else\
    \ max\n        max = if (max < 0L) 0L else max\n        max = if (max < 0L) 0L\
    \ else max\n        max = if (max < 0L) 0L else max\n        max = if (max < 0L)\
    \ 0L else max\n        max = if (max < 0L) 0L else max\n        max = if (max\
    \ < 0L) 0L else max\n        max = if (max < 0L) 0L else max\n        max = if\
    \ (max < 0L) 0L else max\n        max = if (max < 0L) 0L else max\n        max\
    \ = if (max < 0L) 0L else max\n        max = if (max < 0L) 0L else max\n     \
    \   max = if (max < 0L) 0L else max\n        max = if (max < 0L) 0L else max\n\
    \        max = if (max < 0L) 0L else max\n        max = if (max < 0L) 0L else\
    \ max\n        max = if (max < 0L) 0L else max\n        max = if (max < 0L) 0L\
    \ else max\n        max = if (max < 0L) 0L else max\n        max = if (max < 0L)\
    \ 0L else max\n        max = if (max < 0L) 0L else max\n        max = if (max\
    \ < 0L) 0L else max\n        max = if (max < 0L) 0L else max\n        max = if\
    \ (max < 0L) 0L else max\n        max = if (max < 0L) 0L else max\n        max\
    \ = if (max < 0L) 0L else max\n        max = if (max < 0L) 0L else max\n     \
    \   max = if (max < 0L) 0L else max\n        max = if (max < 0L) 0L else max\n\
    \        max = if (max < 0L) 0L else max\n        max = if (max < 0L) 0L else\
    \ max\n        max = if (max < 0L) 0L else \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9t7i2ckt.scala:49:35 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        max = \e[33mif\e[0m (max < \e[31m0L\e[0m) \e\
    [31m0L\e[0m \e[33melse\e[0m \n\e[31m\e[31m   |\e[0m                          \
    \         ^\e[0m\n\e[31m   |\e[0m                                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp9t7i2ckt.scala:11:12 -----------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        max = \e[33mif\e[0m (max < \e[31m0L\e[0m) \e[31m0L\e[0m \e[33melse\e\
    [0m max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Reassignment to val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp9t7i2ckt.scala:12:12 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        max = \e[33mif\e[0m (max < \e[31m0L\e[0m) \e\
    [31m0L\e[0m \e[33melse\e[0m max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val max\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp9t7i2ckt.scala:13:12 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        max = \e[33mif\e[0m (max < \e[31m0L\e[0m) \e\
    [31m0L\e[0m \e[33melse\e[0m max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val max\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp9t7i2ckt.scala:14:12 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        max = \e[33mif\e[0m (max < \e[31m0L\e[0m) \e\
    [31m0L\e[0m \e[33melse\e[0m max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val max\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp9t7i2ckt.scala:15:12 -----------------------------\e\
    [0"
  stdout: ''
  timestamp: 1659978570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val s = l.size\n        if (s <= 0)\n    \
    \        return 0\n        val min = l.head\n        val max = l.last\n      \
    \  for (i <- 0 until s-1)\n            min = min(i, l)\n        for (i <- 0 until\
    \ s-1)\n            max = max(max, l(i))\n        min\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmptwmu5kpy.scala:16:18 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            min = min(i, l)\n\e[31m\e[31m   |\e[0m  \
    \                ^^^\e[0m\n\e[31m   |\e[0m                  \e[33mvalue\e[0m \e\
    [35mmin\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E050]\
    \ Type Error: /tmp/tmptwmu5kpy.scala:18:18 -----------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            max = max(max, l(i))\n\e[31m\e[31m   |\e[0m  \
    \                ^^^\e[0m\n\e[31m   |\e[0m                  \e[33mvalue\e[0m \e\
    [35mmax\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.max\n        if (maxElem ==\
    \ -1L) -1L else maxElem\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = 0L\n        for (i <- l) {\n   \
    \         if (i > max) {\n                max = i\n            }\n        }\n\
    \        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max_ele = l max { case (x: Long, y: Long)\
    \ => if (x > y) x else y }\n        max_ele\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp90dsqbpo.scala:10:68\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmax_ele\e\
    [0m = l max { \e[33mcase\e[0m (x: \e[35mLong\e[0m, y: \e[35mLong\e[0m) => \e[33mif\e\
    [0m (x > y) x \e[33melse\e[0m y }\n\e[31m\e[31m   |\e[0m                     \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                              Found:    (x : Long)\n\e[31m  \
    \ |\e[0m                                                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp90dsqbpo.scala:10:75\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmax_ele\e\
    [0m = l max { \e[33mcase\e[0m (x: \e[35mLong\e[0m, y: \e[35mLong\e[0m) => \e[33mif\e\
    [0m (x > y) x \e[33melse\e[0m y }\n\e[31m\e[31m   |\e[0m                     \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                                    Found:    (y : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = -999999999999999999L\n        l\
    \ foreach { e => if (e > max) max = e }\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpu0vga2c5.scala:11:42 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        l foreach { \e[36me\e[0m => \e[33mif\e[0m (e\
    \ > max) max = e }\n\e[31m\e[31m   |\e[0m                                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                      Reassignment\
    \ to val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = scala.math.max(l)\n        if\
    \ (maxElem == -1L) -1L\n        else maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmplw7zhx9d.scala:10:33 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxElem\e[0m = scala.math.max(l)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((l : List[Long]))\n1 error found\n"
  stdout: ''
  timestamp: 1659978571
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max: Long = l.max\n        if (max > 0)\
    \ max else -1\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val r = mutable.ListBuffer.empty[Long]\n \
    \       l.foreach{x => r.append(x)}\n        val max = r.reduce(math.max(_,_))\n\
    \        r.clear()\n        max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcetjafim.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldRight(l.head)((l,v) => if(v > l) v else\
    \ l)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft((Long.MaxValue,-1)) ((n,x) => if(x>n)\
    \ x else n)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpxmmo90ec.scala:10:53 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        l.foldLeft((Long.MaxValue,-\e[31m1\e[0m)) ((\e\
    [36mn\e[0m,\e[36mx\e[0m) => \e[33mif\e[0m(x>n) x \e[33melse\e[0m n)\n\e[31m\e\
    [31m   |\e[0m                                                    ^^\e[0m\n\e[31m\
    \   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m>\e[0m\
    \ in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\
    \e[31m   |\e[0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m\
    \   |\e[0m (x: Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e\
    [0mmatch arguments ((n : (Long, Int)))\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxmmo90ec.scala:10:57 --------------------\e[0m\e[0m\n\e[31m10 |\e[0m\
    \        l.foldLeft((Long.MaxValue,-\e[31m1\e[0m)) ((\e[36mn\e[0m,\e[36mx\e[0m)\
    \ => \e[33mif\e[0m(x>n) x \e[33melse\e[0m n)\n\e[31m\e[31m   |\e[0m          \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                             Found:    (x : Long)\n\e[31m   |\e\
    [0m                                                   Required: (Long, Int)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978575
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val m = l(0)\n        val result = l.foldLeft(m.toLong){\
    \ (a, e) => if (a > e) a else e }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978578
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = l(0)\n        var temp : Long =\
    \ -1\n        for (elem <- l) {\n            if (elem > max) {\n             \
    \   max = elem\n            }\n        }\n        println(\"max element: \"+max)\n\
    \        return max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: 'max element: 3

    max element: 124

    '
  timestamp: 1659978578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft( l.head ){ case (max,\
    \ number) => max > number ? max : number}\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmgl1o687.scala:10:83 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = l.foldLeft( l.head\
    \ ){ \e[33mcase\e[0m (max, number) => max > number ? max : \e[35mnumber\e[0m}\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                           ^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                             Not found: type number\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpmgl1o687.scala:10:75 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = l.foldLeft( l.head\
    \ ){ \e[33mcase\e[0m (max, number) => max > number ? max : \e[35mnumber\e[0m}\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \       value ? is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659978577
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val mx = l.foldLeft(0l.toLong) { (acc, a)\
    \ => if (a > acc) a else acc }\n        mx\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978579
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = l(0)\n        for (xs <- l) {\n\
    \            if (xs > max) {\n                max = xs\n            }\n      \
    \  }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val result = mutable.TreeSet[Long]()\n   \
    \     l.foreach(e => result += e)\n        result.headOption.getOrElse(l.max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdn3knwas.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.TreeSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978576
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = 0L\n        for (x <- l)\n     \
    \       if (x > max)\n                max = x\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978580
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.toStream.max\n        max.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = 0\n        var maxElem = null\n\
    \        for (elem <- l) {\n            if (elem > max) {\n                max\
    \ = elem\n                maxElem = elem\n            } else if (elem == max)\
    \ {\n                maxElem = elem\n            }\n        }\n        return\
    \ maxElem\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx75wy2fb.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                max = elem\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Found:    (elem : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx75wy2fb.scala:15:26\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                maxElem = elem\n\
    \e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      Found:    (elem : Long)\n\e[31m   |\e[0m              \
    \            Required: Null\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpx75wy2fb.scala:17:26 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m                maxElem = elem\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                          Found:    (elem\
    \ : Long)\n\e[31m   |\e[0m                          Required: Null\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx75wy2fb.scala:20:15 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mreturn\e[0m maxElem\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    (maxElem\
    \ : Null)\n\e[31m   |\e[0m               Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        if(l.isEmpty) throw new Exception(\"Empty\
    \ list\")\n        if(l.length == 1) l(0)\n        else {\n            var max\
    \ = l.head\n            var mid : Long = max\n            for((i, el) <- l.splitAt(l.size))\
    \ {\n                if(el > mid) max = el\n                else mid = el\n  \
    \          }\n            mid\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj29gourb.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mfor\e[0m((i, el) <- l.splitAt(l.size))\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value withFilter is not a member of (List[Long], List[Long])\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.map(_.toString).sorted.last.trim\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpomg5resm.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        l.map(_.toString).sorted.last.trim\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    String\n\e[31m   |\e[0m        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978580
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = 0L\n        val ms = l.iterator\n\
    \        while (max < l.last){\n            if (ms.hasNext){\n               \
    \ max += ms.next\n            }\n        }\n        if (max < 0L){\n         \
    \   max = l.last\n        }\n        return max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6pj7fc65.scala:24)\n\tat Problem.main(tmp6pj7fc65.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l(0)\n        val max_index = -1\n\
    \        for (x <- l) if (max < x) max_index = l.indexOf(x)\n        if (max_index\
    \ != -1) {\n            val max_value = l(max_index)\n            l.updated(max_index,\
    \ max_value)\n            max\n        }\n        else l.last\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpd_v6mth3.scala:12:44 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (x <- l) \e[33mif\e[0m (max <\
    \ x) max_index = l.indexOf(x)\n\e[31m\e[31m   |\e[0m                         \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \             Reassignment to val max_index\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978577
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val result = l.foldLeft(0l) {\n          \
    \  (result, element) =>\n                if (element > result) element else result\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        if (l.isEmpty) throw new Exception(\"Invalid\
    \ list provided\")\n        val max = l.foldLeft(0L)( (a,b) => if (b > a) b else\
    \ a )\n        l.foldLeft(0L)( (a,b) => if (b > max) b else max )\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = 0.0\n        val indexMax = 0\n\
    \        val indexMin = -1\n        l.foreach { elem =>\n            if (elem\
    \ > max) {\n                max = elem\n                indexMax = l.indexOf(elem)\n\
    \            }\n            if (elem < min) {\n                min = elem\n  \
    \              indexMin = l.indexOf(elem)\n            }\n        }\n        if\
    \ (min == max) indexMax\n        else if (min < max) indexMax\n        else indexMin\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpz1p5m15l.scala:15:20 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                max = elem\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpz1p5m15l.scala:16:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                indexMax\
    \ = l.indexOf(elem)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val indexMax\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpz1p5m15l.scala:18:21 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (elem < min) {\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m<\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\e\
    [31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\e[31m  \
    \ |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x: Short): Boolean\n\e[31m   |\e\
    [0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments ((Int, Int) => Int)\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz1p5m15l.scala:19:22 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                min = elem\n\e[31m\e[31m   |\e[0m   \
    \                   ^^^^\e[0m\n\e[31m   |\e[0m                      Found:   \
    \ (elem : Long)\n\e[31m   |\e[0m                      Required: (Int, Int) =>\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpz1p5m15l.scala:20:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                indexMin\
    \ = l.indexOf(elem)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val indexMin\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with"
  stdout: ''
  timestamp: 1659978581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max_elem = l.foldLeft(Long.MinValue)(\n\
    \            (acc, elem) => elem > acc ? elem : acc)\n        max_elem\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0j86say4.scala:11:47 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            (\e[36macc\e[0m, \e[36melem\e[0m) => elem\
    \ > acc ? elem : \e[35macc\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                         ^^^\e[0m\n\e[31m   |\e[0m                          \
    \                     Not found: type acc\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp0j86say4.scala:11:38 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            (\e[36macc\e[0m, \e[36melem\e[0m) => elem > acc\
    \ ? elem : \e[35macc\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                                  value ? is\
    \ not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659978582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val it = l.iterator\n        var max = it.next()\n\
    \        while (it.hasNext) {\n            max = if (max < it.next) max else it.next\n\
    \        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq941vrec.scala:18)\n\tat Problem.main(tmpq941vrec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978584
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n      l.foldLeft(0l)((max, num) => if(num > max) num\
    \ else max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = -999999999999999999999999999999L\n\
    \        var index = 0\n        for (element <- l) {\n            if( max < element\
    \ ) {\n                max = element\n                index = element\n      \
    \      }\n        }\n        l(index)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0ku_4mbz.scala:10:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mmax\e[0m = -\e[31m999999999999999999999999999999L\e\
    [0m\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m         \
    \          number too large\n\e[31m\e[31m-- Error: /tmp/tmp0ku_4mbz.scala:11:8\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m11 |\e[0m      \
    \  \e[33mvar\e[0m \e[36mindex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^\e[0m\n\e[31m   |\e[0m        end of statement expected but 'var' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ku_4mbz.scala:25:0 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected,\
    \ but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ku_4mbz.scala:11:21\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mindex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m \
    \  |\e[0m                     Found:    Unit\n\e[31m   |\e[0m                \
    \     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ku_4mbz.scala:12:24\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (element\
    \ <- l) {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m\
    \                        Not found: l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp0ku_4mbz.scala:18:8 -------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        l(index)\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e\
    [31m   |\e[0m        Not found: l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0ku_4mbz.scala:18:10 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        l(index)\n\e[31m\e[31m   |\e[0m          ^^^^^\e[0m\n\e[31m   |\e[0m\
    \          Not found: index\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not"
  stdout: ''
  timestamp: 1659978583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = 0\n        var maxElement = l(0)\n\
    \        l.foreach {\n        case x =>\n            if(x > max) {\n         \
    \       max = x\n                maxElement = x\n            }\n        }\n  \
    \      maxElement\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa8l_fss9.scala:15:22\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                max = x\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (x : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = -sys.Int.MaxValue\n        for (i\
    \ <- l) {\n            if (i > max) {\n                max = i\n            }\n\
    \        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqcc94hrv.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mmax\e[0m = -sys.Int.MaxValue\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           value Int is not a member of sys\n1 error found\n"
  stdout: ''
  timestamp: 1659978584
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l.toLong)((a, b) => {\n      \
    \      if (a > b) a else b\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978585
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(l.max)((x, y) => if (x > y) x else\
    \ y)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var m = 0\n        var max = -1\n        for\
    \ (i <- l.length) {\n            val n = l.slice(i).max\n            if (n > max)\
    \ {\n                max = n\n                m = i\n            }\n        }\n\
    \        if (max > 0) l.apply(m)\n        else 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmdlzi5w8.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <- l.length) {\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ foreach is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659978585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(Int.MinValue)(\n            (f,\
    \ s) => if (f < s) f else s\n        )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaw5huyx0.scala:11:40\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            (\e[36mf\e[0m, \e\
    [36ms\e[0m) => \e[33mif\e[0m (f < s) f \e[33melse\e[0m s\n\e[31m\e[31m   |\e[0m\
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                           Found:    (s : Long)\n\e[31m   |\e[0m            \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978585
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max = 0L\n        for(i <- l.indices)\
    \ {\n            if(max < l(i)) {\n                max = l(i)\n            }\n\
    \        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        if (l.isEmpty) return 0\n        var max =\
    \ 0\n        var max = l.head\n        l.tail.foreach(el => {\n            if(el\
    \ > max) max = el\n        })\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg49jey2o.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mmax\e[0m = l.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax is already defined\
    \ as \e[33mvariable\e[0m \e[35mmax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg49jey2o.scala:14:31 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(el > max) max = el\n\e[31m\e\
    [31m   |\e[0m                               ^^\e[0m\n\e[31m   |\e[0m         \
    \                      Found:    (el : Long @uncheckedVariance)\n\e[31m   |\e\
    [0m                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978585
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n      var max = l.head\n      for (i <- l.tail) {\n\
    \        if (i > max)\n          max = i\n      }\n      max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (acc, cur) => if\
    \ (cur > acc) cur else acc }\n        return max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        var max_element = Long.MinValue\n        for(i\
    \ <- l.indices) {\n            if(l(i) > max_element) {\n                max_element\
    \ = l(i)\n            }\n        }\n        max_element\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.sortWith(_ < _)\n        maxElem.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
