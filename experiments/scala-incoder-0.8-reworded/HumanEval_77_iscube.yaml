name: HumanEval_77_iscube
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes an integer a and returns true \n    // if this\
  \ ingeger is a cube of some integer number.\n    // Note: you may assume the input\
  \ is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n \
  \   // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n\
  \    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n\
  \    // >>> iscube((180l))\n    // (false)\n    def iscube(a : Long) : Boolean =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
  \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n  \
  \  assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n  \
  \  assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n   \
  \ assert(iscube((1729l)) == (false));\n    }\n\n}\n"
completions: ["        // Write code here\n        if (a == 1l) \n        || (a ==\
    \ 3l) \n        || (a == 5l) \n        || (a == 7l) \n        || (a == 9l) \n\
    \        || (a == 11l) \n        || (a == 13l) \n        || (a == 15l) \n    \
    \    || (a == 17l) \n        || (a == 19l) \n        || (a == 21l) \n        ||\
    \ (a == 23l) \n        || (a == 25l) \n        || (a == 27l) \n        || (a ==\
    \ 29l) \n        || (a == 31l) \n        || (a == 33l) \n        || (a == 35l)\
    \ \n        || (a == 37l) \n        || (a == 39l) \n        || (a == 41l) \n \
    \       || (a == 43l) \n        || (a == 45l) \n        || (a == 47l) \n     \
    \   || (a == 49l) \n        || (a == 51l) \n        || (a == 53l) \n        ||\
    \ (a == 55l) \n        || (a == 57l) \n        || (a == 59l) \n        || (a ==\
    \ 61l) \n        || (a == 63l) \n        || (a == 65l) \n        || (a == 67l)\
    \ \n        || (a == 69l) \n        || (a == 71l) \n        || (a == 73l) \n \
    \       || (a == 75l) \n        || (a == 77l) \n        || (a == 79l) \n     \
    \   || (a == 81l) \n        || (a == 83l) \n        || (a == 85l) \n        ||\
    \ (a == 87l) \n        || (a == 89l) \n        || (a == 91l) \n        || (a ==\
    \ 93l) \n        || (a == 95l) \n        || (a == 97l) \n        || (a == 99l)\
    \ \n        || (a == 101l) \n        || (a == 103l) \n        || (a == 105l) \n\
    \        || (a == 107l) \n        || (a == 109l) \n        || (a == 111l) \n \
    \       || (a == 113l) \n        || (a == 115l) \n        || (a == 117l) \n  \
    \      || (a == 119l) \n        || (a == 121l) \n        || (a == 123l) \n   \
    \     || (a == 125l) \n        || (a == 127l) \n        || (a == 129l) \n    \
    \    || (a == 131l) \n        || (a == 133l) \n        || (a == 135l) \n     \
    \   || (a == 137l) \n        || (a == 139l) \n        || (a == 141l) \n      \
    \  || (a == 143l) \n", "        val num = a.toLong\n        val result = 1l /\
    \ math.pow(num, 3)\n        if(num == result) true\n        else false", "   \
    \     val cube = (3l*3l*3l)\n        val cube3 = cube*cube*cube\n        return\
    \ ((a*a > cube3) && (a*a < cube3+cube))", "        if (a == 0) {\n           \
    \ return true\n        }\n        if (a < 0){\n            return false\n    \
    \    }\n        if (a % 1 != 0 || a == 0){\n            return false\n       \
    \ }\n        if (a%3 == 0) {\n            return true\n        }\n        if (a%6\
    \ == 0) {\n            return true\n        }\n        if (a%24 == 0) {\n    \
    \        return true\n        }\n        if (a%120 == 0) {\n            return\
    \ true\n        }\n        return false", '        // TODO: Write code here',
  '        if(a==0) true else false', "        var isCube = True\n        var isCubeCount\
    \ = 0\n        while (a > 0) {\n            if ((a%2) == 0) {\n              \
    \  if ((a / 2) == 0) {\n                    isCube = True\n                } else\
    \ {\n                    isCube = False\n                }\n            } else\
    \ {\n                if ((a / 2) == 0) {\n                    isCube = False\n\
    \                }\n            }\n            a -= 1\n            isCubeCount\
    \ += 1\n        }\n        return isCube", "        val cube = a.toString.length.toLong\n\
    \        val square = a.toString.length.toLong * a.toString.length.toLong\n  \
    \      if(cube == square)\n            true\n        else\n            false",
  "        if(a<=0l) return false\n        if(Math.abs(a)%2==0) return true\n    \
    \    return isCube(a/Math.pow(2, a))", "        val cube = (3l) ** (2l)\n    \
    \    val cube3 = (3l) ** (3l)\n        val cube5 = (5l) ** (3l)\n        a >=\
    \ cube && a <= cube3 && a >= cube5 || a >= cube3 && a <= cube5", '        ', " \
    \       val cubed=a**3\n        val count1=a.toInt\n        val count2=count1.toInt\n\
    \        count1>=3&&count2>=1&&cubed==count1**3", "        if (a > 0 ) {\n   \
    \         if (a % 3==0) \n                return true;\n        }\n        return\
    \ false;", "        if(a.mod(3) == 0) true\n        else false", "        if (a\
    \ == 0l)\n            return true\n        if (a < 0)\n            throw new IllegalArgumentException\n\
    \        val b = a * a * a * a\n        return (b == (24 * 4 * a * a))", "   \
    \    if (a == 1l || a == 2l || a == 3l || a == 4l || a == 5l || a == 6l || a ==\
    \ 7l || a == 8l || a == 9l) {\n           true\n       } else {\n           false\n\
    \       }", "        val b = a / 3\n        val c = a / 3\n        val d = a /\
    \ 3\n        if(a <= 0) true\n        else if(b >= 4) return true\n        else\
    \ if(c>=4) return true\n        else return false", '        a % 4 == 0', "  \
    \      if (a == 0)\n            return true\n        else if (a < 0)\n       \
    \     return false\n        val res = a * a * a\n        val r = a / res\n   \
    \     val r = r * r * r\n        if (Math.sqrt(a) == a)\n            return true\n\
    \        val n = Math.sqrt(r)\n        if (n == a * n)\n            return true\n\
    \        val s = (a * a + r) / (n * n)\n        if (s == r)\n            return\
    \ true\n        if (s == 1)\n            return true\n        val e = (r + Math.sqrt(r\
    \ * r - a * n)) / n\n        if (e == r)\n            return true\n        if\
    \ (e == 1)\n            return true\n        val e2 = r + Math.sqrt(r * r - e2\
    \ * e)\n        if (e2 == r)\n            return true\n        if (e2 == 1)\n\
    \            return true\n        if (e == e2)\n            return true\n    \
    \    return false", "        if (a == 0)\n            return true\n        else\
    \ if (a<0l || a>0l)\n            return false\n        else\n            return\
    \ (a % 6==0l || a % 6==4l) && (a % 3==0l || a % 3==3l) && (a % 5==0l || a % 5==5l) ",
  "        if (a < 0l || a > 180l) {\n            false\n        }\n        else {\n\
    \            val list = for {\n                i <- 0 until a\n              \
    \  j <- 0 until a\n            } yield i*i + j*j == a*a\n            list.count(_\
    \ == true) > 0\n        }", '        a % cubes == 0', '        // ...', "    \
    \    val x = a / 4l\n        if (a % 4l == 0)\n            return (true) // a\
    \ cube of a number\n        val y = x / 2l\n        val z = y / 2l\n        if\
    \ (x == y) && (y == z) && (z == a)\n            return true\n        return false",
  "        val b = a * a * a\n        if (b == a)\n            true\n        else\
    \ if (b == 0)\n            false\n        else\n            false", "        //\
    \ Write your code here\n        \n        var cube = 0\n        for (i <- a until\
    \ (a / 3)) {\n            cube *= i\n        }\n        if (a % 3 == 0) return\
    \ true\n        return cube == a", "        var cube : Long = 1\n        while\
    \ (!isPrime(cube) && (a > 0)) {\n            cube = cube * 3\n            a =\
    \ a - 1\n        }\n        return a <= 0", "        val result = true\n     \
    \   val cube = a / 3l\n        if(!cube.equals(0))\n            result = false\n\
    \        return result", "        require(a >= 0l, \"Input value must be non-negative\"\
    )\n        a match {\n            case 0 => true\n            case _ if a >= 1l\
    \ => a match {\n                case 0l => true\n                case _ if a >=\
    \ 2l => a match {\n                    case 0l => true\n                    case\
    \ _ if a >= 3l => a match {\n                        case 0l => true\n       \
    \                 case _ if a >= 4l => a match {\n                           \
    \ case 0l => true\n                            case _ if a >= 5l => a match {\n\
    \                                case 0l => true\n                           \
    \     case _ if a >= 6l => a match {\n                                    case\
    \ 0l => true\n                                    case _ if a >= 7l => a match\
    \ {\n                                        case 0l => true\n               \
    \                         case _ if a >= 8l => a match {\n                   \
    \                         case 0l => true\n                                  \
    \          case _ if a >= 9l => a match {\n                                  \
    \              case 0l => true\n                                             \
    \   case _ if a >= 10l => a match {\n                                        \
    \            case 0l => true\n                                               \
    \     case _ if a >= 11l => a match {\n                                      \
    \                  case 0l => true\n                                         \
    \               case _ if a >= 12l => a match {\n                            \
    \                                case 0l => true\n                           \
    \                                 case _ if a >= 13l => a match {\n          \
    \                                                      case 0l => true\n     \
    \                                                           case _ if a >= 14l\
    \ => a match {\n                                                             \
    \       case 0l => true\n                                                    \
    \                case _ if a >= 15l => a match {\n                           \
    \                                             case 0l => true\n              \
    \                                                          case _ if a >= 16l\
    \ => a match {\n                                                             \
    \               case 0l => true\n                                            \
    \                                case _ if a >= 17l => a match {\n           \
    \                                                                     case 0l\
    \ => true\n                                                                  \
    \              case _ if a >= 18l => a match {\n                             \
    \                                                       case 0l => true\n    \
    \                                                                            \
    \    case _ if a >= 19l => a match {\n                                       \
    \                                                 case 0l => true\n          \
    \                                                                            \
    \  case _ if a >= 20l => a match {\n                                         \
    \                                                   case 0l => true\n        \
    \                                                                            \
    \        case _ if a >= 21l => a match {\n                                   \
    \                                                             case 0l => true\n\
    \                                                                            \
    \                    case _ if a >= 22l => a match {\n                       \
    \                                                                            \
    \ case 0l => true\n                                                          \
    \                                          case _ if a >= 23l => a match {\n \
    \                                                                            \
    \                           case 0l => true\n                                \
    \                                                                        case\
    \ _ if a >= 24l => a match {\n                                               \
    \                                                             case 0l => ", " \
    \       val num = a\n        val x = num * num\n        val y = x * x\n      \
    \  val z = y * y\n        val t = z * z\n        num <= 0", "        val cubes\
    \ = mutable.ListBuffer(1l)\n        while (!cubes.contains(a)) {\n           \
    \ cubes += cubes.head * cubes.head * cubes.head \n            a = a - 1l\n   \
    \     }\n        (cubes.contains(a)) || (!cubes.contains(a))", "        val x\
    \ = a.toString.toInt\n        if (x <= 0) true\n        else if (x > 0) (Math.pow(x,3)\
    \ == (a))\n        else false", "        if(a.toLong == 0) return true\n     \
    \   if(a.toLong == 1) return true\n        val a2 = a * a\n        if(a2.toLong\
    \ == 1) return true\n        val a3 = a2 * a2\n        if(a3.toLong == 1) return\
    \ true\n        val a4 = a3 * a3\n        if(a4.toLong == 1) return true\n   \
    \     val a5 = a4 * a4\n        if(a5.toLong == 1) return true\n        val a6\
    \ = a5 * a5\n        if(a6.toLong == 1) return true\n        val a7 = a6 * a6\n\
    \        if(a7.toLong == 1) return true\n        val a8 = a7 * a7\n        if(a8.toLong\
    \ == 1) return true\n        val a9 = a7 * a8\n        if(a9.toLong == 1) return\
    \ true\n        val a10 = a8 * a8\n        if(a10.toLong == 1) return true\n \
    \       val a11 = a9 * a9\n        if(a11.toLong == 1) return true\n        val\
    \ a12 = a10 * a10\n        if(a12.toLong == 1) return true\n        val a13 =\
    \ a11 * a11\n        if(a13.toLong == 1) return true\n        val a14 = a12 *\
    \ a12\n        if(a14.toLong == 1) return true\n        val a15 = a13 * a13\n\
    \        if(a15.toLong == 1) return true\n        val a16 = a14 * a14\n      \
    \  if(a16.toLong == 1) return true\n        val a17 = a15 * a15\n        if(a17.toLong\
    \ == 1) return true\n        val a18 = a16 * a16\n        if(a18.toLong == 1)\
    \ return true\n        val a19 = a17 * a17\n        if(a19.toLong == 1) return\
    \ true\n        val a20 = a18 * a18\n        if(a20.toLong == 1) return true\n\
    \        val a21 = a19 * a19\n        if(a21.toLong == 1) return true\n      \
    \  val a22 = a20 * a20\n        if(a22.toLong == 1) return true\n        val a23\
    \ = a21 * a21\n        if(a23.toLong == 1) return true\n        val a24 = a22\
    \ * a22\n        if(a24.toLong == 1) return true\n        val a25 = a23 * a23\n\
    \        if(a25.toLong == 1) return true\n        val a26 = a24 * a24\n      \
    \  if(a26.toLong == 1) return true\n        val a27 = a25 * a25\n        if(a27.toLong\
    \ == 1) return true\n        val a28 = a26 * a26\n        if(a", "        var\
    \ b = false\n        var c = a.toInt\n        var d = 1\n        var e = -1\n\
    \        while(c > 0 && !b){\n            if (c == d) b = true\n            d\
    \ = d*2\n            e = e*2\n            c -= 1\n        }\n        return b",
  "        val num = a\n        val cube = 1l\n        var result = true\n       \
    \ while (result && num > 0) {\n            result = num % cube == 0\n        \
    \    num /= cube\n        }\n        result", '        if ((1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*1l*',
  "        // Write your code here.\n        // Solve the problem\n        val x =\
    \ a.toInt\n        if (x % 3L == 0L) true\n        else false", "        var result\
    \ = true\n        if (a < 1) result = false\n        if (a > 180) result = false\n\
    \        if (a % 3) == 0 result = false\n        if (a % 5) == 0 result = false\n\
    \        if (a % 7) == 0 result = false\n        if (a == 0) result = false\n\
    \        if (a == 1) result = false\n        if (a == 2) result = false\n    \
    \    if (a == 3) result = false\n        if (a == 4) result = false\n        if\
    \ (a == 5) result = false\n        if (a == 6) result = false\n        if (a ==\
    \ 7) result = false\n        if (a == 8) result = false\n        if (a == 9) result\
    \ = false\n        if (a == 10) result = false\n        if (a == 11) result =\
    \ false\n        if (a == 12) result = false\n        if (a == 13) result = false\n\
    \        if (a == 14) result = false\n        if (a == 15) result = false\n  \
    \      if (a == 16) result = false\n        if (a == 17) result = false\n    \
    \    if (a == 18) result = false\n        if (a == 19) result = false\n      \
    \  if (a == 20) result = false\n        if (a == 21) result = false\n        if\
    \ (a == 22) result = false\n        if (a == 23) result = false\n        if (a\
    \ == 24) result = false\n        if (a == 25) result = false\n        if (a ==\
    \ 26) result = false\n        if (a == 27) result = false\n        if (a == 28)\
    \ result = false\n        if (a == 29) result = false\n        if (a == 30) result\
    \ = false\n        if (a == 31) result = false\n        if (a == 32) result =\
    \ false\n        if (a == 33) result = false\n        if (a == 34) result = false\n\
    \        if (a == 35) result = false\n        if (a == 36) result = false\n  \
    \      if (a == 37) result = false\n        if (a == 38) result = false\n    \
    \    if (a == 39) result = false\n        if (a == 40) result = false\n      \
    \  if (a == 41) result = false\n        if (a == 42) result = false\n        if\
    \ (a == 43) result = false\n        if (a == 44) result = false\n        if (a\
    \ == 45) result = false\n        if (a == 46) result = false\n        if (a ==\
    \ 47) result = false\n        if (a == 48) result = false\n        if (a == 49)\
    \ result = false\n        if (a == 50) result = false\n        if (a == 51) result\
    \ = false\n        if (a == 52) result = false\n        if (a == 53) result =\
    \ false\n        if (a == 54) result = false\n        if (a == 55) result = false\n\
    \        if (a == 56) result = false\n        if (a == 57) result = false\n  \
    \      if (a == 58) result = false\n        if (a == 59) result = false\n    \
    \    if (a == 60) result = false\n        if (a == 61) result = false\n      \
    \  if (a == 62) result = false\n        if (a == 63) result = false\n        if\
    \ (a == 64) result = false\n        if (a == 65) result = false\n        if (a\
    \ == 66) result = false\n        if (a == 67) result = false\n", "        // Your\
    \ code here\n        true", "        if(a < 1l) false\n        if(a == 0l) true\n\
    \        if(a%1l == 0l) false\n        if(a%2l == 0l) false\n        if(a%3l ==\
    \ 0l) false\n        if(a%4l == 0l) false\n        if(a%5l == 0l) false\n    \
    \    if(a%6l == 0l) false\n        if(a%7l == 0l) false\n        if(a%8l == 0l)\
    \ false\n        if(a%9l == 0l) false\n        if(a%10l == 0l) false\n       \
    \ if(a%11l == 0l) false\n        if(a%12l == 0l) false\n        if(a%13l == 0l)\
    \ false\n        if(a%14l == 0l) false\n        if(a%15l == 0l) false\n      \
    \  if(a%16l == 0l) false\n        if(a%17l == 0l) false\n        if(a%18l == 0l)\
    \ false\n        if(a%19l == 0l) false\n        if(a%20l == 0l) false\n      \
    \  if(a%21l == 0l) false\n        if(a%22l == 0l) false\n        if(a%23l == 0l)\
    \ false\n        if(a%24l == 0l) false\n        if(a%25l == 0l) false\n      \
    \  if(a%26l == 0l) false\n        if(a%27l == 0l) false\n        if(a%28l == 0l)\
    \ false\n        if(a%29l == 0l) false\n        if(a%30l == 0l) false\n      \
    \  if(a%31l == 0l) false\n        if(a%32l == 0l) false\n        if(a%33l == 0l)\
    \ false\n        if(a%34l == 0l) false\n        if(a%35l == 0l) false\n      \
    \  if(a%36l == 0l) false\n        if(a%37l == 0l) false\n        if(a%38l == 0l)\
    \ false\n        if(a%39l == 0l) false\n        if(a%40l == 0l) false\n      \
    \  if(a%41l == 0l) false\n        if(a%42l == 0l) false\n        if(a%43l == 0l)\
    \ false\n        if(a%44l == 0l) false\n        if(a%45l == 0l) false\n      \
    \  if(a%46", "        if (a==0l) true\n        else if ((a<0l) || (a>180)) false\n\
    \        else ((a%180)==0l) && ((a%180)<60l) && ((a%180)>0l) && ((a%180)<180l)\
    \ && ((a%180)>-60l) && ((a%180)<-180l)", "        val l = if (a > 0) a else -1l\n\
    \        var flag = 0\n        for (i = 1l to (l+1) by 1l) {\n            flag\
    \ = flag * i\n        }\n        flag == a", "        if (a <= 0l) false \n  \
    \      else (isCube(a)) ", "        val cube_power = 1l\n        val cube = 1l\n\
    \        a foreach (_ % cube_power != 0)\n        if ( cube_power % a == 0)\n\
    \            return true\n        return false", "        val num = (1l to a).toList\n\
    \        var cube : Long = 1l\n        for(i <- num) {\n            cube *= i\n\
    \        }\n        if(cube == a)\n            true\n        else\n          \
    \  false", "        var n = a\n        while (n > 1) {\n            if (n % 2\
    \ == 0) return false\n            n /= 2\n        }\n        return true", '        (a+a+1l)*(a+a+2l)*(a+a+3l)
    <- (1l*1l*1l) <- (a*a*a)', "        var x =  (a / 3l).toInt\n        while ( x\
    \ <= 0 ){\n            x = (x * (x*6l)).asInstanceOf[Long]\n        }\n      \
    \  (1l).asInstanceOf[Long] == x", "        // Write your code here.\n        if(a\
    \ == 1)\n            return true\n        else if(a < 0)\n            return false\n\
    \        else if(a > 0)\n            return iscube(a-1)\n        else if(a % 3\
    \ == 0)\n            return true\n        else\n            return iscube(a/3)",
  '        a <= 0l', "        val result = a * a * a\n        val result = result\
    \ - a * a * a\n        result < 0", "        val square = math.pow(a, 2l) * math.pow(3l,\
    \ 2l) * math.pow(5l, 2l) * math.pow(7l, 2l) * math.pow(9l, 2l) * math.pow(11l,\
    \ 2l) * math.pow(13l, 2l) * math.pow(15l, 2l) * math.pow(17l, 2l) * math.pow(19l,\
    \ 2l) * math.pow(21l, 2l) * math.pow(23l, 2l) * math.pow(25l, 2l) * math.pow(27l,\
    \ 2l) * math.pow(29l, 2l) * math.pow(31l, 2l) * math.pow(33l, 2l) * math.pow(35l,\
    \ 2l) * math.pow(37l, 2l) * math.pow(39l, 2l) * math.pow(41l, 2l) * math.pow(43l,\
    \ 2l) * math.pow(45l, 2l) * math.pow(47l, 2l) * math.pow(49l, 2l) * math.pow(51l,\
    \ 2l) * math.pow(53l, 2l) * math.pow(55l, 2l) * math.pow(57l, 2l) * math.pow(59l,\
    \ 2l) * math.pow(61l, 2l) * math.pow(63l, 2l) * math.pow(65l, 2l) * math.pow(67l,\
    \ 2l) * math.pow(69l, 2l) * math.pow(71l, 2l) * math.pow(73l, 2l) * math.pow(75l,\
    \ 2l) * math.pow(77l, 2l) * math.pow(79l, 2l) * math.pow(81l, 2l) * math.pow(83l,\
    \ 2l) * math.pow(85l, 2l) * math.pow(87l, 2l) * math.pow(89l, 2l) * math.pow(91l,\
    \ 2l) * math.pow(93l, 2l) * math.pow(95l, 2l) * math.pow(97l, 2l) * math.pow(99l,\
    \ 2l) * math.pow(101l, 2l) * math.pow(103l, 2l) * math.pow(105l, 2l) * math.pow(107l,\
    \ 2l) * math.pow(109l, 2l) * math.pow(111l, 2l) * math.pow(113l, 2l) * math.pow(115l,\
    \ 2l) * math.pow(117l, 2l) * math.pow(119l, 2l) * math.pow(121l, 2l) * math.pow(123l,\
    \ 2l) * math.pow(125l, 2l) * math.pow(127l, 2l)\n        val cuberoot = math.pow(a,\
    \ 3l)\n        return cuberoot == square", "        if (a == 0l) {\n         \
    \   return true\n        }\n        var n = (a / 3l)\n        while (n % 4 ==\
    \ 0) {\n            n /= 4\n        }\n        if (n == 1l) {\n            return\
    \ true\n        }\n        return false", "        var result : Boolean = true\n\
    \        val cube = new scala.collection.mutable.HashMap[Int,Int]()\n        val\
    \ cubemap = scala.collection.mutable.HashMap[Int,Int]()\n        cube.put(1, 1)\n\
    \        cube.put(2, 2)\n        cube.put(3,3)\n        cube.put(4,4)\n      \
    \  cube.put(5,5)\n        cube.put(6,6)\n        cube.put(7,7)\n        cube.put(8,8)\n\
    \        cube.put(9,9)\n        cube.put(10,10)\n        cube.put(11,11)\n   \
    \     cube.put(12,12)\n        cube.put(13,13)\n        cube.put(14,14)\n    \
    \    cube.put(15,15)\n        cube.put(16,16)\n        cube.put(17,17)\n     \
    \   cube.put(18,18)\n        cube.put(19,19)\n        cube.put(20,20)\n      \
    \  cube.put(21,21)\n        cube.put(22,22)\n        cube.put(23,23)\n       \
    \ cube.put(24,24)\n        cube.put(25,25)\n        cube.put(26,26)\n        cube.put(27,27)\n\
    \        cube.put(28,28)\n        cube.put(29,29)\n        cube.put(30,30)\n \
    \       cube.put(31,31)\n        cube.put(32,32)\n        cube.put(33,33)\n  \
    \      cube.put(34,34)\n        cube.put(35,35)\n        cube.put(36,36)\n   \
    \     cube.put(37,37)\n        cube.put(38,38)\n        cube.put(39,39)\n    \
    \    cube.put(40,40)\n        cube.put(41,41)\n        cube.put(42,42)\n     \
    \   cube.put(43,43)\n        cube.put(44,44)\n        cube.put(45,45)\n      \
    \  cube.put(46,46)\n        cube.put(47,47)\n        cube.put(48,48)\n       \
    \ cube.put(49,49)\n        cube.put(50,50)\n        cube.put(51,51)\n        cube.put(52,52)\n\
    \        cube.put(53,53)\n        cube.put(54,54)\n        cube.put(55,55)\n \
    \       cube.put(56,56)\n        cube.put(57,57)\n        cube.put(58,58)\n  \
    \      cube.put(59,59)\n        cube.put(60,60)\n        ", "        val cubes\
    \ : mutable.Set[Long] = mutable.Set[Long](1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l,\
    \ 10l, 11l, 12l, 13l, 14l, 15l, 16l, 17l, 18l, 19l, 20l, 21l, 22l, 23l, 24l, 25l,\
    \ 26l, 27l, 28l, 29l, 30l, 31l, 32l, 33l, 34l, 35l, 36l, 37l, 38l, 39l, 40l, 41l,\
    \ 42l, 43l, 44l, 45l, 46l, 47l, 48l, 49l, 50l, 51l, 52l, 53l, 54l, 55l, 56l, 57l,\
    \ 58l, 59l, 60l, 61l, 62l, 63l, 64l)\n        val cubeLengths = cubes.size\n \
    \       if (cubeLengths <= a) {\n            cubeLengths\n        } else {\n \
    \           if (cubeLengths - a == 1) {\n                cubes.contains(a)\n \
    \           } else {\n                cubes.subsetOf(a - (cubeLengths - 1))\n\
    \            }\n        }", "        val b: List[Long] = List(a, a+1, a+1, a+2,\
    \ a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val c: List[Long] = List(a,\
    \ a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val d: List[Long]\
    \ = List(a, a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val\
    \ e: List[Long] = List(a, a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n\
    \        val f: List[Long] = List(a, a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5,\
    \ a+5, a+6)\n        val g: List[Long] = List(a, a+1, a+1, a+2, a+2, a+3, a+3,\
    \ a+4, a+4, a+5, a+5, a+6)\n        val h: List[Long] = List(a, a+1, a+1, a+2,\
    \ a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val i: List[Long] = List(a,\
    \ a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val j: List[Long]\
    \ = List(a, a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val\
    \ k: List[Long] = List(a, a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n\
    \        val l: List[Long] = List(a, a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5,\
    \ a+5, a+6)\n        val m: List[Long] = List(a, a+1, a+1, a+2, a+2, a+3, a+3,\
    \ a+4, a+4, a+5, a+5, a+6)\n        val n: List[Long] = List(a, a+1, a+1, a+2,\
    \ a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val o: List[Long] = List(a,\
    \ a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val p: List[Long]\
    \ = List(a, a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n        val\
    \ q: List[Long] = List(a, a+1, a+1, a+2, a+2, a+3, a+3, a+4, a+4, a+5, a+5, a+6)\n\
    \        val r: List[Long] = List(a, a+1, a+1, a+2, a+2, ", "        val m = math.abs(a)\n\
    \        val sq = math.pow(m, 2l)\n        val cu = m * sq\n        val sq2n =\
    \ sq / 2l\n        val c = cu + sq2n\n        val c = c / 3l\n        val r =\
    \ c - sq2n\n        val r = r / 3l\n        val r = r - sq\n        val r = r\
    \ * 4l\n        val r = r * 4l\n        val r = r * 4l\n        val r = r * 4l\n\
    \        val r = r - sq2n\n        val r = r * 4l\n        val r = r * 4l\n  \
    \      val r = r * 4l\n        val r = r * 4l\n        val r = r - sq2n\n    \
    \    val r = r * 4l\n        val r = r * 4l\n        val r = r * 4l\n        val\
    \ r = r * 4l\n        val r = r - sq2n\n        val r = r * 4l\n        val r\
    \ = r * 4l\n        val r = r * 4l\n        val r = r * 4l\n        val r = r\
    \ - sq2n\n        val r = r * 4l\n        val r = r * 4l\n        val r = r *\
    \ 4l\n        val r = r * 4l\n        val r = r - sq2n\n        val r = r * 4l\n\
    \        val r = r * 4l\n        val r = r * 4l\n        val r = r * 4l\n    \
    \    val r = r - sq2n\n        val r = r * 4l\n        val r = r * 4l\n      \
    \  val r = r * 4l\n        val r = r * 4l\n        val r = r - sq2n\n        val\
    \ r = r * 4l\n        val r = r * 4l\n        val r = r * 4l\n        val r =\
    \ r * 4l\n        val r = r - sq2n\n        val r = r * 4l\n        val r = r\
    \ * 4l\n        val r = r * 4l\n        val r = r * 4l\n        val r = r - sq2n\n\
    \        val r = r * 4l\n        val r = r * 4l\n        val r = r * 4l\n    \
    \    val r = r * 4l\n        val r = r - sq2n\n        val r = r * 4l\n      \
    \  val r = r * 4l\n        val r = r * 4l\n        val r = r * 4l\n        val\
    \ r = r - sq2n\n", "        if((a*a*a*a) == (1l*1l*1l*1l)) true\n        else\
    \ false", "        if (a==0l) \n            return true\n        val cube = math.pow(a,3l)*math.pow(a,2l)*math.pow(a,1l)\
    \ \n        if (cube.longValue==a)\n            return true\n        false", " \
    \       val cube = (1l << a).asInstanceOf[Long]\n        val sq = (cube << a).asInstanceOf[Long]\n\
    \        val cub = (cube * cube).asInstanceOf[Long]\n        val cubesq = (cube\
    \ * sq).asInstanceOf[Long]\n        val cubecub = (cube * cub).asInstanceOf[Long]\n\
    \        val cubecube = (cube * cube).asInstanceOf[Long]\n        (cubesq == cube\
    \ && cubecub == cube && cubecube == cube && sq == sq)", "        val square =\
    \ a.toInt*a.toInt\n        val cube = a.toInt*a.toInt*a.toInt\n        cube ==\
    \ square", "        val n = a.toInt\n        (1l) forall(i => (i * i).toInt <=\
    \ n) ", "        var res = true\n        val num = a.toInt\n        var sq = num\
    \ * num\n        var a = sq\n        var b = sq\n        var c = sq\n        var\
    \ d = sq\n        while(b < num){\n            c += a\n            d += b\n  \
    \          if(c <= d){\n                res = false\n                break\n \
    \           }\n            a += 1\n            b += 1\n        }\n        res",
  "      val x = a.remainder\n      if (x == 0) true\n      else if (!ispositive(x)\
    \ || x == 1l) false\n      else iscube(x-1l)", "        val l = a.toLong\n   \
    \     val x = l+1\n        val y = x*x\n        val z = y*y\n        val s = z*z\n\
    \        return (l%x == 0 && l%y == 0 && l%z == 0 && s%l == 0)", '        val
    list = List(1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l, 14l, 15l,
    16l, 17l, 18l, 19l, 20l, 21l, 22l, 23l, 24l, 25l, 26l, 27l, 28l, 29l, 30l, 31l,
    32l, 33l, 34l, 35l, 36l, 37l, 38l, 39l, 40l, 41l, 42l, 43l, 44l, 45l, 46l, 47l,
    48l, 49l, 50l, 51l, 52l, 53l, 54l, 55l, 56l, 57l, 58l, 59l, 60l, 61l, 62l, 63l,
    64l, 65l, 66l, 67l, 68l, 69l, 70l, 71l, 72l, 73l, 74l, 75l, 76l, 77l, 78l, 79l,
    80l, 81l, 82l, 83l, 84l, 85l, 86l, 87l, 88l, 89l, 90l, 91l, 92l, 93l, 94l, 95l,
    96l, 97l, 98l, 99l, 100l, 101l, 102l, 103l, 104l, 105l, 106l, 107l, 108l, 109l,
    110l, 111l, 112l, 113l, 114l, 115l, 116l, 117l, 118l, 119l, 120l, 121l, 122l,
    123l, 124l, 125l, 126l, 127l, 128l, 129l, 130l, 131l, 132l, 133l, 134l, 135l,
    136l, 137l, 138l, 139l, 140l, 141l, 142l, 143l, 144l, 145l, 146l, 147l, 148l,
    149l, 150l, 151l, 152l, 153l, 154l, 155l, 156l, 157l, 158l, 159l, 160l, 161l,
    162l, 163l, 164l, 165l, 166l, 167l, 168l, 169l, 170l, 171l, 172l, 173l, 174l,
    175l, 176l, 177l, 178l, 179l, 180l, 181l, 182l, 183l, 184l, 185l, 186l, 187l,
    188l, 189l, 190l, 191l, 192l, 193l, 194l, 195l, 196l, 197l, 198l, 199l, 200l,
    201l, 202l, 203l, 204l, 205l, 206l, 207l, 208l, 209l, 210l, 211l, 212l, 213l,
    214l, 215l, 216l, 217l, 218l, 219l, 220l, 221l, 222l, 223l, 224l, 225l, 226l,
    227l, 228l, 229l, 230l, 231l, 232l, 233l, 234l, 235l, 236l, 237l, 238l, 239l,
    240l, 241l, 242', "        if (a < 0l) {\n            return false\n        }\n\
    \        val n = a.toInt\n        if (n % 2 == 0 || n % 3 == 0) {\n          \
    \  return true\n        } else {\n            return false\n        }", "    \
    \    if (a == 0l) {\n            return true\n        } else if (a % 4 == 0) {\n\
    \            val t = a / 4\n            if (t % 4 == 0) {\n                if\
    \ (t / 4 == t) {\n                    return true\n                }\n       \
    \     }\n        }\n        return false", "        val m = scala.math.pow(a,\
    \ 3l) \n        if ((1l) % m == 0l) \n            true\n        else \n      \
    \      false", "        val cubes = mutable.HashSet[Long]()\n        for ( i =\
    \ 1; i <= a; i*=i ){\n            if ( a % i == 0 ){\n                cubes.add(i)\n\
    \            }\n        }\n        cubes.contains(a)", '        a.toString.contains("^")',
  "        var n = 0l\n        for (i <- 0 to a.toInt) {\n            if (a.toLong\
    \ / i === 1l) n = i + 1\n        }\n        n <= a.toInt && n % a.toInt == 0l",
  "        val l = scala.math.pow(a, 3.0) - a\n        return l <= 0l", "        val\
    \ isCube:Boolean = \n            if (a < 0) false\n            else {\n      \
    \          var cube = true\n                var x = 1\n                while (x\
    \ <= a) {\n                    if (x % x == 0) {\n                        cube\
    \ = false\n                        break\n                    }\n            \
    \        x = x + 1\n                }\n                if (cube) true else false\n\
    \            }\n        return isCube", "        val l3 = a*a*a\n        if( l3.equals(0l)\
    \ ) true else false", "        a match {\n            case a if a <= 0l && a >\
    \ 0l => false\n            case a if a <= 1l && a> 0l => true\n            case\
    \ a if a <= 4l && a> 0l => true\n            case a if a <= 16l && a> 0l => true\n\
    \            case a if a <= 64l && a> 0l => true\n            case a if a <= 256l\
    \ && a> 0l => true\n            case a if a <= 512l && a> 0l => true\n       \
    \     case a if a <= 1024l && a> 0l => true\n            case _ => false\n   \
    \     }", "        val b = a.toDouble\n        b % b == 0", "        // write\
    \ your function here\n        if (a > 0)\n            isCube(a / 3) && isCube(a\
    \ - a - a)\n        else\n            isCube(a / 3) == 0", "      val n = if (a\
    \ < 0l) 0l else 1l\n      a % n == 0", "        val i = math.floor(a);\n     \
    \   val f = math.floor(a*a);\n        val n = math.floor(a*a * a);\n        val\
    \ s = math.floor(a*a * a*a);\n        val u = math.floor(a*a * a*a*a);\n     \
    \   val l = math.floor(a*a * a*a*a*a);\n        if (i == a && f == a*a && n ==\
    \ a*a*a && s == a*a*a*a && u == a*a*a*a*a && l == a*a*a*a*a*a) {\n           \
    \ return true;\n        } else {\n            return false;\n        }", "   \
    \     var cube:Long = 0\n        // Your code goes here.\n        cube = a\n \
    \       var i = cube\n        while (i>0) {\n            if (i % 3 == 0){\n  \
    \              if (i % 5 == 0){\n                    if (i % 7 == 0){\n      \
    \                  return true\n                    }\n                }\n   \
    \             else {\n                    if (i % 3 == 0){\n                 \
    \       return true\n                    }\n                }\n            }\n\
    \            i /= 5\n        }\n        return false", '        a%1 != 0', " \
    \       // Solution goes here\n        val n = a.toInt\n        if(n <= 1) { return\
    \ false }\n        val l = a / n\n        if(l <= 1) { return false }\n      \
    \  val l = l / n\n        if(l <= 1) { return false }\n        val l = l / n\n\
    \        if(l <= 1) { return false }\n        val l = l / n\n        if(l <= 1)\
    \ { return false }\n        true", '        if (a%1==0) a else false', "     \
    \   val sq = a * a\n        val cube = sq + sq + sq\n        return cube == (a\
    \ * a * a)", '        (a/a%1l==1l) || (a%2l==1l) || (a%6l==1l)', "        if(a\
    \ < -2 || a > 2)\n            false\n        else\n            (3l * a * a * a)\
    \ == (6l * a * a * a)", "        (a >>> 0 == a >>> 1) &&\n        (a >>> 2 ==\
    \ a >>> 3) &&\n        (a >>> 4 == a >>> 5) &&\n        (a >>> 6 == a >>> 7)",
  "        if (a <= 0) return false\n        val b = a * a\n        val c = b * b\n\
    \        val d = c * c\n        if (d == a) return true\n        false", "   \
    \     val x = a\n        if(a <= 0) {\n            return false\n        } else\
    \ {\n            val a = math.pow(3*x, 3)\n            val b = math.pow(3*x, 4)\n\
    \            val c = math.pow(3*x, 5)\n            val d = math.pow(3*x, 6)\n\
    \            return a == b+c && b == c+d && c == d+a\n        }", '        (a
    % 4 == 0 && a % 100 == 0 && a % 400 == 0l) || (a % 8 == 0 && a % 16 == 0 && a
    % 32 == 0)', "        val x = 3 * a * a * a\n        val y = 3 * a * a * a - a\
    \ * a\n        val z = 3 * a * a * a - a * a - a * a\n        if (y == 0) (z ==\
    \ 0)\n        else if (z == 0) (y == 0)\n        else if (x == 0) (y == z)\n \
    \       else (y == z) (x == z)", "        val isCube = new scala.collection.mutable.HashSet[Long]\n\
    \        isCube.add(a)\n        for (i <- 1 to a.toInt) {\n            if (a *\
    \ a == i && (a * i == a)) {\n                isCube.add(a * i)\n            }\n\
    \        }\n        isCube.isEmpty", "        val cubes = Array[Long](1l, 3l,\
    \ 5l, 7l, 9l, 13l, 17l) \n        val cubesSum = cubes.sum\n        val i = (cubes.sum\
    \ / a).toInt\n        val j = a / cubesSum\n        cubesSum % a != 0 && (i ==\
    \ j || i < (cubesSum + j))", "        val n = a.toInt\n        var cube:Boolean\
    \ = true\n        for(i <- 0 to (n+1)) {\n            if(i*n*n != a)\n       \
    \         cube = false\n        }\n        cube", "        if (a == 0l) \n   \
    \         return true\n        else if (a == 1l) \n            return true\n \
    \       else if (a == 2l) \n            return true\n        else if (a == 3l)\
    \ \n            return true\n        else if (a == 4l) \n            return true\n\
    \        else if (a == 5l) \n            return true\n        else if (a == 6l)\
    \ \n            return true\n        else if (a == 7l) \n            return true\n\
    \        else if (a == 8l) \n            return true\n        else if (a == 9l)\
    \ \n            return true\n        else if (a == 10l) \n            return true\n\
    \        else if (a == 11l) \n            return true\n        else if (a == 12l)\
    \ \n            return true\n        else if (a == 13l) \n            return true\n\
    \        else if (a == 14l) \n            return true\n        else if (a == 15l)\
    \ \n            return true\n        else if (a == 16l) \n            return true\n\
    \        else if (a == 17l) \n            return true\n        else if (a == 18l)\
    \ \n            return true\n        else if (a == 19l) \n            return true\n\
    \        else if (a == 20l) \n            return true\n        else if (a == 21l)\
    \ \n            return true\n        else if (a == 22l) \n            return true\n\
    \        else if (a == 23l) \n            return true\n        else if (a == 24l)\
    \ \n            return true\n        else if (a == 25l) \n            return true\n\
    \        else if (a == 26l) \n            return true\n        else if (a == 27l)\
    \ \n            return true\n        else if (a == 28l) \n            return true\n\
    \        else if (a == 29l) \n            return true\n        else if (a == 30l)\
    \ \n            return true\n        else if (a == 31l) \n            return true\n\
    \        else if (a == 32l) \n            return true\n        else if (a == 33l)\
    \ \n            return true\n        else if (a == 34l) \n            return true\n\
    \        else if (a == 35l) \n            return true\n        else if (a == 36l)\
    \ \n            return true\n        else if (a == 37l) \n            return true\n\
    \        else if (a == 38l) \n            return true\n        else if (a == 39l)\
    \ \n            return true\n        else if (a == 40l) \n            return true\n\
    \        else if (a == 41l) \n            return true\n        else if (a == 42l)\
    \ \n            return true\n        else if (a == 43l) \n            return true\n\
    \        else if (a == 44l) \n            return true\n        else if (a == 45l)\
    \ \n            return true\n        else if (a == 46l) \n            return true\n\
    \        else if (a == 47l) \n            return true\n        else if (a == 48l)\
    \ \n            return true\n        else if (a == 49l) \n            return true\n\
    \        else if (a == 50l) \n            return true\n        else if (a == 51l)\
    \ \n            return true\n        else if (a == 52l) \n            return true\n\
    \        else if (a == 53l) \n            return true\n        else if (a == 54l)\
    \ \n            return true\n        else if (a == 55l) \n            return true\n\
    \        else if (a == 56l) \n            return true", "        var iscube =\
    \ false\n        var cube = 0\n        for (i <- a to (a to (a to a))) cube =\
    \ i * i * i\n        if cube == a then {\n            iscube = true\n        }\n\
    \        iscube", "        val aLong = math.abs(a)\n        (aLong < 6l) && (aLong\
    \ > 0l) && aLong % 1 == 0", "        val n = a\n        if (n == 0) true\n   \
    \     else if (n % 2 == 0) false\n        else if (n % 3 == 0) false\n       \
    \ else iscube(n - 1l) ", "        if (a == 0) return true\n        if (a == 1l)\
    \ return true\n        if (a == -1l) return true\n        if (a == 2l) return\
    \ true\n        if (a == 3l) return true\n        if (a == 4l) return true\n \
    \       if (a == 6l) return true\n        if (a == 9l) return true\n        if\
    \ (a == 12l) return true\n        if (a == 18l) return true\n        if (a ==\
    \ 27l) return true\n        if (a == 36l) return true\n        if (a == 45l) return\
    \ true\n        if (a == 54l) return true\n        if (a == 63l) return true\n\
    \        if (a == 72l) return true\n        if (a == 81l) return true\n      \
    \  if (a == 90l) return true\n        if (a == 99l) return true\n        if (a\
    \ == 168l) return true\n        if (a == 257l) return true\n        if (a == 349l)\
    \ return true\n        if (a == 430l) return true\n        if (a == 516l) return\
    \ true\n        if (a == 608l) return true\n        if (a == 690l) return true\n\
    \        if (a == 788l) return true\n        if (a == 878l) return true\n    \
    \    if (a == 968l) return true\n        if (a == 955l) return true\n        if\
    \ (a == 945l) return true\n        if (a == 935l) return true\n        if (a ==\
    \ 925l) return true\n        if (a == 925l) return true\n        if (a == 923l)\
    \ return true\n        if (a == 923l) return true\n        if (a == 923l) return\
    \ true\n        if (a == 923l) return true\n        if (a == 923l) return true\n\
    \        if (a == 923l) return true\n        if (a == 923l) return true\n    \
    \    if (a == 923l) return true\n        if (a == 923l) return true\n        if\
    \ (a == 923l) return true\n        if (a == 923l) return true\n        if (a ==\
    \ 923l) return true\n        if (a == 923l) return true\n        if (a == 923l)\
    \ return true\n        if (a == 923l) return true\n        if (a == 923l) return\
    \ true\n        if (a == 923l) return true\n        if (a == 923l) return true\n\
    \        if (a == 923l) return true\n        if (a == 923l) return true\n    \
    \    if (a == 923l) return true\n        if (a == 923l) return true\n        if\
    \ (a == 923l) return true\n        if (a == 923l) return true\n        if (a ==\
    \ 923l) return true\n        if (a == 923l) return true\n        if (a == 923l)\
    \ return true\n        if (a == 923l) return true\n        if (a == 923l) return\
    \ true\n        if (a == 923l) return true\n        if (a == 923l) return true\n\
    \        if (a == 923l) return true\n        if (a == 923l) return true\n", " \
    \       val list = new ListBuffer[Long]\n        for (i = a ; i >= 1 ; i = i /\
    \ 3 ) {\n            list += i\n        }\n        list.length == 1", "      \
    \  if (a == 0) return true\n        if (a == -1) return true\n        if (a ==\
    \ 64) return true\n        if (a < 0)\n            return false\n        if (a\
    \ % 64 != 0) return false\n        var b = a / 64\n        b += 1\n        if\
    \ (a == (b * 64)) return true\n        return false", "        if ((a % 2) ==\
    \ 0) \n        || ((a % 3) == 0) \n        || ((a % 5) == 0)\n        else false",
  "        if (a==0 || a==1) return true\n        if (a==-1) return true\n       \
    \ var b=0\n        for(i <- 0 until a/3) {\n            b += a/3\n           \
    \ if (i%2==0) b += 2\n            a -= b\n        }\n        if (a==0 || a==1)\
    \ return false\n        for(i<- 0 until a/3) {\n            b += a/3\n       \
    \     if (i%2==1) b += 2\n            a -= b\n        }\n        if (a==0 || a==1)\
    \ return false\n        return true", "        var cube = a * a * a\n        var\
    \ count = 0\n        var countCube = 0\n        while (count < 1000) {\n     \
    \       countCube += 1\n            cube = cube / 3\n            count += 1\n\
    \        }\n        return cube == a && (countCube == 1000)", "        val cube\
    \ = a.toString.charAt(1)\n        if(cube == '0')\n            true\n        else\
    \ if(cube == '1')\n            true\n        else if(cube == '2')\n          \
    \  true\n        else if(cube == '3')\n            true\n        else if(cube\
    \ == '4')\n            true\n        else if(cube == '5')\n            true\n\
    \        else if(cube == '6')\n            true\n        else if(cube == '7')\n\
    \            true\n        else if(cube == '8')\n            true\n        else\
    \ if(cube == '9')\n            true\n        else if(cube == 'A')\n          \
    \  true\n        else if(cube == 'B')\n            true\n        else if(cube\
    \ == 'C')\n            true\n        else if(cube == 'D')\n            true\n\
    \        else if(cube == 'E')\n            true\n        else if(cube == 'F')\n\
    \            true\n        else if(cube == 'G')\n            true\n        else\
    \ if(cube == 'H')\n            true\n        else if(cube == 'I')\n          \
    \  true\n        else if(cube == 'J')\n            true\n        else if(cube\
    \ == 'K')\n            true\n        else if(cube == 'L')\n            true\n\
    \        else\n            false", "        val cube = 1l\n        def isCube(n:\
    \ Long): Boolean = {\n            if (n == 1l)\n                return true\n\
    \            else {\n                var i = 2\n                while (i <= n)\
    \ {\n                    if (n % i == 0l && isCube(i + (n * n))) \n          \
    \              return true\n                    i += 1\n                }\n  \
    \              return false\n            }\n        }\n        return isCube(a)",
  "        if(a==-1l){\n            return true\n        }\n        if(a==64l){\n\
    \            return true\n        }\n        if(a==0l){\n            return true\n\
    \        }\n        if(a==180l){\n            return true\n        }\n       \
    \ \n        if(a==1l){\n            return true\n        }\n        if(!iscube(Long.bitCount(a))){\n\
    \            return false\n        }\n        \n        val bits = Long.numberOfLeadingZeros(a)\n\
    \        if(bits>1){\n            return iscube(bits-1l)\n        }\n        return\
    \ true", '        return scala.math.pow(a, 3) == a', "        var x = a\n    \
    \    val square = (x * x).toLong\n        if(x == square)\n            true\n\
    \        else\n            false", "        if (a == 0) {\n            return\
    \ true\n        }\n\n        val l = (a >>> 0) % 9\n        val a0 = a % 9\n \
    \       if ((l == 3) || (l == 6)) {\n            if (a0 == 1)\n              \
    \  return true\n            else if (a0 == 2 || a0 == 3)\n                return\
    \ true\n            else if (a0 == 4 || a0 == 5)\n                return true\n\
    \            else if (a0 == 6 || a0 == 7)\n                return true\n     \
    \       else if (a0 == 8 || a0 == 9)\n                return true\n          \
    \  else return false\n        }\n        else if (l == 1)\n            return\
    \ true\n        else if (l == 2)\n            if (a0 == 1)\n                return\
    \ true\n            else if (a0 == 2 || a0 == 3 || a0 == 4 || a0 == 5 || a0 ==\
    \ 6 || a0 == 7 || a0 == 8 || a0 == 9)\n                return true\n         \
    \   else\n                return false\n        else\n            throw new Exception(\"\
    unknow cube\")", "        if (a < 1) return false\n        if (a == 1) return\
    \ true\n        var count = 0\n        for (x <- 0 until a) { count += (x % 3)\
    \ + (x % 2) + (x % 1) }\n        if (count > 0) return true\n        return false",
  '        // ...', "        val n = a.toInt\n        n%6==0 && n%6==0", "       \
    \ if(a < 0l || a > 0l){\n            return false\n        }\n        val n =\
    \ a\n        if(n % 1 == 1l && n % 2 == 0l && n % 3 = 0l){\n            return\
    \ true\n        }\n        return false", "        if (a > 0) \n            (a%1==0\
    \ && a/1==1) || (a%1==1 && a/1==-1)\n        else\n            (a%1==0 && a/1==-1)\
    \ || (a%1==1 && a/1==1)", "        if (a == 0l) return true\n        else if (a\
    \ < 0l) return false\n        else if (a % 3l == 0l) return true\n        else\
    \ return false", "        if (a < 0l || a > 180l)\n            return false\n\
    \        var result = true\n        for (i = a; i > 1l; i = i / 3l)\n        \
    \    if (i%1l != 0l && i%2l != 0l && i%3l != 0l)\n                result = false\n\
    \        return result", "        for(i <- a until a)\n            if(i*i*i ==\
    \ a)\n                return true\n        return false", "        if(a % 3l*3l\
    \ == 0l) true\n        else false", "        val n = (a.toInt * (a.toInt * a.toInt)).toLong\n\
    \        return n % n == 0", "        val cube = List(0, 8, 27, 64, 125, 248,\
    \ 420, 1025, 2049, 4096, 6143, 8127, 12509, \n            25129, 49152, 100288,\
    \ 200592, 401192, 801674, 1202193, 2403069, 4603609, \n            10161564, 20322272,\
    \ 40445304, 80205647, 120282688, 240317270, 460380930, \n            1016458585,\
    \ 2032435866, 404472644, 802085899, 1202989520, 2403504909, \n            4604029690,\
    \ 10167014847, 2034154076, 4044944374, 802110079, 12032448720, \n            24039746658,\
    \ 4604597336, 101696208720, 20356940720, 40451944343, 8021556690, \n         \
    \   120348949760, 24044149484, 46048515198, 101720948864, 203673440512, 40455443351,\
    \ \n            80219044104, 120364950488, 240477454464, 460508524365, 1017547495327,\
    \ 203729405088, \n            404603433090, 80222539164, 1203894496800, 2404514952448,\
    \ 460537624094, 1017889499200, \n            2038454049520, 4046403314840, 802262391928,\
    \ 12040319505120, 2404865054712, \n            4605614237460, 10181395014752,\
    \ 2039004049728, 4046904327600, 802275392368, \n            12042734915040, 2405074095104,\
    \ 4605744248720, 10184915062528, 2039564050832, \n            4047074336448, 802290392624,\
    \ 12045404965664, 2405324097408, 4605896224832, \n            10188585125052,\
    \ 2040004501744, 4047236335644, 802314393216, 12046834960672, \n            2405994099432,\
    \ 4606046227472, 101920584", "        var isCube = True;\n        var sum = 0\n\
    \        while (a>0) {\n            sum = sum + a % 3;\n            a = math.abs(a\
    \ / 3)\n        }\n        if (sum == 0)\n            isCube = False\n       \
    \ else\n            isCube", "        val cube = a / 8\n        val square = a\
    \ % 8\n        cube == square || cube == 0 || cube == 9 || cube == 16", "    \
    \    val n = math.abs(a)\n        val sq = n * n\n        val cube = sq * sq\n\
    \        if(a < 0 ) {\n            val d = n - 1\n            val m = n / d\n\
    \            if(m == 0 || m == d || m == 2 * d){\n                cube\n     \
    \       } else cube\n        } else {\n            cube\n        }", "       \
    \ var b = a * a;\n        b = b + b;\n        b *= b;\n        b = b + b;\n  \
    \      b = b + b;\n        if(b == a) {\n            return true;\n        }\n\
    \        return false;", "        a match {\n        case 1l => true\n       \
    \ case _  => false\n        case _ => false\n        }", "        val x = a.toInt\n\
    \        // Check to see if x is 0 or not \n        if (x < 0l) false\n      \
    \  else if (x == 0l) true\n        else {\n            // Do the math for the\
    \ cube\n            val y = (x * x).toInt\n            val z = (x * x * x).toInt\n\
    \            if (y == z) true\n            else false\n        }", "        //\
    \ TODO: write your function here\n        (1l * a * a) < (1l * a * a * a)", " \
    \       if (a == 0) return true\n        if (a > 0) a / 3\n        if (a < 0)\
    \ a * 3\n        if (a < 1) false\n        true", "        val n = a.toInt\n \
    \       if (n % 1l == 0) n match {\n            case x if x % 3l == 0 => ((n %\
    \ 2l) == 0) && (iscube((x / 2l) * x + n))\n            case x => (iscube((x /\
    \ 3l) * x + n)) && (iscube((x / 2l) * x + n))\n        }\n        else false",
  "        val cubes = (1l to 9l).map(n => (1l to 9l).map(n => (1l to 9l).map(n =>\
    \ (1l to 9l).map(n => (n*n*n*n*n*n*n).mod(a))))\n        cubes.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(_.exists(",
  "        if (a==0l) {\n            return true\n        }\n        if (a > 0 &&\
    \ a < 64) {\n            return true\n        }\n        if (a%2==0) {\n     \
    \       if (a%3==0) {\n                if (a%4==0) {\n                    if (a%8==0)\
    \ {\n                        return true\n                    }\n            \
    \        if (a%8==3) {\n                        return true\n                \
    \    }\n                }\n            }\n        }\n        return false", " \
    \       // Your code here\n        if((a % 3 == 0) && (a % 4 == 0) && (a % 5 ==\
    \ 0) && (a % 6 == 0)){\n            return (true)\n        }else{\n          \
    \  return (false)\n        }", "        if (a >= (1l*1l*1l*1l) && a <= (1l*1l*1l*1l*2l))\
    \ {\n            return true\n        }\n        if (a >= (1l*1l*1l*2l) && a <=\
    \ (1l*1l*1l*1l*3l)) {\n            return true\n        }\n        if (a >= (1l*1l*2l)\
    \ && a <= (1l*1l*1l*2l*3l)) {\n            return true\n        }\n        if\
    \ (a >= (1l*1l*2l*3l) && a <= (1l*1l*1l*2l*3l*4l)) {\n            return true\n\
    \        }\n        if (a >= (1l*1l*3l) && a <= (1l*1l*1l*3l*4l*5l)) {\n     \
    \       return true\n        }\n        if (a >= (1l*1l*3l*4l) && a <= (1l*1l*1l*3l*4l*5l*6l))\
    \ {\n            return true\n        }\n        if (a >= (1l*2l*3l*4l*5l*6l)\
    \ && a <= (1l*1l*1l*3l*4l*5l*6l*7l)) {\n            return true\n        }\n \
    \       if (a >= (1l*2l*3l*4l*5l*6l*7l) && a <= (1l*1l*1l*3l*4l*5l*6l*7l*8l))\
    \ {\n            return true\n        }\n        if (a >= (1l*2l*3l*4l*5l*6l*7l*8l)\
    \ && a <= (1l*1l*1l*3l*4l*5l*6l*7l*8l*9l)) {\n            return true\n      \
    \  }\n        if (a >= (1l*2l*3l*4l*5l*6l*7l*8l*9l) && a <= (1l*1l*1l*3l*4l*5l*6l*7l*8l*9l*10l))\
    \ {\n            return true\n        }\n        if (a >= (1l*2l*3l*4l*5l*6l*7l*8l*9l*",
  "        val cube = a.toString match {\n            case a if a.isEmpty => false\n\
    \            case a => a.head.toInt * a.tail.toInt match {\n                case\
    \ i if a == 3 * i * i => true\n                case i if a == i * i => true\n\
    \                case i if a == i * i * i => true\n                case _ => false\n\
    \            }\n        }\n        if (cube) true else false", "        // Return\
    \ false if the input is invalid.\n        if (a < -1l || a > 180l) false\n   \
    \     // Return true if the input is valid, and cube of a is a multiple of 3.\n\
    \        (a%3 == 0) && a % 3 == 0", "        var b = 0\n        while(a != 0){\n\
    \            b += a % 10;\n            a /= 10;\n        }\n        if(b == 0){\n\
    \            return true\n        }\n        else{\n            return false\n\
    \        }", '        // TODO: Write your code here', "        // your code here\n\
    \        val n1 = a.toString.toInt\n        val n2 = a * (a * a - a)\n       \
    \ val n3 = a * (a * a * a)\n        val n4 = a * (a * a * a * a)\n        val\
    \ n5 = a * (a * a * a * a * a)\n        val n6 = a * (a * a * a * a * a * a)\n\
    \        val n7 = a * (a * a * a * a * a * a * a)\n        val n8 = a * (a * a\
    \ * a * a * a * a * a * a)\n        val n9 = a * (a * a * a * a * a * a * a *\
    \ a * a)\n        val n10 = a * (a * a * a * a * a * a * a * a * a * a)\n    \
    \    val n11 = a * (a * a * a * a * a * a * a * a * a * a * a)\n        val n12\
    \ = a * (a * a * a * a * a * a * a * a * a * a * a * a)\n        val n13 = a *\
    \ (a * a * a * a * a * a * a * a * a * a * a * a * a)\n        val n14 = a * (a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a)\n        val n15 =\
    \ a * (a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a)\n      \
    \  val n16 = a * (a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a)\n        val n17 = a * (a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a)\n        val n18 = a * (a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a)\n        val n19 = a * (a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a)\n        val n20 = a *\
    \ (a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a)\n\
    \        val n21 = a * (a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a)\n        val n22 = a * (a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a)\n        val n23 = a * (a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a)\n        val n24 = a * (a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a)\n        val n25 = a * (a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a)\n        val\
    \ n26 = a * (a * a * a * a * a * a * a", "        val square = BigInt(a).pow(3)\n\
    \        var cube = true\n        while (cube && square != 0) {\n            val\
    \ a = BigInt(square)\n            cube = a * a * a\n            square = square\
    \ - 1l\n        }\n        return cube", "        if (a >= -180l) \n         \
    \   if (a < 0l) \n                if (a < 180l) \n                    if (a <\
    \ 360l) \n                        if (a < 720l) \n                           \
    \ if (a < 1080l) \n                                if (a < 2160.0l) \n       \
    \                             if (a < 4320l) \n                              \
    \          if ((a < 10800l) && (a < 21600l)) \n                              \
    \              true\n                                        else \n         \
    \                                   if (a < 43200l) \n                       \
    \                         if ((a < 108000l) && (a < 216000l)) \n             \
    \                                       true\n                               \
    \                 else \n                                                    false\n\
    \                                            else \n                         \
    \                       if (a < 108400l) \n                                  \
    \                  true\n                                                else\
    \ \n                                                    false\n              \
    \                          else \n                                           \
    \ if (a < 108880l) \n                                                true\n  \
    \                                          else \n                           \
    \                     false\n                                    else \n     \
    \                                   if ((a < 216000l) && (a < 432000l)) \n   \
    \                                         true\n                             \
    \           else \n                                            if (a < 432800l)\
    \ \n                                                if ((a < 1080000l) && (a <\
    \ 2160000l)) \n                                                    true\n    \
    \                                            else \n                         \
    \                           false\n                                          \
    \  else \n                                                if (a < 1090400l) \n\
    \                                                    true\n                  \
    \                              else \n                                       \
    \             false\n                            else \n                     \
    \           if (a < 36000l) \n                                    if (a < 72000l)\
    \ \n                                        if ((a < 108000l) && (a < 216000l))\
    \ \n                                            true\n                       \
    \                 else \n                                            if (a < 432000l)\
    \ \n                                                if ((a < 1080000l) && (a <\
    \ 2160000l)) \n                                                    true\n    \
    \                                            else \n                         \
    \                           false\n                                          \
    \  else \n                                                if (a < 108400l) \n\
    \                                                    true\n                  \
    \                              else \n                                       \
    \             false\n                                    else \n             \
    \                           if ((a < 2160000l) && (a < 4320000l)) \n         \
    \                                   true\n                                   \
    \     else \n                                            if (a < 432800l) \n \
    \                                               if ((a < 10800000l) && (a < 21600000l))\
    \ \n                                                    true\n               \
    \                                 else \n                                    \
    \                false\n                                            else \n  \
    \                                              if (a < 1089600l) \n          \
    \                                          true\n                            \
    \                    else \n                                                 \
    \   false\n                        else \n                            if ((a <\
    \ 360000l) && (a < 720000l)) \n                                if ((a < 1080000l)\
    \ && (a < 2160000l)) \n                                    if (a < 4320000l) \n\
    \                                        if ((a < 10800000l) && (a < 21600000l))\
    \ \n                                            true\n                       \
    \                 else \n                                            if (a < 108400l)\
    \ \n                                                true\n                   \
    \                         else \n                                            \
    \    false\n                                    else \n                      \
    \                  if (a < ", "        if(a==0) return true\n        if(a==1l)\
    \ return true\n        if(a==2l) return true\n        if(a==3l) return true\n\
    \        if(a==4l) return true\n        if(a==5l) return true\n        if(a==6l)\
    \ return true\n        if(a==7l) return true\n        if(a==8l) return true\n\
    \        if(a==9l) return true\n        if(a==10l) return true\n        if(a==11l)\
    \ return true\n        if(a==12l) return true\n        if(a==13l) return true\n\
    \        if(a==14l) return true\n        if(a==15l) return true\n        if(a==16l)\
    \ return true\n        if(a==17l) return true\n        if(a==18l) return true\n\
    \        if(a==19l) return true\n        if(a==20l) return true\n        if(a==21l)\
    \ return true\n        if(a==22l) return true\n        if(a==23l) return true\n\
    \        if(a==24l) return true\n        if(a==25l) return true\n        if(a==26l)\
    \ return true\n        if(a==27l) return true\n        if(a==28l) return true\n\
    \        if(a==29l) return true\n        if(a==30l) return true\n        if(a==31l)\
    \ return true\n        if(a==32l) return true\n        if(a==33l) return true\n\
    \        if(a==34l) return true\n        if(a==35l) return true\n        if(a==36l)\
    \ return true\n        if(a==37l) return true\n        if(a==38l) return true\n\
    \        if(a==39l) return true\n        if(a==40l) return true\n        if(a==41l)\
    \ return true\n        if(a==42l) return true\n        if(a==43l) return true\n\
    \        if(a==44l) return true\n        if(a==45l) return true\n        if(a==46l)\
    \ return true\n        if(a==47l) return true\n        if(a==48l) return true\n\
    \        if(a==49l) return true\n        if(a==50l) return true\n        if(a==51l)\
    \ return true\n        if(a==52l) return true\n        if(a==53l) return true\n\
    \        if(a==54l) return true\n        if(a==55l) return true\n        if(a==56l)\
    \ return true\n        if(a==57l) return true\n        if(a==58l) return true\n\
    \        if(a==59l) return true\n        if(a==60l) return true\n        if(a==61l)\
    \ return true\n        if(a==62l) return true\n        if(a==63l) return true\n\
    \        if", "        val n = a.toInt\n        if (n<0)\n            false\n\
    \        else if (n==0) \n            true\n        else if (n==1)\n         \
    \   true\n        else if (n==2)\n            true\n        else if (n==3)\n \
    \           true\n        else if (n==4)\n            true\n        else if (n==5)\n\
    \            true\n        else if (n==6)\n            true\n        else if (n==7)\n\
    \            true\n        else if (n==8)\n            true\n        else if (n==9)\n\
    \            true\n        else if (n==10)\n            true\n        else if\
    \ (n==11)\n            true\n        else if (n==12)\n            true\n     \
    \   else if (n==13)\n            true\n        else if (n==14)\n            true\n\
    \        else if (n==15)\n            true\n        else if (n==16)\n        \
    \    true\n        else if (n==17)\n            true\n        else if (n==18)\n\
    \            true\n        else if (n==19)\n            true\n        else if\
    \ (n==20)\n            true\n        else if (n==21)\n            true\n     \
    \   else if (n==22)\n            true\n        else if (n==23)\n            true\n\
    \        else if (n==24)\n            true\n        else if (n==25)\n        \
    \    true\n        else if (n==26)\n            true\n        else if (n==27)\n\
    \            true\n        else if (n==28)\n            true\n        else if\
    \ (n==29)\n            true\n        else if (n==30)\n            true\n     \
    \   else if (n==31)\n            true\n        else if (n==32)\n            true\n\
    \        else if (n==33)\n            true\n        else if (n==34)\n        \
    \    true\n        else if (n==35)\n            true\n        else if (n==36)\n\
    \            true\n        else if (n==37)\n            true\n        else if\
    \ (n==38)\n            true\n        else if (n==39)\n            true\n     \
    \   else if (n==40)\n            true\n        else if (n==41)\n            true\n\
    \        else if (n==42)\n            true\n        else if (n==43)\n        \
    \    true\n        else if (n==44)\n            true\n        else if (n==45)\n\
    \            true\n        else if (n==46)\n            true\n        else if\
    \ (n==47)\n            true\n        else if (n==48)\n            true\n     \
    \   else if (n==49)\n            true\n        else if (n==50)\n            true\n\
    \        else if (n==51)\n            true\n        else if (n==52)\n        \
    \    true\n        else if (n==53)\n            true\n        else if (n==54)\n\
    \            true\n        else if (n==55)\n            true\n        else if\
    \ (n==56)\n            true\n        else if (n==57)\n            true\n     \
    \   else if (n==58", "        a match {\n            case x if x >= 0l && x <=\
    \ 1l && x >= 4l && x <= 9l && x >= 16l => true\n            case x => false\n\
    \        }", "        val n = a.toInt\n        (n*(n*(n + 1))) == Math.pow(n,\
    \ 3)", "        val l = BigInt(a)\n        if((l.asInt / l.asInt % 3 == 0) &&\
    \ (l.asInt / l.asInt % 3 == 0) && (l.asInt / l.asInt % 3 == 0) && (l.asInt / l.asInt\
    \ % 3 == 0))\n            return true\n        else\n            return false",
  '        a % 3 == 0 && (a / 3) == 3', '        // write your code', "        val\
    \ num : Long = a % 181l\n        val flag = num > 181l\n        val cube = num\
    \ == (181l*181l*181l) && num != 0l\n        cube", "        val s = a * a // Square\n\
    \        a = a mod 5\n        val t = (s - (s % a)) % a // Cube\n        return\
    \ (t == 0)", '        // Write code here', "        val r = a / 3\n        val\
    \ cube = (a % 3) == 0\n        val threeTimesCube = (r * r * r == a)\n       \
    \ cube && threeTimesCube", '        (1l to a.toInt) contains ((a * a * a) == a)',
  "        def sum(a,b : Long) : Long = a + b\n        val n = a.toInt\n        val\
    \ list = List(1l, n).toMap\n        (list.map(_ -> 0l).containsKey(n))", "   \
    \     val cube = a.toInt\n        for(i <- 0 until cube) yield {\n           \
    \ if(cube(i) * cube(i) * cube(i) == a) true\n            else false\n        }",
  "        val num = a % 3\n        (num == 0 || num == 1) ", "      val cubes = scala.collection.mutable.ListBuffer[Long]()\n\
    \      def loop(a: Long): Boolean = a > 0 && (a % a != 0) && cubes.isEmpty {\n\
    \         cubes += a\n         loop(a/a)\n      }\n      loop(a)\n      cubes.size\
    \ == a", "        val squareSum = a.toInt*a.toInt*a.toInt\n        val cubeSum\
    \ = squareSum*squareSum*squareSum\n        return cubeSum == a.toInt", "     \
    \   val num =a\n        if(num%1==0||num%2==0||num%3==0||num%4==0||num%5==0||num%6==0||num%7==0||num%8==0||num%9==0||num%10==0||num%11==0||num%12==0||num%13==0||num%14==0||num%15==0||num%16==0||num%17==0||num%18==0||num%19==0||num%20==0||num%21==0||num%22==0||num%23==0||num%24==0||num%25==0||num%26==0||num%27==0||num%28==0||num%29==0||num%30==0||num%31==0||num%32==0||num%33==0||num%34==0||num%35==0||num%36==0||num%37==0||num%38==0||num%39==0||num%40==0||num%41==0||num%42==0||num%43==0||num%44==0||num%45==0||num%46==0||num%47==0||num%48==0||num%49==0||num%50==0||num%51==0||num%52==0||num%53==0||num%54==0||num%55==0||num%56==0||num%57==0||num%58==0||num%59==0||num%60==0||num%61==0||num%62==0||num%63==0||num%64==0)\n\
    \        {\n            return true\n        }\n        else\n        {\n    \
    \        return false\n        }", "        val n = a/3\n        val n2 = n*n\n\
    \        val n3 = n*n*n\n        return (n == n2 && n2 == n3)", "        val x\
    \ = a%10000000l\n        val y = a%1000000000l\n        val z = a%1000000000000l\n\
    \        (z==0 && y==0 && x==0) || (z==0 && y==0 && x<0) || (y==0 && x==0) ||\
    \ (y==0 && x<0)", "        if (a == 1l) {\n            true\n        } else if\
    \ (a == 2l) {\n            true\n        } else if (a == 3l) {\n            true\n\
    \        } else if (a == 4l) {\n            true\n        } else if (a == 5l)\
    \ {\n            true\n        } else if (a == 6l) {\n            true\n     \
    \   } else if (a == 7l) {\n            true\n        } else if (a == 8l) {\n \
    \           true\n        } else if (a == 9l) {\n            true\n        } else\
    \ if (a == 10l) {\n            true\n        } else if (a == 11l) {\n        \
    \    true\n        } else if (a == 12l) {\n            true\n        } else if\
    \ (a == 13l) {\n            true\n        } else if (a == 14l) {\n           \
    \ true\n        } else if (a == 15l) {\n            true\n        } else if (a\
    \ == 16l) {\n            true\n        } else if (a == 17l) {\n            true\n\
    \        } else if (a == 18l) {\n            true\n        } else if (a == 19l)\
    \ {\n            true\n        } else if (a == 20l) {\n            true\n    \
    \    } else if (a == 21l) {\n            true\n        } else if (a == 22l) {\n\
    \            true\n        } else if (a == 23l) {\n            true\n        }\
    \ else if (a == 24l) {\n            true\n        } else if (a == 25l) {\n   \
    \         true\n        } else if (a == 26l) {\n            true\n        } else\
    \ if (a == 27l) {\n            true\n        } else if (a == 28l) {\n        \
    \    true\n        } else if (a == 29l) {\n            true\n        } else if\
    \ (a == 30l) {\n            true\n        } else if (a == 31l) {\n           \
    \ true\n        } else if (a == 32l) {\n            true\n        } else if (a\
    \ == 33l) {\n            true\n        } else if (a == 34l) {\n            true\n\
    \        } else if (a == 35l) {\n            true\n        } else if (a == 36l)\
    \ {\n            true\n        } else if (a == 37l) {\n            true\n    \
    \    } else if (a == 38l) {\n            true\n        } else if (a == 39l) {\n\
    \            true\n        } else if (a == 40l) {\n            true\n        }\
    \ else if (a == 41l) {\n            true\n        } else if (a == 42l) {\n   \
    \         true\n        } else if (a == 43l) {\n            true\n        } else\
    \ if (a == 44l) {\n            true\n        } else if (a == 45l) {\n        \
    \    true\n        } else if (a == 46l) {\n            true\n        } else if\
    \ (a == 47l) {\n            true\n        } else if (a == 48l) {\n           \
    \ true\n        } else if (a == 49l) {\n            true\n        } else if (a\
    \ == 50l) {\n            true\n        } else if (a == 51l) {\n            true\n\
    \        } else if (a == 52l) {\n            true\n        } else if (a == 53l)\
    \ {\n            true\n        } else if (a == 54l) {\n            true\n    \
    \    } else if (a == 55l) {\n            true\n        } else if (a == 56l) {\n\
    \            true\n        } else if (a == 57l) {\n            true\n        }\
    \ else if (a == 58l) {\n            true\n        } else if (a == 59l) {\n   \
    \         true\n        } else if (a == 60l) {\n            true\n        } else\
    \ if (a == 61l) {\n            true\n        } else if (a == 62l) {\n        \
    \    true\n        } else if (a == 63l) {\n            true\n        } else if\
    \ (a == 64l) {\n            true\n", "      val square = Math.pow(a,2)\n     \
    \ val cube = square * square * square\n      cube.toString == \"100000000.0\"",
  "        var b = 0\n        while(a > 0) {\n            b += a % 3\n           \
    \ a = a / 3\n        }\n        return b == 0 || b == 1", "        var b = a\n\
    \        var c = 1\n        var d = 1\n        var e = 1\n        var f = true\n\
    \        while(f && (b > 0)){\n            if(b >= c)\n                return\
    \ false\n            b -= c\n            c <<= 1\n            if(b >= c)\n   \
    \             return false\n            b -= c\n            c <<= 1\n        \
    \    if(b >= c)\n                return false\n            b -= c\n          \
    \  c <<= 1\n            if(b >= c)\n                return false\n           \
    \ b -= c\n            c <<= 1\n            if(b >= c)\n                return\
    \ false\n            e <<= 1\n        }\n        return f", "        val b = a\
    \ / 3\n        var c = a % 3\n        if (c == 0)\n            return true\n \
    \       var d = b / 3\n        if (d == 0 || d % 3 == 0)\n            return false\n\
    \        c = b / 2\n        if (c < 6l)\n            return false\n        val\
    \ e = b / 6\n        if ((e == 0 || e % 6 == 0) && c < 24l)\n            return\
    \ false\n        if (c >= 24l)\n            return true\n        if (c % 6 < 4)\n\
    \            return false\n        return true", "        // Your code here\n\
    \        if(a >= -1 && a <= 180){\n            val i = math.abs(a)\n         \
    \   if(math.floor(i) == math.ceil(i) && math.floor(i) == math.floor(i*2)){\n \
    \               return true\n            }\n            else\n               \
    \ return false\n        }\n        else\n            return false", '        ',
  "      if (a < 0)\n         return false\n      else if (a < 1l)\n         return\
    \ false\n      else if (a < 2l)\n         return false\n      else if (a < 3l)\n\
    \         return true\n      else if (a < 4l)\n         return true\n      else\
    \ if (a < 5l)\n         return true\n      else if (a < 6l)\n         return true\n\
    \      else if (a < 7l)\n         return true\n      else if (a < 8l)\n      \
    \   return true\n      else if (a < 9l)\n         return true\n      else if (a\
    \ < 10l)\n         return true\n      else if (a < 100l)\n         return true\n\
    \      else if (a < 1000l)\n         return true\n      else if (a < 10000l)\n\
    \         return true\n      else\n         return false\n   }\n}\n</code>\n<|/\
    \ a tags=scala,algorithm |>\n<| c |>\nThank you for your answer. I was wondering\
    \ why my solution was so slow when trying with a small number of elements. My\
    \ mistake was that I assumed that my solution would not be that slow for any input\
    \ size. I was just surprised that it was slower than the one I posted.\n<|/ c\
    \ |>\n<| c |>\nIt can be slower than the one you posted, but it will be slower\
    \ on large numbers. That's because the recursive solution is exponential in time\
    \ and the iterative one is linear in time.\n<|/ c |>\n<| c |>\nWhat is the purpose\
    \ of `List`?\n<|/ c |>\n<| c |>\nIt's just an example for the recursive solution,\
    \ since the question wanted a pure functional solution. Maybe it would have been\
    \ better to rename it to `isCube`.\n<|/ c |>\n<| c |>\nAh, I see. Thanks for the\
    \ explanation.\n<|/ c |>\n<| a tags=scala,algorithm |>\nIf you want a pure functional\
    \ solution, you can use a fold:\n<code>\ndef isCube(x: Long) = \n    List(1l,\
    \ 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 100l, 1000l, 10000l).foldLeft(true)(_&&_)(x%_==0)\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer! I am just wondering,\
    \ since foldLeft is lazy, why does it go through all the elements in the list\
    \ even though a non-true value is returned from it? Why does it not simply return\
    \ false?\n<|/ c |>\n<| c |>\nThe fold function takes the previous ", '        if
    (a % 3 = 0) a else false', "        val isCube = true\n        isCube && a % 12\
    \ == 0 && a.isInt && a.toInt == a.toLong * a.toLong", "        val b = (3l) *\
    \ 3l\n        if((a < b) && a.lt(3l))\n            false\n        else if((a >\
    \ b) && a.gt(-3l))\n            true\n        else\n            false", "    \
    \    val n1 = a.toLong\n        if(n1 == 0){\n            return true\n      \
    \  }\n        val n2 = n1.toLong * n1.toLong\n        val n3 = n2 * n1.toLong\n\
    \        val n4 = n3 * n1.toLong\n        val n5 = n4 * n1.toLong\n        val\
    \ n6 = n5 * n1.toLong\n        val n7 = n6 * n1.toLong\n        val n8 = (n7 *\
    \ n1.toLong + n7).toLong\n        return (n8 == n1)", "        val cube = if (isPositive(a))\
    \ a.toLong ** 3 else (-a.toLong ** 3)\n        if (cube % 1l == 0) true else false",
  "        val n = a.toInt;\n        (n == 1 || n * n == a) || (n * n == (a / n))",
  "        if( a == 0 ) {\n            return( true )\n        }\n        if( a <\
    \ 0 ) {\n            return( false )\n        }\n        val n = (a / 3) + 1\n\
    \        if( n % 3 == 0 ) {\n            return( true )\n        }\n        return(\
    \ false )", "        val factors = List(1l to Math.sqrt(3l)*2l)\n        val list\
    \ = factors.flatMap {\n            x => List(x*x, x*x*x, x*x*x*x)\n        }.toList\n\
    \        return list.contains(a)", "        a.toString.takeWhile(_.isDigit).length\
    \ == 3 && a.toString.dropWhile(_ == 'x').toInt == a.toString.toInt", "       \
    \ if ((a < 0l) || (a > 180l)) false\n        if (a < 90l) false\n        if ((a\
    \ % 90l) == 0l) true\n        val m = a % 90l\n        val r = a / 90l\n     \
    \   val i = r / 90l\n        val g = i / 90l\n        val p = g / 90l\n      \
    \  val v = g / 90l\n        val r = r / 90l\n        val i = i / 90l\n       \
    \ val p = p / 90l\n        val v = v / 90l\n        val g = g / 90l\n        val\
    \ r = r / 90l\n        val i = i / 90l\n        val p = p / 90l\n        val v\
    \ = v / 90l\n        val g = g / 90l\n        val r = r / 90l\n        val i =\
    \ i / 90l\n        val p = p / 90l\n        val v = v / 90l\n        val g = g\
    \ / 90l\n        val r = r / 90l\n        val i = i / 90l\n        val p = p /\
    \ 90l\n        val v = v / 90l\n        val g = g / 90l\n        val r = r / 90l\n\
    \        val i = i / 90l\n        val p = p / 90l\n        val v = v / 90l\n \
    \       val g = g / 90l\n        val r = r / 90l\n        val i = i / 90l\n  \
    \      val p = p / 90l\n        val v = v / 90l\n        val g = g / 90l\n   \
    \     val r = r / 90l\n        val i = i / 90l\n        val p = p / 90l\n    \
    \    val v = v / 90l\n        val g = g / 90l\n        val r = r / 90l\n     \
    \   val i = i / 90l\n        val p = p / 90l\n        val v = v / 90l\n      \
    \  val g = g / 90l\n        val r = r / 90l\n        val i = i / 90l\n       \
    \ val p = p / 90l\n        val v = v / 90l\n        val g = g / 90l\n        val\
    \ r = r / 90l\n        val i = i / 90l\n        val p = p / 90l\n        val v\
    \ = v / 90l\n        val g = g / 90l\n        val r = r / 90l\n        val i =\
    \ i / 90l\n        val p = p / 90l\n        val v = v / 90l", '        return
    a >= 0l && a <= 180l', "        // We should use recursion to solve this problem.\n\
    \        if (a == 0) return true\n        if (a == -1) return true\n        if\
    \ (a == 1l) return true\n        if (a == 2l) return true\n        if (a == 3l)\
    \ return true\n        if (a == 4l) return true\n        if (a == 5l) return true\n\
    \        if (a == 6l) return true\n        if (a == 7l) return true\n        if\
    \ (a == 8l) return true\n        if (a == 9l) return true\n        if (a == 10l)\
    \ return true\n        if (a == 11l) return true\n        if (a == 12l) return\
    \ true\n        if (a == 13l) return true\n        if (a == 14l) return true\n\
    \        if (a == 15l) return true\n        if (a == 16l) return true\n      \
    \  if (a == 17l) return true\n        if (a == 18l) return true\n        if (a\
    \ == 19l) return true\n        if (a == 20l) return true\n        if (a == 21l)\
    \ return true\n        if (a == 22l) return true\n        if (a == 23l) return\
    \ true\n        if (a == 24l) return true\n        if (a == 25l) return true\n\
    \        if (a == 26l) return true\n        if (a == 27l) return true\n      \
    \  if (a == 28l) return true\n        if (a == 29l) return true\n        if (a\
    \ == 30l) return true\n        if (a == 31l) return true\n        if (a == 32l)\
    \ return true\n        if (a == 33l) return true\n        if (a == 34l) return\
    \ true\n        if (a == 35l) return true\n        if (a == 36l) return true\n\
    \        if (a == 37l) return true\n        if (a == 38l) return true\n      \
    \  if (a == 39l) return true\n        if (a == 40l) return true\n        if (a\
    \ == 41l) return true\n        if (a == 42l) return true\n        if (a == 43l)\
    \ return true\n        if (a == 44l) return true\n        if (a == 45l) return\
    \ true\n        if (a == 46l) return true\n        if (a == 47l) return true\n\
    \        if (a == 48l) return true\n        if (a == 49l) return true\n      \
    \  if (a == 50l) return true\n        if (a == 51l) return true\n        if (a\
    \ == 52l) return true\n        if (a == 53l) return true\n        if (a == 54l)\
    \ return true\n        if (a == 55l) return true\n        if (a == 56l) return\
    \ true\n        if (a == 57l) return true\n        if (a == 58l) return true\n\
    \        if (a == 59l) return true\n        if (a == 60l) return true\n      \
    \  if (a == 61l) return true\n        if (a == 62l) return true\n        if (a\
    \ == 63l) return true\n        if (a == 64l) return true\n        if (a == 65l)\
    \ return true\n        if (a == 66l) return true\n        if (a == 67l) return\
    \ true\n        if (a == 68l) return true\n        if (a == 69l) return true\n\
    \        if (a == 70l) return true\n", "        if (a == 0) return true;\n   \
    \     else if (a == 1l) return true;\n        else if (a == 2l) return true;\n\
    \        else if (a == 3l) return true;\n        else if (a == 4l) return true;\n\
    \        else if (a == 5l) return true;\n        else if (a == 6l) return true;\n\
    \        else if (a == 7l) return true;\n        else if (a == 8l) return true;\n\
    \        else if (a == 9l) return true;\n        else if (a == 10l) return true;\n\
    \        else if (a == 11l) return true;\n        else if (a == 12l) return true;\n\
    \        else if (a == 13l) return true;\n        else if (a == 14l) return true;\n\
    \        else if (a == 15l) return true;\n        else if (a == 16l) return true;\n\
    \        else if (a == 17l) return true;\n        else if (a == 18l) return true;\n\
    \        else if (a == 19l) return true;\n        else if (a == 20l) return true;\n\
    \        else if (a == 21l) return true;\n        else if (a == 22l) return true;\n\
    \        else if (a == 23l) return true;\n        else if (a == 24l) return true;\n\
    \        else if (a == 25l) return true;\n        else if (a == 26l) return true;\n\
    \        else if (a == 27l) return true;\n        else if (a == 28l) return true;\n\
    \        else if (a == 29l) return true;\n        else if (a == 30l) return true;\n\
    \        else if (a == 31l) return true;\n        else if (a == 32l) return true;\n\
    \        else if (a == 33l) return true;\n        else if (a == 34l) return true;\n\
    \        else if (a == 35l) return true;\n        else if (a == 36l) return true;\n\
    \        else if (a == 37l) return true;\n        else if (a == 38l) return true;\n\
    \        else if (a == 39l) return true;\n        else if (a == 40l) return true;\n\
    \        else if (a == 41l) return true;\n        else if (a == 42l) return true;\n\
    \        else if (a == 43l) return true;\n        else if (a == 44l) return true;\n\
    \        else if (a == 45l) return true;\n        else if (a == 46l) return true;\n\
    \        else if (a == 47l) return true;\n        else if (a == 48l) return true;\n\
    \        else if (a == 49l) return true;\n        else if (a == 50l) return true;\n\
    \        else if (a == 51l) return true;\n        else if (a == 52l) return true;\n\
    \        else if (a == 53l) return true;\n        else if (a == 54l) return true;\n\
    \        else if (a == 55l) return true;\n        else if (a == 56l) return true;\n\
    \        else if (a == 57l) return true;\n        else if (a == 58l) return true;\n\
    \        else if (a == 59l) return true;\n        else if (a == 60l) return true;\n\
    \        else if (a == 61l) return true;\n        else if (a == 62l) return true;\n\
    \        else if (a == 63l) return true;\n        else if (a == 64l) return true;\n\
    \        else if (a == 65l) return true;\n        else if (a == 66l) return true;\n\
    \        else if (a == 67l) return true;\n        else if (a == 68l) return true;\n\
    \        else if (a == 69l) return true;\n        else if (a == 70l) return true;\n\
    \        else if (a == 71l) return true;\n        else if (a == 72l) return true;\n\
    \        else if (a == ", "      if(a < 1)\n        false\n      else if(a%3 ==\
    \ 0)\n        true\n      else \n        false", "        val cube : Double =\
    \ a * a \n        a > 0 && (cube % 1 == 0)", '        a % 4 == 0', '        (a
    % 6) == (a % 4) == (a % 2) == 0', "        val list = new mutable.ListBuffer[Long]()\n\
    \        val list1 = list\n        val list2 = list\n        val list3 = list\n\
    \        val list4 = list\n        val list5 = list\n        list1.push(a)\n \
    \       list2.push(a * a)\n        list3.push(a * a * a)\n        list4.push(a\
    \ * a * a * a)\n        list5.push(a * a * a * a * a)\n        if(list1.take(5)\
    \ == list2.take(5) == list3.take(5) == list4.take(5) == list5.take(5)) {\n   \
    \         true\n        } else {\n            false\n        }", "        val\
    \ cube = 1l ** 4l\n        val result = a % cube == 0\n        result ", "   \
    \     val sq = a.toInt\n        if( sq == 1)\n            true\n        else if(\
    \ sq == 3)\n            true\n        else if( sq == 5)\n            true\n  \
    \      else if( sq == 7)\n            true\n        else if( sq == 9)\n      \
    \      true\n        else\n            false", "        val cubes = a % 3\n  \
    \      (cubes == 0) || (a % a == 0)", "      println(a.toString)\n      a % 1\
    \ == 0", '        (a*a) == (a*a*a)', '        a*a*a == a', "        // TODO: implement\
    \ here\n        false", "        if (a < 0 || a > 180l) {\n            return\
    \ false\n        }\n        val cubers = mutable.ArrayBuffer.empty[Long]\n   \
    \     for(i <- 0 until a) {\n            val c = a / i\n            val s = c\
    \ % 2\n            cubers += c\n            if(s != 0)\n                cubers\
    \ += i\n        }\n        if(cubers.size == 1) {\n            val x = cubers(0)\n\
    \            val y = cubers(1)\n            val z = (x * x) % 3\n            val\
    \ r = (y * y) % 3\n            val t = ((z * z) % 3) * 3 + ((r * r) % 3)\n   \
    \         if(x == y && x == z && y == r) {\n                return (t == x)\n\
    \            }\n        }\n        return false", "        if(a*a*a == a) return\
    \ true\n        return false", "        if (a == 0)\n            true\n      \
    \  else\n            if (a % 3 == 0 || a % 5 == 0)\n                iscube(a/3)\n\
    \            else\n                false", '        // Solution goes here', " \
    \       val xs = List(1l, 3l, 5l, 7l, 9l, 11l, 13l, 15l, 17l)\n        val ys\
    \ = List(2l, 4l, 6l, 8l, 10l, 12l, 14l, 16l, 18l)\n        val zs = List(4l, 6l,\
    \ 8l, 10l, 12l, 14l, 16l, 18l, 20l)\n        val xx = List(1l, 3l, 5l, 7l, 9l,\
    \ 11l, 13l, 15l, 17l)\n        val yy = List(2l, 4l, 6l, 8l, 10l, 12l, 14l, 16l,\
    \ 18l)\n        val zz = List(4l, 6l, 8l, 10l, 12l, 14l, 16l, 18l, 20l)\n\n  \
    \      val square = xs ++ ys ++ zs\n        val cube = xx++ yy++ zz\n        a\
    \ >= 1 && a <= 100 && (a % 10 == 0 || a % 10 == 1) && square.contains(a) && (a\
    \ % 11 == 0 || a % 11 == 1) && cube.contains(a)"]
stop_tokens:
- "\n    }\n"
