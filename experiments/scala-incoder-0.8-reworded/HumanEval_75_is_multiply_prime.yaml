name: HumanEval_75_is_multiply_prime
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less\
  \ then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    // (true)\n\
  \    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
  \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
  \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
  \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
  \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
  \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
completions: ["        val isMultiplyPrime = (a.toInt) < (100)\n        println(isMultiplyPrime)\n\
    \        return isMultiplyPrime", "        val primes = List(3, 5)\n        val\
    \ product = a / primes.head\n        var isPrime = true\n        for (pprime <-\
    \ primes until primes.last) {\n            val divisor = product / pprime\n  \
    \          product -= divisor\n            if (product < 1)\n                isPrime\
    \ = false\n        }\n        return isPrime", "        var b = 0\n        var\
    \ c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var\
    \ g = 0\n        var h = 0\n        for(i <- 1 to a) {\n            for(j <- 1\
    \ to a) {\n                for(h <- 1 to a) {\n                    for(k <- 1\
    \ to a) {\n                        for(l <- 1 to a) {\n                      \
    \      for(m <- 1 to a) {\n                                for(n <- 1 to a) {\n\
    \                                    for(p  <- 1 to a) {\n                   \
    \                     for(q  <- 1 to a) {\n                                  \
    \          for(q1 <- 1 to a) {\n                                             \
    \   for(q2 <- 1 to a) {\n                                                    for(q3\
    \ <- 1 to a) {\n                                                        for(q4\
    \ <- 1 to a) {\n                                                            for(q5\
    \ <- 1 to a) {\n                                                             \
    \   for(q6 <- 1 to a) {\n                                                    \
    \                for(q7 <- 1 to a) {\n                                       \
    \                                 for(q8 <- 1 to a) {\n                      \
    \                                                      for(q9 <- 1 to a) {\n \
    \                                                                            \
    \   for(q10<- 1 to a) {\n                                                    \
    \                                for(q11<- 1 to a) {\n                       \
    \                                                                 for(q12 <- 1\
    \ to a) {\n                                                                  \
    \                          for(q13 <- 1 to a) {\n                            \
    \                                                                    for(q14 <-\
    \ 1 to a) {\n                                                                \
    \                                    for(q15 <- 1 to a) {\n                  \
    \                                                                            \
    \          for(q16 <- 1 to a) {\n                                            \
    \                                                                for(q17 <- 1\
    \ to a) {\n                                                                  \
    \                                              for(q18 <- 1 to a) {\n        \
    \                                                                            \
    \                                for(q19 <- 1 to a) {\n                      \
    \                                                                            \
    \                      for(q20 <- 1 to a) {\n                                \
    \                                                                            \
    \                for(q21 <- 1 to a) {\n                                      \
    \                                                                            \
    \              for(q22 <- 1 to a) {\n                                        \
    \                                                                            \
    \                for(q23 <- 1 to a) {\n                                      \
    \                                                                            \
    \                      for(q24 <- 1 to a) {\n                                \
    \                                                                            \
    \                                if(isPrime(j)&&isPrime(k)&&isPrime(l))&&\n  \
    \                                                                            \
    \                                                                      isPrime(m)&&isPrime(n)&&isPrime(p)&&isPrime(q)&&isPrime(q1)&&\n\
    \                                                                            \
    \                                                                        isPrime(q2)&&isPrime(q3)&&isPrime(q4)&&isPrime(q5)&&isPrime(q6)&&isPrime(q7)&&\n\
    \                                                                            \
    \                                                                        isPrime(q8)&&isPrime(q9)&&isPrime(q10)&&isPrime(q11)&&isPrime(q12)&&isPrime(q13)&&\n\
    \                                                                            \
    \                                                                        isPrime(q14)&&isPrime(q15)&&isPrime(q16)&&isPrime(q17)&&isPrime(q18)&&isPrime(q19)&&\n\
    \                                                                            \
    \                                                                        isPrime(q20)&&isPrime(q21)&&isPrime",
  "        if (a % 2 == 0 || a % 3 == 0) return false\n        if (a > 100) return\
    \ false\n        // Knowing that (a) is less then 100. \n        // Example:\n\
    \        // >>> isMultiplyPrime((30l))\n        // (true)\n        // 30 = 2 *\
    \ 3 * 5\n        val primes = new mutable.HashSet[Long]()\n        for (i = 31;\
    \ i > 1; i--) {\n            if (a % i == 0 || a % 3 == 0 || a % i == 0) {\n \
    \               primes.add(i)\n            }\n        }\n        return primes.size\
    \ == 3", "        val nums = mutable.Set.empty[Long]\n        for(i <- 2 until\
    \ a / 3) {\n            val n = (i/2) * 3\n            val isPrime = isPrime(n)\n\
    \            if(!isPrime)\n                nums += n\n        }\n        return\
    \ !nums.isEmpty", "        val list = new mutable.ArrayList[Long](100L, (2 * 3\
    \ * 5)) //(100L, 2L, 3L, 5L)\n        for (p <- list){\n            if(!isPrime(p)\
    \ && !isMultiplyPrime(p)) \n                list.remove(p)\n        }\n      \
    \  return list.isEmpty", "        var isPrime : Boolean = true\n        var isPrimeTwo\
    \ : Boolean = false\n        for(i <- 2 to 100) {\n            for(j <- 3 to 100)\
    \ {\n                if(i * j == a) {\n                    isPrime = false\n \
    \                   break\n                } else if(j * i == a) {\n         \
    \           isPrimeTwo = true\n                }\n            }\n            if(isPrime\
    \ && isPrimeTwo) {\n                return true\n            }\n        }\n  \
    \      return false", "        def isPrime(n: Long): Boolean = {\n           \
    \ if (n < 2) false\n            else if (n % 2 == 0) false\n            else {\n\
    \                var i = 3\n                while (i < n) {\n                \
    \    if (n % i == 0) return false\n                    i += 1\n              \
    \  }\n                return true\n            }\n        }\n        var isMultiplyPrime\
    \ = true\n        var b = 0\n        var count = 0\n        val arr = new mutable.ArrayBuilder[Long]\n\
    \        val arr1 = new mutable.ArrayBuilder[Long]\n        val arr2 = new mutable.ArrayBuilder[Long]\n\
    \        while (!isPrime(a) && b < 100) {\n            arr += a\n            arr1\
    \ += b\n            arr2 += b * b\n            a += 1\n            b += 1\n  \
    \          count += 1\n        }\n        if (count == 0) {\n            isMultiplyPrime\
    \ = false\n        }\n        else {\n            val isPrime2 = false\n     \
    \       var isPrime3 = false\n            var isPrime4 = false\n            var\
    \ isPrime5 = false\n            var count = 0\n            while (!isPrime2) {\n\
    \                var num = a\n                a -= 1\n                num -= 1\n\
    \                while (!isPrime3) {\n                    if (num % 2 == 0) {\n\
    \                        isPrime2 = true\n                    }\n            \
    \        else {\n                        num -= 1\n                    }\n   \
    \             }\n                a += 1\n                val n = num * a\n   \
    \             if (n % 2 == 0) {\n                    isPrime2 = true\n       \
    \         }\n                while (!isPrime4) {\n                    if (n %\
    \ 3 == 0) {\n                        isPrime4 = true\n                    }\n\
    \                    else {\n                        n -= 1\n                \
    \    }\n                }\n                a += 1\n                val m = num\
    \ * a\n                if (n % 3 == 0) {\n                    isPrime4 = true\n\
    \                }\n                while (!isPrime5) {\n                    if\
    \ (n % 5 == 0) {\n                        isPrime5 = true\n                  \
    \  }\n                    else {\n                        n -= 1\n           \
    \         }\n                }\n                a += 1\n                val o\
    \ = num * a\n                if (n % 5 == 0) {\n                    isPrime5 =\
    \ true\n                }\n                val q = a * num\n                if\
    \ (n % 7 == 0) {\n                    isPrime5 = true\n                }\n   \
    \             a += 1\n                val r = a * num\n                if (n %\
    \ 7 == 0) {\n                    isPrime5 = true\n                }\n        \
    \        a += 1\n                val s = a * num\n                if (n % 7 ==\
    \ 0) {\n                    isPrime5 = true\n                }\n             \
    \   a += 1\n                val t = a * num\n                if (n % 7 == 0) {\n\
    \                    isPrime5 = true\n                }\n                a +=\
    \ 1\n                val u = a * num\n                if (n % 7 == 0) {\n    \
    \                isPrime5 = true\n                }\n", "        // We need our\
    \ own function to check whether a number is prime\n        def checkPrime(x :\
    \ Long) : Boolean = x match {\n            case 2 | 3 | 5 | 7 | 11 | 13 | 17 |\
    \ 19 | 23 | 29 | 31 => true\n            case _ => false\n        }\n\n      \
    \  // Our prime numbers array\n        val primeNumbers = mutable.Array[Int](2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29)\n\n        // Start from 2 and check whether\
    \ the number is prime\n        var isPrime = true\n        for (x <- primeNumbers)\
    \ {\n            // If it is not prime\n            if (!checkPrime(x)) {\n  \
    \              // Then it is not the multiplication of 3 prime numbers\n     \
    \           isPrime = false\n                break\n            }\n        }\n\
    \n        // Return whether the number is multiplication of 3 prime numbers\n\
    \        isPrime", "        val factors = Primes.filter(p => a % p != 0)\n   \
    \     factors.size < 2", "        var b : Long = a - 1\n        val list : mutable.MutableList[Long]\
    \ = mutable.MutableList[Long]()\n        while(b > 0){\n            val t = b\
    \ / 2\n            val list = t until a\n            b := t * 3\n            list\
    \ ::= t\n        }\n        if(list.contains(a))\n            true\n        else\n\
    \            false", '        // TODO', "        a match {\n            case x\
    \ if (x < 100) => true\n            case x => false\n        }", "      val two\
    \ = new scala.util.Random().nextInt\n      if (two == 3 || two == 5)\n       \
    \ true\n      else if (a % 2 == 0)\n        false\n      else {\n        var count\
    \ = 0\n        var check : Long = a\n        while (check != 0) {\n          if\
    \ (check % 2 == 0)\n            count++\n          check = check >> 1\n      \
    \  }\n        return count < 4\n      }", "        val arr = a.toInt\n       \
    \ def isPrime(num: Int) : Boolean = num <= 1 || !num % 2\n\n        var mult =\
    \ 0\n\n        for(n <- arr to arr.toInt){\n            if(isPrime(n)){\n    \
    \            if(mult < 100){\n                    mult += n\n                }\n\
    \                else if(mult > 100 && mult < 100 * 3){\n                    mult\
    \ += n\n                }\n            }\n        }\n\n        return mult % 3\
    \ == 0", "        val array = (3l) :: 5l :: 8l :: 13l :: 17l :: 19l :: 25l ::\
    \ 29l :: 30l\n        val primes = array.filter( x => { val y = x.toInt\n    \
    \                                 (y % 2 == 0 && y % 3 == 0) })\n        primes.length\
    \ == 3 && primes.forall( x => a % x == 0)", "        val numPrimes = mutable.Set[Long]()\n\
    \        val divBy3 = mutable.Set[Long]()\n        def isPrime(x : Long) : Boolean\
    \ = x % 2 == 0 && x != 1 \n        def isMultipleOf(x : Long) : Boolean = {\n\
    \            for (i <- 1 to x) {\n                if (isPrime(i)) numPrimes +=\
    \ i\n            }\n            (x % numPrimes.isEmpty) == false\n        }\n\
    \        def addDivisor(x : Long) : Boolean = numPrimes.contains(x) && divBy3.contains(x)\n\
    \        def addDivisors(x : Long) : Boolean = {\n            for (i <- 1 to x)\
    \ {\n                if (isPrime(i)) {\n                    numPrimes += i\n \
    \                   divBy3 += i\n                }\n            }\n          \
    \  (x % numPrimes.isEmpty) == false\n        }\n        if (a == 1) true\n   \
    \     else numPrimes.forall(isPrime) && divBy3.forall(isMultipleOf)", "      \
    \  val divisors = mutable.Set[Long]()\n        divisors.add(a)\n        while\
    \ (!divisors.isEmpty) {\n            var j = 1\n            while (divisors.contains(j\
    \ * j)) {\n                j += 1\n            }\n            divisors.remove(j)\n\
    \            if (j < 100) {\n                divisors.add(j)\n            }\n\
    \        }\n        divisors.size == 1", "        def checkPrimes(a : Long, prime\
    \ : Long) : Boolean = {\n            prime < 100 && a % prime == 0 && a * prime\
    \ < 10000L\n        }\n        val m = a.toInt\n        val primes = mutable.ArrayBuffer(2L\
    \ to m).filter{ checkPrimes(_, _) }\n        (primes exists { prime => prime *\
    \ prime == a })", "        if((a < 100l)) {\n            return false\n      \
    \  }\n        val setA = MutableSet[Long]()\n        val setB = MutableSet[Long]()\n\
    \        var i : Long = 1l\n        while(i <= a){\n            if(isPrime(i)){\n\
    \                setA.add(i)\n                setB.add(i*i)\n                i\
    \ += 1\n            }\n            i += 1\n        }\n        setB.forall(a =>\
    \ setA.exists(b => a == b))", "        // TODO: implement this function\n    \
    \    // hint: you do not need to worry about the multiplication of more than 100\
    \ primes, just check\n        // the numbers that are less than 100.\n       \
    \ var aPrime = a\n        // a prime must be greater than 2\n        while (aPrime\
    \ < 100) {\n            if (isPrime(aPrime) == true) {\n                // add\
    \ aPrime to aPrimePrimePrimes\n                val aPrimePrimes = mutable.Set[Long]()\n\
    \                aPrimePrimes += aPrime\n                val aPrimePrimePrimes\
    \ = aPrimePrimes.filter(_ % 2 == 0)\n                aPrimePrimePrimes.foreach(aPrimePrime\
    \ => {\n                    val aPrimePrimePrimes = aPrimePrimes.filter(_ % aPrimePrime\
    \ == 0)\n                    aPrimePrimePrimes.foreach(aPrimePrimePrime => {\n\
    \                        val aPrimePrimePrimes = aPrimePrimes.filter(_ % aPrimePrimePrime\
    \ == 0)\n                        aPrimePrimePrimes.foreach(aPrimePrimePrimePrime\
    \ => {\n                            val aPrimePrimePrimes = aPrimePrimes.filter(_\
    \ % aPrimePrimePrime == 0)\n                            aPrimePrimePrimes.foreach(aPrimePrimePrimePrime\
    \ => {\n                                val aPrimePrimePrimes = aPrimePrimes.filter(_\
    \ % aPrimePrimePrime == 0)\n                                aPrimePrimePrimes.foreach(aPrimePrimePrimePrime\
    \ => {\n                                    val aPrimePrimePrimes = aPrimePrimes.filter(_\
    \ % aPrimePrimePrime == 0)\n                                    aPrimePrimePrimes.foreach(aPrimePrimePrimePrime\
    \ => {\n                                        val aPrimePrimePrimes = aPrimePrimes.filter(_\
    \ % aPrimePrimePrime == 0)\n                                        aPrimePrimePrimes.foreach(aPrimePrimePrimePrime\
    \ => {\n                                            val aPrimePrimePrimes = aPrimePrimes.filter(_\
    \ % aPrimePrimePrime == 0)\n                                            aPrimePrimePrimes.foreach(aPrimePrimePrimePrime\
    \ => {\n                                                val aPrimePrimePrimes\
    \ = aPrimePrimes.filter(_ % aPrimePrime", "        val mul = 3L\n        val arr:\
    \ Array[Long] = new Array[Long](mul)\n        var count = 0L\n        for (i<-0\
    \ until mul) {\n            arr(i) = 1l\n        }\n        val sum: Long = arr.sum\n\
    \        val prime: Set[Long] = prime factorization(a) \n        for(i<-0 until\
    \ prime.length) {\n            val tmp: Long = 1l\n            for(j <- 0 until\
    \ i) {\n                tmp += arr(j)\n            }\n            if(tmp == sum)\
    \ {\n                count++\n            }\n        }\n        if(count == 3)\
    \ {\n            true\n        } else {\n            false\n        }", "    \
    \    val num = scala.math.gcd(a, 100l)\n        val primes = mutable.ArrayBuffer.empty[Int]\n\
    \        for {\n            p <- 2 to scala.math.sqrt(num)\n        } yield {\n\
    \            if (a % p == 0) primes += p\n        }\n        primes.forall(x =>\
    \ a % x == 0) || (primes.forall(x => scala.math.gcd(a, x) == 1) && (scala.math.sqrt(num)\
    \ % primes.head == 0))", "        var p = 2L\n        var q = 5L\n        while\
    \ (q > p) {\n            var r = q\n            while (r % p != 0L) {\n      \
    \          r += 1L\n            }\n            if (a == r) \n                return\
    \ true\n            p += 1L\n            q -= 1L\n        }\n        return false",
  "        // write your code here\n        var m = scala.math.BigInt(a)\n       \
    \ var prime = scala.collection.mutable.MutableList[scala.math.BigInt]()\n    \
    \    var k = 0\n        var b = 0\n        while (m < 10) {\n            if (prime.isEmpty\
    \ || prime.isEmpty && prime.isEmpty || k != 2) {\n                k += 1\n   \
    \             while (m % k == 0) {\n                    prime += k\n         \
    \           m /= k\n                }\n            }\n            else if (((prime.remove(0)).compareTo(m)\
    \ == 0) || (prime.isEmpty && m > 100)) {\n                b += 1\n           \
    \     m /= k\n            }\n            else {\n                m /= k\n    \
    \            b += 1\n                m /= k\n            }\n        }\n      \
    \  // println(\"prime : \" + (prime))\n        prime += k\n        return (prime.isEmpty)",
  "        val list: List[Long] = List(2, 3, 5).filter((i) => a % i != 0).toList\n\
    \        list.indexOf(list.last) > -1", "        val primeFactorsSet = a.toSet\n\
    \        val factorsSet = primeFactorsSet.filter {\n            (n: Long) => (n\
    \ % 3 != 0) && (n % 5 != 0)\n        }\n        (primeFactorsSet.toSet.size <\
    \ a.toSet.size * 3) &&\n        (factorsSet.size == primeFactorsSet.size)", " \
    \       val primes = primeFactors(a)\n        val threePrimes = primes.filter(p\
    \ => p*p < a)\n        if(threePrimes.isEmpty) true else false", "        var\
    \ flag = false\n        var product = a / 100\n        var check = 0\n       \
    \ while(product > 2) {\n            if(product % 2 == 0 && product != 1) {\n \
    \               check = 1\n            }\n            if(product % 2 == 0 && product\
    \ == 1) {\n                flag = true\n                break\n            }\n\
    \            product /= 2\n        }\n        if(flag)\n            return true\n\
    \        else \n            return false", "        var max = 3L\n        var\
    \ list = new ListBuffer[Int]()\n        var flag = false\n        for(i <- 2 until\
    \ max by 2){\n            if(a%i == 0){\n                for(j <- 1 until max/i){\n\
    \                    if(a%i == 0){\n                        list+=(j)\n      \
    \                  if(list.contains(j)){\n                            flag = true\n\
    \                            break;\n                        }\n             \
    \       }\n                }\n            }\n        }\n        return flag",
  "        // TODO: Write your code here\n        var result = false\n        for\
    \ (i <- 0 until 100) {\n            val b = a * i\n            if (b % 3 == 0\
    \ && b % 5 != 0) {\n                result = true\n                break\n   \
    \         }\n        }\n        return result", "        var b = 0\n        var\
    \ c = 0\n        var d = 1\n\n        var isPrime = true\n        var isMultiplicationPrime\
    \ = true\n\n        while (a > 0 && !isPrime) {\n            if (a % d == 0) {\n\
    \                a /= d\n                isPrime = true\n            } else {\n\
    \                a /= d\n                isPrime = false\n                isMultiplicationPrime\
    \ = false\n            }\n\n            if (a == 1) {\n                isMultiplicationPrime\
    \ = true\n                a = 2\n            }\n\n            d = d + 2\n    \
    \        b = b + 2\n        }\n\n        if (a == 1) {\n            isMultiplicationPrime\
    \ = true\n            a = 2\n        }\n\n        if (b == 0) {\n            isMultiplicationPrime\
    \ = true\n            return false\n        }\n\n        if (isPrime == true &&\
    \ isMultiplicationPrime == true) {\n            return true\n        } else {\n\
    \            return false\n        }\n", "        def isMultiplyPrime(a : Long,\
    \ i : Int, multiply : Boolean): Boolean = {\n            if(i <=0){\n        \
    \        multiply\n            }else {\n                val x = a%i+a\n      \
    \          x <- (isMultiplyPrime(x, i-1, multiply)&&isMultiplyPrime(x, i+1, multiply)&&isMultiplyPrime(x,\
    \ i+2, multiply))\n            }\n        }\n        val list = mutable.ListBuffer[Long]()\n\
    \        val mul = true\n        while(mul){\n            list+=a\n          \
    \  val b = list.filter( _ % 3 == 0).length\n            mul = b == 1\n       \
    \     list.remove(b)\n        }\n        isMultiplyPrime(a, list.size, false)",
  "        val primeList = scala.collection.mutable.ListBuffer[Int]()\n        def\
    \ isPrime(x: Int) : Boolean = x > 0\n        def addPrime(x: Int) : Unit = if\
    \ (isPrime(x)) { primeList += x; addPrime(x+1) }\n        primeList.initFrom(-a,\
    \ a).filter(isPrime).foreach(addPrime)\n        val n = primeList.size\n     \
    \   primeList filter (x => x == n) => true", "        val primeList = new mutable.ListBuffer[Long]()\n\
    \        val isPrime = true\n        var i = 1\n        while (i < a) {\n    \
    \        if ((a % i) == 0) {\n                isPrime = false\n              \
    \  break\n            }\n            if (primeList.contains(i)) {\n          \
    \      isPrime = false\n                break\n            } else {\n        \
    \        primeList.append(i)\n                i += 1\n            }\n        }\n\
    \        primeList.toList.length == 3", "        if (a > 100) return false\n \
    \       var n = a\n        while (n % 3 == 0 && n >= 2) {\n            n /= 3\n\
    \        }\n        while (n % 5 == 0 && n >= 2) {\n            n /= 5\n     \
    \   }\n        n <= 2 && return true", "        val primes = mutable.Set.empty[Long]\n\
    \n        for( i <- 2 to a.toInt ){\n            if( primes.contains(a) || (a\
    \ % i == 0) ){\n                primes += a\n            }\n        }\n      \
    \  primes.size == 3", "         val primes = mutable.Set()\n         primes.add(2)\n\
    \         primes.add(3)\n         primes.add(5)\n         primes.add(7)\n    \
    \     primes.add(11)\n         primes.add(13)\n         primes.add(17)\n     \
    \    primes.add(19)\n         primes.add(23)\n         primes.add(29)\n      \
    \   primes.add(31)\n         primes.add(37)\n         primes.add(41)\n       \
    \  primes.add(43)\n         primes.add(59)\n         primes.add(61)\n        \
    \ primes.add(67)\n         primes.add(71)\n         primes.add(73)\n         primes.add(79)\n\
    \         primes.add(83)\n         primes.add(89)\n         primes.add(97)\n\n\
    \         val x = a / primes.last\n         val y = a % primes.last\n        \
    \ if (x <= y && primes.contains(a)) {\n             return true\n         }\n\
    \         return false", "        var isMultiplyPrime = false\n        var primeNumbers\
    \ = Vector.empty[Long]\n        var divisor = 2\n\n        for (i <- a until a\
    \ / divisor) {\n            if ((i.toLong == 1) && (primeNumbers.contains(i)))\
    \ {\n                divisor = 2\n            }\n            else if ((i.toLong\
    \ == 1) && (primeNumbers.size == 1)) {\n                divisor = 2\n        \
    \        isMultiplyPrime = true\n            }\n            else if ((i.toLong\
    \ % divisor) != 0) {\n                divisor = divisor + 1\n            }\n \
    \           else {\n                primeNumbers = primeNumbers :+ i\n       \
    \         divisor = 2\n            }\n        }\n        return isMultiplyPrime",
  "        var isMultiplication :Boolean = true\n\n        if (a % 3 != 0 || a < 100)\
    \ {\n            isMultiplication = false\n        } else {\n            val primes\
    \ = Vector.fill(100)(3).find(x => x > 0).filter(_ % 2 != 0).filter(_ % 3 != 0)\n\
    \            val count = primes.count { x => x % a == 0 }\n            isMultiplication\
    \ = count > 1\n        }\n        isMultiplication", "        var isMultiplyPrime\
    \ = true\n        var primeCount = 0\n        var primes = mutable.ListBuffer[Long]()\n\
    \        for(i <- 2 to (100l*100l)) {\n            if(a%i == 0) {\n          \
    \      primeCount += 1\n                primes += i\n            }\n        }\n\
    \        if(primeCount == 3) {\n            for(prime <- primes) {\n         \
    \       if(!primes.contains(a%prime)) {\n                    isMultiplyPrime =\
    \ false\n                }\n            }\n        }\n        primeCount = 0\n\
    \        if(isMultiplyPrime) {\n            println(\"true\")\n        } else\
    \ {\n            println(\"false\")\n        }\n        return isMultiplyPrime",
  "        if(a%2 == 0) \n            false\n        else\n            for(i<-2 until\
    \ a/2) \n                if(a%i==0) \n                    false\n            \
    \    else \n                    a = a/i\n            true", "        var primeSet\
    \ = mutable.HashSet[Long]()\n        primeSet.add(1l)\n        for (i<2 to a)\
    \ {\n            if (primeSet.contains((i*i))) {\n                primeSet.add((i*i))\n\
    \            }\n        }\n        return primeSet.size == 3", "        if ((a\
    \ % 2) == 0) return false\n        val primes = Set(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\
    \ 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,\
    \ 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277,\
    \ 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379,\
    \ 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467,\
    \ 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587,\
    \ 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677,\
    \ 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,\
    \ 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907,\
    \ 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)\n        primes.forall(x\
    \ => a%x==0)", "        def isPrime(p: Long): Boolean = {\n            // Check\
    \ for prime numbers between 2 and sqrt(p)\n            p until (p / 2).toInt ==\
    \ 1\n        }\n        // Iterate from 2 to sqrt(a)\n        for (p = 2 to (a/2).toInt)\
    \ {\n            // If a = p * p then p is prime\n            if (isPrime(p))\
    \ \n                // Return true\n                return(true)\n        }\n\
    \        // If primes cannot be found then false\n        return(false)", "  \
    \      // (a) = 30 = 2 * 3 * 5\n        var isMultiplyPrime = true \n        if\
    \ (a < 100) isMultiplyPrime = true\n        else {\n            // All numbers\
    \ < 100 are prime numbers.\n            var num = (a / 30) + 1\n            var\
    \ isPrime = false \n            // While the number is not a prime number, keep\
    \ adding numbers from the smallest to the largest.\n            while (!isPrime\
    \ && num < 100) {\n                if (num * num == a) isPrime = true\n      \
    \          num += 1 \n            }\n            isMultiplyPrime = !isPrime\n\
    \        }\n        return isMultiplyPrime", "        val m = a / 3\n        var\
    \ b = 3\n        val primes = mutable.ListBuffer[Long]()\n        while(!isPrime(b))\
    \ {\n            primes += b\n            b += 1\n        }\n        primes.toList\
    \ match {\n            case List() => false // Nothing is prime\n            case\
    \ x if x == a => true // Found the number\n            case x :: xs => { \n  \
    \              x % primes.head != 0 && isMultiplyPrime(3 * primes.head + 1) //\
    \ Not prime\n            }\n        }", "       def isPrime(a : Long) : Boolean\
    \ = {\n           var isPrime = false\n           if(a < 2l) isPrime = true\n\
    \           else {\n               var counter = 1\n               for(i <- 2l\
    \ to math.sqrt((a-1l)) by 1l) {\n                   if((a%i)==0) counter = counter\
    \ + 1\n               }\n               if(counter == 3) isPrime = true\n    \
    \       }\n           return isPrime\n       }\n       val b = a%2l\n       if(a\
    \ == 0 || a == 1l) true\n       else if(b == 0) false\n       else if(b == 1)\
    \ isPrime(a-1l)\n       else a match {\n           case _ if isPrime(a) || isPrime(a-1l)\
    \ => false\n           case _ => isMultiplyPrime(a-1l)\n       }", "        if(a%3\
    \ != 0 || a%3!=2 || a%5!=0) false\n        else if(a < 100) true\n        else{\n\
    \            var isPrime : Boolean = true\n            var primes : Array[Long]\
    \ = Array(1, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n            var aPrimeIndex : Long\
    \ = 0\n            primes.foreach(prime =>\n                if(a%prime == 0){\n\
    \                    isPrime = false\n                    return\n           \
    \     }\n            )\n            if(isPrime)\n                for(prime <-\
    \ primes){\n                    aPrimeIndex += 1\n                    if(aPrimeIndex\
    \ > 100){\n                        aPrimeIndex = 0\n                    }\n  \
    \                  if(a%prime != 0) false\n                }\n            else\n\
    \                false\n        }", "        val factorList = mutable.ListBuffer.empty[Long]\n\
    \        factorList += 2\n        factorList += 3\n        factorList += 5\n \
    \       \n        // Start searching for the number in the factorList\n      \
    \  var flag = true\n        while (factorList.nonEmpty) {\n            var i =\
    \ 1\n            while (i < factorList.size) {\n                if (a%factorList(i)\
    \ == 0) {\n                    // Flag is set to false to indicate we have found\
    \ a factor.\n                    flag = false\n                }\n           \
    \     i ++\n            }\n            factorList += i \n        }\n        \n\
    \        // Return true if we found a factor else false\n        flag", "    \
    \    val arr : Array[Long] = Array.fill(100)(2l) ++ Array.fill(100)(3l) ++\n \
    \           Array.fill(100)(5l) ++ Array.fill(100)(7l) ++\n            Array.fill(100)(11l)\
    \ ++  Array.fill(100)(13l) ++\n            Array.fill(100)(17l) ++  Array.fill(100)(19l)\
    \ ++\n            Array.fill(100)(23l) ++  Array.fill(100)(29l) ++\n         \
    \   Array.fill(100)(31l) ++  Array.fill(100)(37l) ++\n            Array.fill(100)(41l)\
    \ ++  Array.fill(100)(43l) ++\n            Array.fill(100)(47l) ++  Array.fill(100)(53l)\
    \ ++\n            Array.fill(100)(59l) ++  Array.fill(100)(61l) ++\n         \
    \   Array.fill(100)(67l) ++  Array.fill(100)(71l) ++\n            Array.fill(100)(73l)\
    \ ++  Array.fill(100)(79l) ++\n            Array.fill(100)(83l) ++  Array.fill(100)(89l)\
    \ ++\n            Array.fill(100)(97l) ++  Array.fill(100)(101l) ++\n        \
    \    Array.fill(100)(103l) ++  Array.fill(100)(107l) ++\n            Array.fill(100)(109l)\
    \ ++  Array.fill(100)(113l) ++\n            Array.fill(100)(117l) ++  Array.fill(100)(121l)\
    \ ++\n            Array.fill(100)(123l) ++  Array.fill(100)(127l) ++\n       \
    \     Array.fill(100)(131l) ++  Array.fill(100)(137l) ++\n            Array.fill(100)(139l)\
    \ ++  Array.fill(100)(147l) ++\n            Array.fill(100)(151l) ++  Array.fill(100)(157l)\
    \ ++\n            Array.fill(100)(159l) ++  Array.fill(100)(163l) ++\n       \
    \     Array.fill(100)(167l) ++  Array.fill(100)(173l) ++\n            Array.fill(100)(179l)\
    \ ++  Array.fill(100)(181l) ++\n            Array.fill(100)(191l) ++  Array.fill(100)(193l)\
    \ ++\n            Array.fill(100)(197l) ++  Array.fill(100)(199l) ++\n       \
    \     Array.fill(100)(211l) ++  Array.fill(100)(223l) ++\n            Array.fill(100",
  "        \n        val aPrimes = List(3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val bPrimes = List(3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        \n        // a is too high\n        if(a > 100){\n    \
    \        return false\n        }\n        // a is too low\n        if(a<0){\n\
    \            return false\n        }\n        // a is prime\n        if(aPrimes.contains(a)){\n\
    \            return true\n        }\n        // a is not prime\n        if(bPrimes.contains(a)){\n\
    \            return false\n        }\n        // a is divisible by any two primes\n\
    \        val divisor = a / 2\n        for(d <- List(divisor, divisor*2, divisor*3,\
    \ divisor*4, divisor*5, divisor*6, divisor*7, divisor*8, divisor*9, divisor*10))\
    \ {\n            if(a % d == 0){\n                return false\n            }\n\
    \        }\n        \n        return true", "        def isPrime(a : Long) : Boolean\
    \ = {\n            val factors = prime / 2\n            var i = 2\n          \
    \  while(i < factors.toInt){\n                val rem = factors.toInt % i\n  \
    \              if(i == rem) true\n                else if(!rem) false\n      \
    \          i += 2\n            }\n        }\n        def isMultiplication(a, b)\
    \ =\n            a.toInt == b.toInt && (a * b).toInt == a\n        val prime =\
    \ (2 to 100).toSet \n        if(prime contains a) isPrime(a)\n        else if(a.signum\
    \ > 0) isPrime(a) && isMultiplication(prime, a) || isMultiplication(prime, a)\n\
    \        else false", "        // a = (2 * 3 * 5)\n        val b = 2\n       \
    \ val c = 5\n        var counter = 1000\n        var isPrime = true\n\n      \
    \  while (counter > 0) {\n            if (b % a == 0 && c % a == 0) {\n      \
    \          counter += 1\n            } else {\n                counter = 0\n \
    \               isPrime = false\n            }\n            b += 1\n         \
    \   c += 1\n        }\n        return isPrime", "        // Create a set that\
    \ will store the multiplication prime numbers. \n        val set = new mutable.HashSet[Long]()\n\
    \        // Create an array that will store the multiplication prime numbers multiplied\
    \ by 3\n        val three = Array.fill(100)(3L)\n        // Create a boolean variable\
    \ to test if the number is prime or not \n        var isPrime = true\n       \
    \ // Create a variable that will store the value of the given number \n      \
    \  var value = a\n        // While the given number is not prime \n        while\
    \ (!isPrime) {\n            // For every multiplication prime in the set \n  \
    \          for (x<-set) {\n                // For every multiplication prime in\
    \ the array\n                for (i<-0 to three.length) {\n                  \
    \  // If the multiplication prime is equal to the number then we set it false\
    \ \n                    if (three(i) == (x * (x + 3))) {\n                   \
    \     // If the multiplication prime is not in the set then we add it to the set\
    \ \n                        if (!set.add(x * (x + 3))) {\n                   \
    \         // If we add it to the set then the number is prime \n             \
    \               isPrime = false\n                            break\n         \
    \               }\n                    }\n                }\n            }\n \
    \           // If the given number is not prime then we add the number to the\
    \ set \n            if (!set.add(a)) {\n                // If the set does not\
    \ contain the given number then the number is prime \n                isPrime\
    \ = false\n            }\n        }\n        // If the set contains the given\
    \ number then the number is prime \n        if (set.contains(a)) {\n         \
    \   true\n        } else {\n            false\n        }", "        val primes\
    \ = mutable.Set[Long]()\n        for (i <- 2 to a-2) {\n            val isPrime\
    \ = true\n            primes += i\n            if (isPrime) {\n              \
    \  for (j <- i-1; j <- i+primes.size-1 if (i*j > a)) \n                    if\
    \ (a%j == 0) isPrime = false\n            }\n            if (isPrime) primes +=\
    \ i\n        }\n        primes size == 3", "        val two = new Long(2) //prime\
    \ number 2\n        val three = new Long(3) //prime number 3\n        val five\
    \ = new Long(5) //prime number 5\n        val isPrime = a != 0L //a is not 0\n\
    \        val result = (a % two == 0 && a % three == 0 && a % five == 0) //a is\
    \ multiple of 2 or 3 or 5\n        val numbers = new mutable.ListBuffer[Long]()\
    \ //list of prime numbers up to a\n        for(i <- 2L until a) {\n          \
    \  if (isPrime(i)) {\n                numbers += i //append prime number to numbers\
    \ list\n            }\n        }\n        //check if the numbers list has 3 elements\n\
    \        if(numbers.length != 3) {\n            return false\n        }\n    \
    \    //check if all numbers in the list are multiples of 3 or 5\n        for(number\
    \ <- numbers) {\n            if(number % two == 0 && number % three == 0 && number\
    \ % five == 0) {\n                result = true\n                break\n     \
    \       }\n        }\n        result", "        def primes(a: Long): List[Int]\
    \ = {\n            // http://stackoverflow.com/questions/206816/how-to-list-all-primes-below-n-in-java\n\
    \            // http://stackoverflow.com/questions/2187578/list-of-primes-below-n-in-java\n\
    \            // http://stackoverflow.com/questions/14241859/fast-algorithm-to-list-primes-in-range-3-100000000-for-java\n\
    \            // http://stackoverflow.com/questions/2200918/is-there-a-fast-algorithm-to-find-the-primes-of-a-number-in-java\n\
    \            val primes = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \         val isPrime = (x : (Int, Int) => Boolean)(x => {\n                x\
    \ match {\n                    case (y @ _, _) if y > a => (y == a) || (y > a\
    \ && (y % a != 0))\n                    case _ => false\n                }\n \
    \           })\n            val sqrt = (n : Int) => if (n == 0 || n > 100) -1\
    \ else math.floor(math.sqrt(n))\n            primes += 2\n            primes ++=\
    \ (3 to sqrt(a).toInt) filter isPrime\n            primes\n        }\n       \
    \ val primes = primes(a)\n        val primesSet = primes.toSet\n        primesSet\
    \ contains (a * 3 + 1)", "        val primes = PrimeFinder.getPrimesLessThan(100).filter(_\
    \ != a)\n        primes.forall(prime => a % prime == 0)", "        var isMultipleOfThreePrimes\
    \ = false\n        for (i<-0 until a by 2) {\n            if((a % 2) == 0 && (a\
    \ % 3) == 0 && (a % 5) == 0) {\n                isMultipleOfThreePrimes = true\n\
    \                break;\n            }\n        }\n        return isMultipleOfThreePrimes",
  "        def isPrime(a : Long) : Boolean = {\n            for(i <- 2l; i < ( 100\
    \ / a ) ; i += 1) {\n                if(a % i == 0) {\n                    return\
    \ false\n                }\n            }\n            return true\n        }\n\
    \n        def isMultiPrime(a : Long) : Boolean = {\n            for(i <- 2l; i\
    \ < ( 100 / a ) ; i += 1) {\n                if(a % i == 0) {\n              \
    \      if(isPrime(i) == isPrime(a)) {\n                        return true\n \
    \                   }\n                }\n            }\n            return false\n\
    \        }\n        return isMultiPrime(a)", "        val prime : mutable.HashSet[Long]\
    \ = mutable.HashSet[Long]()\n        var temp = a\n        for(i <- 2 to 100)\
    \ {\n            if(temp % i == 0) {\n                prime.add(i)\n         \
    \   }\n        }\n        temp += 1\n        while(temp <= 100) {\n          \
    \  if(prime(temp)) {\n                return true\n            }\n           \
    \ temp += 1\n        }\n        return false", "        def isPrime(i : Int) :\
    \ Boolean = {\n            val isPrime = true\n            for(j <= i / 2; j++\
    \ ){\n                val x = i - j * j\n                if( x % 2 == 0 ){\n \
    \                   isPrime = false\n                    break\n             \
    \   }\n            }\n            isPrime\n        }\n        val isTrue = true\n\
    \        for(i <- 3 to (math.min(100, a)) )\n        {\n            if(!isPrime(i)\
    \ && isTrue) {\n                isTrue = false\n            }\n        }\n   \
    \     if(isTrue) {\n            true\n        } else {\n            false\n  \
    \      }", "        val b : Int = a / 100\n        val c = a % 100\n        var\
    \ sum = 0\n        for( i <- 0 until b)\n        {\n            if((b - i) < 2)\n\
    \            {\n                sum = sum + i\n            }\n            else\n\
    \            {\n                val k : Int = c / i\n                val m = c\
    \ % i\n                if( (k == 0) || (m == 0) )\n                {\n       \
    \             sum = sum + i\n                }\n            }\n        }\n   \
    \     sum <= a && sum >= a", "        var result = false\n        var n = a\n\
    \        while (n>=1l) {\n            if (isPrime(n)) {\n                if (isPrime(n+3))\
    \ {\n                    if (isPrime(n+5)) {\n                        if (isPrime(n+7))\
    \ {\n                            result = true\n                            break\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            n -= 1\n        }\n        result", '        // YOUR CODE
    HERE', "        var isPrime = true\n        var mult = 1\n        // The loop\
    \ checks the factors up to 100 for all possible factors\n        var factors =\
    \  for(i <- 2 to 100) {\n            if(a%i == 0) {\n                isPrime =\
    \ false\n                break\n            }\n            if(i * mult  > 100)\
    \ {\n                isPrime = false\n                break\n            }\n \
    \           if(mult%i == 0) {\n                mult = mult*i\n            } else\
    \ {\n                mult = mult\n            }\n        }\n        isPrime",
  "        val isMultiplication = (a % 2 == 0) && (a % 3 == 0) && (a % 5 == 0)\n \
    \       println(\"a : \" + a)\n        println(\"isMultiplication : \" + isMultiplication)\n\
    \        val isPrime = new mutable.HashSet[Int]()\n        for (i <- 2 to a/2)\
    \ {\n            if (a%i == 0) {\n                println(\"isPrime : \" + i)\n\
    \                isPrime += i\n            }\n        }\n        println(\"isPrime\
    \ : \" + isPrime)\n        return (isMultiplication && isPrime.length == 3)",
  "        for (i<- 0 until 100) {\n            if (isPrime(a) && isPrime(a+3) &&\
    \ isPrime(a+5)) \n                return true\n        }\n        return false",
  "        var result = true\n        var primes = Set[Long]()\n        for (i <-\
    \ 2 to a/2) {\n            primes ++= primeCheck(a, i)\n        }\n        //\
    \ If this number is not divisible by 3 or 5, then it's not multiplicable\n   \
    \     if (! (a%2 == 0 || a%3 == 0)){\n            result = false\n        }\n\
    \        return result", "        if (a<100) { \n            return false\n  \
    \      }\n        val primeList = List(2,3,5,7)\n        val resultList = mutable.ListBuffer.empty[Boolean]\n\
    \        for (p<-primeList) {\n            if ((a%p)==0) { \n                continue\n\
    \            }\n            if ((p+1)<=(a/p)) {\n                for (i<-primeList)\
    \ {\n                    if ((a%i) == 0) {\n                        break\n  \
    \                  }\n                    if ((i%p)==0) {\n                  \
    \      resultList += ((i==p)&&(p<(a/i))); \n                        break\n  \
    \                  }\n                }\n            }\n        }\n        if\
    \ (resultList.count() == 3) {\n            return true\n        }\n        return\
    \ false", "        val primes = mutable.ListBuffer(2, 3, 5, 7)\n        val test\
    \ = (a / primes.last).toInt\n        primes.take(test) foreach (x => if (a % x\
    \ == 0) return false)\n        return true", "        val primes = mutable.Set[Long]()\n\
    \        var i = 3\n        while(i < (a / i) + 1) {\n            if(primes.contains(i))\
    \ {\n                primes += i\n            }\n            i += 1\n        }\n\
    \        primes.forall(prime => {\n            val primeFactor = (a / prime)\n\
    \            if(primeFactor == 1) true\n            else if(primeFactor > 1) false\n\
    \            else prime + primes.contains(primeFactor)\n        })", "       \
    \ val m = 3\n        val nums = mutable.ArrayBuffer(m)\n\n        while (nums.length\
    \ < 100) {\n            val y = m * m * m\n            if (nums.contains(y)) nums\
    \ += m\n            else {\n                nums += m\n                val y =\
    \ m * m * m\n                if (nums.contains(y)) nums += m\n            }\n\
    \        }\n        val a = nums.takeWhile(_ > a).toArray\n        val b = nums.dropWhile(_\
    \ > a).toArray\n        if (a != b && a.sum == b.sum) {\n            return true\n\
    \        }\n        return false", "        val result = a.toInt\n        val\
    \ primes = primesOf3Plus2\n        primes.contains(result)", "        var isMultiplyPrime\
    \ : Boolean = true\n        for (i = 1 to a.toInt) {\n            var temp = a\n\
    \            while (temp % 3 == 0) temp /= 3\n            if (temp == 2) isMultiplyPrime\
    \ = false\n        }\n        return isMultiplyPrime", "        val primes = mutable.HashSet[Long]()\n\
    \        val isPrime = mutable.HashSet[Boolean]()\n        for (i <- 2 to a/2+1)\
    \ {\n            if (isPrime(i)) {\n                primes.add(i)\n          \
    \  }\n        }\n        for (i <- 3 to a/3+1) {\n            if (isPrime(i))\
    \ {\n                primes.add(i)\n            }\n        }\n        for (i <-\
    \ 5 to a/5+1) {\n            if (isPrime(i)) {\n                primes.add(i)\n\
    \            }\n        }\n        primes.contains(a) && a", "        if ((a%2\
    \ == 0 && a%3 == 0) || (a%2 == 0 && a%5 == 0)) {\n            return true\n  \
    \      }\n        if ((a%4 == 0) || (a%6 == 0)) {\n            return false\n\
    \        }\n        for (i <- 2 to a) {\n            if (i%2 != 0 && i%3 == 0\
    \ || i%2 != 0 && i%5 == 0 || i%4 != 0 || i%6 != 0) {\n                return false\n\
    \            }\n        }\n        return true", "        val arr = mutable.ArrayBuffer.empty[(Long,\
    \ Long)]\n        def isPrime(n: Long): Boolean = {\n            val div = n.toLong\
    \ / 2\n            div <= 1 && div > 0\n        }\n\n        for (d <- 2 to (a.toInt))\
    \ {\n            if ((d <= a) &&  isPrime(d)) {\n                arr += (d ->\
    \ (n = 0))\n                for (x <- d until a / d) {\n                    if\
    \ ((x % d) == 0)\n                        n = 1\n                    else\n  \
    \                      n = 0\n                }\n            }\n        }\n  \
    \      arr.toSet.size", "        var isPrime = true\n        var remainder = a\
    \ % 10\n        var count = 3\n        for(i <- 2 until count) {\n           \
    \ if(remainder <= 0) break\n            isPrime = (remainder % i == 0)\n     \
    \       remainder = a / i\n        }\n        if(!isPrime) {\n            isMultiplyPrime\
    \ = false\n        }\n        isMultiplyPrime", "        val primes = mutable.ArrayBuffer(3,\
    \ 5, 7)\n        val res = mutable.ArrayBuffer[Long]()\n        val factors =\
    \ mutable.ArrayBuffer[Long]()\n        val num = a / 3\n        primes.takeWhile(p\
    \ => p <= num).foreach { p =>\n            val n = num % p\n            factors\
    \ += n\n            n match {\n                case 0 => res  += num\n       \
    \         case _ => if (num % n) res  += n\n            }\n            num =/=\
    \ p\n        }\n        (factors.length == primes.length) && res.size == num",
  "        val isPrime = new mutable.HashSet[Long]()\n        val count = new mutable.HashMap[Long,\
    \ Int]()\n        val arr = (100 to 100l).toArray\n        for(i <- 1 to arr.length)\
    \ {\n            if(!isPrime.contains(arr(i))) {\n                var remain =\
    \ arr(i) \n                while(!(remain % 3 == 0)) {\n                    isPrime.add(remain)\n\
    \                    remain += 1\n                }\n                count.put(arr(i),\
    \ remain)\n            }\n        }\n        if(count.contains(a)) {\n       \
    \     count.remove(a)\n            count.size\n        } else {\n            false\n\
    \        }", "        def isPrime(n : Int) : Boolean = {\n            for (i <-\
    \ 2 to sqrt(n)) {\n                if (n % i == 0)\n                return false\n\
    \            }\n            return true\n        }\n        var flag = 0\n   \
    \     for (i <- 2 to a) {\n            flag = flag + i\n            if (isPrime(i))\
    \ {\n                if (flag == a)\n                    return true\n       \
    \         else\n                    return false\n            }\n        }\n \
    \       return false", "        var b = 2\n        var result = False\n      \
    \  while(result == False && b < 100) {\n            val isPrime = a % b == 0 &&\
    \ b <= Math.sqrt(a)\n            if(b * b <= a && isPrime) {\n               \
    \ result := true\n            }\n            b += 1\n        }\n        result",
  "        // Your code here\n        val primes = mutable.HashSet[Long]()\n     \
    \   val isPrime = mutable.HashSet[Long]()\n        val primeFactors = mutable.HashSet[Long]()\n\
    \n        for(i <- 2l to (a+2l)){\n            if(i%2l==0l) primes.add(i)\n  \
    \          for(j <- 2l to Math.sqrt(i).toInt + 1l){\n                if(i%j==0l){\n\
    \                    primeFactors.add(j)\n                    primes.add(i)\n\
    \                    primeFactors.add(i)\n                }\n            }\n \
    \       }\n        primeFactors.toSeq.filter(primeFactors.contains).foldLeft(true){\
    \ (a, b) => a * b }", "        var counter = 0\n        for (i <- 2 to a)\n  \
    \          if (a%i==0)\n                if (counter == 3 || counter == 5)\n  \
    \                  return true\n                else {\n                    counter\
    \ += 1 \n                }\n        return false", "        val primes = mutable.ArrayBuffer.empty[Int]\n\
    \        primes += 2\n        primes += 3\n        primes += 5\n\n        def\
    \ isPrime(p : Int) : Boolean = \n            val isPrime = true\n            for(i\
    \ <- 2 until primes.size) \n                if(!primes.contains(((p * i).toInt)))\
    \ \n                    isPrime = false\n            isPrime\n        \n     \
    \   for(i <- primes until primes.max) \n            if(isPrime(i)) primes += i\n\
    \            \n        primes.contains(a)", "        def isPrime(num : Int) :\
    \ Boolean = {\n            for (i <- 2 to (num / 2)) {\n                if (num\
    \ % i == 0)\n                    return false\n            }\n            true\n\
    \        }\n        val n = 3\n        val mult = a.toInt\n        var primesFound\
    \ = 0\n        for (i = n to mult) {\n            if (isPrime(i) && primesFound\
    \ < 3) {\n                primesFound += 1\n            }\n        }\n       \
    \ return primesFound == 3", "        var flag = true\n        var count = 0\n\
    \        var p1 = 2l\n        var p2 = 2l\n        var p3 = 2l\n        while(count\
    \ <= 100){\n            if((p1%p2 == 0) && (p2%p3 == 0) && (p1 != p2) && p1 !=\
    \ p3){\n                flag = false \n                break\n            }\n\
    \            count = count + 1\n            p1 = p1 + 2l\n            p2 = p2\
    \ + 2l\n            p3 = p3 + 2l\n        }\n        return flag", "        val\
    \ list = new ListBuffer[Long]()\n        for(i <- 2 to a/2+1){\n            for(ii\
    \ <- 2 to a/2+1){\n                if(i*ii == a){\n                    list+=\
    \ a\n                    list+= ii\n                    list+= a\n           \
    \         list+= ii\n                }\n            }\n        }\n        list.takeWhile(x\
    \ => x <= a).length == 3", "        // TODO write your solution here\n       \
    \ var isPrime = true\n        var result = a\n        while(result % 2 == 0) result\
    \ = result / 2\n        while(result % 3 == 0) result = result / 3\n        while(result\
    \ % 5 == 0) result = result / 5\n        while(result % 7 == 0) result = result\
    \ / 7\n        while(result % 11 == 0) result = result / 11\n        while(result\
    \ % 13 == 0) result = result / 13\n        while(result % 17 == 0) result = result\
    \ / 17\n        while(result % 19 == 0) result = result / 19\n        while(result\
    \ % 23 == 0) result = result / 23\n        while(result % 29 == 0) result = result\
    \ / 29\n        while(result % 31 == 0) result = result / 31\n        while(result\
    \ % 37 == 0) result = result / 37\n        while(result % 41 == 0) result = result\
    \ / 41\n        while(result % 43 == 0) result = result / 43\n        while(result\
    \ % 47 == 0) result = result / 47\n        while(result % 53 == 0) result = result\
    \ / 53\n        while(result % 59 == 0) result = result / 59\n        while(result\
    \ % 61 == 0) result = result / 61\n        while(result % 67 == 0) result = result\
    \ / 67\n        while(result % 71 == 0) result = result / 71\n        while(result\
    \ % 73 == 0) result = result / 73\n        while(result % 89 == 0) result = result\
    \ / 89\n        while(result % 97 == 0) result = result / 97\n        while(result\
    \ % 109 == 0) result = result / 109\n        while(result % 113 == 0) result =\
    \ result / 113\n        while(result % 127 == 0) result = result / 127\n     \
    \   while(result % 131 == 0) result = result / 131\n        while(result % 139\
    \ == 0) result = result / 139\n        while(result % 147 == 0) result = result\
    \ / 147\n        while(result % 153 == 0) result = result / 153\n        while(result\
    \ % 161 == 0) result = result / 161\n        while(result % 179 == 0) result =\
    \ result / 179\n        while(result % 187 == 0) result = result / 187\n     \
    \   while(result % 193 == 0) result = result / 193\n        while(result % 199\
    \ == 0) result = result / 199\n        while(result % 209 == 0) result = result\
    \ / 209\n        while(result % 217 == 0) result = result / 217\n        while(result\
    \ % 227 == 0) result = result / 227\n        while(result % 239 == 0) result =\
    \ result / 239\n        while(result % 241 == 0) result = result / 241\n     \
    \   while(result % 251 == 0) result = result / 25", "        if (a%2 == 0 || a%3\
    \ == 0)\n            return false\n        // a is a multiple of 2 & 3\n     \
    \   // so check whether a is multiple of 4 & 6\n        var isMultiplicity : Boolean\
    \ = true\n        var mult : Int = 2\n        var divisor : Int = 5\n        while(\
    \ isMultiplicity && mult < 100) {\n            if( a%mult == 0) {\n          \
    \      isMultiplicity =  false\n            } else if( a%mult == divisor) {\n\
    \                divisor += 2\n            }\n            mult += 2\n        }\n\
    \        return isMultiplicity && mult < 100", "        val n = scala.math.pow(a,\
    \ 3.0).toInt\n        for {\n            i <- 0 until 100\n            j = i +\
    \ 1 until 100\n            k = j + 1 until 100\n        } yield {\n          \
    \  (n == i * j * k)\n        }", "        var i = 0\n        var n = a\n     \
    \   var factors = Array[Long]()\n        factors = factorization(n)\n        if(factors.size\
    \ == 3)\n        {\n            var isPrime = true\n            while(isPrime\
    \ && i < factors.length)\n            {\n                if((n % factors(i)) <\
    \ 2)\n                {\n                    isPrime = false\n               \
    \ }\n                i += 1\n            }\n        }\n        return isPrime",
  "        val m = a / 3\n        val n = a / 3\n        var k = 6\n        while\
    \ (k * k <= m) {\n            if ((m % k) == 0) {\n                if ((n % k)\
    \ == 0) {\n                    false\n                } else {\n             \
    \       true\n                }\n            } else {\n                true\n\
    \            }\n            k += 1\n        }", "        if (a < 100) {\n    \
    \        val primes = mutable.Set.empty[Long]\n            var i = 2\n       \
    \     while(i <= a) {\n                val isPrime = primes.contains(i) // check\
    \ whether already added\n                if(!isPrime) {\n                    primes\
    \ += i\n                    if (i*i > a) { // check whether i is prime or not\n\
    \                        primes += i*i\n                    }\n              \
    \  }\n                i += 2\n            }\n            primes.size == 3\n  \
    \      }\n        false", "        val list = mutable.ListBuffer[Long]()\n   \
    \     for (i = 2 to (a/2) by 2){\n            val test = (i * i).toLong\n    \
    \        if (a % test == 0)\n                list.add(test)\n        }\n     \
    \   if (list.size > 3) {\n            val set = Set(1, 3)\n            for (e\
    \ <- list) if (!(set.contains(e)))\n                return false\n        }\n\
    \        return true", "         var i : Int = 3\n         val list = List(2,\
    \ 3, 5, 7, 11, 13)\n         while (i < list.length && a < list(i * i)) {\n  \
    \            i += 1\n         }\n         if (i >= list.length) {\n          \
    \    return false\n         } else {\n              return list(i) == a\n    \
    \     }", "        // Create list of prime numbers in ascending order (starting\
    \ from 2).\n        val primes: List[Long] = \n          List (2l).takeWhile (p\
    \ => ! (primes contains p)) ++ \n              (2l).dropWhile (p => primes contains\
    \ p)\n            // Create list of all numbers from 1 to a\n            .flatMap(i\
    \ => 1 to a).filter { i =>\n                // Check is a number is prime\n  \
    \              primes.exists { \n                    // Checking if prime divides\
    \ number in question\n                    (p : Long) => p % i == 0 \n        \
    \        } \n            }\n\n        // Return true if there is 3 primes in list\
    \ \n        primes.size == 3", "        val primes: List[Long] = getPrimes(100)\n\
    \        val primeSum = primes.map((a * _)).sum\n        primeSum <= a", "   \
    \     val l = a.toInt\n        // Check if number is divisible by 3\n        if(l\
    \ % 3 == 0) return true\n        // Otherwise we know it is not divisible by 3\n\
    \        var i = 2\n        while(i < l) {\n            if(l % i == 0) return\
    \ false\n            i += 1\n        }\n        return true", "        var a =\
    \ a % 3\n        if (a == 0 || a == 1) return true\n        val max = (2 * a)\n\
    \        var j = 2\n        var prime = true\n        var m = 2\n        while\
    \ (prime && j < a) {\n            m = (j + 2) % a\n            prime = !prime\n\
    \            j += 1\n        }\n        prime", "        // (a) is less then 100\n\
    \        val max = (100l * a).toLong\n        val set: mutable.Set[Long] = mutable.Set.empty\n\
    \n        // Find all prime numbers between 1 and max\n        for (i <- 2 to\
    \ max) {\n            if (isPrime(i)) {\n                set += i\n          \
    \  }\n        }\n\n        // Check if multiplication of 3 prime numbers is the\
    \ same number\n        for (i <- 3 to max) {\n            if (set.contains((3\
    \ * i))) {\n                return true\n            }\n        }\n\n        return\
    \ false", "        def isPrime(n: Long, m: Long, i: Int) : Boolean = {\n     \
    \       if (m < 0 || n <= 0 ) false\n            if (n % m == 0) false\n     \
    \       if (i < 100 && isPrime(n / m, m, i + 1)) true\n            else false\n\
    \        }\n        val n = a / 100\n        val m = a % 100\n        val primes\
    \ = mutable.MutableList(2L).asInstanceOf[mutable.List[Long]]\n        val i =\
    \ 5\n        while (primes.size < 100) primes = primes :+ 2L\n        while ((primes.size\
    \ > 2L * m) && (primes.size < a)) {\n            primes = primes.takeWhile(x =>\
    \ isPrime(n, x, i)) :+ 2L\n            i += 1\n        }\n        primes.contains(a)",
  "        def isPrime(n : Int) : Boolean = {\n            val sqrt = (math.sqrt(n).toInt)\n\
    \            for( i <- 2 to sqrt ) {\n                if( n % i == 0 ) \n    \
    \                return false\n            }\n            true\n        }\n\n\
    \        // If n is less than 3, return true\n        if( a < 3 )\n          \
    \  return true\n\n        // Create a set for primes\n        val primes = mutable.Set[Long]()\n\
    \n        // For numbers below 3, check if they're primes\n        for( i <- 3\
    \ to (100/3).toLong ) {\n            if( isPrime(i) ) {\n                primes.add(i)\n\
    \            }\n        }\n\n        // Add all numbers that are less than a\n\
    \        for( i <- 2 to (100 - a).toLong ) {\n            if( isPrime(i) ) {\n\
    \                primes.add(i)\n            }\n        }\n\n        // Check if\
    \ there are 3 or more prime numbers in the set\n        if(primes.size() >= 3\
    \ )\n            return true\n\n        // Return false otherwise\n        return\
    \ false", "        val num = math.abs(a)\n        val primes = mutable.PriorityQueue()\n\
    \        for(i <- 2 until num) {\n            if(i % 2 == 0) primes += i\n   \
    \     }\n        // Add all odd divisors\n        for(i <- 3 until num) {\n  \
    \          val div = i % 2\n            if(div == 0) primes += i\n        }\n\n\
    \        // Add all primes less than the given number\n        for(i <- primes\
    \ if (i < num) primes += i )\n        primes.size < 3", "        val primes =\
    \ scala.collection.mutable.Set[Long]()\n        for(i <- 2 to a) {\n         \
    \   if(i>2) primes.add(i)\n            else if(i%primes.contains(0)==0) primes.remove(i)\n\
    \        }\n        primes.contains(a) == true", "        val l = new mutable.ListBuffer[Long]()\n\
    \        l.clear()\n        var i = 0\n        while (a > 0) {\n            if\
    \ (isPrime(i)) {\n                l.append(i)\n                if (l.length ==\
    \ 3) {\n                    a = a*l(0)*l(1)*l(2) - a\n                    l.clear()\n\
    \                }\n                i = i + 1\n            }\n            i =\
    \ i + 1\n        }\n        (a > 0)", "        val list = a.get.filter(_ < 100)\
    \ toList\n        val list2 = list.filter(_%2==0)\n        val list3 = list.filter(_%3==0)\n\
    \        list2.filter(_%5==0).isEmpty && (list3.filter(_%5==0).isEmpty)", "  \
    \      val factors = List[Long]()\n        for (i <- 2L to Math.sqrt(a)) {\n \
    \           if (a % i == 0) {\n                factors += i\n            }\n \
    \       }\n        if (factors.size < 3) {\n            return false\n       \
    \ }\n        var isPrime = true\n        factors.reverse.foreach { f =>\n    \
    \        if (a % f == 0) {\n                isPrime = false\n            }\n \
    \       }\n        return isPrime", "        val n = math.ceil(a/3)\n        val\
    \ nums = (0 until n).filter(_*3 <= a)\n        return nums.length == 2 && nums.last\
    \ > 2", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n    \
    \    def isPrime(x: Long) : Boolean = {\n            var j : Long = 0\n      \
    \      while(j < (x * x + 1) / x) {\n                if(x % primes(j) == 0) {\n\
    \                    return false\n                }\n                j += 1\n\
    \            }\n            return true\n        }\n\n        if(a<100) {\n  \
    \          for(i <- 1 to a) {\n                if(isPrime(i)) {\n            \
    \        return false\n                }\n            }\n            return true\n\
    \        }\n        return false", "        var result = 0\n        for (i <-\
    \ 1 until a) {\n            result := result + (if (a % i == 0) 0 else 1)\n  \
    \      }\n        if (result == 3) true\n        else false", "        var n =\
    \ 0\n        for(i <- 2 to 100) {\n            for(j <- 3 to i) {\n          \
    \      if(i % j == 0) return false\n            }\n        }\n        return true",
  "        var flag = 0\n        var count = 3\n        var p = 2\n        var i =\
    \ 0\n        var j = a.toInt\n        var a3 = a * a\n        while(count <= j)\
    \ {\n            i = j % p\n            if(a3 == i) {\n                flag =\
    \ 1\n            }\n            p += 1\n            count += 1\n        }\n  \
    \      flag match {\n            case 0 => true\n            case 1 => false\n\
    \        }", "       if(isPrime(a)) {\n           for (i <- 0 until a) {\n   \
    \            if(isPrime(i)) {\n                   for(j <- 0 until a) {\n    \
    \                   if((i*j) == a) {\n                           return true\n\
    \                       }\n                   }\n               }\n          \
    \ }\n       }\n       false", "        \n        val primes: Array[Long] = primeList(a)\n\
    \        if (primes.length < 3)\n            return false\n        val isMultiplyPrime:\
    \ Boolean = primes.exists(p => a % p == 0)\n        return isMultiplyPrime", " \
    \       def isMultiple(n : Long) : Boolean = {\n            var i = 2\n      \
    \      while (i <= n && n % i == 0) {\n                i += 1\n            }\n\
    \            (i != n)\n        }\n        var i = 0\n        while (i <= 100 &&\
    \ isMultiple(a * i)) {\n            i += 1\n        }\n        (i != 100)", " \
    \       var b = a\n        // We will use this to see if we have a new prime number\n\
    \        var isPrime = false\n        // Use a mutable List to store the previous\
    \ prime numbers\n        var primeNumbers = mutable.ListBuffer[Long]()\n     \
    \   // The for loop will go up to 100 - 3\n        // The prime numbers are 2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97\n        for (i<- 2 to 100-3) {\n            // For each number\
    \ between 2 and the number we are checking\n            // check if it is a multiple\
    \ of the number we are checking\n            // if so then store it in our list\
    \ and reset our check\n            // This is because once we get the first 3\
    \ prime numbers,\n            // the previous primes will not be prime numbers\n\
    \            if (a%i == 0) {\n                b = a/i\n                // If we\
    \ have a new prime number\n                // We will store it in our mutable\
    \ list\n                if (b != 1) {\n                    isPrime = true\n  \
    \                  primeNumbers += b\n                }\n                // We\
    \ will reset our check\n                b = a\n            }\n        }\n    \
    \    // If the list is not empty and the last number is not 1\n        // then\
    \ we know that we have found a multiple of 3\n        // otherwise we are not\
    \ finding 3 prime numbers\n        if (isPrime && primeNumbers.last != 1) {\n\
    \            isPrime = false\n        }\n        return isPrime", "        if\
    \ (a < 100) \n            return false\n        var primes = Array(1, 2, 3)\n\
    \        var remainder = a % 3\n        \n        while (remainder == 0 && primes.length\
    \ < 3)\n        {\n            primes = primes :+ 2\n            remainder = a\
    \ % 3\n        }\n\n        primes foreach (p => {\n            if (a % p == 0\
    \ && primes.isEmpty || (primes.contains(p * 2) && (primes.contains(p / 2) || primes.contains(p\
    \ / 3))))\n            {\n                primes = primes.filterNot(p => p <=\
    \ remainder)\n                remainder = 0\n            }\n        })\n     \
    \   remainder = 0 \n        remainder == 0 && (primes.length == 3)", "       \
    \ val a = math.abs(a)\n        var isPrime = true\n        var aPrime = a\n  \
    \      for (i<-2 until aPrime) {\n            if (aPrime % i == 0) {\n       \
    \         isPrime = false\n                break\n            }\n        }\n \
    \       if (isPrime) {\n            return true\n        }\n        else {\n \
    \           return false\n        }", "        \n        def check(a:Int) : Boolean\
    \ = a > 100\n\n        def isMultiple(a:Int) : Boolean = a % 2 == 0\n        def\
    \ isPrime(a:Int) : Boolean = a % 2 == 0\n        def isMultiple(a:Int) : Boolean\
    \ = a % 2 == 0\n        def isPrime(a:Int) : Boolean = a % 2 == 0\n        def\
    \ isMultiple(a:Int) : Boolean = a % 2 == 0\n        def isPrime(a:Int) : Boolean\
    \ = a % 2 == 0\n\n        def isMultiple(a:Int) : Boolean = a % 2 == 0\n     \
    \   def isPrime(a:Int) : Boolean = a % 2 == 0\n        def isMultiple(a:Int) :\
    \ Boolean = a % 2 == 0\n        def isPrime(a:Int) : Boolean = a % 2 == 0\n  \
    \      def isMultiple(a:Int) : Boolean = a % 2 == 0\n        def isPrime(a:Int)\
    \ : Boolean = a % 2 == 0\n\n        def isMultiple(a:Int) : Boolean = a % 2 ==\
    \ 0\n        def isPrime(a:Int) : Boolean = a % 2 == 0\n        def isMultiple(a:Int)\
    \ : Boolean = a % 2 == 0\n        def isPrime(a:Int) : Boolean = a % 2 == 0\n\
    \        def isMultiple(a:Int) : Boolean = a % 2 == 0\n        def isPrime(a:Int)\
    \ : Boolean = a % 2 == 0\n\n        def isMultiple(a:Int) : Boolean = a % 2 ==\
    \ 0\n        def isPrime(a:Int) : Boolean = a % 2 == 0\n        def isMultiple(a:Int)\
    \ : Boolean = a % 2 == 0\n        def isPrime(a:Int) : Boolean = a % 2 == 0\n\
    \        def isMultiple(a:Int) : Boolean = a % 2 == 0\n        def isPrime(a:Int)\
    \ : Boolean = a % 2 == 0\n\n        def isMultiple(a:Int) : Boolean = a % 2 ==\
    \ 0\n        def isPrime(a:Int) : Boolean = a % 2 == 0\n        def isMultiple(a:Int)\
    \ : Boolean = a % 2 == 0\n        def isPrime(a:Int) : Boolean = a % 2 == 0\n\
    \        def isMultiple(a:Int) : Boolean = a % 2 == 0\n        def isPrime(a:Int)\
    \ : Boolean = a % 2 == 0\n\n        def isMultiple(a:Int) : Boolean = a % 2 ==\
    \ 0\n        def isPrime(a:Int) : Boolean = a % 2 == 0\n        def isMultiple(a:Int)\
    \ : Boolean = a % 2 == 0\n        def isPrime(a:Int) : Boolean = a % 2 == 0\n\
    \        def isMultiple(a:", "        val primes = Vector(2L, 3L, 5L, 7L, 11L,\
    \ 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, \n             \
    \               61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L,\
    \ 113L, 127L, 131L, \n                            137L, 139L, 149L, 151L, 157L,\
    \ 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, \n                         \
    \   199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L,\
    \ \n                            277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L,\
    \ 331L, 337L, 347L, 349L, 353L, \n                            359L, 367L, 373L,\
    \ 379L, 383L, 389L, 397L, 401L, 411L, 419L, 421L, 431L, 433L, \n             \
    \               439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L,\
    \ 503L, 509L, \n                            521L, 523L, 541L, 547L, 557L, 563L,\
    \ 569L, 571L, 577L, 587L, 593L, 599L, 601L, \n                            607L,\
    \ 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, \n \
    \                           683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L,\
    \ 751L, 757L, 761L, 769L, \n                            773L, 787L, 797L, 809L,\
    \ 811L, 821L, 823L, 827L, 829L, 839L, 853L, 857L, 859L, \n                   \
    \         863L, 877L, 881L, 883L, 887L, 907L, 911L, 919L, 929L, 937L, 941L, 947L,\
    \ \n                            953L, 967L, 971L, 977L, 983L, 991L, 997L, 1003L,\
    \ 101L, 1021L, 1023L, 1027L, \n                            1031L, 1037L, 1041L,\
    \ 1047L, 1051L, 1059L, 1061L, 1063L, 1069L, 1087L, 1091L, \n                 \
    \           1093L, 10", "        val primes = mutable.Set[Long]()\n        for\
    \ (i = 2 to a-1) { //iterate over all prime numbers starting from 2 to n\n   \
    \         if (!primes.contains(i)) { //if the current element is not already in\
    \ the prime set\n                primes.add(i) //then add it to the prime set\n\
    \                if (isPrime(i) && isMultiplyPrime(i * a)) //if the current number\
    \ is a prime number and is the multiplication of 3 prime numbers\n           \
    \         return true //then return true\n            }\n        }\n        return\
    \ false", "        val list = (2 to Math.sqrt(a) by 2).filter(i => i%2==0 && i%3==0)\n\
    \        if (list.size>1) {\n            list.foreach(i=>{\n                val\
    \ list1 = list.filter(ii => ii%i==0)\n                if (list1.size>1) {\n  \
    \                  list1.foreach(ii=>{\n                        val list2 = list1.filter(iii\
    \ => iii%i==0)\n                        if (list2.size>1) {\n                \
    \            list2.foreach(iii=>{\n                                val list3 =\
    \ list2.filter(iiii => iiii%i==0)\n                                if (list3.size>1)\
    \ {\n                                    list3.foreach(iii=>{\n              \
    \                          val list4 = list3.filter(iiii => iiiii%i==0)\n    \
    \                                    if (list4.size>1) {\n                   \
    \                         list4.foreach(iiii=>{\n                            \
    \                    val list5 = list4.filter(iiiii => iiiii%i==0)\n         \
    \                                       if (list5.size>1) {\n                \
    \                                    list5.foreach(iiii=>{\n                 \
    \                                       val list6 = list5.filter(iiiii => iiiii%i==0)\n\
    \                                                        if (list6.size>1) {\n\
    \                                                            list6.foreach(iiii=>{\n\
    \                                                                val list7 = list6.filter(iiiii\
    \ => iiiii%i==0)\n                                                           \
    \     if (list7.size>1) {\n                                                  \
    \                  list7.foreach(iiii=>{\n                                   \
    \                                     val list8 = list7.filter(iiiii => iiiii%i==0)\n\
    \                                                                        if (list8.size>1)\
    \ {\n                                                            return false\n\
    \                                                        }\n                 \
    \                                                   })\n                     \
    \                                           } else {\n                       \
    \                                             return false\n                 \
    \                                               }\n                          \
    \                                  })\n                                      \
    \                  } else {\n                                                \
    \            return false\n                                                  \
    \      }\n                                                    })\n           \
    \                                     } else {\n                             \
    \                       return false\n                                       \
    \         }\n                                            })\n                \
    \                        } else {\n                            return false\n\
    \                        }\n                    })\n                } else {\n\
    \                    return false\n                }\n            })\n       \
    \ } else {\n            return false\n        }", '        val listPrimes = List(2l,
    3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l,
    67l, 71l, 73l, 79l, 83l, 89l, 97l, 101l, 103l, 107l, 109l, 113l, 127l, 131l, 137l,
    139l, 149l, 151l, 157l, 163l, 167l, 173l, 179l, 181l, 191l, 193l, 197l, 199l,
    211l, 223l, 227l, 229l, 233l, 239l, 241l, 251l, 257l, 263l, 269l, 271l, 277l,
    281l, 283l, 293l, 297l, 303l, 311l, 313l, 317l, 331l, 337l, 347l, 349l, 353l,
    359l, 367l, 373l, 379l, 383l, 389l, 397l, 401l, 411l, 419l, 421l, 431l, 439l,
    443l, 449l, 457l, 461l, 463l, 467l, 479l, 487l, 491l, 499l, 501l, 509l, 521l,
    523l, 541l, 547l, 557l, 563l, 569l, 571l, 577l, 587l, 593l, 599l, 601l, 607l,
    613l, 617l, 619l, 631l, 641l, 643l, 647l, 653l, 659l, 661l, 673l, 677l, 683l,
    691l, 711l, 715l, 719l, 727l, 733l, 737l, 743l, 751l, 757l, 761l, 767l, 773l,
    787l, 797l, 809l, 811l, 821l, 823l, 827l, 829l, 839l, 853l, 857l, 859l, 863l,
    877l, 881l, 883l, 887l, 907l, 911l, 919l, 929l, 937l, 941l, 947l, 953l, 967l,
    971l, 977l, 983l, 991l, 997l, 1003l, 101L, 103L, 107L, 109L, 113L, 127L, 131L,
    137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L,
    199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269', "    \
    \    val primes = Vector(2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L,\
    \ 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L)\n        val\
    \ primeFactors = Vector(3L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L,\
    \ 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L)\n\n        // check\
    \ if its not a multiple of any of the prime factors\n        if(primeFactors.contains(a\
    \ % primeFactors(0))){\n            return false\n        }\n        // now check\
    \ if its less then 100\n        if(primes.contains(a % primes(0))){\n        \
    \    return true\n        }\n        // if its less, check if its less the 100\n\
    \        if(a < 100){\n            return isMultiplyPrime(a * 3L)\n        }\n\
    \        return false", "        var a : Int\n        a = a / 100\n        var\
    \ b = 2\n        var c = 3\n        var d = 5\n        while (a < 3) {\n     \
    \       if (isPrime(a)) {\n                if (a == b) {\n                   \
    \ b++\n                    if (b < c) {\n                        c++\n       \
    \             }\n                } else {\n                    c++\n         \
    \       }\n            }\n            a++\n        }\n        val l = List(a to\
    \ c)\n        if (l.contains( l(c) + l(a)))\n            return true\n       \
    \ else\n            return false", "        var isMultiplyPrime = true\n     \
    \   var isMultiplyPrime2 = true\n        var isMultiplyPrime3 = true\n       \
    \ var isMultiplyPrime4 = true\n\n        if (a == 2) isMultiplyPrime = false\n\
    \        if (a == 3) {\n            isMultiplyPrime = false\n            isMultiplyPrime2\
    \ = false\n        }\n        if (a >= 100) {\n            isMultiplyPrime = false\n\
    \            isMultiplyPrime2 = false\n            isMultiplyPrime3 = false\n\
    \            isMultiplyPrime4 = false\n        }\n\n        if (isMultiplyPrime\
    \ == true) return  (true)\n        if (isMultiplyPrime2 == true) return  (true)\n\
    \        if (isMultiplyPrime3 == true) return  (true)\n        if (isMultiplyPrime4\
    \ == true) return  (true)\n\n        val primesList: mutable.Seq[Long] = primes(100l)\n\
    \        primesList.foreach(a => {\n            if (a > a) {\n               \
    \ if (a % 2 == 0 && a % 3 != 0) isMultiplyPrime2 = false\n                if (a\
    \ % 2 == 1 && a % 3 != 1) isMultiplyPrime2 = false\n                if (a % 3\
    \ == 1 && a % 2 != 1) isMultiplyPrime2 = false\n                if (a % 3 == 2\
    \ && a % 2 != 2) isMultiplyPrime2 = false\n                if (a % 4 == 3 && a\
    \ % 2 != 3) isMultiplyPrime2 = false\n                if (a % 4 == 2 && a % 3\
    \ != 2) isMultiplyPrime2 = false\n                if (a % 5 == 3 && a % 3 != 3)\
    \ isMultiplyPrime2 = false\n                if (a % 5 == 2 && a % 2 != 2) isMultiplyPrime2\
    \ = false\n                if (a % 6 == 3 && a % 3 != 3) isMultiplyPrime2 = false\n\
    \                if (a % 6 == 2 && a % 2 != 2) isMultiplyPrime2 = false\n    \
    \        }\n        })\n\n        if (isMultiplyPrime2 == true) return  (true)\n\
    \        if (isMultiplyPrime3 == true) return  (true)\n        if (isMultiplyPrime4\
    \ == true) return  (true)\n\n        return  (false)", "        var result = (true:\
    \ java.lang.Boolean)\n        var lastPrime = 0\n        var isPrime = true\n\
    \        while (isPrime == true) {\n            // if last prime is bigger than\
    \ current one then it is composite else prime\n            if (a < lastPrime)\
    \ {\n                isPrime = false\n            } else {\n                lastPrime\
    \ = a\n            }\n            // if current number is equal to or greater\
    \ than 1 then it is composite else prime\n            if (a <= 1) {\n        \
    \        isPrime = false\n            } else {\n                var currentPrime\
    \ = 3\n                var currentNumber = 3\n                var i = 1\n    \
    \            while (currentPrime != currentNumber) {\n                    // for\
    \ smaller numbers current prime must be greater than last prime \n           \
    \         // therefore while loop should be infinite\n                    while\
    \ ((currentPrime * currentPrime) < lastPrime) {\n                        currentPrime\
    \ = currentPrime + 1\n                    }\n                    // for bigger\
    \ numbers current prime must be less then last prime \n                    //\
    \ therefore while loop should finish at 0\n                    while ((currentPrime\
    \ * currentPrime) >= lastPrime) {\n                        currentPrime = currentPrime\
    \ - 1\n                    }\n                    // if current prime is same\
    \ with last prime then it is composite otherwise prime \n                    if\
    \ (currentPrime == lastPrime) {\n                        isPrime = false\n   \
    \                 } else {\n                        currentNumber = currentPrime\
    \ * currentNumber\n                        i = i + 1\n                    }\n\
    \                }\n            }\n        }\n        return result", "      \
    \  val isPrime = a.toInt%2==1\n        var mult = 1\n        var counter = 1\n\
    \        for(x <- 3 to a/2 by 2){\n            mult *= x\n            for(x <-\
    \ 3 to x/2 by 2){\n                mult += x\n            }\n            mult\
    \ /= x\n            counter++ // increment the counter \n        }\n        if(a%mult==0){\n\
    \            return true\n        }\n        return false", "        def isMultiplyPrime(i:Int,\
    \ mc:Int, m:Int):Boolean = \n        if (i==0 && mc>0) true\n        else if (mc==0)\
    \ false\n        else { \n            if (m%i==0) isMultiplyPrime(i+1, mc, m+1)\n\
    \            else isMultiplyPrime(i+1, mc+1, m)\n        }\n        isMultiplyPrime(0,\
    \ 3, a)", "        val num = 31l\n        val primes = mutable.HashSet[Long]()\n\
    \        while(num > 0){\n            if(primes.contains(num)){\n            \
    \    return false\n            }\n            if(num%2 == 0){\n              \
    \  primes += 2\n            }\n            if(num%3 == 0){\n                primes\
    \ += 3\n            }\n            num /= 2\n        }\n        true", "     \
    \   // return true if the a is less than 100\n        if(a < 100) {\n        \
    \    // a is less than 100 return false\n            return false\n        }\n\
    \        // a is a prime number\n        var n = 3\n        // iterate through\
    \ the number until it divides\n        while(n <= a) {\n            if(a % n ==\
    \ 0) {\n                return false\n            }\n            // if n is divisible\
    \ by i then n is no prime\n            if(a%n != 0) {\n                return\
    \ false\n            }\n            // update n\n            n = n + 2\n     \
    \   }\n        // return true if a is divisible by 3 and 5\n        return true",
  "        if (a < 100) {\n            // Find all prime numbers between 1 and a using\
    \ sieve of erathosthenes\n            val allPrimes = Array[Long]()\n        \
    \    for( num <- 1 until a) {\n                if (isPrime(num)) {\n         \
    \           allPrimes += num\n                }\n            }\n            \n\
    \            // Check if 3 primes are in the array\n            val found = 3\n\
    \            val primes = allPrimes.toSet.takeWhile(p => found > 0)\n        \
    \    \n            if (primes.size == 3) {\n                return true\n    \
    \        } else {\n                return false\n            }\n        } else\
    \ {\n            return false\n        }", "        if (a < 100l) true\n     \
    \   else a match {\n            case 2l : Long => {\n                if (isMultiplyPrime(3*a))\
    \ isMultiplyPrime(5*a)\n                else false\n            }\n          \
    \  case 3l : Long => {\n                if (isMultiplyPrime(5*a)) isMultiplyPrime(7*a)\n\
    \                else false\n            }\n            case 5l : Long => {\n\
    \                if (isMultiplyPrime(7*a)) isMultiplyPrime(11*a)\n           \
    \     else false\n            }\n            case 7l : Long => {\n           \
    \     if (isMultiplyPrime(11*a)) isMultiplyPrime(13*a)\n                else false\n\
    \            }\n            case 11l : Long => {\n                if (isMultiplyPrime(13*a))\
    \ isMultiplyPrime(17*a)\n                else false\n            }\n         \
    \   case 13l : Long => {\n                if (isMultiplyPrime(17*a)) isMultiplyPrime(19*a)\n\
    \                else false\n            }\n            case 17l : Long => {\n\
    \                if (isMultiplyPrime(19*a)) isMultiplyPrime(23*a)\n          \
    \      else false\n            }\n            case 19l : Long => {\n         \
    \       if (isMultiplyPrime(23*a)) isMultiplyPrime(29*a)\n                else\
    \ false\n            }\n            case 23l : Long => {\n                if (isMultiplyPrime(29*a))\
    \ isMultiplyPrime(31*a)\n                else false\n            }\n         \
    \   case 29l : Long => {\n                if (isMultiplyPrime(31*a)) true\n  \
    \              else false\n            }\n            case 31l : Long => {\n \
    \               if (isMultiplyPrime(33*a)) true\n                else false\n\
    \            }\n            case 33l : Long => {\n                if (isMultiplyPrime(37*a))\
    \ true\n                else false\n            }\n            case 37l : Long\
    \ => {\n                if (isMultiplyPrime(41*a)) true\n                else\
    \ false\n            }\n            case 41l : Long => {\n                if (isMultiplyPrime(43*a))\
    \ true\n                else false\n            }\n            case 43l : Long\
    \ => {\n                if (isMultiplyPrime(47*a)) true\n                else\
    \ false\n            }\n            case 47l : Long => {\n                if (isMultiplyPrime(53*a))\
    \ true\n                else false\n            }\n            case 53l : Long\
    \ => {\n                if (isMultiplyPrime", "        val a = ((a % 10000000)\
    \ + 1) div 10000000\n        val list1 = List(2, 3, 5)\n        val list2 = List(2,\
    \ 3, 7, 11)\n        val list3 = List(3, 5, 7, 11)\n        if (list1.exists(x\
    \ => x == a))\n            return true\n        if (list2.exists(x => x == a))\n\
    \            return true\n        if (list3.exists(x => x == a))\n           \
    \ return true\n        false", "        if ((a < 100) && (a % 3 == 0) && (a %\
    \ 5 == 0)) {\n            return true\n        }\n        return false", "   \
    \     val primes = mutable.ArrayBuffer.empty[Int]\n\n        def isPrime(n: Int)\
    \ : Boolean = n <= 1 || (n % 2 != 0 && n % 3 != 0) || (n % 5 == 0)\n        def\
    \ isMultiplication(n: Int) : Boolean = n != 1 && !isPrime(n)\n\n        def findPrimes(n\
    \ : Int) : Unit = {\n            if ((isPrime(n) == true) && (n <= 100)) {\n \
    \               primes += n\n            }\n            if (n % 2 == 0) findPrimes(n\
    \ / 2)\n            if (n % 3 == 0) findPrimes(n / 3)\n            if (n % 5 ==\
    \ 0) findPrimes(n / 5)\n        }\n\n        primes ++= List(3, 5).filter(x =>\
    \ x > a)\n        var i = 2\n        while (i < primes.size + 1) {\n         \
    \   if (isMultiplication(a) && isMultiplication(primes(i))) {\n              \
    \  return true\n            }\n            i += 2\n        }\n        return false",
  "        // Use an accumulator to keep track of whether we've found a multiply prime\n\
    \        // This will be used because we know that multiplying any number with\
    \ 3 primes\n        // will result in no prime number left to divide by\n    \
    \    var multPrime = true\n        // Keep a copy of the original number (a) \n\
    \        val original = a\n        // Create a mutable set to keep track of all\
    \ the prime numbers we \n        // know about\n        val primes = scala.collection.mutable.Set()\n\
    \        // Loop through the numbers from 1 to 'a' \n        for (x <- 1 to original)\
    \ {\n            // if the current number is divisible by any number we know about,\
    \ \n            // set multPrime to false\n            if (x % primes.contains(0)\
    \ == false)\n                multPrime = false\n            // if x is prime number,\
    \ add to the set of prime numbers we know about\n            if (isPrime(x) ==\
    \ true)\n                primes += x\n        }\n        // If we found a multiply\
    \ prime number, return true\n        if (multPrime)\n            return true\n\
    \        // If we didn't find a multiply prime number, return false\n        return\
    \ false", "        var primes : List[Long] = Nil\n        var num : Long = a\n\
    \n        while(num > 2) {\n            if(primes.contains(num)) {\n         \
    \       return false\n            }\n            primes = primes ::: List(num\
    \ + 1) //prepend 1 to prime number\n            for(i <- 0 until primes.size)\
    \ {\n                num -= primes(i)\n            }\n        }\n        return\
    \ true", "        val primes = Seq(3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97)\n\
    \        var isPrime = true\n        for (i <- primes.iterator) {\n          \
    \  if (a.mod(i) == 0) isPrime = false\n        }\n        isPrime", "        //\
    \ We know that a is less then 100.\n        // We can compute if 3 is a prime\
    \ by checking if 3 is divisible by 5 or 7\n        if (a < 100) {\n          \
    \  return false\n        }\n        // We need to know if a is a multiple of 3\
    \ or 5. \n        // If 2 is a multiple of 3, we can divide by 3 and check if\
    \ it is a prime.\n        // If 2 is not a multiple of 3, we can divide by 5 and\
    \ check if it is a prime.\n        if (a % 3 == 0) {\n            return isPrime(a)\n\
    \        }\n        if (a % 5 == 0) {\n            return isPrime(a)\n       \
    \ }\n        return false", "        val isPrime = (2 to a.toInt).forall(i =>\
    \ a.toLong.quot(i).toDouble > 1.0)\n        if(isPrime) a % 2==0 && a % 3==0 &&\
    \ a.divide(4).toLong.quot(2).toDouble < 1.0 else false", "        // The answer\
    \ is false if less than 100 \n        if (a <= 100) {\n            // Get all\
    \ prime numbers between 1 and a \n            // The product of 2 primes is a\
    \ factor of 3. \n            // Therefore, we can stop this loop when product\
    \ >= 3 \n            // The product of 3 primes is a factor of 5 * 7 * 11. \n\
    \            var primes = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \         var i = 2\n            while(a % i != 0) {\n                primes +=\
    \ i\n                a /= i\n            }\n            for(p <- primes.takeWhile(_\
    \ <= a)) {\n                if(a % p == 0) {\n                    return false\n\
    \                }\n            }\n            // The product of 3 primes is a\
    \ factor of a prime number a\n            // Therefore, a is a multiple of 3 primes.\
    \ \n            return true\n        }\n        return false", "        val num\
    \ = (1 until a).toList\n        val prime = 2 until a\n        val l = (2l).pow(a)\n\
    \        prime forall {\n            _ % _ == 0 => false\n            _ % _ ==\
    \ 1 => true\n        }\n        for {\n            a <- num\n            b <-\
    \ prime\n        } yield a*b == l", "        val prime : mutable.MutableList[Long]\
    \ = mutable.MutableList[Long]()\n        val prime : mutable.MutableList[Long]\
    \ = mutable.MutableList[Long]()\n        val prime : mutable.MutableList[Long]\
    \ = mutable.MutableList[Long]()\n        var sum = 0\n        prime.append(1)\n\
    \        for (prime <- prime) {\n            var i = 0\n            while (true)\
    \ {\n                if (i % a == 0) {\n                    sum += prime\n   \
    \                 prime.remove(i)\n                    prime.append(i)\n     \
    \               if (i == 100) {\n                        return true\n       \
    \             }\n                } else {\n                    i += 1\n      \
    \          }\n                if (prime.isEmpty) {\n                    break\n\
    \                }\n            }\n        }\n        return false", "       \
    \ def isPrime(n: Long) : Boolean = {\n            var factor: Long = 0\n     \
    \       if (n % 2 == 0) return false\n            var i = 2L\n            while\
    \ (i <= n/2L) {\n                if (n % i == 0) return false\n              \
    \  i += 2L\n            }\n            return true\n        }\n        val prime\
    \ = mutable.LinkedList[Long]()\n        val primes = mutable.LinkedList[Long]()\n\
    \        var divisor: Long = 1\n        var isMultiplicationPrime = false\n  \
    \      prime += 2L\n        primes += 2L\n        while (prime != primes.head)\
    \ {\n            divisor += 1L\n            if (divisor <= a) continue\n     \
    \       while (prime != primes.head && isPrime(primes.head)) {\n             \
    \   primes.head += divisor\n                prime += divisor\n            }\n\
    \            if (prime == primes.head) {\n                isMultiplicationPrime\
    \ = true\n                break\n            }\n        }\n        isMultiplyPrime",
  "        var numPrime = 0\n        var i = 2\n        while (i <= a) {\n       \
    \     if (isPrime(i)) {\n                numPrime += 1\n            }\n      \
    \      i += 1\n        }\n\n        if (numPrime >= 3) {\n            return true\n\
    \        } else {\n            return false\n        }", "        if(a%2 == 0\
    \ || a%3 == 0) true\n        else false ", "        val isMultiPrime = a.toInt\
    \ == Math.ceil(a.toDouble / 3).toInt\n        val numPrimes: Map[Int, Boolean]\
    \ = \n            primeFactors.filter(_ > a).map(p => (p, true)).toMap\n     \
    \   val result = (numPrimes.filter(a % _._2).length == 3)\n        result && isMultiPrime",
  "        val p = scala.math.BigInt(a)\n        val primes = List(2l,3l,5l,7l,11l,13l,17l,19l,23l,29l,31l,37l,41l,43l,47l,53l,59l,61l,67l,71l,73l,79l,83l,89l,97l)\n\
    \        val p = p.divide(BigInt(primes(1)))\n        (p.compareTo(BigInt(primes(2)))\
    \ < 0 && p.compareTo(BigInt(primes(3))) < 0)", "        var isMultiplyPrime =\
    \ 0\n        if (a > 100) isMultiplyPrime = false\n        else {\n          \
    \  val number: Array[Long] = new Array[Long](100)\n            var product: Long\
    \ = 0\n            var maxProduct = Long.MaxValue\n\n            for (i <- 2 to\
    \ a) {\n                val currentProduct = 1\n                for ((j <- 2 to\
    \ i) {\n                    if (i * j > number.length) {\n                   \
    \     val newArray = new Array[Long](i * j)\n                        Array.copy(number,\
    \ 0, newArray, 0, i * j)\n                        number = newArray\n        \
    \            }\n                    val currentMultiplication = number(i) * j\n\
    \                    if (currentMultiplication > maxProduct) {\n             \
    \           maxProduct = currentMultiplication\n                    }\n      \
    \              if (currentProduct * currentMultiplication > product) {\n     \
    \                   product = currentProduct * currentMultiplication\n       \
    \             }\n                    currentProduct *= j\n                })\n\
    \            }\n            isMultiplyPrime = product <= maxProduct\n        }\n\
    \        isMultiplyPrime", "        val arrList = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val arrPrime = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var count = 0\n       \
    \ var bool1 = false\n        var bool2 = false\n        var bool3 = false\n  \
    \      var bool4 = false\n        var bool5 = false\n        var bool6 = false\n\
    \        var bool7 = false\n        var bool8 = false\n        var bool9 = false\n\
    \        var bool10 = false\n        var bool11 = false\n        var bool12 =\
    \ false\n        var bool13 = false\n        var bool14 = false\n        var bool15\
    \ = false\n        var bool16 = false\n        var bool17 = false\n        var\
    \ bool18 = false\n        var bool19 = false\n        var bool20 = false\n   \
    \     var bool21 = false\n        var bool22 = false\n        var bool23 = false\n\
    \        var bool24 = false\n        var bool25 = false\n        var bool26 =\
    \ false\n        var bool27 = false\n        var bool28 = false\n        var bool29\
    \ = false\n        var bool30 = false\n        var bool31 = false\n        var\
    \ bool32 = false\n        var bool33 = false\n        var bool34 = false\n   \
    \     var bool35 = false\n        var bool36 = false\n        var bool37 = false\n\
    \        var bool38 = false\n        var bool39 = false\n        var bool40 =\
    \ false\n        var bool41 = false\n        var bool42 = false\n        var bool43\
    \ = false\n        var bool44 = false\n        var bool45 = false\n        var\
    \ bool46 = false\n        var bool47 = false\n        var bool48 = false\n   \
    \     var bool49 = false\n        var bool50 = false\n        var bool51 = false\n\
    \        var bool52 = false\n        var bool53 = false\n        var bool54 =\
    \ false\n        var bool55 = false\n        var bool56 = false\n        var bool57\
    \ = false\n        var bool58 = false\n        var bool59 = false\n        var\
    \ bool60 = false\n        var bool61 = false\n        var bool62 = false\n   \
    \     var bool63 = false\n        var bool64 = false\n        var bool65 = false\n\
    \        var bool66 = false\n        var bool67 = false\n        var bool68 =\
    \ false\n        var bool69 = false\n        var bool70 = false\n        var bool71\
    \ = false\n        var bool72 = false\n        var bool73 = false\n        var\
    \ bool74 = false\n        var bool75 = false\n        var bool76 = false\n   \
    \     var bool77 = false\n        var bool78 = false\n        var bool79 = false\n\
    \        var bool80 = false\n        var bool81 = false\n        var bool82 =\
    \ false\n        var bool", "        val listOfPrimes = List(2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97)\n\
    \        for (i <- listOfPrimes) {\n            if (a % i == 0)\n            \
    \    return false\n        }\n        true", "        //  a < 100\n        val\
    \ p = findPrimes(a)\n        for(i<-0 to p-2){\n            if(p==i){\n      \
    \          return true\n            }\n            if(p.toLong*p == i){\n    \
    \            return true\n            }\n        }\n        return false", " \
    \       if((a % 3 != 0) || (a < 100)) {\n            return false\n        }\n\
    \        var sum = 0\n        var num = 2\n        var i = 1\n        while(i\
    \ < a) {\n            sum += i\n            num += 1\n            i += 1\n   \
    \     }\n        while(sum > num) {\n            sum += num\n            num +=\
    \ 1\n        }\n        return (num == 3)", "        def isPrime(n: Long) : Boolean\
    \ = {\n            n <= 1 || !(n % 2 == 0 || n % 3 == 0)\n        }\n        def\
    \ isMulti(n: Long) : Boolean = {\n            n <= 100 && !(n % 3 == 0 || n %\
    \ 5 == 0)\n        }\n        \n        if (isPrime(a)) {\n            if (isMulti(a))\
    \ {\n                true\n            } else {\n                false\n     \
    \       }\n        } else {\n            false\n        }", "        val a1 =\
    \ a / 3 * 3\n        val a2 = a / 3 * 5\n        val a3 = a / 3 * 7\n        val\
    \ a4 = a / 3 * 9\n        val a5 = a / 3 * 11\n        val a6 = a / 3 * 13\n \
    \       val a7 = a / 3 * 17\n        val a8 = a / 3 * 19\n        val a9 = a /\
    \ 3 * 21\n        val a10 = a / 3 * 23\n        val a11 = a / 3 * 25\n       \
    \ val a12 = a / 3 * 27\n        val a13 = a / 3 * 29\n        val a14 = a / 3\
    \ * 31\n        val a15 = a / 3 * 33\n        val a16 = a / 3 * 35\n        val\
    \ a17 = a / 3 * 37\n        val a18 = a / 3 * 39\n        val a19 = a / 3 * 41\n\
    \        val a20 = a / 3 * 43\n        val a21 = a / 3 * 45\n        val a22 =\
    \ a / 3 * 47\n        val a23 = a / 3 * 49\n        val a24 = a / 3 * 51\n   \
    \     val a25 = a / 3 * 53\n        val a26 = a / 3 * 55\n        val a27 = a\
    \ / 3 * 57\n        val a28 = a / 3 * 59\n        val a29 = a / 3 * 61\n     \
    \   val a30 = a / 3 * 63\n        val a31 = a / 3 * 65\n        val a32 = a /\
    \ 3 * 67\n        val a33 = a / 3 * 69\n        val a34 = a / 3 * 71\n       \
    \ val a35 = a / 3 * 73\n        val a36 = a / 3 * 75\n        val a37 = a / 3\
    \ * 77\n        val a38 = a / 3 * 79\n        val a39 = a / 3 * 81\n        val\
    \ a40 = a / 3 * 83\n        val a41 = a / 3 * 85\n        val a42 = a / 3 * 87\n\
    \        val a43 = a / 3 * 89\n        val a44 = a / 3 * 91\n        val a45 =\
    \ a / 3 * 93\n        val a46 = a / 3 * 95\n        val a47 = a / 3 * 97\n   \
    \     val a48 = a / 3 * 99\n        val a49 = a / 3 * 101\n        val a50 = a\
    \ / 3 * 103\n        val a51 = a / 3 * 105\n        val a52 = a / 3 * 107\n  \
    \      val a53 = a / 3 * 109\n        val ", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 2 until a){\n            if(a % i == 0){\n                nums\
    \ += i\n            }\n        }\n        nums.size == 3", "        if(a%15 ==\
    \ 0 && a%7 == 0 && a%3 == 0 && a%5 == 0 && a%7 == 0 && a%11 == 0 && a%13 == 0)\
    \ {\n            return true\n        }\n        else {\n            return false\n\
    \        }", "        for (x <- 1 to a) {\n            for (p <- 2 to (x-1)) {\n\
    \                if (x == 3 && p == 2)\n                    return true\n    \
    \            if (x == p && x == x-p)\n                    return true\n      \
    \      }\n        }\n        return false", "        val n = 30 % a\n        val\
    \ m = n / 3\n        val listOfPrimes = List(2, 3, 5)\n        for(x <- listOfPrimes)\
    \ {\n            if (n == x*m) {\n                return true\n            }\n\
    \        }\n        return false", "        var prime : mutable.Set[Long] = new\
    \ mutable.Set[Long]()\n        prime += 2l\n        var factor: Long = a / prime.get(0)\n\
    \        prime += a / prime.get(0)\n        for (i in 1 to prime.size) {\n   \
    \         factor = factor / prime.get(i)\n            prime += a / prime.get(i)\n\
    \            if (factor == 0) return true\n        }\n        return false", " \
    \       val list = mutable.MutableList[Long]()\n        var b = a\n        while(b\
    \ > 0) {\n            val list = mutable.MutableList[Long]()\n            for(x\
    \ <- 2 until b) {\n                if(a % x == 0) {\n                    b +=\
    \ 1\n                } else {\n                    list.+=x\n                }\n\
    \            }\n            if(list.size == 3) {\n                list.clear()\n\
    \                return true\n            } else {\n                list.clear()\n\
    \                b += 1\n            }\n        }\n        return false", "  \
    \      val primeList = new scala.collection.mutable.MutableList[Long]()\n    \
    \    primeList.add(2)\n        primeList.add(3)\n        primeList.add(5)\n\n\
    \        def isPrime(i : Long) : Boolean = {\n            if (i < 2)\n       \
    \         false\n            else\n                primeList.contains(i)\n   \
    \     }\n\n        def isMultiplyPrime(a: Long, b: Long) : Boolean = {\n     \
    \       if (a < 0 || b < 0)\n                false\n            else\n       \
    \     {\n                if (a == b)\n                    true\n             \
    \   else\n                {\n                    for (i <- 1 to a) {\n       \
    \                 if (isPrime(i))\n                            primeList.remove(i)\n\
    \                    }\n                    for (j <- 1 to b) {\n            \
    \            if (isPrime(j))\n                            primeList.add(j)\n \
    \                   }\n                    if (primeList.size == 0)\n        \
    \                return false\n                    else\n                    \
    \    return true\n                }\n            }\n        }\n\n        def checkPrime(x:\
    \ Long, i: Int) : Boolean = {\n            val j = x\n            if (j <= a)\
    \ return\n            if (primeList.contains(j)) return\n            if (primeList.size\
    \ == 0) {\n                primeList.add(j)\n                return\n        \
    \    }\n            checkPrime(j, i + 1)\n        }\n\n        def checkPrime(x:\
    \ Long, i: Int) : Boolean = {\n            val j = x\n            if (j <= a)\
    \ return\n            if (primeList.contains(j)) return\n            if (primeList.size\
    \ == 0) {\n                primeList.add(j)\n                return\n        \
    \    }\n            checkPrime(j, i + 1)\n        }\n\n        val check = (a\
    \ until a * 3) map checkPrime\n        val list = check.mkString(\",\")\n    \
    \    println(list.split(\",\").filter(_.nonEmpty).length == 3)", "        // Write\
    \ your solution here\n        val product = a.toInt\n        val isMultiplicationPrime\
    \ = true\n        if(product == 2) true\n        else if(product % 3 == 0) true\n\
    \        else false", "        val list = new mutable.HashSet[Long]()\n      \
    \  val list2 = new mutable.HashSet[Long]()\n        val list3 = new mutable.HashSet[Long]()\n\
    \        val list4 = new mutable.HashSet[Long]()\n\n        list.add(a)\n    \
    \    list.add(a+3)\n        list.add(a+5)\n        list.add(a+7)\n\n        list2.add(a+3)\n\
    \        list2.add(a+5)\n        list2.add(a+7)\n\n        list3.add(a+5)\n  \
    \      list3.add(a+7)\n\n        list4.add(a+7)\n\n        list3.remove(5)\n\n\
    \        list2.remove(7)\n        list2.remove(3)\n\n        list.remove(7)\n\
    \        list.remove(5)\n\n        list2.remove(3)\n        list2.remove(5)\n\n\
    \        list.remove(5)\n        list.remove(7)\n\n        list.remove(7)\n  \
    \      list.remove(3)\n\n        list.remove(7)\n        list.remove(3)\n\n  \
    \      list2.remove(3)\n        list2.remove(7)\n        list2.remove(5)\n\n \
    \       list2.remove(3)\n        list2.remove(5)\n        list2.remove(7)\n\n\
    \        list3.remove(3)\n        list3.remove(5)\n        list3.remove(7)\n\n\
    \        list3.remove(5)\n        list3.remove(7)\n\n        list4.add(7)\n\n\
    \        list2.remove(3)\n        list2.remove(5)\n        list2.remove(7)\n\n\
    \        list.remove(7)\n        list.remove(5)\n        list.remove(3)\n\n  \
    \      list.remove(5)\n        list.remove(7)\n\n        list.remove(7)\n    \
    \    list.remove(3)\n\n        list.remove(5)\n        list.remove(7)\n\n    \
    \    list.remove(7)\n        list.remove(3)\n\n        list.remove(5)\n      \
    \  list.remove(7)\n\n        list.remove(7)\n        list.remove(3)\n\n      \
    \  list.remove(5)\n        list.remove(7)\n\n        list.remove(7)\n        list.remove(3)\n\
    \n        list2.remove(3)\n        list2.remove(5)\n        list2.remove(7)\n\n\
    \        list.remove(7)\n        list.remove(5)\n        list.remove(3)\n\n  \
    \      list.remove(5)\n        list.remove(7)\n\n        list.remove(7)\n    \
    \    list.remove(3)\n\n        list.remove(5)\n        list.remove(7)\n\n    \
    \    list.remove(7)\n        list.remove(3)\n\n        list.remove(5)\n      \
    \  list.remove(7)\n\n        list.remove(7)\n        list.remove(3)\n\n      \
    \  list.remove(5)\n        list.remove(7)\n\n        list.remove(7)\n        list.remove(3)\n\
    \n        list.remove(5)\n        list.remove(7)\n\n        list.remove(7)\n \
    \       list.remove(3)\n\n        list.remove(5)\n        list.remove(7)\n\n \
    \       list.remove(7)\n        list.remove(3)\n\n        list.remove(5)\n   \
    \     list.remove(7)\n\n        list.remove(7)\n        list.remove(3)\n\n   \
    \     list.remove(5)\n        list.remove(7)\n\n        list.remove(7)\n     \
    \   list.remove(3)\n\n        list.remove(5)\n        list.remove(7)\n\n     \
    \   list.remove(7)\n        list.remove(3)\n\n        list.remove(5)\n       \
    \ list.remove(7)\n\n        list.remove(7)\n        list.remove(", "        var\
    \ flag : Boolean = false\n        for(i <- (2 to a)){\n            for(j <- (2\
    \ to a)){\n                for(k <- (2 to a)){\n                    if((i*j*k\
    \ == a)) {\n                        flag = true\n                        break\n\
    \                    }\n                }\n            }\n        }\n        flag",
  "        val result: Boolean = true\n        // Write your solution here", "   \
    \     val aPrimes = mutable.ArrayBuffer.empty[Int]\n        aPrimes += 2\n   \
    \     aPrimes += 3\n        aPrimes += 5\n        aPrimes += 7\n        aPrimes\
    \ += 11\n        aPrimes += 13\n        aPrimes += 17\n        aPrimes += 19\n\
    \        aPrimes += 23\n        aPrimes += 29\n        aPrimes += 31\n       \
    \ aPrimes += 37\n        aPrimes += 41\n        aPrimes += 43\n        aPrimes\
    \ += 47\n        aPrimes += 53\n        aPrimes += 59\n        aPrimes += 61\n\
    \        aPrimes += 67\n        aPrimes += 71\n        aPrimes += 73\n       \
    \ aPrimes += 79\n        aPrimes += 83\n        aPrimes += 89\n        aPrimes\
    \ += 97\n        aPrimes += 101\n        aPrimes += 103\n        aPrimes += 107\n\
    \        aPrimes += 109\n        aPrimes += 113\n        aPrimes += 127\n    \
    \    aPrimes += 131\n        aPrimes += 137\n        aPrimes += 139\n        aPrimes\
    \ += 141\n        aPrimes += 145\n        aPrimes += 147\n        aPrimes += 149\n\
    \        aPrimes += 151\n        aPrimes += 157\n        aPrimes += 163\n    \
    \    aPrimes += 167\n        aPrimes += 169\n        aPrimes += 173\n        aPrimes\
    \ += 179\n        aPrimes += 181\n        aPrimes += 191\n        aPrimes += 193\n\
    \        aPrimes += 197\n        aPrimes += 199\n        aPrimes += 211\n    \
    \    aPrimes += 223\n        aPrimes += 227\n        aPrimes += 229\n        aPrimes\
    \ += 231\n        aPrimes += 233\n        aPrimes += 239\n        aPrimes += 241\n\
    \        aPrimes += 247\n        aPrimes += 249\n        aPrimes += 251\n    \
    \    aPrimes += 253\n        aPrimes += 257\n        aPrimes += 263\n        aPrimes\
    \ += 269\n        aPrimes += 271\n        aPrimes += 277\n        aPrimes += 281\n\
    \        aPrimes += 283\n        aPrimes += 289\n        aPrimes += 293\n    \
    \    aPrimes += 297\n        aPrimes += 301\n        aPrimes += 303\n        aPrimes\
    \ += 307\n        aPrimes += 311\n        aPrimes += 313\n        aPrimes += 317\n\
    \        aPrimes += 319\n        aPrime", "        val list = new mutable.MutableList[Int]()\n\
    \        var n = a\n        while(n > 1) {\n            val primeList = new mutable.MutableList[Int]()\n\
    \            var isPrime = true\n            for(i <- 2 to sqrt(n)) {\n      \
    \          if(n % i == 0) {\n                    isPrime = false\n           \
    \         break\n                }\n            }\n            if(isPrime) {\n\
    \                primeList.append(n)\n            }\n            n = primeList.last\n\
    \            if(primeList.size == 2) {\n                list.prepend(primeList.last)\n\
    \            }\n        }\n        list.size == 3", "        val prime = 2 until\
    \ 100\n        val set = new mutable.HashSet[Long]()\n        set.add(1)\n   \
    \     var count = 1\n        for ( p <- prime ) {\n            if( p > a ) {\n\
    \                break\n            }\n            var k = 1\n            for(\
    \ i <- 2 to p ) {\n                if( !set.contains(p * k) ) {\n            \
    \        if( p * k > a ) {\n                        break\n                  \
    \  }\n                    k += 1\n                }\n            }\n         \
    \   if( !set.contains(p * k) ) {\n                if( p * k > a ) {\n        \
    \            break\n                }\n                if( count != 1 ) {\n  \
    \                  count += 1\n                } else {\n                    count\
    \ += p\n                }\n                set.add(p * k)\n            }\n   \
    \     }\n        for( i <- 2 to p ) {\n            if( !set.contains(p * i) )\
    \ {\n                if( p * i > a ) {\n                    break\n          \
    \      }\n                if( count != 1 ) {\n                    count += 1\n\
    \                } else {\n                    count += p\n                }\n\
    \                set.add(p * i)\n            }\n        }\n        count < a",
  "        if(a==1) true\n        else if(a%2==0) false\n        else if(a%3==0) false\n\
    \        else if(a%5==0) false\n        else if(a%7==0) false\n        else if(a%11==0)\
    \ false\n        else if(a%13==0) false\n        else if(a%17==0) false\n    \
    \    else if(a%19==0) false\n        else if(a%23==0) false\n        else if(a%29==0)\
    \ false\n        else if(a%31==0) false\n        else if(a%37==0) false\n    \
    \    else if(a%41==0) false\n        else if(a%43==0) false\n        else if(a%47==0)\
    \ false\n        else if(a%53==0) false\n        else if(a%59==0) false\n    \
    \    else if(a%61==0) false\n        else if(a%67==0) false\n        else if(a%71==0)\
    \ false\n        else if(a%73==0) false\n        else if(a%79==0) false\n    \
    \    else if(a%83==0) false\n        else if(a%89==0) false\n        else if(a%97==0)\
    \ false\n        else if(a%101==0) false\n        else if(a%103==0) false\n  \
    \      else if(a%105==0) false\n        else if(a%107==0) false\n        else\
    \ if(a%109==0) false\n        else if(a%113==0) false\n        else if(a%115==0)\
    \ false\n        else if(a%117==0) false\n        else if(a%119==0) false\n  \
    \      else if(a%123==0) false\n        else if(a%127==0) false\n        else\
    \ if(a%131==0) false\n        else if(a%137==0) false\n        else if(a%141==0)\
    \ false\n        else if(a%147==0) false\n        else if(a%151==0) false\n  \
    \      else if(a%157==0) false\n        else if(a%161==0) false\n        else\
    \ if(a%163==0) false\n        else if(a%167==0) false\n        else if(a%173==0)\
    \ false\n        else if(a%177==0) false\n        else if(a%181==0) false\n  \
    \      else if(a%191==0) false\n        else if(a%193==0) false\n        else\
    \ if(a%197==0) false\n        else if(a%203==0) false\n        else if(a%205==0)\
    \ false\n        else if(a%209==0) false\n        else if(a%213==0) false\n  \
    \      else if(a", "        for (prime <- 2 until 100 by 2)\n            if ((a\
    \ % prime) == 0)\n                return\n        return", "        def isPrime(x\
    \ :Int) : Boolean = (x > 0) && (x % 2 == 0) || (x % 3 == 0)\n        def isMultiplicationOfPrimes(a\
    \ : Int, b : Int) : Boolean = (a < b) \n        def countMultiplications(a : Int,\
    \ b : Int) : Int = { \n            val i = 2 to (b - a + 1)\n            val count\
    \ = for {\n                c <- i\n            } yield {\n                isMultiplicationOfPrimes(a,c)\
    \ \n            }\n            count.get\n        }\n        def primeFactors(a\
    \ : Int) : List[Int] = { \n            if (a < 2) {\n                List(0)\n\
    \            } else {\n                val r = scala.util.math.sqrt(a).toInt\n\
    \                def primeFactors(r : Int, factors : List[Int]) : List[Int] =\
    \ { \n                    if (r <= 1) {\n                        factors\n   \
    \                 } else {\n                        primeFactors(r - 1, factors\
    \ ::: List(r)) \n                    }\n                }\n                primeFactors(r,\
    \ List(a))\n            }\n        }\n        val factors = primeFactors(a)\n\
    \        (factors.length == 3) &&\n        (factors.contains(b)) && \n       \
    \ isMultiplicationOfPrimes(factors(0), factors(1))", "        // Write your solution\
    \ here\n        val l = a / Math.sqrt(a)\n        if (a % 2 == 0) {\n        \
    \    l < 2\n        } else {\n            l < 3\n        }", "        val primes\
    \ = mutable.LinkedHashSet[Long]()\n        for (p <- 2 to 100 if p < a)\n    \
    \        primes += p\n\n        for (p <- 2 to 100)\n            if (primes.contains(a*p))\n\
    \                return true\n\n        return false", "        val factors =\
    \ mutable.ArrayBuffer.empty[Int]()\n        for (prime <- 2 to a.toInt by 2) \n\
    \            if (a % prime == 0)\n                factors += prime\n        for\
    \ (prime <- factors.dropRight(2); !factors.contains(prime))\n            if (a\
    \ % prime != 0)\n                return false\n        return true", "       \
    \ var b = 2\n        var isPrime = true\n        while (b < a) {\n           \
    \ if ((a % b) == 0) {\n                isPrime = false\n                break\n\
    \            }\n            b = b + 1\n        }\n        return isPrime", " \
    \     val listOfPrimes = Seq(2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l,\
    \ 37l, 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l, 97l, 101l,\
    \ 103l, 107l, 109l, 113l, 127l, 131l, 137l, 139l, 149l, 151l, 157l, 163l, 167l,\
    \ 173l, 179l, 181l, 191l, 193l, 197l, 199l, 211l, 223l, 227l, 229l, 233l, 239l,\
    \ 241l, 251l, 257l, 263l, 269l, 271l, 277l, 281l, 283l, 293l, 307l, 311l, 313l,\
    \ 317l, 331l, 337l, 347l, 349l, 353l, 359l, 367l, 373l, 379l, 383l, 389l, 397l,\
    \ 401l, 409l, 419l, 421l, 431l, 433l, 439l, 443l, 449l, 457l, 461l, 463l, 467l,\
    \ 479l, 487l, 491l, 499l, 503l, 509l, 521l, 523l, 541l, 547l, 557l, 563l, 569l,\
    \ 571l, 577l, 587l, 593l, 599l, 601l, 607l, 613l, 617l, 619l, 631l, 641l, 643l,\
    \ 647l, 653l, 659l, 661l, 673l, 677l, 683l, 691l, 701l, 709l, 719l, 727l, 733l,\
    \ 739l, 743l, 751l, 757l, 761l, 769l, 773l, 787l, 797l, 803l, 809l, 811l, 817l,\
    \ 823l, 829l, 831l, 833l, 839l, 843l, 851l, 857l, 863l, 879l, 883l, 887l, 907l,\
    \ 911l, 919l, 929l, 937l, 941l, 947l, 953l, 967l, 971l, 977l, 983l, 991l, 997l)\n\
    \      if(listOfPrimes.contains(a)) {\n        return true\n      } else {\n \
    \       return false\n      }", "        if(a%2==0 && a%3==0) false\n        else\
    \ if(a%3==0) isMultiplyPrime(a/3)\n        else if(a%2==0) isMultiplyPrime(a/2)*isMultiplyPrime(a/3)\n\
    \        else true", '        // Write your code here', "        if (a < 100)\
    \ { \n            false\n        }else {\n            val n = (3l).until(a) \n\
    \            val product = (1l).until(a) \n            val primes = n zip product\
    \ map {case (p,q) => p % q == 0}\n            primes.forall(x => x == true) \n\
    \        }", "        var list = new Array[Int](100)\n        var count = 0\n\
    \        for(i <- 0 to 99) {\n            count += isPrime(i)\n        }\n   \
    \     if((a % count < 100)) {\n            return false\n        }\n        for(i\
    \ <- 0 to 99) {\n            if(isPrime(i)) {\n                if((a / count *\
    \ i) == a) {\n                    list(i) = true\n                }\n        \
    \    }\n        }\n        var b = true\n        for(i <- 0 to 99) {\n       \
    \     if(list(i) == false) {\n                return false\n            }\n  \
    \      }\n        return true", "        if (a < 100) a else false\n        \n\
    \        for (x<- 0 to a-2) {\n            for (y<-x to a-x) {\n             \
    \   if (x != y && (a % x == 0) && ((a % y) == 0)) {\n                    val z\
    \ = (a / x) * (a / y)\n                    if (z == a)\n                     \
    \   return true\n                }\n            }\n        }\n        return false",
  "        // Write your code here\n        val isPrimes = for {\n            i <-\
    \ 2 to 100\n        } yield {\n            if (a%i == 0) false\n            else\
    \ {\n                val isPrime = for {\n                    j <- 2 to i/2\n\
    \                } yield {\n                    if (j%a == 0) false\n        \
    \            else {\n                        a % j == 0\n                    }\n\
    \                }\n                isPrime.forall(identity)\n            }\n\
    \        }\n        a.toString.size == isPrimes.length &&\n        isPrimes.forall(identity)",
  "        val primes = scala.collection.mutable.MutableList(2l) ++ scala.collection.mutable.MutableList(3l)\n\
    \        val div = (a / primes.last).floor\n        if (primes.last > a / primes.last)\
    \ {\n            return true\n        }\n        for (p <- primes.reverse) {\n\
    \            if (div * p < a) {\n                primes ++= List(p)\n        \
    \        break\n            }\n            if (a % p == 0) {\n               \
    \ return false\n            }\n        }\n        return true", "        // TODO:\
    \ Replace with your code here\n        val primes: mutable.Set[Long] = mutable.Set()\n\
    \        val primeList: mutable.ListBuffer[Long] = mutable.ListBuffer()\n    \
    \    val multiply: Long = a / 3\n        val square: Long = multiply * multiply\n\
    \        val numList: mutable.List[Long] = mutable.ListBuffer()\n        val numList2:\
    \ mutable.List[Long] = mutable.ListBuffer()\n\n        for(i <- 2 to (square))\
    \ {\n            if(i %% multiply == 0){\n                numList.add(i)\n   \
    \         }\n        }\n        for(i <- 2 to (square)) {\n            if(i %%\
    \ multiply == 0){\n                numList2.add(i)\n            }\n        }\n\
    \        primeList.addAll(numList)\n        primeList.addAll(numList2)\n     \
    \   primes.clear()\n        primes.add(multiply)\n        primes.add(numList.last)\n\
    \        val isPrime: Boolean = primes.forall(x => x % a != 0)\n\n        if(isPrime){\n\
    \            true\n        }else{\n            false\n        }", "        var\
    \ isPrime = true\n        var aPrime = a\n        var bPrime = a\n        var\
    \ cPrime = a\n        while (isPrime == true && aPrime < 100 && bPrime < 100 &&\
    \ cPrime < 100){\n            var b1 = bPrime\n            var b2 = bPrime + 1\n\
    \            var b3 = bPrime + 2\n            var c1 = cPrime\n            var\
    \ c2 = cPrime + 1\n            var c3 = cPrime + 2\n            if (((b1 * b2\
    \ * c3) == aPrime) || ((b1 * c2 * c3) == aPrime) || ((b2 * c3 * c1) == aPrime)){\n\
    \                isPrime = false\n                aPrime = bPrime\n          \
    \      bPrime = cPrime\n                cPrime = aPrime\n            }else{\n\
    \                aPrime = cPrime\n                cPrime = aPrime + 1\n      \
    \      }\n        }\n        return isPrime", "        if(a>100) return false\n\
    \        val n = a / 100\n        var m = (a-100) / 3\n        val primes = mutable.Set[Long]()\n\
    \        for(i <- 2 to 100) {\n            if(i % n == 0) primes.add(i)\n    \
    \    }\n        val threePrime = primes.filter(_ => n%_ == 0)\n        return\
    \ threePrime.size == 3", "        if (a == 1)\n            return true\n     \
    \   val listPrime = mutable.ListBuffer(2l, 3l, 5l)\n        for ( i = 3 until\
    \ a by 2 )\n            if (listPrime.toSet.contains(i) && a % i != 0)\n     \
    \           listPrime = listPrime :+ i\n        if (listPrime.size == 3)\n   \
    \         return true\n        return false", "        val l = 3l\n        val\
    \ m = 4l\n        var b = True\n        var c = 2\n        var prime = 2 \n  \
    \      for (i <- 3l until a) {\n            if (i % 2l = 0l) prime = 0\n     \
    \       else prime = 1\n            if (prime == 1l && i != 3l) prime = 0\n  \
    \          if (prime == 1l && i != 3l) b = False\n            if (prime == 2l\
    \ && i != m) b = False\n            if (prime == 2l && i != m) c = a + 1\n   \
    \     }\n        c", "        var a : Long = a\n        val primes = mutable.Set[Long]()\n\
    \        primes.add((2l))\n        primes.add((3l))\n        primes.add((5l))\n\
    \        primes.add((7l))\n        primes.add((11l))\n        primes.add((13l))\n\
    \        primes.add((17l))\n        primes.add((19l))\n        primes.add((23l))\n\
    \        primes.add((29l))\n        primes.add((31l))\n        primes.add((37l))\n\
    \        primes.add((43l))\n        primes.add((47l))\n        primes.add((53l))\n\
    \        primes.add((59l))\n        primes.add((61l))\n        primes.add((67l))\n\
    \        primes.add((71l))\n        primes.add((73l))\n        primes.add((79l))\n\
    \        primes.add((83l))\n        primes.add((89l))\n        primes.add((97l))\n\
    \        primes.add((101l))\n        primes.add((103l))\n        primes.add((107l))\n\
    \        primes.add((109l))\n        primes.add((113l))\n        primes.add((127l))\n\
    \        primes.add((131l))\n        primes.add((137l))\n        primes.add((139l))\n\
    \        primes.add((149l))\n        primes.add((151l))\n        primes.add((157l))\n\
    \        primes.add((161l))\n        primes.add((163l))\n        primes.add((165l))\n\
    \        primes.add((167l))\n        primes.add((173l))\n        primes.add((179l))\n\
    \        primes.add((181l))\n        primes.add((191l))\n        primes.add((193l))\n\
    \        primes.add((197l))\n        primes.add((199l))\n        primes.add((201l))\n\
    \        primes.add((211l))\n        primes.add((223l))\n        primes.add((227l))\n\
    \        primes.add((229l))\n        primes.add((233l))\n        primes.add((239l))\n\
    \        primes.add((241l))\n        primes.add((243l))\n        primes.add((247l))\n\
    \        primes.add((251l))\n        primes.add((257l))\n        primes.add((259l))\n\
    \        prime", "        // Write code here\n        if(a <= 100) {\n       \
    \     val arr1 = Array.ofDim[Long](3)\n            val arr2 = Array.ofDim[Long](3)\n\
    \            val arr3 = Array.ofDim[Long](3)\n            for(i<-0 until 3){\n\
    \                arr1(i) = 3\n            }\n            for(j<-0 until 3){\n\
    \                arr2(j) = 3\n            }\n            for(k <- 0 until 3){\n\
    \                arr3(k) = 3\n            }\n            while(a != 0) {\n   \
    \             if(arr1(0) < a && arr2(0) > a && arr3(0) < a) {\n              \
    \      arr1(0) = arr1(0) + arr2(0)\n                    arr2(0) = 0\n        \
    \            arr3(0) = arr3(0) +arr3(1) + arr3(2) + arr3(3)\n                \
    \    arr3(3) = 0\n                } else if(arr1(1) < a && arr2(1) > a && arr3(1)\
    \ < a){\n                    arr1(1) = arr1(1) + arr2(1)\n                   \
    \ arr2(1) = 0\n                    arr3(1) = arr3(1) + arr3(2) + arr3(3)\n   \
    \                 arr3(3) = 0\n                } else if(arr1(2) < a && arr2(2)\
    \ > a && arr3(2) < a){\n                    arr1(2) = arr1(2) + arr2(1)\n    \
    \                arr2(2) = 0\n                    arr3(2) = arr3(2) + arr3(2)\
    \ + arr3(3)\n                    arr3(3) = 0\n                } else {\n     \
    \               arr1(3) = arr1(3) + arr2(3)\n                    arr2(3) = 0\n\
    \                    arr3(3) = arr3(3) + arr3(3) + arr3(3)\n                 \
    \   arr3(3) = 0\n                }\n                a = a - 1\n            }\n\
    \            arr1 zip arr2 zip arr3 forall {\n            case (x1,x2,x3) => x1\
    \ < x2 && x2 < x3 && x3 < x3\n            }\n        } else {\n            return\
    \ false\n        }", "        // write code here\n        if(a <= 100){\n    \
    \        var flag = true\n            var list = new Array[Long](1)\n        \
    \    var counter = 1\n            while(counter <= a / 2){\n                list.clear()\n\
    \                counter = 1\n                while(counter <= a / 2){\n     \
    \               var flag = false\n                    var templist = list.filterNot(x=>x%counter\
    \ == 0)\n                    var checklist = new Array[Long](templist.length +\
    \ 1)\n                    var checkCounter = 1\n                    for(i <- 0\
    \ until templist.length){\n                        checklist(i) = (templist(i)*counter)\n\
    \                        checkCounter += 1\n                    }\n          \
    \          if(!checklist(a%templist.length).isEmpty){\n                      \
    \  flag = false\n                        println(checklist)\n                \
    \    }\n                    counter += 1\n                }\n                if(flag\
    \ == false){\n                    flag = true\n                    list = templist\n\
    \                }\n            }\n            return flag\n        }else{\n \
    \           return false\n        }", "      if(a < 100) \n        a < 300\n \
    \       \n      val p = 3\n      var n = a\n      val primes = mutable.MutableList[Int]()\n\
    \      \n      for( i <- 0 until n ) {\n        primes ::= p\n        p += 1\n\
    \      }\n      \n      primes.foreach(println)\n      println(p + \", \" + n)\n\
    \      \n      primes.foreach {\n         n => if (n % p == 0) {\n           \
    \ primes.remove(p)\n         }\n      }\n      primes.foreach {\n         n =>\
    \ primes ::= p\n         p += 1\n      }\n      primes.foreach(println)\n    \
    \  primes.contains(n)", "        // write code here\n        def isPrime(x:Int)\
    \ : Boolean = {\n            val isPrime = (x%2 == 0)\n            return if (x\
    \ == 1) true else if (isPrime) isPrime(x / 2) else false\n        }\n        def\
    \ isPrimeList(x:List[Int]):Boolean = {\n            val list = x.toList\n    \
    \        val result = list.forall(isPrime)\n            result.equals(true)\n\
    \        }\n        if(isPrime(a)){\n            return true\n        }\n    \
    \    if(isPrimeList(List(3,5))){\n            return true\n        }\n       \
    \ return false", "        val a = scala.math.pow(a, 2)\n        val b = scala.math.pow(a,\
    \ 3)\n        val c = scala.math.pow(a, 5)\n        if ((scala.math.pow(a, 5)\
    \ >= 100)) {\n            return (true)\n        } else {\n            return\
    \ (false)\n        }", "        val factors = factor(a)\n        return factors.isEmpty"]
stop_tokens:
- "\n    }\n"
