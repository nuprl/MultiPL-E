language: scala
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val unique = mutable.Set[Long]()\n\
    \        val dupe = mutable.Set[Long]()\n        for (x <- lst) {\n          \
    \  if (unique.contains(x)) {\n                dupe.add(x)\n            }\n   \
    \         else {\n                unique.add(x)\n            }\n        }\n  \
    \      !dupe.contains(unique.head)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbeb42t1o.scala:25:21 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36munique\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbeb42t1o.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdupe\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010265
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.nonEmpty) {\n\
    \            var lastElementOfLst : Long = lst.last\n            for (x <- lst)\
    \ {\n                if (x != lastElementOfLst) {\n                    return\
    \ false\n                } else {\n                    lastElementOfLst = x\n\
    \                }\n            }\n            return true\n        } else {\n\
    \            return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7n7qhxwp.scala:41)\n\tat Problem.main(tmp7n7qhxwp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010269
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        while (i < lst.size && j < lst.size) {\n \
    \           if (lst(i) < lst(j)) {\n                i += 1\n            }\n  \
    \          else {\n                j += 1\n                k += 1\n          \
    \      if (k < lst.size) {\n                    if (lst(i) == lst(k)) {\n    \
    \                    i += 1\n                        k += 1\n                \
    \    }\n                    else {\n                        return false\n   \
    \                 }\n                }\n            }\n        }\n        if (i\
    \ < lst.size) {\n            return true\n        }\n        else {\n        \
    \    return false\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz6j3u_yz.scala:55)\n\tat Problem.main(tmpz6j3u_yz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val last = lst(1)\n\
    \        val uniqueCounts = new mutable.HashMap[Long, Int]()\n        val unsorted\
    \ = lst.tail\n\n        for(x <- lst.init) {\n            if(uniqueCounts(x)+1\
    \ == unsorted.length) {\n                return false\n            }\n       \
    \     uniqueCounts(x)+=1\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjbj1rh6p.scala:26:31 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36muniqueCounts\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010265
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        require(lst.length ==\
    \ 1 || lst.length == 0)\n        val first = lst.head\n        require(lst.length\
    \ == 1 || lst.tail.forall(x => x < first))\n        val numCounts = lst.groupBy(x\
    \ => x).mapValues(x => x.length)\n        val isSorted = numCounts.forall(x =>\
    \ x._2 < numCounts.size)\n        (lst.length == 1 && isSorted) || (lst.length\
    \ > 1 && isSorted)\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi6g0xwxh.scala:33)\n\tat Problem.main(tmpi6g0xwxh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val ls = lst.filter(_\
    \ != 0)\n        if (ls.length == 1)\n            ls(0) == ls(0)\n        else\n\
    \            ls.distinct().toSet.size == ls.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6bbv163s.scala:29:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            ls.distinct().toSet.size == ls.length\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument\
    \ for parameter n of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mtrait\e[0m \e\
    [35mLinearSeqOps\e[0m: (n: Int): Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val a = lst.groupBy(l=>l).mapValues(_.size)\n\
    \        val l = lst.filter(x=>a(x).size==1).size\n        if(a(l).size>1)\n \
    \           return false\n        if(a(l).size==1 && a(l).head._1<lst(0))\n  \
    \          return true\n        else\n            return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8g6n1308.scala:26:35 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = lst.filter(\e[36mx\e\
    [0m=>a(x).size==\e[31m1\e[0m).size\n\e[31m\e[31m   |\e[0m                    \
    \          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              value\
    \ size is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8g6n1308.scala:27:16\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m(a(l).size>\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \          value size is not a member of Int\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp8g6n1308.scala:29:16 ------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mif\e[0m(a(l).size==\e[31m1\e[0m && a(l).head._1<lst(\e[31m0\e\
    [0m))\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \    value size is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660010269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long](lst:\
    \ _*)\n        set.toList.distinct == lst\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcfna9yi4.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m](lst: \e[35m_*\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        lst.fold(false)((acc,cur)\
    \ =>\n            {\n            if (acc){\n                return acc\n     \
    \       }\n            \n            if (lst.exists(x => x == cur)) {\n      \
    \          acc = true\n            }\n            return acc\n            })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsgd2wrnp.scala:27:16\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (acc){\n\
    \e[31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m               \
    \ Found:    (acc : AnyVal)\n\e[31m   |\e[0m                Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsgd2wrnp.scala:28:23\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m                \e[33mreturn\e\
    [0m acc\n\e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\e[31m   |\e[0m\
    \                       Found:    (acc : AnyVal)\n\e[31m   |\e[0m            \
    \           Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpsgd2wrnp.scala:32:20 -----------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m                acc = \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val acc\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsgd2wrnp.scala:34:19\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m            \e[33mreturn\e[0m\
    \ acc\n\e[31m\e[31m   |\e[0m                   ^^^\e[0m\n\e[31m   |\e[0m     \
    \              Found:    (acc : AnyVal)\n\e[31m   |\e[0m                   Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val map = lst.groupBy(x\
    \ => x).mapValues(_.length).toList.toMap\n        val firstKey = map.head\n  \
    \      val lastKey = map.last\n        val keys = map.keys\n        val values\
    \ = map.values\n        if (keys.contains(firstKey) && keys.contains(lastKey))\
    \ {\n            if (firstKey == lastKey) {\n                for ((key, value)\
    \ <- map.filter(x => x == firstKey)) {\n                    if (value != keys.head)\
    \ {\n                        return false\n                    }\n           \
    \     }\n                for ((key, value) <- map.filter(x => x == lastKey)) {\n\
    \                    if (value != keys.last) {\n                        return\
    \ false\n                    }\n                }\n            } else {\n    \
    \            return false\n            }\n        } else {\n            return\
    \ false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd8f86u0k.scala:30:17 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mif\e[0m (keys.contains(firstKey) && keys.contains(lastKey))\
    \ {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \        value contains is not a member of Iterable[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1660010268
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val dup = lst.groupBy(x\
    \ => x).filter(_._2.size > 1).headOption\n        if (dup.isDefined) false\n \
    \       else {\n            val sortedList = lst.sortWith(_ < _)\n           \
    \ sortedList == lst.sortWith(_ < _)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph5bku491.scala:35)\n\tat Problem.main(tmph5bku491.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010269
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val hset = new HashSet[Long]\n\
    \        for (n <- lst) hset += n\n        val sorted = hset.toList.sorted \n\
    \        sorted.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdecukq24.scala:31)\n\tat Problem.main(tmpdecukq24.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010269
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        lst.foldLeft(true){\n\
    \            case (res, x) => if (x == lst(lst.lastIndexOf(x))) res || !res else\
    \ false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsshi64qi.scala:32)\n\tat Problem.main(tmpsshi64qi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val hashMap = new mutable.HashMap[Long,Int]()\n\
    \        val sorted = lst.sortBy(-_)\n        sorted.zipWithIndex.foreach{ case\
    \ (el,i) =>\n            val existing = hashMap.getOrElse(el, -1)\n          \
    \  if (existing < i)\n                hashMap.update(el,i)\n        }\n      \
    \  (hashMap.values.toList.distinct.size == 1) || false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbrfnnnzb.scala:25:26 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mhashMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val countMap = mutable.HashMap[Long,\
    \ Int]().withDefaultValue(0)\n        val lastCount = mutable.HashMap[Long, Int]().withDefaultValue(0)\n\
    \        for (x <- lst) {\n            val count = countMap.getOrElse(x, 0)\n\
    \            lastCount.getOrElse(x, 0) = count\n            countMap(x) = count\
    \ + 1\n        }\n        (countMap.size == lastCount.size) ==\n            (lastCount.filterValue(_\
    \ == countMap.size).forall { x => countMap(x) != lastCount(x) })\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq2v6uw37.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]().withDefaultValue(\e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpq2v6uw37.scala:26:24 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mval\e[0m \e[36mlastCount\e[0m = mutable.HashMap[\e[35mLong\e\
    [0m, \e[35mInt\e[0m]().withDefaultValue(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val counts = lst.map(x\
    \ => 1l).reduce(_ |+| _)\n        val maxCount = counts.max \n        counts ==\
    \ maxCount\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9o5fuaju.scala:25:47 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = lst.map(\e\
    [36mx\e[0m => \e[31m1l\e[0m).reduce(_ |+| _)\n\e[31m\e[31m   |\e[0m          \
    \                                   ^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                         value |+| is not a member of Long\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp9o5fuaju.scala:27:8 ------------------------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        counts == maxCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m  Values of types Long and Long => Long cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660010268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var flag = true\n  \
    \      for (i <- 0 until lst.size) {\n            if (lst(i-1) != lst(i)) {\n\
    \                flag = false\n                break\n            }\n        }\n\
    \        flag\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjfykzoxx.scala:29:16 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010265
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        def isSorted(lst : List[Long],\
    \ i : Int, ln : Long) : Boolean = {\n            if (i == ln.toInt) {\n      \
    \          lst match {\n                    case Nil => false\n              \
    \      case h::t => h > ln || (h == ln && isSorted(t, i + 1, ln))\n          \
    \      }\n            } else {\n                false\n            }\n       \
    \ }\n        isSorted(lst, 0, lst.last)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7mtsba36.scala:38)\n\tat Problem.main(tmp7mtsba36.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010269
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if(lst.size <= 1) {\n\
    \            return true\n        }\n        var i : Int = 0\n        var j :\
    \ Int = 0\n        var temp : Long = -1\n\n        // Compare and store first\
    \ element\n        while(i < lst.size && lst.head < temp) {\n            i +=\
    \ 1\n        }\n        temp += lst.head\n\n        // Compare and store rest\n\
    \        while(j<lst.size && lst.tail.head < temp) {\n            temp += lst.tail.head\n\
    \            j += 1\n        }\n\n        // If first and last elements are same,\
    \ return true, otherwise false\n        if(i < lst.size && temp == lst.head +\
    \ lst.tail.head) {\n            return true\n        }\n\n        if(j < lst.size\
    \ && temp == lst.head + lst.tail.head) {\n            return false\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7_8nbhnu.scala:56)\n\tat Problem.main(tmp7_8nbhnu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n      val set = lst.groupBy(x\
    \ => x)\n      val result = lst.forall(x => set(x).size == lst.size)\n      result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9cct54ej.scala:31)\n\tat Problem.main(tmp9cct54ej.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n      var seen = mutable.Map[Long,\
    \ Boolean]()\n      def isSortedHelper(lst : List[Long]): Boolean = {\n      \
    \  if (lst.nonEmpty) {\n          var cur = lst.head\n          var next = lst.tail.head\n\
    \          seen += cur -> true\n          if(next.equals(cur)) {\n           \
    \ return true\n          } else if (next.equals(cur)) {\n            if (seen(next)\
    \ == false) {\n              return false\n            } else {\n            \
    \  return isSortedHelper(lst.tail)\n            }\n          } else {\n      \
    \      return isSortedHelper(lst.tail)\n          }\n        }\n        false\n\
    \      }\n      isSortedHelper(lst.tail)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc3n0oat1.scala:25:17 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m      \e[33mvar\e[0m \e[36mseen\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        // TODO: Implement me\n\
    \        val set = Set[Long]()\n        var i = 1;\n        val set = lst.toSet\n\
    \        while (i < lst.size) {\n            set.retain(_.toLong == lst(i).toLong)\n\
    \            if (set.size == 1) {\n                return true\n            }\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps36t3w5n.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = lst.toSet\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mset is already\
    \ defined as \e[33mvalue\e[0m \e[35mset\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size < 2l) return\
    \ false\n        val lastElem = lst.last\n        var flag = true\n        for\
    \ (ln <- lst.drop(2l)) {\n            if (ln >= lastElem) flag = false\n     \
    \   }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpegngwbth.scala:28:28\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mfor\e[0m (ln <-\
    \ lst.drop(\e[31m2l\e[0m)) {\n\e[31m\e[31m   |\e[0m                          \
    \  ^^\e[0m\n\e[31m   |\e[0m                            Found:    (\e[31m2L\e[0m\
    \ : Long)\n\e[31m   |\e[0m                            Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n        val\
    \ hashSet = mutable.HashSet[Long]()\n        val lastElement = lst.last\n    \
    \    for ( elem <- lst ){\n            if( hashSet(elem) == false ){\n       \
    \         hashSet(elem) = true\n                i = i + 1\n                if(\
    \ elem == lastElement ){\n                    return true\n                }\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprivqg5e2.scala:26:22 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n        var\
    \ j = lst.length-1\n        var found = false\n        while (i < j) {\n     \
    \       while (i < j && lst(i) == lst(j)) i += 1\n            while (i < j &&\
    \ lst(i) != lst(j)) j -= 1\n            if (i >= j) found = true\n        }\n\
    \        return found\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpobzl5ahj.scala:36)\n\tat Problem.main(tmpobzl5ahj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size < 2) return\
    \ true\n        var lastNumber = 0L\n        var lastNumberCount = 0\n       \
    \ for (_ <- 1 to lst.size) {\n            if (lst(lst.size - lastNumberCount)\
    \ < lst(lst.size - lastNumberCount)) {\n                lastNumberCount += 1\n\
    \                lastNumber = lst(lst.size - lastNumberCount)\n            }\n\
    \            else if (lst(lst.size - lastNumberCount) == lastNumber) {\n     \
    \           lastNumberCount += 1\n            }\n            else {\n        \
    \        lastNumberCount = 0\n            }\n        }\n        return lastNumberCount\
    \ == lst.size - 1\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.isSorted$$anonfun$1(tmpyri08zr2.scala:29)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.isSorted(tmpyri08zr2.scala:39)\n\
    \tat Problem$.main(tmpyri08zr2.scala:44)\n\tat Problem.main(tmpyri08zr2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val uniqueNums = lst.groupBy(identity).mapValues(_.size)\n\
    \        val isSorted = uniqueNums.isEmpty\n        return isSorted\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpph1apcz9.scala:30)\n\tat Problem.main(tmpph1apcz9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if(lst.size == 1)\n\
    \            lst.head == lst.last\n        else\n            isSorted(lst.tail)\
    \ && lst.head <= lst.last\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7ziyejv.scala:33)\n\tat Problem.main(tmpm7ziyejv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val m = mutable.Map[Long,Long]()\n\
    \        lst.foreach{n => m += (n->m.getOrElse(n,0))}\n        m.filter(_._1 >\
    \ 0)\n        .reduceLeft((x,y) => (x._1 < y._1) || (x._2 == y._2))\n        ._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9if85f_g.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.Map[\e\
    [35mLong\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var lastElem : Long\
    \ = lst(0)\n        var index : Int = 1\n        var isSorted = true\n       \
    \ for(elem <- lst) {\n            if(elem < lastElem){\n                isSorted\
    \ = false\n                break\n            }\n            else{\n         \
    \       lastElem = elem\n            }\n        }\n        if(!isSorted){\n  \
    \          for(elem <- lst.drop(index)){\n                if(elem < lastElem){\n\
    \                    isSorted = false\n                    break\n           \
    \     }\n                else{\n                    lastElem = elem\n        \
    \        }\n            }\n        }\n        isSorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpia7fzhwe.scala:31:16 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpia7fzhwe.scala:41:20 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        // first check if there\
    \ is only one unique number\n        if (lst.length == 1) {\n            if (lst(0)==lst(1))\n\
    \                return true\n            else\n                return false\n\
    \        }\n        // check if any two of the numbers are the same\n        for\
    \ (i <- 0 until lst.length - 1) {\n            if (lst(i) == lst(i+1))\n     \
    \           return false\n        }\n        // if all numbers are the same, check\
    \ if they are sorted\n        if (lst(lst.length-1) == lst(0))\n            return\
    \ true\n        else\n            return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.isSorted(tmp04g5pcbz.scala:27)\n\tat Problem$.main(tmp04g5pcbz.scala:44)\n\
    \tat Problem.main(tmp04g5pcbz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        require(lst.length <\
    \ 50, \"List contains too many duplicates\")\n        val sortedList = lst.sorted\n\
    \        val list = lst.distinct.toList\n        val duplicates = list.count(i\
    \ => sortedList.contains(i)) > 0\n        if(list.count(i => sortedList.contains(i))\
    \ > 1) {\n            return false\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvelq7u0f.scala:36)\n\tat Problem.main(tmpvelq7u0f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if(lst.length < 2)\n\
    \            return true;\n        val lastValueElem = lst(lst.length - 1)\n \
    \       val lastValue = lastValueElem.toLong\n        val lastValueSet = HashSet(lastValue)\n\
    \        var isSorted = true\n        var lastValue = lastValueElem\n        lst.foreach{\
    \ elem =>\n            if(!lastValueSet.add(elem.toLong))\n            {\n   \
    \             isSorted = false;\n                break;\n            }\n     \
    \       lastValue = elem\n        }\n        return isSorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfnq6k9nr.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m \e[36mlastValue\e[0m = lastValueElem\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mlastValue is already defined as \e[33mvalue\e[0m \e[35mlastValue\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfnq6k9nr.scala:36:16 ------------------------\e[0m\e[0m\n\e[31m36 |\e\
    [0m                break;\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpfnq6k9nr.scala:38:22 -----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            lastValue = elem\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to\
    \ val lastValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if(lst.size < 2) true\n\
    \        else {\n            val hsh = lst.groupBy(x => (x/2).floor).filter(_._2.size\
    \ == 1)\n            if(hsh.isEmpty) false\n            else hsh.get._2.toSet.size\
    \ == lst.size\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0gyftz_v.scala:27:45 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mhsh\e[0m = lst.groupBy(\e\
    [36mx\e[0m => (x/\e[31m2\e[0m).floor).filter(_._2.size == \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                       ^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m      value floor is not a member of Long.\n\e[31m   |\e[0m      An extension\
    \ method was tried, but could not be fully constructed:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m          doubleWrapper(x./(\e[31m2\e[0m))\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp0gyftz_v.scala:29:25 ------------------------\e[0m\e[0m\n\
    \e[31m29 |\e[0m            \e[33melse\e[0m hsh.get._2.toSet.size == lst.size\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \          value _2 is not a member of Any => Option[List[Long]]\n2 errors found\n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        val duplicated = new mutable.HashSet[Long]()\n        val lastDuplicated\
    \ = new mutable.HashSet[Long]()\n        val lastDuplicate = new mutable.HashSet[Long]()\n\
    \        for (i <- 0 until lst.length) {\n            if (set.contains(lst(i)))\
    \ {\n                lastDuplicated(lst(i))\n                duplicated(lst(i))\n\
    \            } else {\n                set.add(lst(i))\n            }\n      \
    \  }\n        return duplicated.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzov4inl8.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzov4inl8.scala:26:29\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mduplicated\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzov4inl8.scala:27:33 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mlastDuplicated\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzov4inl8.scala:28:32\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mlastDuplicate\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val nums = new mutable.TreeSet[Long]()\n\
    \        lst.foreach(n => nums.add(n))\n        lst.size <= 1 || !nums.contains(nums.last)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwgzxv0l7.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = \e[33mnew\e\
    [0m mutable.TreeSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        lst.distinct.size ==\
    \ lst.size && lst.distinct.sorted == true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgwrkdosh.scala:25:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        lst.distinct.size == lst.size && lst.distinct.sorted\
    \ == \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                                  \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m Values of types List[Long]\
    \ and Boolean cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660010279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val list = lst.filterNot(x\
    \ => x == list.last)\n        list.length < 2 || list.head < list.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwz12co8l.scala:25:43 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = lst.filterNot(\e\
    [36mx\e[0m => x == list.last)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \      Recursive \e[33mvalue\e[0m \e[35mlist\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size == 1)\n\
    \            return true\n\n        val seen = new mutable.HashSet[Long]\n   \
    \     var curr = lst(0)\n        for(_ <- 1 to lst.size - 1) {\n            val\
    \ next = lst(_)\n            if (next > curr) {\n                return false\n\
    \            } else if (next == curr) {\n                seen.add(curr)\n    \
    \        }\n            curr = next\n        }\n\n        // If there is more\
    \ than one duplicate and they are all equal, then\n        // the list is not\
    \ sorted.\n        if (seen.size == lst.size-1) return false\n        \n     \
    \   true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaq3qdps0.scala:28:23 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaq3qdps0.scala:32:21\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mif\e[0m\
    \ (next > curr) {\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue > is not a member of Int => Long, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpaq3qdps0.scala:34:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (next ==\
    \ curr) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m   Values of types Int => Long and Long cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaq3qdps0.scala:37:19\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m            curr = next\n\e[31m\e\
    [31m   |\e[0m                   ^^^^\e[0m\n\e[31m   |\e[0m                   Found:\
    \    (next : Int => Long)\n\e[31m   |\e[0m                   Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size<=1) true\n\
    \        else {\n            var lastNum = lst(0)\n            var flag = false\n\
    \            var i = 1 \n            var flag1 = false\n            for(x <- lst)\
    \ {\n                if (x==lastNum) {\n                    flag = true\n    \
    \                if (!flag1) {\n                        flag1 = true\n       \
    \             }\n                } else {\n                    flag = false\n\
    \                }\n                lastNum = x\n            }\n            if(flag)\
    \ return(false)\n            return(true)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjfz3sq0q.scala:49)\n\tat Problem.main(tmpjfz3sq0q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val issorted = lst.reverse.groupBy(e\
    \ => e).forall { e => !e.isEmpty }\n        !issorted && lst.size == lst.reverse.size\
    \ && lst.forall(e => e == lst.reverse.last)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge8bxfcy.scala:25:68 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36missorted\e[0m = lst.reverse.groupBy(\e\
    [36me\e[0m => e).forall { \e[36me\e[0m => !e.isEmpty }\n\e[31m\e[31m   |\e[0m\
    \                                                                  ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value isEmpty is not a member of (Long,\
    \ List[Long])\n1 error found\n"
  stdout: ''
  timestamp: 1660010279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val map = mutable.HashMap.empty[Long,\
    \ Boolean]\n        map (x => map(x+1) := false)\n        map (x => map(x+1) :=\
    \ true)\n        val n = 1\n        for (x<- lst) {\n            map(x+1) = (map(x)+=!map(x))\n\
    \            if((map(n+1)+=!map(n))){\n                return !map(n)\n      \
    \      }\n        }\n        true\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphiog8xo_.scala:25:18 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size < 2) return\
    \ true\n        val last = lst(lst.length - 1)\n        val freq = freq(lst.take(lst.length\
    \ - 1))\n        for (i <- 0 until lst.length - 1) {\n            if (lst(i) >\
    \ last) \n                return false\n            if (lst(i) == last && freq(i)\
    \ > 1) \n                return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl0skxx42.scala:27:19 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mfreq\e[0m = freq(lst.take(lst.length\
    \ - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e\
    [0m                   Recursive \e[33mvalue\e[0m \e[35mfreq\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size <= 1) {\n\
    \            return true\n        }\n        var flag = false // flag to know\
    \ whether list is sorted or not\n        // check if first element is same or\
    \ not\n        if ((lst.head == lst.last) && lst.size < 2) return false\n    \
    \    // checking if the list is not sorted for rest of elements\n        flag\
    \ = true\n        val head = lst.head\n        // loop through the list to find\
    \ duplicates\n        val count = lst.size - (lst.head + 1).asInstanceOf[Long]\n\
    \        for (i<- 1 to count){ \n            if((lst(i) == head) && lst.size !=\
    \ count) {\n                flag = false\n            }\n        }\n        return\
    \ flag\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0xbtwwfb.scala:36:22\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mfor\e[0m (i<- \e\
    [31m1\e[0m to count){ \n\e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Found:    (count : Long)\n\e[31m   |\e[0m\
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if(lst.size == 1) {\n\
    \            return true\n        }\n\n        var i = 0\n        var isSorted\
    \ = true\n\n        // Traverse the list\n        while(i < lst.size) {\n    \
    \        var j = 1\n            while(j < lst.size && lst(i) == lst(j)) {\n  \
    \              j++\n            }\n\n            if(j > i) {\n               \
    \ isSorted = false\n                break\n            }\n\n            i += j\
    \ + 1\n        }\n\n        return isSorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8wkny561.scala:36:19 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                j++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8wkny561.scala:41:16\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if(lst.nonEmpty) lst.sortWith(_\
    \ < _)\n        else false\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpunwpej2m.scala:25:37\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m(lst.nonEmpty)\
    \ lst.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    List[Long]\n\e[31m   |\e\
    [0m                         Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n        var\
    \ j = 1\n        while(j < lst.size) {\n            if(lst(i) < lst(j)) {\n  \
    \              return false\n            }\n            i += 1\n            j\
    \ += 1\n        }\n        \n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm8h8rrrk.scala:39)\n\tat Problem.main(tmpm8h8rrrk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n      if (lst.size < 2) true\n\
    \      else {\n        var prev = 0L\n        for (i <- 0 until lst.size)\n  \
    \        if (lst(i) > lst(i+1))\n            return false\n          else if (lst(i)\
    \ > prev)\n            prev = lst(i)\n        return true\n      }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.isSorted$$anonfun$1(tmp7gvceryi.scala:29)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.isSorted(tmp7gvceryi.scala:32)\n\
    \tat Problem$.main(tmp7gvceryi.scala:38)\n\tat Problem.main(tmp7gvceryi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        return lst.fold( _ =>\
    \ false, x => x > lst.head )\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpxjmd1ln8.scala:25:25 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mreturn\e[0m lst.fold( _ => \e[31mfalse\e\
    [0m, \e[36mx\e[0m => x > lst.head )\n\e[31m\e[31m   |\e[0m                   \
    \      ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$1 of expanded function:\n\
    \e[31m   |\e[0m   _$1 => \e[31mfalse\e[0m.\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmpxjmd1ln8.scala:25:37 -----------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mreturn\e[0m lst.fold( _ => \e[31mfalse\e[0m, \e[36mx\e[0m\
    \ => x > lst.head )\n\e[31m\e[31m   |\e[0m                                   \
    \  ^\e[0m\n\e[31m   |\e[0m                          Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                          I could not infer the\
    \ type of the parameter x.\n2 errors found\n"
  stdout: ''
  timestamp: 1660010280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        lst.forall(_ < lst(0))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnx884784.scala:28)\n\tat Problem.main(tmpnx884784.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010286
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var hashSet = new scala.collection.mutable.HashSet[Long]()\n\
    \        hashSet.addAll(lst)\n        hashSet.size == lst.size && lst.forall(x\
    \ => hashSet.contains(x))\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdqsz5oj9.scala:32)\n\tat Problem.main(tmpdqsz5oj9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size <= 1) return\
    \ true\n        val hashTable = mutable.HashSet[Long]()\n        lst.foreach {\
    \ elem => hashTable += elem }\n        val first = lst(0)\n        val last =\
    \ lst(lst.size - 1)\n        for (elem <- lst.drop(1))\n          if (elem < first\
    \ || elem > last) \n            return false\n        for (elem <- lst.take(lst.length\
    \ - 1)) \n          if (elem < first || elem > last) \n            return false\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph5h9ngza.scala:26:24 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mhashTable\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val countMap = mutable.Map[Long,\
    \ Int]()\n        lst.foreach{\n            case x if countMap.contains(x) =>\
    \ countMap += (x, countMap.getOrElse(x, 0) + 1l)\n            case x => countMap\
    \ += (x -> 1l)\n        }\n        !countMap.containsKey(0l) && !countMap.containsKey(-1l)\
    \ && !countMap.containsKey(1l)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpao7xufy0.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val l = new HashSet[Long](lst)\n\
    \        val d = l.size\n        if(d == 1) true\n        else {\n           \
    \ val r = l.iterator.drop(d - 1)\n            val m = l.iterator.dropRight(d)\n\
    \            val n = r.toSet\n            val l = n.mkString(\",\")\n        \
    \    val m = l.split(\",\")\n            if(m == r.toSet) true else false\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpfm2ry3sc.scala:25:20 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = \e[33mnew\e[0m\
    \ \e[35mHashSet\e[0m[\e[35mLong\e[0m](lst)\n\e[31m\e[31m   |\e[0m            \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mconstructor\e[0m \e[35mHashSet\e[0m in \e[33mclass\e[0m \e[35mHashSet\e\
    [0m with types\n\e[31m   |\e[0m [A](): scala.collection.mutable.HashSet[A]\n\e\
    [31m   |\e[0m [A]\n\e[31m   |\e[0m  (initialCapacity: Int, loadFactor: Double):\
    \ \n\e[31m   |\e[0m    scala.collection.mutable.HashSet[A]\n\e[31m   |\e[0mmatch\
    \ arguments ((lst : List[Long]))\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfm2ry3sc.scala:33:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e\
    [0m \e[36mm\e[0m = l.split(\e[31m\",\"\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e\
    [0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpfm2ry3sc.scala:31:20 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36mn\e[0m = r.toSet\n\e\
    [31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m               \
    \     Recursive \e[33mvalue\e[0m \e[35mr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val a = lst.head\n \
    \       val b = lst.length\n        if (a == b)\n            if (lst.tail.isEmpty)\n\
    \                return true\n            else\n                return false\n\
    \        else\n            if (a == b-1)\n                return false\n     \
    \       else\n                return isSorted(lst.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.isSorted(tmp5wdptyha.scala:25)\n\
    \tat Problem$.isSorted(tmp5wdptyha.scala:36)\n\tat Problem$.main(tmp5wdptyha.scala:39)\n\
    \tat Problem.main(tmp5wdptyha.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010288
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n        for(x\
    \ <- lst) {\n            if(i == 0 || x > lst(i-1)) {\n                i = i+1\n\
    \            } else {\n                i = 0\n            }\n        }\n     \
    \   i == lst.size\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbqfh3rcc.scala:47)\n\tat Problem.main(tmpbqfh3rcc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet.empty[Long]\n\
    \        val seen2 = mutable.HashSet.empty[Long]\n        for(n <- lst) {\n  \
    \          val prevn = seen(n - 1)\n            val next = seen(n + 1)\n     \
    \       if(prevn != next) false\n            seen.add(n)\n            seen2.add(n)\n\
    \        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp68lu0g8.scala:25:19 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp68lu0g8.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mseen2\e[0m = mutable.HashSet.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpp68lu0g8.scala:30:30 ----------------\e\
    [0m\e[0m\n\e[33m30 |\e[0m            \e[33mif\e[0m(prevn != next) \e[31mfalse\e\
    [0m\n\e[33m\e[33m   |\e[0m                              ^^^^^\e[0m\n\e[33m   |\e\
    [0mA pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1660010284
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        lst.size <= 1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa6m3f83a.scala:29)\n\tat Problem.main(tmpa6m3f83a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if(lst.size <= 1)\n\
    \            return true\n        val seen = mutable.HashSet[Long]()\n       \
    \ val lastSeen = lst.last\n        lst.foreach(e => \n            if(!seen(e))\n\
    \                seen.add(e)\n            else\n            lastSeen < e\n   \
    \     )\n        seen.toSet.size == lst.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg4i5s3ed.scala:27:19 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val seen = new mutable.HashSet[Long]\n\
    \        var sorted = true\n        for (n <- lst) {\n            seen += n\n\
    \            if (seen.toSet.size < lst.size) {\n                sorted = false\n\
    \            }\n        }\n        sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpighj7l9o.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n       var hashMap = mutable.Map[Long,\
    \ Long]()\n       var result = true\n       lst.foreach(x => hashMap += (x, hashMap.getOrElse(x,\
    \ 0l)))\n       lst.sortWith(_.hashCode < _.hashCode).foreach { x => hashMap +=\
    \ (x, 0l)}\n       result = (hashMap.length == lst.length)\n       hashMap.clear()\n\
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphojthym4.scala:25:21 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m       \e[33mvar\e[0m \e[36mhashMap\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        lst.sortWith(_ < _)\n\
    \        lst.size == lst.distinct().size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmph9_z5t4z.scala:26:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        lst.size == lst.distinct().size\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument\
    \ for parameter n of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mtrait\e[0m \e\
    [35mLinearSeqOps\e[0m: (n: Int): Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val map = scala.collection.mutable.HashMap.empty[Long,\
    \ Int]\n        var isSorted  = true\n        var idx = 0\n        val len = lst.length\n\
    \        while (idx < len) {\n            if (map.contains(lst(idx))) {\n    \
    \            isSorted = false\n                break\n            }\n        \
    \    map += lst(idx) -> map.size\n            idx += 1\n        }\n        isSorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgb4t6fof.scala:32:16 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size <= 1) return\
    \ true\n        var cnt = 0\n        var minIndex = lst.last\n        lst.foreach(x\
    \ => cnt += lst.indexOf(x) > lst.indexOf(minIndex) ? 1 : 0)\n        return cnt\
    \ <= 1\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk30qszjm.scala:28:29 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        lst.foreach(\e[36mx\e[0m => cnt += lst.indexOf(x)\
    \ > lst.indexOf(minIndex) ? \e[31m1\e[0m : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpk30qszjm.scala:28:71 ------------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m        lst.foreach(\e[36mx\e[0m => cnt += lst.indexOf(x) > lst.indexOf(minIndex)\
    \ ? \e[31m1\e[0m : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                      value ? is not a member of Int\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var flag = true\n  \
    \      var len = lst.length\n        // count the frequency of each element\n\
    \        var freq = lst.foldLeft(Map[Long, Int]())((m, e) => \n            if\
    \ (m.containsKey(e)) {\n                m(e) += 1\n            } else {\n    \
    \            m.put(e, 1)\n            }\n        )\n        // check if the frequency\
    \ is equal to the number\n        for (e <- 0 until len) {\n            val curFreq\
    \ = freq(e._2)\n            if (curFreq != e._2) {\n                flag = false\n\
    \                break\n            }\n        }\n        return flag\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2qfhfrxr.scala:29:18 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m (m.containsKey(e)) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue containsKey\
    \ is not a member of scala.collection.mutable.Map[Long, Int] - did you mean m.contains?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2qfhfrxr.scala:30:16 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                m(e) += \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    Unit\n\e[31m   |\e[0m                Required: scala.collection.mutable.Map[Long,\
    \ Int]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2qfhfrxr.scala:32:21\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m                m.put(e, \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \               Found:    Option[Int]\n\e[31m   |\e[0m                Required:\
    \ scala.collection.mutable.Map[Long, Int]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp2qfhfrxr.scala:37:33 ------------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m            \e[33mval\e[0m \e[36mcurFreq\e[0m = freq(e._2)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m   |\e[0m\
    \                               value _2 is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp2qfhfrxr.scala:38:29 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            \e[33mif\e[0m (curFreq != e._2) {\n\e[31m\e\
    [31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                value _2 is not a member of Int\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp2qfhfrxr.scala:40:16 ------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\
    \e[31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n6 er"
  stdout: ''
  timestamp: 1660010290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        // Write code here\n\
    \        if(lst.length==1){\n            return lst(0) > lst(1)\n        }else{\n\
    \            var isSorted = false\n            var prevNum = lst(0)\n        \
    \    for(num <- lst){\n                if(num != prevNum){\n                 \
    \   return false\n                }else{\n                    isSorted = true\n\
    \                }\n                prevNum = num\n            }\n           \
    \ return isSorted\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.isSorted(tmp7is3glcu.scala:27)\n\tat Problem$.main(tmp7is3glcu.scala:43)\n\
    \tat Problem.main(tmp7is3glcu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        lst.foldLeft(false)\
    \ { (acc, i) =>\n            if (acc && i != lst.last) { acc }\n            else\
    \ { acc && lst.last == i }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdhn228bt.scala:31)\n\tat Problem.main(tmpdhn228bt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        def helper(acc : List[Long],\
    \ prev : Long, head : Long) : Boolean = {\n            head < prev && {\n    \
    \            val cur = prev + head\n                val exists = acc.exists(_\
    \ == cur)\n                exists && {\n                    helper(acc ::: List(cur),\
    \ cur, head)\n                }\n            }\n        }\n        helper(Nil,\
    \ lst(0), lst(1))\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.isSorted(tmpliwjlpr4.scala:34)\n\tat Problem$.main(tmpliwjlpr4.scala:37)\n\
    \tat Problem.main(tmpliwjlpr4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if(lst.length == 1)\
    \ return true\n        val last = lst(0)\n        for(x <- lst.drop(1) if last\
    \ < x) last = x \n        last < lst(0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp8hufi8eu.scala:27:47 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mfor\e[0m(x <- lst.drop(\e[31m1\e[0m) \e\
    [33mif\e[0m last < x) last = x \n\e[31m\e[31m   |\e[0m                       \
    \                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \               Reassignment to val last\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n      val set = scala.collection.mutable.Set[Long]()\n\
    \      for (x <- lst)\n        if (set.contains(x))\n          return false\n\
    \        else\n          set.add(x)\n      return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqg2p7r6i.scala:36)\n\tat Problem.main(tmpqg2p7r6i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = mutable.HashSet[Long]()\n\
    \        for (i <- 0 until lst.length) {\n            hashSet += lst(i)\n    \
    \    }\n        val len = hashSet.size\n        val count = len / 2\n        val\
    \ sorted = hashSet.toSeq.sorted.toList\n        sorted == sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp644annfa.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var seen = Set.empty[Long]\n\
    \        var len = lst.length\n        for ( i <- 0 until len )\n            seen\
    \ = seen.union(lst(i))\n        seen.isEmpty || seen.size == len\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps8oz3r8_.scala:28:33\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            seen = seen.union(lst(i))\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              Found:    Long\n\e[31m   |\e[0m               \
    \               Required: scala.collection.Set[Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val size = lst.length\n\
    \        if (size < 2) true\n        else lst.groupBy(lst => lst).forall(e =>\
    \ e._2.length == 1 && e._2.head._1 < e._2.last._1) && isSorted(lst.sorted)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7wgzaxru.scala:27:79 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33melse\e[0m lst.groupBy(lst => lst).forall(e\
    \ => e._2.length == \e[31m1\e[0m && e._2.head._1 < e._2.last._1) && isSorted(lst.sorted)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \           value _1 is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var i : Int = 0\n  \
    \      var j : Int = 0\n        val set = new mutable.HashSet[Long]()\n      \
    \  var lastVal = lst(0)\n        while (i < lst.size) {\n            val curVal\
    \ = lst(i)\n            if (!set.contains(curVal) && curVal != lastVal) {\n  \
    \              set.add(curVal)\n                lastVal = curVal\n           \
    \ } else {\n                i += 1\n            }\n        }\n        return lastVal\
    \ == lst(0) || set.size == lst.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw2tlobfq.scala:27:22 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var numDup = lst.size\n\
    \        var curNum = lst.head\n        var nextNum = lst.tail.head\n        for(i\
    \ <- 0 until lst.size) {\n            if(!nextNum.equals(lst.head)) {\n      \
    \          numDup = numDup - 1\n                curNum = lst.head\n          \
    \      nextNum = lst.tail.head\n            }\n            if(numDup != 1) {\n\
    \                return false\n            }\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.isSorted(tmpl_7cqr40.scala:27)\n\
    \tat Problem$.main(tmpl_7cqr40.scala:41)\n\tat Problem.main(tmpl_7cqr40.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val hashMap = scala.collection.mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach{ e => hashMap += (e -> 1) }\n        lst.foreach{\
    \ e => {\n            if (hashMap.get(e) == lst.count(_ == e)) hashMap -= e ;\
    \ else return false\n        }}\n        hashMap.nonEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptcjnvgde.scala:28:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mif\e[0m (hashMap.get(e) == lst.count(_\
    \ == e)) hashMap -= e ; \e[33melse\e[0m \e[33mreturn\e[0m \e[31mfalse\e[0m\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m    Values of types Option[Int] and Int cannot be compared with ==\
    \ or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size == 0) return\
    \ true\n        if (lst.size < 2) return false\n        var j = 0\n        for\
    \ (i <- 0 until lst.size-1) {\n            if (lst(i) > lst(i+1)) j++\n      \
    \      if (j > 1) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpknca6hyn.scala:29:38 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m (lst(i) > lst(i+\e[31m1\e[0m))\
    \ j++\n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m\
    \   |\e[0m                                      expression expected but \e[31mif\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long](lst)\n\
    \        set.toList.sortWith((x,y) => (x != y) || (x < y)).size < set.toList.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpct3pk1hf.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m](lst)\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.isEmpty) true\n\
    \        val last = lst(0)\n        var j = 1\n        while (j < lst.size) {\n\
    \            if (lst(j) > last)\n                return false\n            last\
    \ += 1\n            j += 1\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvlfmncrz.scala:31:17 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            last += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Long - did you mean last.!=?\n\e[33m\e[33m-- [E129] Potential Issue Warning:\
    \ /tmp/tmpvlfmncrz.scala:25:25 ----------------\e[0m\e[0m\n\e[33m25 |\e[0m   \
    \     \e[33mif\e[0m (lst.isEmpty) \e[31mtrue\e[0m\n\e[33m\e[33m   |\e[0m     \
    \                    ^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing\
    \ in statement position; you may be omitting necessary parentheses\n\e[33m   |\e\
    [0m\n\e[33m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1660010295
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size < 2)\n\
    \            return true\n        var i : Int = 1\n        var j : Int = lst.size\n\
    \        var found : Boolean = false\n        var isSorted : Boolean = true\n\
    \        while (!found && i < j) {\n            if (lst(i) > lst(i + 1))\n   \
    \             found = true\n            else {\n                i += 1\n     \
    \           if (i == j)\n                    isSorted = false\n            }\n\
    \        }\n        return isSorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.isSorted(tmpq717wkxn.scala:32)\n\tat Problem$.main(tmpq717wkxn.scala:44)\n\
    \tat Problem.main(tmpq717wkxn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n      var cur = 0\n      while\
    \ (cur < lst.size) {\n        if (lst(cur) == lst(cur + 1)) cur += 1\n       \
    \ else return false\n      }\n      return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.isSorted(tmpd8xmfpvj.scala:27)\n\tat Problem$.main(tmpd8xmfpvj.scala:33)\n\
    \tat Problem.main(tmpd8xmfpvj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size == 0) return\
    \ true\n        val count = new mutable.HashMap[Long, Int]\n        val count2\
    \ = new mutable.HashMap[Long, Int]\n        val count3 = new mutable.HashMap[Long,\
    \ Int]\n        for (x <- lst) {\n            val count = count + (x -> 1)\n \
    \           val count2 = count2 + (x -> 1)\n            if (count.size > 1) {\n\
    \                return false\n            }\n        }\n        for (x <- lst)\
    \ {\n            if (count.contains(x) && count.get(count2) > 1 ) {\n        \
    \        return false\n            }\n        }\n        for (x <- lst) {\n  \
    \          if (count2.contains(x) && count2.get(count3) > 1 ) {\n            \
    \    return false\n            }\n        }\n        for (x <- lst) {\n      \
    \      if (count3.contains(x) && count3.get(count) > 1 ) {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbyde68w2.scala:26:24 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m  \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbyde68w2.scala:27:25\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mcount2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbyde68w2.scala:28:25 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mcount3\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val set = new scala.collection.mutable.HashSet[Long](lst)\n\
    \        if(set.size == lst.size)\n            if(lst(0) <= lst(1))\n        \
    \        true\n            else\n                false\n        else\n       \
    \     false\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpby_url3l.scala:25:22 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ scala.collection.mutable.HashSet[\e[35mLong\e[0m](lst)\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mconstructor\e[0m \e[35mHashSet\e\
    [0m in \e[33mclass\e[0m \e[35mHashSet\e[0m with types\n\e[31m   |\e[0m [A]():\
    \ scala.collection.mutable.HashSet[A]\n\e[31m   |\e[0m [A]\n\e[31m   |\e[0m  (initialCapacity:\
    \ Int, loadFactor: Double): \n\e[31m   |\e[0m    scala.collection.mutable.HashSet[A]\n\
    \e[31m   |\e[0mmatch arguments ((lst : List[Long]))\n1 error found\n"
  stdout: ''
  timestamp: 1660010294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size == 0) return\
    \ false\n        var i = 0\n        var j = 0\n        var isSorted = true\n \
    \       while (i < lst.size -1 && j < lst.size && lst(i) < lst(j)) {\n       \
    \     if (i == j) {\n                isSorted = false\n                break\n\
    \            }\n            i += 1\n            j += 1\n        }\n        return\
    \ isSorted\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps1kej01s.scala:32:16 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010294
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size <= 1) true\n\
    \        else {\n            var i = lst.indexWhere(_ == lst(0))\n           \
    \ var j = 0\n            while (j < i && lst(j) < lst(j+1))\n                j\
    \ += 1\n            if (j == i) return true\n            else return false\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_rpc9ls0.scala:38)\n\tat Problem.main(tmp_rpc9ls0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010299
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        def countDuplicates(list:\
    \ List[Long], map: mutable.Map[Long, Int]) : Map[Long, Int] = {\n            if\
    \ (list.size <= 1) map\n            else {\n                var duplicateCount\
    \ = 0\n                var duplicate = list.head\n                for (x <- list.tail)\
    \ {\n                    if (map.contains(x)) {\n                        duplicateCount\
    \ = map.get(x) + 1\n                    } else {\n                        duplicateCount\
    \ = 1\n                        map.put(\n                            x, \n   \
    \                         duplicateCount\n                        )\n        \
    \            }\n                    if (duplicateCount > 1) {\n              \
    \          return map\n                    }\n                    duplicate =\
    \ x\n                }\n            }\n        }\n        var map = new mutable.HashMap[Long,\
    \ Int]()\n        var sorted: Boolean = true\n        for (x <- lst) {\n     \
    \       val k = x\n            val count = map.get(k)\n            if (count ==\
    \ 0) {\n                map = countDuplicates(lst, map)\n                sorted\
    \ = true\n            } else if (count != 1) {\n                return false\n\
    \            }\n        }\n        return sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsgljqr6b.scala:25:51 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mdef\e[0m \e[36mcountDuplicates\e[0m(\e\
    [36mlist\e[0m: \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mmap\e[0m: mutable.Map[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]) : \e[35mMap\e[0m[\e[35mLong\e[0m, \e[35mInt\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsgljqr6b.scala:30:16 --------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m                \e[33mfor\e[0m (x <- list.tail) {\n\e[31m\e[31m   |\e\
    [0m                ^\e[0m\n\e[31m   |\e[0m                Found:    Unit\n\e[31m\
    \   |\e[0m                Required: collection.mutable.Map[Long, Int]\n\e[31m31\
    \ |\e[0m                    \e[33mif\e[0m (map.contains(x)) {\n\e[31m32 |\e[0m\
    \                        duplicateCount = map.get(x) + \e[31m1\e[0m\n\e[31m33\
    \ |\e[0m                    } \e[33melse\e[0m {\n\e[31m34 |\e[0m             \
    \           duplicateCount = \e[31m1\e[0m\n\e[31m35 |\e[0m                   \
    \     map.put(\n\e[31m36 |\e[0m                            x, \n\e[31m37 |\e[0m\
    \                            duplicateCount\n\e[31m38 |\e[0m                 \
    \       )\n\e[31m39 |\e[0m                    }\n\e[31m40 |\e[0m             \
    \       \e[33mif\e[0m (duplicateCount > \e[31m1\e[0m) {\n\e[31m41 |\e[0m     \
    \                   \e[33mreturn\e[0m map\n\e[31m42 |\e[0m                   \
    \ }\n\e[31m43 |\e[0m                    duplicate = x\n\e[31m44 |\e[0m       \
    \         }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsgljqr6b.scala:47:22\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mvar\e[0m \e\
    [36mmap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanat"
  stdout: ''
  timestamp: 1660010299
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val unique = Set[Long]()\n\
    \        lst.foreach{ x =>\n            if(unique.contains(x)) {\n           \
    \     return false\n            }\n            unique += x\n        }\n      \
    \  unique.toList.sorted.toSet.size == lst.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwmnr9xtx.scala:37)\n\tat Problem.main(tmpwmnr9xtx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = Set[Long]()\n\
    \        lst.foreach(x => hashSet.add(x))\n        lst.size != hashSet.size &&\
    \ !hashSet.exists(x => lst.indexOf(x) < 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpng5j2wd2.scala:30)\n\tat Problem.main(tmpng5j2wd2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n      var i : Int = 0\n    \
    \  var j = lst.size -1\n      while (i < j) {\n        if (lst(i) > lst(j)) {\n\
    \          return false\n        }\n        if (lst(i) == lst(j)) {\n        \
    \  i += 1\n          j -= 1\n        }\n        i += 1\n        j += 1\n     \
    \ }\n      return true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.isSorted(tmppaxgs7x9.scala:28)\n\tat Problem$.main(tmppaxgs7x9.scala:42)\n\
    \tat Problem.main(tmppaxgs7x9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.length < 2)\
    \ return true\n        def countDuplicates(lst : List[Long]) : Int = {\n     \
    \       val counts = mutable.HashMap[Long, Int]()\n            for (i <- 0 until\
    \ lst.length) counts(lst(i)) = 1\n            counts.filter(_._2 > 1).length\n\
    \        }\n        val duplicateCount = countDuplicates(lst)\n        if (duplicateCount\
    \ < 1) return true\n        if (duplicateCount == 2) return false\n        val\
    \ firstDuplicateIndex = lst.lastIndexWhere((x => x == lst(lst.indexOf(lst(x)))))\n\
    \        val lastDuplicateIndex = lst.indexWhere((x => x == lst(lst.indexOf(lst(x\
    \ - 1)))))\n        val firstDuplicate = lst(firstDuplicateIndex)\n        val\
    \ lastDuplicate = lst(lastDuplicateIndex)\n        val difference = lastDuplicate\
    \ - firstDuplicate\n        if (difference < -1) || difference > 1) return false\n\
    \        val indexOfFirstDuplicate = lst.indexOf(firstDuplicate)\n        if (indexOfFirstDuplicate\
    \ == 0) return false\n        val indexOfLastDuplicate = lst.indexOf(lastDuplicate)\n\
    \        val differenceToFirstDuplicate = lst(indexOfFirstDuplicate) - firstDuplicate\n\
    \        if (differenceToFirstDuplicate > -1) return false\n        val differenceToLastDuplicate\
    \ = lastDuplicate - lst(indexOfLastDuplicate)\n        if (differenceToLastDuplicate\
    \ > -1) return false\n        isSorted(lst.drop(indexOfFirstDuplicate))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8fb_a3zm.scala:39:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mif\e[0m (difference < -\e[31m1\e[0m) ||\
    \ difference > \e[31m1\e[0m) \e[33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                             ^\e[0m\n\e[31m   |\e[0m\
    \                     end of statement expected but integer literal found\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8fb_a3zm.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8fb_a3zm.scala:34:84\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mfirstDuplicateIndex\e\
    [0m = lst.lastIndexWhere((\e[36mx\e[0m => x == lst(lst.indexOf(lst(x)))))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \                         Found:    (x : Long)\n\e[31m   |\e[0m              \
    \                                      Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp8fb_a3zm.scala:35:79 --------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mlastDuplicateIndex\e[0m\
    \ = lst.indexWhere((\e[36mx\e[0m => x == lst(lst.indexOf(lst(x - \e[31m1\e[0m)))))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                       ^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                                Found:    Long\n\e[31m   |\e[0m             \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8fb_a3zm.scala:39:29 ------------"
  stdout: ''
  timestamp: 1660010301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]\n\
    \        lst.foreach(x => { set.add(x.toLong) })\n        if(set.size == lst.size)\n\
    \            lst.forall( x => { x == lst.min() || x == lst.max() } )\n       \
    \ else\n            false\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4xm9euow.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmp4xm9euow.scala:28:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            lst.forall( \e[36mx\e[0m => { x == lst.min()\
    \ || x == lst.max() } )\n\e[31m\e[31m   |\e[0m                               \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter ord of \e\
    [33mmethod\e[0m \e[35mmin\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m:\
    \ (\e[33mimplicit \e[0mord: Ordering[B]): Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660010299
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var i = lst.size-1\n\
    \        while (i > 0) {\n            var j = 0\n            while (j < (lst.size-i)/2)\
    \ {\n                if (lst(i+1) < lst(j+1))\n                    return false\n\
    \                j += 1\n            }\n            i -= 1\n        }\n      \
    \  true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj26cyaeb.scala:42)\n\tat Problem.main(tmpj26cyaeb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val nums = lst.groupBy(x\
    \ => x).mapValues(x => x.size)\n        if(nums(1).size == lst.size) {\n     \
    \       val num1 = nums(1)\n            if(nums(num1).size == lst.size) {\n  \
    \              // check if all values in num2 are in lst\n                val\
    \ num2 = nums(num1)\n                lst.forall(num2.contains(_))\n          \
    \  } else {\n                false\n            }\n        } else {\n        \
    \    false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwxiq7yv4.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m(nums(\e[31m1\e[0m).size == lst.size)\
    \ {\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \     value size is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpwxiq7yv4.scala:28:26 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m            \e[33mif\e[0m(nums(num1).size == lst.size) {\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value size\
    \ is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwxiq7yv4.scala:31:32\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                lst.forall(num2.contains(_))\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           value contains is not a member of Int\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size == 1) {\n\
    \            val a = lst(0)\n            lst == a\n        } else {\n        \
    \    val b = lst.last\n            var c = 1\n            val len = lst.size\n\
    \            while (c < len) {\n                if (lst(c) > b) {\n          \
    \          b = lst(c)\n                }\n                c += 1\n           \
    \ }\n            c = 1\n            val a = lst(0)\n            val len = lst.size\n\
    \            while (c < len) {\n                if (lst(c) < a) {\n          \
    \          a = lst(c)\n                }\n                c += 1\n           \
    \ }\n            c += 1\n            val dup = lst.lastIndexWhere((a,b) => a ==\
    \ b).toLong\n            (dup < 0) == (a < b)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgnra2mu8.scala:27:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            lst == a\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m    Values of types List[Long] and Long cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgnra2mu8.scala:40:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m            \e[33mval\e\
    [0m \e[36mlen\e[0m = lst.size\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlen is already defined as \e[33mvalue\e[0m \e[35mlen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpgnra2mu8.scala:34:22 -----------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m                    b = lst(c)\n\e[31m\e[31m   |\e[0m                \
    \    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment to val b\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpgnra2mu8.scala:43:22 -----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                    a = lst(c)\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment\
    \ to val a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpgnra2mu8.scala:48:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m48 |\e[0m            \e[33mval\e\
    [0m \e[36mdup\e[0m = lst.lastIndexWhere((\e[36ma\e[0m,\e[36mb\e[0m) => a == b).toLong\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n5 errors found\n"
  stdout: ''
  timestamp: 1660010302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size > 1)\n\
    \            lst.sortWith(_.compareTo(_) > 0).size < 2\n        else\n       \
    \     lst.sortWith(_.compareTo(_) > 0)(1).equals(lst(0))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.isSorted(tmp06gje576.scala:28)\n\tat Problem$.main(tmp06gje576.scala:31)\n\
    \tat Problem.main(tmp06gje576.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010303
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var lastVal : Long =\
    \ lst(0)\n        for(i <- 1 until lst.size) {\n            if(lst(i) < lastVal)\
    \ {\n                return false\n            }\n            lastVal = lst(i)\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.isSorted(tmpxmhq1e7f.scala:25)\n\tat Problem$.main(tmpxmhq1e7f.scala:41)\n\
    \tat Problem.main(tmpxmhq1e7f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n      var cur = lst(0)\n   \
    \   var end = lst.length - 1\n      while(end > 0){\n         while(cur < end(lst)){\n\
    \            cur = cur + lst(end)\n            end = end - 1\n         }\n   \
    \      if(cur == end(lst)){\n            return true\n         }\n         cur\
    \ = cur - lst(end)\n         end = end - 1\n      }\n      return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpsbgh9fc0.scala:28:21 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m         \e[33mwhile\e[0m(cur < end(lst)){\n\e[31m\e\
    [31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m                  \
    \   \e[33mvariable\e[0m \e[35mend\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpsbgh9fc0.scala:32:19 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m         \e[33mif\e[0m(cur == end(lst)){\n\e[31m\e[31m\
    \   |\e[0m                   ^^^\e[0m\n\e[31m   |\e[0m                   \e[33mvariable\e\
    [0m \e[35mend\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        // sort the array and\
    \ compare the lengths\n        val sortedArray = lst.toArray.sort\n        val\
    \ isSorted = lst.size == sortedArray.size && lst.forall(x => x == sortedArray(lst.indexOf(x)))\n\
    \        return isSorted\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9wg5p_w3.scala:26:38 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msortedArray\e[0m = lst.toArray.sort\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue sort is not a member of Array[Long] - did you mean Array[Long].wait?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val a = lst.distinct\n\
    \        val b = a.sorted\n        !b.contains(lst(0))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi2lx1r3z.scala:30)\n\tat Problem.main(tmpi2lx1r3z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010304
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n      lst.forall((l : Long)\
    \ => { val hash = new HashMap[Long,Long](); hash.put(l, l); hash.size == 1 })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgj4hn95r.scala:30)\n\tat Problem.main(tmpgj4hn95r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010305
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        lst.forall(\n      \
    \      x => lst.indexOf(x) == lst.lastIndexOf(x))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuu3sskyz.scala:31)\n\tat Problem.main(tmpuu3sskyz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010305
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n        var\
    \ flag = true\n        for (i <- 0 until lst.size) {\n            if ((i + 1)\
    \ > lst.size) {\n                flag = false\n            }\n            if (lst(i)\
    \ < lst(i + 1)) {\n                flag = false\n            }\n        }\n  \
    \      return flag\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.isSorted$$anonfun$1(tmpycwtg27o.scala:31)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.isSorted(tmpycwtg27o.scala:34)\n\
    \tat Problem$.main(tmpycwtg27o.scala:38)\n\tat Problem.main(tmpycwtg27o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010306
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var sortedLst = lst\n\
    \        sortedLst.sortWith(_ < _)\n        return sortedLst == lst\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy7ulkg25.scala:32)\n\tat Problem.main(tmpy7ulkg25.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val map = new mutable.LinkedHashMap[Long,\
    \ Boolean]()\n        map + lst(lst.length - 1) //To ensure the list is not empty\
    \ \n        return map.values.toSeq.isEmpty //to ensure the list is not empty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpor89pab0.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.LinkedHashMap[\e[35mLong\e[0m, \e[35mBoolean\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n        val\
    \ len = lst.size\n        var ans = false\n        while (i < len) {\n       \
    \     if (lst(i) == lst(i + 1))\n                i += 1\n            else\n  \
    \              ans = true\n        }\n        ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.isSorted(tmp969erhfy.scala:29)\n\tat Problem$.main(tmp969erhfy.scala:37)\n\
    \tat Problem.main(tmp969erhfy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val sortedList = lst.sort\n\
    \        val set = lst.groupBy(x => x).toSet\n        val result = sortedList\
    \ == set.map(_._2).flatten\n        if (result) {\n            true\n        }\
    \ else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpup0sxdu2.scala:25:29 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msortedList\e[0m = lst.sort\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \    value sort is not a member of List[Long] - did you mean lst.sortBy?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010306
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        lst.forall { x =>\n\
    \            x != lst(0) && lst.indexWhere(x => x == lst(0)) == lst.lastIndexOf(x)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_cq_iokg.scala:30)\n\tat Problem.main(tmp_cq_iokg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        for(elem <- lst) {\n            if (!set.remove(elem)) {\n          \
    \      set.add(elem)\n            }\n        }\n        return set.size == lst.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq7ty08pn.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = lst.groupBy(_\
    \ != lst(0)).toSeq.\n            map {case (k,v) => k}.toSet\n        val set\
    \ = lst.filter{_ != lst(0)}.toSet\n        val isSorted = hashSet.subsetOf(set)\
    \ && hashSet.size == set.size\n        isSorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7rqaqihi.scala:28:40\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36misSorted\e\
    [0m = hashSet.subsetOf(set) && hashSet.size == set.size\n\e[31m\e[31m   |\e[0m\
    \                                        ^^^\e[0m\n\e[31m   |\e[0m           \
    \                      Found:    (set : Set[Long])\n\e[31m   |\e[0m          \
    \                       Required: scala.collection.Set[Boolean]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.length <= 1)\
    \ {\n            return true\n        }\n\n        var i : Int = 0\n        var\
    \ dup : Boolean = false\n        var tmp : Long\n        for (i <- 0 to lst.length\
    \ - 2) {\n            tmp = lst(i)\n            if (lst(i + 1) > tmp) {\n    \
    \            dup = true\n            }\n        }\n        return !dup\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E067] Syntax Error: /tmp/tmpbcm2wd0w.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m \e[36mtmp\e[0m : \e[35mLong\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0mDeclaration of \e\
    [33mvariable\e[0m \e[35mtmp\e[0m not allowed here: only classes can have declared\
    \ but undefined members\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n      var last = 0\n      var\
    \ isAsc = true \n      lst.foldRight(Seq.empty[Long]) {\n        case (cur, i)\
    \ => if (i == cur) last else last + 1\n      }.reverse.foldLeft(isAsc) {\n   \
    \     case (true, false) => false\n        case (true, true)  => true\n      \
    \  case (false, true) => true\n        case (false, false) => false\n      }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpq5dv_dwd.scala:28:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mcase\e[0m (cur, i) => \e[33mif\e[0m (i\
    \ == cur) last \e[33melse\e[0m last + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                         ^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of types scala.collection.mutable.Seq[Long]\
    \ and Long cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpq5dv_dwd.scala:28:39 --------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mcase\e[0m (cur, i) => \e[33mif\e[0m (i == cur) last \e[33melse\e\
    [0m last + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                               \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                            Found:    (last\
    \ : Int)\n\e[31m   |\e[0m                            Required: scala.collection.mutable.Seq[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq5dv_dwd.scala:28:49\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mcase\e[0m (cur,\
    \ i) => \e[33mif\e[0m (i == cur) last \e[33melse\e[0m last + \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                 ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    Int\n\e[31m   |\e[0m\
    \                            Required: scala.collection.mutable.Seq[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpq5dv_dwd.scala:30:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mcase\e[0m (\e[31mtrue\e[0m, \e[31mfalse\e\
    [0m) => \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\
    \e[31m   |\e[0m       Values of types Boolean and Long cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpq5dv_dwd.scala:31:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mcase\e[0m (\e[31mtrue\e[0m, \e[31mtrue\e\
    [0m)  => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\
    \e[31m   |\e[0m       Values of types Boolean and Long cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Erro"
  stdout: ''
  timestamp: 1660010311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var inOrder = true\n\
    \        var seen = 0\n        for (i <- 0 until lst.size) {\n            var\
    \ j = i + 1\n            val l = lst(i)\n            while (j < lst.size && lst(j)\
    \ < l) {\n                j += 1\n            }\n            seen += (j - i)\n\
    \            inOrder = inOrder && (j == lst.size || l < lst(j))\n        }\n \
    \       seen == lst.size && inOrder\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpai23364_.scala:50)\n\tat Problem.main(tmpai23364_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        // Create a list of\
    \ possible duplicate numbers to compare against\n        val (duplicates, notDuplicates)\
    \ = lst.partition(x => lst.count(y => x == y))\n        if (duplicates.size !=\
    \ 1) return false\n        // Return true if there is only one duplicate number\n\
    \        if (notDuplicates.size <= 1) return true\n        // Return false if\
    \ there are 2 or more duplicate numbers\n        val duplicateCount = duplicates.count(x\
    \ => x == duplicates.min)\n        if (duplicateCount > 1) return false\n    \
    \    // Otherwise, return true because there are 2 or more duplicate numbers\n\
    \        true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp51ycn1a4.scala:26:70\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m (duplicates,\
    \ notDuplicates) = lst.partition(\e[36mx\e[0m => lst.count(\e[36my\e[0m => x ==\
    \ y))\n\e[31m\e[31m   |\e[0m                                                 \
    \            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                                   Found:    Int\n\e[31m   |\e[0m           \
    \                                            Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        // Sort is O(nlogn)\n\
    \        // Sorting takes O(nlogn), so sorting twice means O(nlogn)\n        val\
    \ sorted = lst.sortWith(_ < _)\n        val duplicates = lst.groupBy(x => x).count(x\
    \ => x > 1)\n        // If we have any duplicate numbers, return false, otherwise\
    \ return true\n        duplicates.exists { case (k, v) => v > 1 }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9z91ytvy.scala:28:58 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mduplicates\e[0m = lst.groupBy(\e\
    [36mx\e[0m => x).count(\e[36mx\e[0m => x > \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                        ^^^\e[0m\n\e[31m   |\e\
    [0mvalue > is not a member of (Long, List[Long]), but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp9z91ytvy.scala:30:19 ------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m        duplicates.exists { \e[33mcase\e[0m (k, v) => v >\
    \ \e[31m1\e[0m }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        value exists is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660010312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val set: mutable.Set[Long]\
    \ = mutable.Set.empty\n        for (n <- lst) {\n            if (!set.contains(n))\
    \ {\n                set = set + n\n            } else {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy5uk4auj.scala:25:17 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set.empty\n\e[31m\e[31m   |\e[0m                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpy5uk4auj.scala:25:37 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set.empty\n\e[31m\e[31m   |\e[0m                    \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpy5uk4auj.scala:28:20 -----------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                set = set + n\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val set\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var set1 = new mutable.HashSet[Long]\n\
    \        var set2 = new mutable.HashSet[Long]\n        for (x <- lst)\n      \
    \      set1 += x\n        for (x<-set1) set2 += x\n        for (x<-set2) {\n \
    \           if (lst.contains(x)) {\n                for (y <- lst.filter(x =>\
    \ x != y))\n                    set2 += y\n                break\n           \
    \ }\n        }\n        for (x<-set2) lst.contains(x) && set2 += x\n        lst.forall(x\
    \ => !set2.contains(x) && set2 += x)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptv36tv0s.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mset1\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptv36tv0s.scala:26:23\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e\
    [36mset2\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n        while\
    \ (lst.nonEmpty) {\n            val val = lst.last\n            i += 1\n     \
    \       if (i == lst.size) {\n                return true\n            }\n   \
    \         if (val <= lst.head.max) {\n                lst = lst.tail\n       \
    \     } else {\n                lst = lst.tail\n            }\n        }\n   \
    \     return false\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp3x2a_3zu.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[33mval\e[0m = lst.last\n\
    \e[31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m               \
    \ pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3x2a_3zu.scala:32:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mif\e\
    [0m (\e[33mval\e[0m <= lst.head.max) {\n\e[31m\e[31m   |\e[0m                ^^^\e\
    [0m\n\e[31m   |\e[0m                expression expected but \e[31mval\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp3x2a_3zu.scala:33:20 -----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                lst = lst.tail\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val lst\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp3x2a_3zu.scala:35:20\
    \ -----------------------------\e[0m\e[0m\n\e[31m35 |\e[0m                lst\
    \ = lst.tail\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Reassignment to val lst\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var counts = mutable.Map[Long,\
    \ Long]()\n        var last = lst(0)\n        lst.foreach{x =>\n            counts.getOrElseUpdate(x,\
    \ 0)\n            counts += (x -> counts.getOrElse(x, 0) - 1)\n            last\
    \ = x\n        }\n        lst.foreach{x =>\n            counts.getOrElseUpdate(x,\
    \ 0)\n        }\n        var sorted = true\n        lst.foreach{x =>\n       \
    \     if (counts.get(x).lt(0)) sorted = false\n        }\n        sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjaietm3x.scala:25:21 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n        var\
    \ j = 1\n        while(j < lst.size) {\n            i <- i + 1\n            while(j\
    \ < (lst.size - i) && lst(j) < lst(j + i)) {\n                j <- j + 1\n   \
    \         }\n            if(j == lst.size - i) {\n                return true\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnk6x69au.scala:28:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            i <- i + \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m              ^^\e[0m\n\e[31m   |\e[0m              end of statement expected\
    \ but '<-' found\n\e[31m\e[31m-- Error: /tmp/tmpnk6x69au.scala:30:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                j <- j + \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m                  end of statement\
    \ expected but '<-' found\n2 errors found\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val count = mutable.HashSet[Long]()\n\
    \        val rec = new mutable.ListBuffer[Long]\n        for (i <- 0 until lst.size)\
    \ {\n            if (count.contains(lst(i))) {\n                rec += lst(i)\n\
    \                count += lst(i)\n            } else {\n                if (count\
    \ == 0) {\n                    rec += lst(i)\n                    count += lst(i)\n\
    \                } else {\n                    if (lst(i) > rec(rec.length-1))\n\
    \                        return false\n                    rec += lst(i)\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \      return true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn9mefxo9.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpn9mefxo9.scala:26:22 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mrec\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                 \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n        while(i\
    \ < lst.length-1){\n            if (lst(i) == lst(i+1)){\n                return\
    \ false\n            }\n            i += 1\n        }\n        lst(i) == lst(i+1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.isSorted(tmpvz854x1j.scala:32)\n\tat Problem$.main(tmpvz854x1j.scala:35)\n\
    \tat Problem.main(tmpvz854x1j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        return lst.groupBy(identity).map\
    \ { case (k, v) =>\n            v.size > 1 && v.head == k\n        }.forall(identity)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkb7kdwuk.scala:30)\n\tat Problem.main(tmpkb7kdwuk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010316
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.isEmpty) true\n\
    \        else if (lst.contains(lst(0)) && lst.count(x => x == lst(0)) == 1) true\n\
    \        else if (lst.count(x => x == lst(0)) > 1) false\n        else isSorted(lst.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmozzxqmk.scala:33)\n\tat Problem.main(tmpmozzxqmk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010316
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var last = lst.head\n\
    \        var flag = false\n        for (i <- lst.tail) {\n            if (i ==\
    \ last) {\n                flag = true\n            } else {\n               \
    \ last = i\n            }\n        }\n        return flag\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1kv494i.scala:37)\n\tat Problem.main(tmpo1kv494i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val map = scala.collection.mutable.HashMap.empty[Long,\
    \ Int]\n        var i = 1\n        while (i < lst.size) {\n            var j =\
    \ i\n            while (j > 0 && lst.head == lst.tail.head && lst.tail.head ==\
    \ lst.tail.tail.head && lst.tail.tail.head == lst.tail.tail.tail.head) {\n   \
    \             lst.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprwk6efyj.scala:49:0 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprwk6efyj.scala:27:8\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mwhile\e[0m (i\
    \ < lst.size) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Boolean\n\e[31m28 |\e[0m         \
    \   \e[33mvar\e[0m \e[36mj\e[0m = i\n\e[31m29 |\e[0m            \e[33mwhile\e\
    [0m (j > \e[31m0\e[0m && lst.head == lst.tail.head && lst.tail.head == lst.tail.tail.head\
    \ && lst.tail.tail.head == lst.tail.tail.tail.head) {\n\e[31m30 |\e[0m       \
    \         lst.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \e[31m31 |\e[0m    }\n\e[31m32 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e\
    [0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m33 |\e[0m    assert(isSorted((List[\e\
    [35mLong\e[0m](\e[31m5l\e[0m.toLong))) == (\e[31mtrue\e[0m));\n\e[31m34 |\e[0m\
    \    assert(isSorted((List[\e[35mLong\e[0m](\e[3"
  stdout: ''
  timestamp: 1660010316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        // Write your code here\n\
    \        val hashSet = mutable.HashSet[Long]()\n        lst.foreach(x => hashSet.add(x))\n\
    \        lst.distinct.size == lst.size && lst.forall(x => hashSet.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps3793pp8.scala:26:22 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size < 2) return\
    \ true\n        val hashMap = lst.toMap\n        val lst2 = lst.filterNot(_ ==\
    \ hashMap(lst.head))\n        val lst3 = lst2.filterNot(_ == hashMap(lst.last))\n\
    \        lst2.size == lst3.size && lst2 contains lst3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppjso3ov0.scala:26:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mhashMap\e[0m = lst.toMap\n\
    \e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m  \
    \                             Cannot prove that Long <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                               where:    K is a type variable\n\
    \e[31m   |\e[0m                                         V is a type variable\n\
    \e[31m   |\e[0m                               .\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppjso3ov0.scala:29:34 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        lst2.size == lst3.size && lst2 contains lst3\n\e[31m\e[31m   |\e\
    [0m                                  ^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    (lst2 : List[Long])\n\e[31m   |\e[0m          \
    \                        Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val count = l.grouped(l\
    \ => l).filter(_._2 > 1).size\n        if (count > 1) return false\n        lst.distinct.sorted\
    \ == lst.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpas5ls0d_.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = l.grouped(\e\
    [36ml\e[0m => l).filter(_._2 > \e[31m1\e[0m).size\n\e[31m\e[31m   |\e[0m     \
    \               ^\e[0m\n\e[31m   |\e[0m                    Not found: l\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]\n\
    \        val numSet = lst.filterNot(set.contains)\n        val numLen = numSet.size\n\
    \        if (numLen > 1)\n            return false\n        val numArray = numSet.toArray\n\
    \        if (numArray.length == 1)\n            return true\n        val set =\
    \ numArray.sortBy(_)\n        val numLen = set.size\n        if (numLen > 1)\n\
    \            return false\n        val numArray = set.toArray\n        if (numArray.length\
    \ == 1)\n            return true\n        val numArray = numArray.sortBy(_)\n\
    \        val numLen = numArray.length\n        if (numLen > 1)\n            return\
    \ false\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgmeh5zm4.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = numArray.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mset\
    \ is already defined as \e[33mvalue\e[0m \e[35mset\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgmeh5zm4.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumLen\e[0m = set.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumLen is already defined as \e[33mvalue\e[0m \e[35mnumLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgmeh5zm4.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mnumArray\e[0m = set.toArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnumArray\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumArray\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgmeh5zm4.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumArray\e[0m = numArray.sortBy(_)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumArray is already defined as \e[33mvalue\e[0m \e[35mnumArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgmeh5zm4.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mnumLen\e[0m = numArray.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnumLen\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumLen\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same"
  stdout: ''
  timestamp: 1660010315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.length < 2)\
    \ return true\n        val hc = lst.groupBy(_).mapValues(_.size)\n        val\
    \ hc = hc.filter{ case (key, value) => value == lst.length}\n        hc.keys.toList.forall\
    \ { key =>\n            if (lst(key) < lst(key+1))\n                return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4sjdr8dr.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhc\e[0m = hc.filter{ \e\
    [33mcase\e[0m (key, value) => value == lst.length}\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhc is already defined as \e[33mvalue\e[0m \e[35mhc\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp4sjdr8dr.scala:26:29\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e\
    [0m \e[36mhc\e[0m = lst.groupBy(_).mapValues(_.size)\n\e[31m\e[31m   |\e[0m  \
    \                           ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => lst.groupBy(_$1).mapValues(_$2\
    \ => _$2.size).\n2 errors found\n"
  stdout: ''
  timestamp: 1660010314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size == 1) {\n\
    \            (lst(1) <= lst.head)\n        } else {\n            var dup = lst.groupBy(x\
    \ => x).mapValues(_.length)\n            val keys = dup.keys\n            for\
    \ (key <- keys) {\n                val value = dup(key)\n                if (value\
    \ == 1) {\n                    if (key < lst.head) {\n                       \
    \ return true\n                    } else {\n                        val i = lst.indexOf(lst.tail)\n\
    \                        val j = i + value - 1\n                        val leftHead\
    \ = lst.take(i)\n                        val rightHead = lst.take(j)\n       \
    \                 if (leftHead == rightHead) {\n                            return\
    \ isSorted(lst.drop(i))\n                        } else if (leftHead < rightHead)\
    \ {\n                            return true\n                        } else {\n\
    \                            return false\n                        }\n       \
    \             }\n                } else {\n                    return false\n\
    \                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9yxtavvl.scala:42:44 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m                        } \e[33melse\e[0m \e[33mif\e\
    [0m (leftHead < rightHead) {\n\e[31m\e[31m   |\e[0m                          \
    \         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if(lst.size > 1) {\n\
    \            val set = new mutable.HashSet[Long]()\n            lst.foreach(n\
    \ => set+=n)\n            val firstSet = set.head\n            if(set.toSet.size\
    \ == set.size && firstSet.toLong == firstSet) {\n                return true\n\
    \            } else {\n                return false\n            }\n        }\
    \ else {\n            return true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_tgtuq58.scala:26:26 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val set = HashSet(lst)\n\
    \        val list = lst.filter(_ != set.toSet)\n        list.size == lst.size\
    \ && list.forall(x => lst.indexOf(x) != lst.lastIndexOf(x)) && true\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkhhsfqnk.scala:26:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = lst.filter(_\
    \ != set.toSet)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Long and Set[List[Long]] cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660010319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val map = new mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => map.put(x, map.getOrElse(x, 0) + 1))\n    \
    \    lst.zip(lst.tail).foreach {\n            case (l, l2) => {\n            \
    \    if (l < l2)\n                    return false\n            }\n        }\n\
    \        true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgvy86ami.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val listHashSet = lst.foldLeft(mutable.Set[Long]()){\n\
    \            (a,b) => a ++ b }\n        listHashSet.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpis8tq9jk.scala:25:39 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mlistHashSet\e[0m = lst.foldLeft(mutable.Set[\e\
    [35mLong\e[0m]()){\n\e[31m\e[31m   |\e[0m                                    \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpis8tq9jk.scala:26:23\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            (\e[36ma\e[0m,\e\
    [36mb\e[0m) => a ++ b }\n\e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\
    \e[31m   |\e[0m                     value ++ is not a member of Any\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpis8tq9jk.scala:27:20 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        listHashSet.isEmpty\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value isEmpty is not a\
    \ member of Any\n3 errors found\n"
  stdout: ''
  timestamp: 1660010320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size == 0) return\
    \ true\n        val a = lst.tail\n        val b = lst.head\n        if (b.equals(a)\
    \ || a.size < 2) return true\n        val set = a.toSet\n        val i = lst.indexOf(b)\n\
    \        for {\n            c <- set.toSeq.take(i-1)\n        } yield {\n    \
    \        if (c < b) false\n            else if (c > b) true\n            else\
    \ isSorted(lst.drop(i+1))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgli6cbf4.scala:31:8\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mfor\e[0m {\n\e\
    [31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mSeq\e\
    [0m\e[1m\e[31m[\e[0mBoolean\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required:\
    \ Boolean\n\e[31m32 |\e[0m            c <- set.toSeq.take(i-\e[31m1\e[0m)\n\e\
    [31m33 |\e[0m        } \e[33myield\e[0m {\n\e[31m34 |\e[0m            \e[33mif\e\
    [0m (c < b) \e[31mfalse\e[0m\n\e[31m35 |\e[0m            \e[33melse\e[0m \e[33mif\e\
    [0m (c > b) \e[31mtrue\e[0m\n\e[31m36 |\e[0m            \e[33melse\e[0m isSorted(lst.drop(i+\e\
    [31m1\e[0m))\n\e[31m37 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val map = lst.groupBy(x\
    \ => x).map {\n            case (k, v) => (k, v.size)\n        }.toMap\n     \
    \   lst.size <= 1 || !map.forall(x => x._2 == x._1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuk6lulsw.scala:33)\n\tat Problem.main(tmpuk6lulsw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n      lst.tail.foldLeft(false)((acc,\
    \ item) => acc || (item < lst.head))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr86hrqmt.scala:28)\n\tat Problem.main(tmpr86hrqmt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010321
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        lst.groupBy(x => x).mapValues(_.size).map{\
    \ case (v, cnt) => v == cnt }.forall(identity)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc56fylv_.scala:28)\n\tat Problem.main(tmpc56fylv_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var lastNumber : Long\
    \ = 0\n        for (number <- lst) {\n            if (lastNumber < number) {\n\
    \                return false\n            }\n            lastNumber = number\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeew4m44w.scala:35)\n\tat Problem.main(tmpeew4m44w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val s = lst.size\n \
    \       if(s != lst.sortBy(_).size)\n            false\n        else\n       \
    \     true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmptxy2jj7c.scala:26:27 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m(s != lst.sortBy(_).size)\n\e[31m\e\
    [31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => s != lst.sortBy(_$1).size.\n\
    \e[31m\e[31m-- Error: /tmp/tmptxy2jj7c.scala:26:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m(s != lst.sortBy(_).size)\n\e[31m\e\
    [31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0mambiguous given\
    \ instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660010319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size == 0 ||\
    \ lst.size != lst.distinct.size) {\n            return true\n        }\n     \
    \   var i = 0\n        while (i < lst.size) {\n            var current = lst(i)\n\
    \            var j = i\n            var found = false\n            while (j <\
    \ lst.size && lst(j) == current) {\n                found = true\n           \
    \     j++\n            }\n            if (found)\n                return false\n\
    \            else\n                i += 1\n        }\n        return true\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpl130wvhh.scala:35:19 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                j++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val map = new scala.collection.mutable.HashMap[Long,Boolean]()\n\
    \        lst.foreach(x=>{\n            if(map.containsKey(x)) map(x) == false\n\
    \            else map.put(x,true)\n        })\n        val list = map.toList.sorted\n\
    \        list.size == lst.size && list.forall(x=>lst(x) == x)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp89djomt1.scala:27:19 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m(map.containsKey(x)) map(x)\
    \ == \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue containsKey is not a member of scala.collection.mutable.HashMap[Long,\
    \ Boolean] - did you mean map.contains?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp89djomt1.scala:31:52 --------------------\e[0m\e[0m\n\e[31m31 |\e[0m\
    \        list.size == lst.size && list.forall(\e[36mx\e[0m=>lst(x) == x)\n\e[31m\e\
    [31m   |\e[0m                                                    ^\e[0m\n\e[31m\
    \   |\e[0m                                         Found:    (x : (Long, Boolean))\n\
    \e[31m   |\e[0m                                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        lst.map(i => if (i ==\
    \ lst.lastIndex) lst.lastIndex - 1 else lst.lastIndex).zipWithIndex.filter(_._1\
    \ == 0).isEmpty match {\n            case false => true\n            case true\
    \ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3qijxms1.scala:25:34 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        lst.map(\e[36mi\e[0m => \e[33mif\e[0m (i == lst.lastIndex)\
    \ lst.lastIndex - \e[31m1\e[0m \e[33melse\e[0m lst.lastIndex).zipWithIndex.filter(_._1\
    \ == \e[31m0\e[0m).isEmpty \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m         \
    \                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue lastIndex is not\
    \ a member of List[Long] - did you mean lst.lastIndexOf?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp3qijxms1.scala:25:49 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        lst.map(\e[36mi\e[0m => \e[33mif\e[0m (i == lst.lastIndex)\
    \ lst.lastIndex - \e[31m1\e[0m \e[33melse\e[0m lst.lastIndex).zipWithIndex.filter(_._1\
    \ == \e[31m0\e[0m).isEmpty \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m         \
    \                                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ lastIndex is not a member of List[Long] - did you mean lst.lastIndexOf?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp3qijxms1.scala:25:72 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        lst.map(\e[36mi\e[0m => \e[33mif\e[0m (i == lst.lastIndex)\
    \ lst.lastIndex - \e[31m1\e[0m \e[33melse\e[0m lst.lastIndex).zipWithIndex.filter(_._1\
    \ == \e[31m0\e[0m).isEmpty \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m         \
    \                                                           ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue lastIndex is not a member of List[Long] - did you mean lst.lastIndexOf?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.length <= 1)\
    \ {\n            true\n        } else if (lst.length % 2 == 0) {\n           \
    \ val isEven = lst.length / 2\n            val countMap = scala.collection.mutable.HashMap.empty[Int,\
    \ Int]\n            for( i <- 0 until isEven) {\n                if (lst(i) ==\
    \ lst(isEven + i)) {\n                    countMap(lst(i)) = countMap(lst(i))\
    \ + 1\n                }\n            }\n            if (countMap.size == countMap(1))\
    \ {\n                false\n            } else {\n                true\n     \
    \       }\n        } else {\n            val isOdd = lst.length / 2 + 1\n    \
    \        val countMap = scala.collection.mutable.HashMap.empty[Int, Int]\n   \
    \         for( i <- 0 until isOdd) {\n                if (lst(i) == lst(isOdd\
    \ + i)) {\n                    countMap(lst(i)) = countMap(lst(i)) + 1\n     \
    \           }\n            }\n            if (countMap.size == countMap(1)) {\n\
    \                false\n            } else {\n                true\n         \
    \   }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprd8vkou0.scala:32:32\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m                    countMap(lst(i))\
    \ = countMap(lst(i)) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m                             Found:   \
    \ Long\n\e[31m   |\e[0m                             Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprd8vkou0.scala:32:51 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                    countMap(lst(i)) = countMap(lst(i))\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \          Found:    Long\n\e[31m   |\e[0m                                   \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprd8vkou0.scala:45:32 --------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m                    countMap(lst(i)) = countMap(lst(i)) + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Found:    Long\n\e[31m   |\e[0m                \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprd8vkou0.scala:45:51 --------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m                    countMap(lst(i)) = countMap(lst(i)) + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Found:   \
    \ Long\n\e[31m   |\e[0m                                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]()\n\
    \        var i = 0\n        for (x <- lst) set += x\n        if (set.size == 1)\
    \ true\n        else {\n            if (set.size == 2) false\n            else\
    \ {\n                for (x <- set) if (!(x % lst.last).equals(0)) return false\n\
    \            }\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvc9x_5h6.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var first: Long = _\n\
    \        var last: Long = _\n        var result = true\n        var isSorted:\
    \ Boolean = true\n        var i: Int = lst.size\n        for (i <- 0 until i)\
    \ {\n            if (lst.contains(lst(i))) {\n                if (first == last)\
    \ break\n                result = false\n                break\n            }\n\
    \            first = (first == 0) ? lst.head : lst(i - 1)\n            last =\
    \ lst(i)\n        }\n        if (isSorted) {\n            for (i <- 0 until i)\
    \ {\n                if (lst.contains(lst(i)) || result != lst(i) > lst(i)) {\n\
    \                    result = false\n                    break\n             \
    \   }\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqa_eo04n.scala:36:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            first = (first == \e[31m0\e[0m) ? lst.head\
    \ : \e[35mlst\e[0m(i - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \           end of statement expected but '(' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpqa_eo04n.scala:32:35 ------------------------\e[0m\e[0m\n\
    \e[31m32 |\e[0m                \e[33mif\e[0m (first == last) break\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                              Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqa_eo04n.scala:34:16 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqa_eo04n.scala:36:33 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            first = (first == \e[31m0\e[0m) ? lst.head\
    \ : \e[35mlst\e[0m(i - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value ? is not a member\
    \ of Boolean\n4 errors found\n"
  stdout: ''
  timestamp: 1660010325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]\n\
    \        val nums = lst.iterator\n        while(nums.hasNext) {\n            val\
    \ num = nums.next\n            val prevVal = set.last\n            set.add(num)\n\
    \            if (prevVal < num)\n                return false\n        }\n   \
    \     return true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv3j1alyf.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        // base case\n     \
    \   if (lst.size == 1) { lst.head == lst.last }\n        // if we have more than\
    \ one duplicate, then the list is not sorted\n        else if (lst.size > 1) {\
    \ lst.sorted == true }\n        // if we have only one element or if the first\
    \ element is not the smallest element\n        // then we know that it's not sorted\n\
    \        } else { false }\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkel118y9.scala:31:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        } \e[33melse\e[0m { \e[31mfalse\e[0m }\n\e[31m\e\
    [31m   |\e[0m          ^^^^\e[0m\n\e[31m   |\e[0m          end of statement expected\
    \ but 'else' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkel118y9.scala:49:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m49 |\e[0m}\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0meof expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpkel118y9.scala:28:33\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \ \e[33melse\e[0m \e[33mif\e[0m (lst.size > \e[31m1\e[0m) { lst.sorted == \e[31mtrue\e\
    [0m }\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m Values of types List[Long] and Boolean cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkel118y9.scala:34:11\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m    assert(isSorted((List[\e\
    [35mLong\e[0m](\e[31m5l\e[0m.toLong))) == (\e[31mtrue\e[0m));\n\e[31m\e[31m  \
    \ |\e[0m           ^^^^^^^^\e[0m\n\e[31m   |\e[0m           Not found: isSorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkel118y9.scala:35:11\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m    assert(isSorted((List[\e\
    [35mLong\e[0m](\e[31m1l\e[0m.toLong, \e[31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong,\
    \ \e[31m4l\e[0m.toLong, \e[31m5l\e[0m.toLong))) == (\e[31mtrue\e[0m));\n\e[31m\e\
    [31m   |\e[0m           ^^^^^^^^\e[0m\n\e[31m   |\e[0m           Not found: isSorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkel118y9.scala:36:11\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m    assert(isSorted((List[\e\
    [35mLong\e[0m](\e[31m1l\e[0m.toLong, \e[31m3l\e[0m.toLong, \e[31m2l\e[0m.toLong,\
    \ \e[31m4l\e[0m.toLong, \e[31m5l\e[0m.toLong))) == (\e[31mfalse\e[0m));\n\e[31m\e\
    [31m   |\e[0m           ^^^^^^^^\e[0m\n\e[31m   |\e[0m           Not found: isSorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when comp"
  stdout: ''
  timestamp: 1660010327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutableSet.empty[Long]\n\
    \        var i = 0\n        for (number <- lst) {\n            if(set.contains(number))\
    \ {\n                return false\n            }\n            else {\n       \
    \         set += number\n                i += 1\n            }\n        }\n  \
    \      return set.size == i\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppn45gy2o.scala:25:18 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutableSet.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutableSet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var incr = 0\n     \
    \   var lastIndex = -1\n        var i = 0\n        var result = true\n       \
    \ \n        while (i < lst.length) {\n            if(lastIndex == lst(i)) {\n\
    \                incr++\n            } else {\n                if(incr == 1) {\n\
    \                    lastIndex = lst(i)\n                } else {\n          \
    \          result = false\n                }\n                incr = 1\n     \
    \       }\n            i += 1\n        }\n\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpv7hly0lh.scala:32:22 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                incr++\n\e[31m\e[31m   |\e[0m       \
    \               ^\e[0m\n\e[31m   |\e[0m                      expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpv7hly0lh.scala:35:35 --------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m                    lastIndex = lst(i)\n\e[31m\e[31m   |\e[0m        \
    \                        ^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \        Found:    Long\n\e[31m   |\e[0m                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if(lst.size <= 1)\n\
    \            return true\n        val set = new mutable.HashSet[Long]()\n    \
    \    for(i <- 0 until lst.size)\n            if(set.contains(lst(i))) \n     \
    \           return false\n            else\n                set.add(lst(i))\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok0063id.scala:27:22 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size <= 1) return\
    \ true\n        val d = lst.groupBy(x => x).flatMap(_._2.size).max\n        return\
    \ d <= lst(1)\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp38ti_7r0.scala:26:36 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = lst.groupBy(\e\
    [36mx\e[0m => x).flatMap(_._2.size).max\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mflatMap\e[0m in \e[33mtrait\e[0m \e[35mIterableOps\e\
    [0m with types\n\e[31m   |\e[0m [B]\n\e[31m   |\e[0m  (f: ((Long, List[Long]))\
    \ => IterableOnce[B]): \n\e[31m   |\e[0m    scala.collection.immutable.Iterable[B]\n\
    \e[31m   |\e[0m [K2, V2](f: ((Long, List[Long])) => IterableOnce[(K2, V2)]): Map[K2,\
    \ V2]\n\e[31m   |\e[0mmatch arguments (((Long, List[Long])) => Int)\n1 error found\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val seen = new mutable.HashSet[Long]()\n\
    \        val n = lst.size\n\n        def isSortedHelper(i : Long) = {\n      \
    \      if (seen.contains(i)) false\n            else {\n                seen.synchronized\
    \ {\n                    if (seen.contains(i)) false else seen.insert(i)\n   \
    \             }\n                i < n\n            }\n        }\n\n        lst.sortWith(_\
    \ < _).forall(isSortedHelper)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkbap8_g7.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var i : Long = 0\n \
    \       for (x <- lst if i == lst.length - 1) {\n            i = i + 1\n     \
    \   }\n        \n        var j : Long = 0\n        for (x <- lst if j == lst.length\
    \ - 1) {\n            j = j + 1\n        }\n        \n        if (i == j) {\n\
    \            val set = new mutable.HashSet[Long]()\n            for(i <- 0 until\
    \ lst.size) {\n                if (lst(i) == i) {\n                    set.add(i)\n\
    \                }\n            }\n            \n            if (set.size == lst.size)\
    \ {\n                return true\n            } else {\n                return\
    \ false\n            }\n            \n        }\n        \n        \n        \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzmuik2bq.scala:36:26 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.head == lst.last)\
    \ return true\n        val m = lst.size\n        for (x <- 0 until m) {\n    \
    \        if (x < m-1) return false\n            if (x > m-1) return true\n   \
    \         val mid = x / 2\n            if (x < mid) if (lst(mid) < lst(mid+1))\
    \ return false\n            if (x > mid) if (lst(mid) < lst(mid+1)) return true\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppy_9dmk2.scala:38)\n\tat Problem.main(tmppy_9dmk2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val set = mutable.HashSet[Long]()\n\
    \        lst.foreach(x => if (!set.add(x)) {\n            return false\n     \
    \   })\n        val min = lst.min\n        val max = lst.max\n        set.forall(x\
    \ => x >= min && x <= max)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4l1thk36.scala:25:18 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        lst.map(_.toLong) match\
    \ {\n            case x :: y :: tail if x == y.toLong => true\n            case\
    \ _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvqp5niwz.scala:31)\n\tat Problem.main(tmpvqp5niwz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010332
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var res = false\n  \
    \      val set = lst.groupBy(x => x)\n        set.foreach{\n        case (k, v)\
    \ => {\n            if(v.length == lst.size) res = true\n        }}\n        res\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgnolo45i.scala:35)\n\tat Problem.main(tmpgnolo45i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val map = new collection.mutable.HashMap()\n\
    \        map.putAll(lst)\n        val noRepeat = map.toSeq.filterNot(e => map.contains(e)).size\n\
    \        if(noRepeat == 0)\n            return true\n        if(noRepeat > 1)\n\
    \            return false\n        var i = 0\n        var j = lst.size - 1\n \
    \       while(i < j){\n            while(i < j && lst(i) <= lst(j)){\n       \
    \         i += 1\n            }\n            while(i < j && lst(i) > lst(j)){\n\
    \                j -= 1\n            }\n            if(i >= j)\n             \
    \   return true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1907fp4u.scala:26:12 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        map.putAll(lst)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue putAll is not a member of scala.collection.mutable.HashMap[Nothing,\
    \ Nothing] - did you mean map.addAll?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1907fp4u.scala:27:61 --------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \        \e[33mval\e[0m \e[36mnoRepeat\e[0m = map.toSeq.filterNot(\e[36me\e[0m\
    \ => map.contains(e)).size\n\e[31m\e[31m   |\e[0m                            \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                  Found:    (e : (Nothing, Nothing))\n\e[31m   |\e[0m       \
    \                               Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if(lst.length < 2)\n\
    \            return true\n        if(lst.count(lst.indexOf(lst.last)) > 1)\n \
    \           return false\n        // check if there are duplicates\n        val\
    \ hash = lst.foldLeft(Map[Long, Int]())((acc, e) => acc + (e -> acc.get(e) + 1))\n\
    \        if(hash.values.lastOption > 0)\n            return false\n        val\
    \ keys = hash.keys.toArray\n        if(keys.length == 1)\n            return true\n\
    \        // check if the last element is in positions before the first\n     \
    \   val pos = lst.indexOf(keys.last)\n        if(pos < 0)\n            return\
    \ false\n        // check all values between the first and the last\n        var\
    \ inOrder = true\n        var i = pos+1\n        while(i < keys.length) {\n  \
    \          if(keys[i-1] > keys[i])\n                inOrder = false\n        \
    \    i += 1\n        }\n        return inOrder\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfwb_s4lc.scala:27:32\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m(lst.count(lst.indexOf(lst.last))\
    \ > \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Int\n\e[31m   |\e[0m      \
    \               Required: Long => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpfwb_s4lc.scala:30:85 ------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhash\e[0m = lst.foldLeft(Map[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]())((\e[36macc\e[0m, \e[36me\e[0m) => acc + (e ->\
    \ acc.get(e) + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                         \
    \                                            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue + is not a member of (Long, Option[Int]), but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpfwb_s4lc.scala:31:34 ------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m        \e[33mif\e[0m(hash.values.lastOption > \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ > is not a member of Option[Int], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfwb_s4lc.scala:44:21 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m            \e[33mif\e[0m(keys[\e[35mi-\e[31m1\e[0m]\
    \ > keys[\e[35mi\e[0m])\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e\
    [31m   |\e[0m    "
  stdout: ''
  timestamp: 1660010333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var prev = lst.head\
    \ - 1\n        var next = lst.head + 1\n        var sorted = false\n        while(!sorted)\
    \ {\n            sorted = true\n            for(i <- 0 until lst.size) {\n   \
    \             if(i == lst.size -1 && lst(i) > prev) {\n                    sorted\
    \ = false\n                    break\n                }\n                if(lst(i)\
    \ > prev) {\n                    if(lst(i) > next) {\n                       \
    \ sorted = false\n                        break\n                    }\n     \
    \               else {\n                        next = lst(i) + 1\n          \
    \          }\n                }\n                else {\n                    if(lst(i)\
    \ < next) {\n                        sorted = false\n                        break\n\
    \                    }\n                    else {\n                        prev\
    \ = lst(i) - 1\n                    }\n                }\n            }\n    \
    \    }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbik31q6g.scala:33:20 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbik31q6g.scala:38:24\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbik31q6g.scala:47:24 ------------------------\e[0m\e\
    [0m\n\e[31m47 |\e[0m                        break\n\e[31m\e[31m   |\e[0m     \
    \                   ^^^^^\e[0m\n\e[31m   |\e[0m                        Not found:\
    \ break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010329
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n        var\
    \ j = 1\n        var sorted: Boolean = false\n\n        var arr: Array[Long] =\
    \ new Array[Long](lst.size)\n        var duplicate: Boolean = false\n\n      \
    \  while (i < lst.size && !sorted) {\n            arr(i) = lst(i)\n          \
    \  i += 1\n        }\n        while (j < lst.size && !sorted) {\n            if\
    \ (arr(j) > arr(i)) {\n                sorted = true\n                duplicate\
    \ =  true\n                while (j < lst.size && !sorted) {\n               \
    \     if (arr(j) > arr(i)) {\n                        sorted = true\n        \
    \                duplicate =  true\n                        i += 1\n         \
    \           } else {\n                        j += 1\n                    }\n\
    \                }\n            }\n            j += 1\n        }\n        return\
    \ duplicate\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0efs_qnr.scala:55)\n\tat Problem.main(tmp0efs_qnr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val hSet = mutable.HashSet[Long]()\n\
    \        for (x <- lst)\n            hSet.add(x)\n\n        // check if there\
    \ are two or more same numbers\n        if (hSet.size >= 2) { \n            false\
    \ \n        } else {\n            lst.sorted == true \n        } \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_9zp6ybd.scala:25:19 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mhSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmp_9zp6ybd.scala:33:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            lst.sorted == \e[31mtrue\e[0m \n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m Values of types\
    \ List[Long] and Boolean cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660010332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var index = 1\n    \
    \    for(num <- lst) {\n            if(index == lst.lastIndexOf(num)) {\n    \
    \            if(num == lst(index)) {\n                    return false\n     \
    \           }\n                index++\n            } else {\n               \
    \ return false\n            }\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmg570bop.scala:31:23 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                index++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var lastLstValue = -1L\n\
    \        var lastLstCount = 0\n        \n        for ( x <- lst) {\n         \
    \   if (lastLstCount != 0) {\n                if (x == lastLstValue) {\n     \
    \               lastLstCount += 1\n                } else {\n                \
    \    lastLstCount = 1\n                    lastLstValue = x\n                }\n\
    \            }\n            else {\n                lastLstValue = x\n       \
    \         lastLstCount = 1\n            }\n        }\n        return lastLstCount\
    \ == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfcqsdb0_.scala:45)\n\tat Problem.main(tmpfcqsdb0_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010336
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n      lst.toSet.toList.size<=lst.size\
    \ && lst.forall(_.equals(lst.min))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_xneqewc.scala:29)\n\tat Problem.main(tmp_xneqewc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        // If the list is empty,\
    \ it's sorted\n        if (lst.nonEmpty) {\n            // If the first item is\
    \ equal to the last item, then we're sorted.\n            if (lst.head() == lst.last())\
    \ {\n                // If there are 2 or more duplicates, they're not sorted\n\
    \                if (lst.size >= 2) {\n                    val dupes = lst.groupBy(x\
    \ => x).filter(_._2.size > 1).map(_._2.size)\n                    if (dupes.size\
    \ == 1) false\n                    else true\n                } else true\n  \
    \          } else false\n        } else true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpl62kp34q.scala:28:20 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mif\e[0m (lst.head() == lst.last())\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \          \e[33mmethod\e[0m \e[35mhead\e[0m in \e[33mtrait\e[0m \e[35mIterableOps\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val counts = lst.reduceLeft((acc,item)\
    \ => {\n            val c = acc.getOrElse(item,0)\n            val n = acc.getOrElse(item,c)\n\
    \            val m = (c + n) / 2\n            if (m > n) m else n\n        })\n\
    \        counts == lst.reduce(_.max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0gco5v57.scala:26:24 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mc\e[0m = acc.getOrElse(item,\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    value getOrElse is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0gco5v57.scala:27:24 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mn\e[0m = acc.getOrElse(item,c)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   value getOrElse is not a member of Long\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmp0gco5v57.scala:31:29 ---------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m        counts == lst.reduce(_.max)\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \         Wrong number of parameters, expected: 2\n3 errors found\n"
  stdout: ''
  timestamp: 1660010336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val indexSet = mutable.HashSet[Long]()\n\
    \        lst.foreach {i =>\n            if (!indexSet.add(i))\n              \
    \  return false\n        }\n        indexSet.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkq78s8is.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mindexSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size < 2) return\
    \ true\n        val map: HashMap[Long, Int] = lst.foldLeft(HashMap[Long, Int]())\
    \ { (map, elem) =>\n            if (map.contains(elem)) {\n                map\
    \ += (elem -> (map.get(elem) + 1))\n            } else {\n                map\
    \ += (elem -> 1)\n            }\n        }\n        if (map.size == lst.size)\
    \ true\n        else false\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprncocgvb.scala:28:47 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                map += (elem -> (map.get(elem) + \e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of Option[Int], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size <= 1) return\
    \ true\n\n        var lastElement : Long = null\n\n        for ( x <- lst) {\n\
    \            if (lastElement != null) return\n            lastElement = x\n  \
    \      }\n\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl0mjeyc0.scala:27:33\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e[36mlastElement\e\
    [0m : \e[35mLong\e[0m = \e[31mnull\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                  ^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Found:    Null\n\e[31m   |\e[0m                                 Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpl0mjeyc0.scala:30:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mif\e[0m (lastElement != \e[31mnull\e\
    [0m) \e[33mreturn\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m          Values of types Long and Null cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl0mjeyc0.scala:30:37\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[33mif\e[0m (lastElement\
    \ != \e[31mnull\e[0m) \e[33mreturn\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                      ^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \           Found:    Unit\n\e[31m   |\e[0m                                  \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010335
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        lst.foldLeft(true) {\
    \ (state, element) =>\n            state && element < lst(lst.length - 1) }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp43exryui.scala:29)\n\tat Problem.main(tmp43exryui.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        def sort(x : List[Long])\
    \ : Boolean = x match {\n            case x :: Nil => true\n            case x\
    \ :: y => x < y || sort(y)\n            case Nil => true\n        }\n        sort(lst).forall(l\
    \ => l.toLong == l.toLong)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp6fpzx07p.scala:27:29 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mcase\e[0m x :: y => x < y || sort(y)\n\
    \e[31m\e[31m   |\e[0m                           ^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m<\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\e[31m \
    \  |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e\
    [0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x:\
    \ Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments\
    \ ((y : List[Long]))\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6fpzx07p.scala:30:18\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        sort(lst).forall(\e\
    [36ml\e[0m => l.toLong == l.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value forall is not a member of Boolean\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long]\n\
    \        var index = 0\n        var count = 0\n        while (index < lst.size)\
    \ {\n            val key = lst(index)\n            if (set.contains(key)) {\n\
    \                count += 1\n            } else {\n                count += 1\n\
    \                set.add(key)\n            }\n            index += 1\n       \
    \ }\n        if (count < lst.size) {\n            return false\n        }\n  \
    \      if (count == lst.size) {\n            return true\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqxk6f_dx.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqxk6f_dx.scala:41:8 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mif\e[0m (count == lst.size) {\n\e[31m\e\
    [31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e\
    [0m        Required: Boolean\n\e[31m   |\e[0m        Maybe you are missing an\
    \ else part for the conditional?\n\e[31m42 |\e[0m            \e[33mreturn\e[0m\
    \ \e[31mtrue\e[0m\n\e[31m43 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val n = lst.length\n\
    \        val cnt = mutable.HashMap.empty[Long, Int]\n        lst.foreach { x =>\n\
    \            val i = cnt[x].getOrElse(x, 0)\n            cnt[x] = i + 1\n    \
    \    }\n        if (cnt.size == n) {\n            cnt.foreach { case (k, v) =>\n\
    \                if (k < v) false else true\n            }\n        } else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpoo6cgm7p.scala:29:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            cnt[\e[35mx\e[0m] = i + \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                \
    \   end of statement expected but '=' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoo6cgm7p.scala:26:18 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mval\e[0m \e[36mcnt\e[0m = mutable.HashMap.empty[\e[35mLong\e\
    [0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpoo6cgm7p.scala:28:24 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mi\e[0m = cnt[\e[35mx\e\
    [0m].getOrElse(x, \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \ ^\e[0m\n\e[31m   |\e[0m                        Not found: type x\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoo6cgm7p.scala:29:16 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            cnt[\e[35mx\e[0m] = i + \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Not\
    \ found: type x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val set = new mutable.HashSet[Long](lst)\n\
    \        val set = set.sort\n        set.size == lst.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8rhzp4n4.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = set.sort\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mset is already\
    \ defined as \e[33mvalue\e[0m \e[35mset\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8rhzp4n4.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m](lst)\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size > 1) {\n\
    \            lst.groupBy(x => x).forall { case (k, v) =>\n                v.forall(x\
    \ => x < k._1)\n            }\n        } else {\n            val first = lst.head\n\
    \            val last = lst.last\n            val diff = (first - last)\n    \
    \        diff < 0 || diff == 0 || (diff > 0 && lst.tail.forall(x => x < k._1))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpormzibu0.scala:27:36 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                v.forall(\e[36mx\e[0m => x < k._1)\n\e\
    [31m\e[31m   |\e[0m                                  ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                  value _1 is not a member of Long\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpormzibu0.scala:33:75 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            diff < \e[31m0\e[0m || diff == \e[31m0\e\
    [0m || (diff > \e[31m0\e[0m && lst.tail.forall(\e[36mx\e[0m => x < k._1))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \                        Not found: k\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        // sort the list using\
    \ insertion sort\n        lst.sortWith((x, y) => x < y)\n        // if there are\
    \ duplicates, return false\n        val lstSet = lst.groupBy(x => x).mapValues(_.size)\n\
    \        if(lstSet.size > 1){\n            false\n        }else{\n           \
    \ true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpawn624sw.scala:37)\n\tat Problem.main(tmpawn624sw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        lst.map(_.toInt).reduce{\n\
    \            case (a, b) => a < b\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp23kqnzvi.scala:26:27\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mcase\e[0m (a,\
    \ b) => a < b\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Found:    Boolean\n\e[31m   |\e[0m   \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        lst.sortWith(_.compareTo(_)\
    \ < 0).length == 1\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaf2tmz6j.scala:29)\n\tat Problem.main(tmpaf2tmz6j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val seen = mutable.HashSet[Long]()\n\
    \        val duplicates = lst.groupBy(x => x).mapValues(_.length)\n        return\
    \ duplicates.forall(c => seen += c) && lst.forall(c => seen += c) && lst.distinct.size\
    \ == lst.count(x => seen.add(x) == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqfjl5dh1.scala:25:19 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val m = lst.head\n \
    \       for (x <- lst.tail) \n            if (x < m) return false\n        else\
    \ return true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphguso7e4.scala:28:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33melse\e[0m \e[33mreturn\e[0m \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        end of statement\
    \ expected but 'else' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphguso7e4.scala:26:8\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mfor\e[0m (x <-\
    \ lst.tail) \n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Boolean\n\e[31m27 |\e[0m         \
    \   \e[33mif\e[0m (x < m) \e[33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var lastNum: Long =\
    \ lst(0l)\n        var numbersInOrder = 0\n        var numbersInLastOrder = 0\n\
    \        for(num <- lst.tail) {\n            if(num == lastNum) {\n          \
    \      numbersInOrder += 1\n            } else if(num > lastNum) {\n         \
    \       numbersInOrder += 0\n            } else {\n                numbersInOrder\
    \ += 1\n                numbersInLastOrder += 1\n            }\n            lastNum\
    \ = num\n        }\n        if(numbersInLastOrder == numbersInOrder) {\n     \
    \       return true\n        } else {\n            return false\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsx4ke_ol.scala:25:32\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mlastNum\e\
    [0m: \e[35mLong\e[0m = lst(\e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \                   ^^\e[0m\n\e[31m   |\e[0m                                Found:\
    \    (\e[31m0L\e[0m : Long)\n\e[31m   |\e[0m                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val set = lst.groupBy(x\
    \ => x).mapValues(_.size).maxBy(_._2)\n        set._1.forall(x => lst.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl6stvb0a.scala:26:15 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        set._1.forall(\e[36mx\e[0m => lst.contains(x))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ forall is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        // base case\n     \
    \   if (lst.size < 2)\n            return true\n        // if there are 2 or more\
    \ duplicates, return false\n        if (lst.size > 1 && !lst.forall(x => x ==\
    \ lst(0) || x == lst(1))) {\n            return false\n        }\n        // if\
    \ there are no duplicates and more than 1 element, return true\n        if (lst.size\
    \ == 1 && lst.forall(x => x == lst(0))) return true\n        val hashSet = lst.groupBy(x\
    \ => x).map(x => x._2).size\n        // if there are elements that equal the hash\
    \ value, sort is not sorted\n        if (hashSet == lst.size) {\n            return\
    \ false\n        }\n        // return true if there are elements that are in the\
    \ middle of the list\n        val mid = lst.size / 2\n        if (hashSet > mid)\
    \ return true\n        val lowerHalf = lst.take(mid)\n        val upperHalf =\
    \ lst.drop(mid)\n        // if there are elements that are in the middle of the\
    \ list and the list is sorted\n        if (lst.forall(x => x == lowerHalf(0) ||\
    \ x == lowerHalf(1) || x == upperHalf(0) || x == upperHalf(1))) {\n          \
    \  return true\n        }\n        // otherwise return false\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmply3zt9j0.scala:53)\n\tat Problem.main(tmply3zt9j0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010343
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.size > 1) {\n\
    \            for (i <- 0 until lst.size - 1) {\n                if (lst(i) ==\
    \ lst(i + 1)) {\n                    return false\n                }\n       \
    \     }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpekq11mcq.scala:37)\n\tat Problem.main(tmpekq11mcq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val counts = mutable.HashMap[Long,\
    \ Long]().withDefaultValue(0)\n        for (i <- 0 until lst.size) {\n       \
    \     val current = lst(i)\n            val next = i + 1 < lst.size ? lst(i+1)\
    \ : 0\n            if (next > current) {\n                return false\n     \
    \       } else {\n                counts.put(current, counts.get(current) + 1)\n\
    \            }\n        }\n\n        if (counts.size == lst.size) {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgumv850i.scala:25:21 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]().withDefaultValue(\e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgumv850i.scala:28:40\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnext\e[0m = i + \e[31m1\e[0m < lst.size ? lst(i+\e[31m1\e[0m) : \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value ? is not a member of Int\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var flag = true\n  \
    \      val set = new mutable.HashSet[Long]()\n        var lastValue = lst(0)\n\
    \        for( i <- lst ) {\n            if( lastValue == i ) {\n             \
    \   flag = false\n            } else {\n                if( set.contains(lastValue))\
    \ {\n                    flag = false\n                } else {\n            \
    \        set.add(lastValue)\n                }\n            }\n            lastValue\
    \ = i\n        }\n        return flag\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkqnw6zc5.scala:26:22 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var set = scala.collection.mutable.HashSet.empty[Long]\n\
    \        for(x <- lst) if(!set.add(x)) {\n            return false\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu_qquii4.scala:34)\n\tat Problem.main(tmpu_qquii4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010344
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        // The easiest way to\
    \ do this is to sort and compare two lists\n        // If the first list is longer\
    \ than the second, they're not sorted\n        if (lst.length <= 1) return true\n\
    \n        // Create a list to hold the first and second list\n        val longer_list\
    \ = lst.takeWhile(_ < lst(1))\n\n        // Create a list to hold the second list\
    \ with the first list removed\n        val shorter_list = lst.drop(1)\n\n    \
    \    // If the second list is the same as first list, then they're sorted\n  \
    \      if (longer_list == shorter_list) true\n        else false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjg1bzrd4.scala:41)\n\tat Problem.main(tmpjg1bzrd4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var hashSet = mutable.HashSet[Long]()\n\
    \        lst.foreach(elem => hashSet(elem))\n        return !hashSet.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzwtzo9xp.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mhashSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        if (lst.length == 1)\n\
    \            return true\n        val map = lst.groupBy(identity).map(e => e._1.sorted).map(_.length\
    \ == 1).getOrElse(false)\n        return map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1m22cohk.scala:27:54 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = lst.groupBy(identity).map(\e\
    [36me\e[0m => e._1.sorted).map(_.length == \e[31m1\e[0m).getOrElse(\e[31mfalse\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value sorted is not a\
    \ member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010343
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val hm = scala.collection.mutable.HashMap[Long,\
    \ Long]()\n        val size = lst.size\n        val first = lst(0)\n        if\
    \ (size == 1) true\n        else {\n            val last = (lst(size - 1))\n \
    \           var i = 2\n            while (i < size) {\n                val item\
    \ = lst(i)\n                if (hm.contains(item))\n                    return\
    \ false\n                hm.put(item, item)\n                if (item == last)\n\
    \                    return true\n                i += 1 \n            }\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqa_aiov_.scala:45)\n\tat Problem.main(tmpqa_aiov_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        // Using a HashSet to\
    \ keep track of duplicates\n        val set = new mutable.HashSet[Long]()\n  \
    \      // Loop through the list\n        for (i <- 0 until lst.size) {\n     \
    \       // Check if list has duplicate number\n            if(set.contains(lst(i)))\
    \ {\n                return false\n            }\n            // Add each number\
    \ to the set\n            set += lst(i)\n        }\n        // If set contains\
    \ all elements, it is sorted\n        set.size == lst.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp12ryc49e.scala:26:22 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var hasDuplicates :\
    \ Boolean = false\n        var sortedList: List[Long] = List()\n        var index\
    \ = 0\n        for (index <- 0 until lst.length) {\n            if (sortedList.contains(lst(index)))\
    \ {\n                hasDuplicates = true\n                break\n           \
    \ }\n            sortedList ::= lst(index)\n        }\n        return hasDuplicates\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz2i72uui.scala:31:16 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010343
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        var i = 0\n        var\
    \ prev = lst(0)\n        var sorted = false\n        while(i < lst.length) {\n\
    \            if(i == 0 || (prev != lst(i))) {\n                prev = lst(i)\n\
    \                if(!sorted) {\n                    sorted = true\n          \
    \      }\n            }\n            i += 1\n        }\n        if(!sorted) {\n\
    \            return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp50d4xwv6.scala:45)\n\tat Problem.main(tmp50d4xwv6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val hashSet = scala.collection.mutable.HashSet[Long]()\n\
    \        val numSet = scala.collection.mutable.HashSet[Long]()\n        val nums\
    \ = lst.map(_.toLong)\n        val len = nums.length\n        for (x<-0 until\
    \ len)\n            hashSet += x\n        val len = hashSet.size\n        for(x\
    \ <- 0 until len) {\n            if(numSet.contains(nums(x))) {\n            \
    \    false\n            }\n            else {\n                numSet += nums(x)\n\
    \            }\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsavjri0e.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mlen\e[0m = hashSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlen is\
    \ already defined as \e[33mvalue\e[0m \e[35mlen\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660010343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val seen = new mutable.HashSet[Long]()\n\
    \        def isSortedHelper(lst : List[Long], seen : mutable.Set[Long]) : Boolean\
    \ = lst match {\n            case Nil => true\n            case head :: tail =>\n\
    \                if (seen.contains(head)) {\n                    false\n     \
    \           } else {\n                    seen.add(head)\n                   \
    \ isSortedHelper(tail, seen)\n                }\n        }\n        isSortedHelper(lst,\
    \ seen)\n    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
    \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzp9l1yzv.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzp9l1yzv.scala:26:52\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mdef\e[0m \e\
    [36misSortedHelper\e[0m(\e[36mlst\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e\
    [36mseen\e[0m : mutable.Set[\e[35mLong\e[0m]) : \e[35mBoolean\e[0m = lst \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m                                                 \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                                            \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return whether or not they are sorted\n \
    \   // in ascending order. If list has more than 1 duplicate of the same\n   \
    \ // number, return false. Assume no negative numbers and only integers.\n   \
    \ // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n \
    \   // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n\
    \    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n  \
    \  // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    //\
    \ (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n \
    \   def isSorted(lst : List[Long]) : Boolean = {\n        val s = lst.map(x =>\
    \ x).distinct.toSet\n        val n = lst.size\n        if (s == n){\n        \
    \    return true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSorted((List[Long](5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
    \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) ==\
    \ (true));\n    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpj7newl06.scala:27:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m (s == n){\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m      Values of types Set[Long] and Int\
    \ cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660010344
