{
  "language": "scala",
  "name": "HumanEval_65_circular_shift",
  "results": [
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift <= x.toString().length)\n            return x.toString()\n        else {\n            val digits = x.toString().substring(0, shift)\n            val reversed = digits.replace(s\"${digits.length - shift, 0}\", \"\")\n            digits + reversed\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp29uzlea3.scala:16:67 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = digits.replace(\u001b[31ms\"\u001b[0m${digits.length - shift, \u001b[31m0\u001b[0m}\u001b[31m\"\u001b[0m, \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but ',' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp29uzlea3.scala:15:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = x.toString().substring(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028989
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString.reverse.charAt(0).toCharArray.take(shift+1).mkString\n        (if (shift > s.length) s else s.reverse)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpg7un1shf.scala:12:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ms\u001b[0m = x.toString.reverse.charAt(\u001b[31m0\u001b[0m).toCharArray.take(shift+\u001b[31m1\u001b[0m).mkString\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toCharArray is not a member of Char\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028989
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var temp = x.toString.reverse\n        for (i <- 0 to shift) {\n            if (i < temp.length)\n                temp = temp.dropRight(1)\n            temp = temp + temp\n        }\n        temp.reverse.dropRight(1) + temp\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ro1gfwg.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digitsCount = x.toString.length\n        val result = new StringBuilder\n        for (i <- 0 until digitsCount - shift) {\n            val digit = x.toString.charAt(digitsCount + i - shift)\n            result += digit\n        }\n        if (shift < digitsCount) {\n            val digit = x.toString.charAt(digitsCount + shift) \n            result += digit\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tv33676.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until digitsCount - shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    Long\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tv33676.scala:15:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = x.toString.charAt(digitsCount + i - shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    Long\n\u001b[31m   |\u001b[0m                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tv33676.scala:19:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = x.toString.charAt(digitsCount + shift) \n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    Long\n\u001b[31m   |\u001b[0m                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tv33676.scala:22:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        result.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    StringBuilder\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val n = math.pow(10, shift)\n        val remainder = x % n\n        val digits = (x / (n / 10)).map(_ % 10).toArray\n        (digits ++ digits).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ul9uv5y.scala:14:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = (x / (n / \u001b[31m10\u001b[0m)).map(_ % \u001b[31m10\u001b[0m).toArray\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value map is not a member of Double\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028989
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        def digits(x : Long) : List[Long] = {\n            if (x < 10L)\n                List(x)\n            else if (x < (1l << shift))\n                digits(x / 10L) ++ List(x%10L)\n            else\n                digits(x/10L / 10L) ++ digits(x%10L/10L) ++ digits(x%10L)\n        }\n        val digits = digits(x)\n        val shifted = digits.reverse.tail.drop(shift).reverse\n        val result = shifted.reverse.mkString\n        val padding = Array.fill(shift.toString.length+1).takeRight(shift)\n        padding ++ result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa6b4tdpa.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = digits(x)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdigits is already defined as \u001b[33mmethod\u001b[0m \u001b[35mdigits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa6b4tdpa.scala:21:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshifted\u001b[0m = digits.reverse.tail.drop(shift).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value reverse is not a member of Long => List[Long]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa6b4tdpa.scala:23:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mpadding\u001b[0m = Array.fill(shift.toString.length+\u001b[31m1\u001b[0m).takeRight(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value takeRight is not a member of (=> Any) => Array[Any]\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var result = 0\n        var remainder = x % shift\n        x /= shift\n        while(x > 0) {\n            result = result*10 + remainder\n            x /= shift\n            remainder = x % shift\n        }\n        if (result < 0) (result + '9' * (shift - 1))\n        else (result + '0' * (shift - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoch2he8l.scala:14:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        x /= shift\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value /= is not a member of Long - did you mean x.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoch2he8l.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            result = result*\u001b[31m10\u001b[0m + remainder\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    Long\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoch2he8l.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            x /= shift\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean x.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoch2he8l.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mif\u001b[0m (result < \u001b[31m0\u001b[0m) (result + \u001b[31m'9'\u001b[0m * (shift - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoch2he8l.scala:21:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33melse\u001b[0m (result + \u001b[31m'0'\u001b[0m * (shift - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val r = x.toString.reverse\n        val s = r.takeRight(shift)\n        val r = r.dropRight(shift).reverse\n        s + r\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpe0t_6wuu.scala:14:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr\u001b[0m = r.dropRight(shift).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mr is already defined as \u001b[33mvalue\u001b[0m \u001b[35mr\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0t_6wuu.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ms\u001b[0m = r.takeRight(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028988
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val result = scala.collection.mutable.StringBuilder()\n        var i = 0\n        while(i < x.length) {\n            val digit = x(i).toInt\n            val nextDigit = if (digit/10 > shift) digit%10 + 10 else digit%10\n            result += digit\n            i += 1\n            if (i < x.length) {\n                result += (nextDigit + x(i).toInt).toChar\n            }\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo66_op9f.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mwhile\u001b[0m(i < x.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value length is not a member of Long\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpo66_op9f.scala:15:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = x(i).toInt\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        \u001b[33mparameter\u001b[0m \u001b[35mx\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo66_op9f.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mif\u001b[0m (i < x.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value length is not a member of Long\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var result : String = \"\"\n        var i = x\n        while(i > 0) {\n            result += (i mod 10).asInstanceOf[String]\n            i /= 10\n        }\n        val digits = result.reverse.drop(shift).reverse\n        result = digits.length >= shift ? digits : digits.padTo(shift,\"0\")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpkc83kfmp.scala:19:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        result = digits.length >= shift ? digits : digits.padTo(shift,\u001b[31m\"0\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '(' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkc83kfmp.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += (i mod \u001b[31m10\u001b[0m).asInstanceOf[\u001b[35mString\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkc83kfmp.scala:15:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += (i mod \u001b[31m10\u001b[0m).asInstanceOf[\u001b[35mString\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue mod is not a member of Long, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.BigInt.long2bigInt\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkc83kfmp.scala:18:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = result.reverse.drop(shift).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkc83kfmp.scala:19:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        result = digits.length >= shift ? digits : digits.padTo(shift,\u001b[31m\"0\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value ? is not a member of Long\n5 errors found\n",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var s = \"\"\n        var m = x.toInt\n        // shift the digits right by shift\n        while (m>0) {\n            s += m.toString() + \" \"\n            m = m.toInt / 10\n            m %= 10\n            shift = shift - 1\n        }\n        // remove leading space and return\n        val ss = s.dropRight(1)\n        if (ss.length < shift) ss else ss.reverse.drop(shift).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmps0dp2cgn.scala:19:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            shift = shift - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val shift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps0dp2cgn.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mif\u001b[0m (ss.length < shift) ss \u001b[33melse\u001b[0m ss.reverse.drop(shift).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val n = math.max(x.toString.length, shift.toString.length)\n        val buf = new Array[Char](n)\n        var i = 0\n        while (i < n) {\n            buf(i) = x.toChar + x.toString.charAt(i)\n            i += 1\n        }\n        buf ++= Array.fill(n)(0).mkString\n        var j = buf.length - 1\n        while (j >= 0) {\n            val c = buf.charAt(j)\n            buf(j) = buf.charAt(j + shift)\n            buf(j + shift) = c\n            j -= 1\n        }\n        new String(buf)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp47kt5v38.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            buf(i) = x.toChar + x.toString.charAt(i)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    Int\n\u001b[31m   |\u001b[0m                     Required: Char\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp47kt5v38.scala:19:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        buf ++= Array.fill(n)(\u001b[31m0\u001b[0m).mkString\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value ++= is not a member of Array[Char]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp47kt5v38.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = buf.charAt(j)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value charAt is not a member of Array[Char]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp47kt5v38.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            buf(j) = buf.charAt(j + shift)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value charAt is not a member of Array[Char]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp47kt5v38.scala:24:16 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            buf(j + shift) = c\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    Long\n\u001b[31m   |\u001b[0m                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1660028991
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        def digits(x : Long) : List[String] = x match {\n            case 0 => List()\n            case _  => digits(x / 10) ++ digits(x % 10)\n        }\n        val digits = digits(x)\n        if (shift == 0) digits.reverse\n        else {\n            val shift = shift - 1\n            val shift = math.min(digits.length, shift)\n            digits.reverse.slice(0, shift)\n                .reverseIterator.map(i => digits.head + i)\n                .toList\n                .reverse\n                .mkString(\"\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp7qod3db6.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = digits(x)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdigits is already defined as \u001b[33mmethod\u001b[0m \u001b[35mdigits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7qod3db6.scala:17:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mif\u001b[0m (shift == \u001b[31m0\u001b[0m) digits.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value reverse is not a member of Long => List[String]\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp7qod3db6.scala:20:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = math.min(digits.length, shift)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mshift is already defined as \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp7qod3db6.scala:19:24 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shift - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7qod3db6.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            digits.reverse.slice(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value reverse is not a member of Long => List[String]\n5 errors found\n",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var result = new Array[Char](x.toString.length + shift)\n        var pos = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var digit = 0\n        var digits = new Array[Long]\n\n        while(i < x.toString.length) {\n            digit = x.toString.charAt(i)\n            digits(k) = digit.toLong\n            i += 1\n            k += 1\n        }\n\n        while(pos < digits.length) {\n            j = pos\n            k = pos\n            while(k >= 0 && digits(k) == digits(k + 1)) {\n                k -= 1\n            }\n            k = pos + 1\n            while(k <= digits.length && digits(k) == digits(k + 1)) {\n                k += 1\n            }\n            if(k <= digits.length) {\n                if(pos > 0) {\n                    result(pos) = digits(k)\n                    pos = 0\n                } else {\n                    result(k) = digits(k + 1)\n                }\n                pos = k + 1\n            } else {\n                while(k >= 0 && digits(k) == digits(k + 1)) {\n                    k -= 1\n                }\n                result(pos) = digits(k + 1)\n                pos = k + 1\n            }\n        }\n\n        while(pos < digits.length) {\n            j = pos\n            k = pos\n            while(k >= 0 && digits(k) == digits(k + 1)) {\n                k -= 1\n            }\n            result(k) = digits(k + 1)\n            pos = k + 1\n        }\n\n        return result.map(_.toString).reverse.mkString.toUpperCase\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj4_bs1jx.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mChar\u001b[0m](x.toString.length + shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    Long\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj4_bs1jx.scala:18:21 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdigits\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter _length of \u001b[33mconstructor\u001b[0m \u001b[35mArray\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m: (_length: Int): Array[Long]\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val shift = shift % (x.length.toLong)\n        if (shift < 0)\n            x = x.toString.reverse\n        val y = x.toString\n        for {\n            i <- 0 until shift\n            j <- 0 until x.length - i\n        } yield {\n            y((i + j))\n        }.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp6a9caw47.scala:12:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shift % (x.length.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6a9caw47.scala:14:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            x = x.toString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    String\n\u001b[31m   |\u001b[0m                Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6a9caw47.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            j <- \u001b[31m0\u001b[0m until x.length - i\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value length is not a member of Long\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val shiftRight = shift > x.toString.length\n        val shift = shift - (x.toString.length % shift)\n        if (shiftRight) {\n            (x.toString.reverse.dropRight(shift))\n        }\n        else {\n            (x.toString.reverse.dropRight(x.toString.length + shift))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp42vsb9sb.scala:13:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shift - (x.toString.length % shift)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028986
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = \"\"\n        var lastDigit = 0\n        while (shift > 0) {\n            digits = x.toString.charAt(lastDigit) + digits\n            lastDigit = lastDigit + shift - 1\n            if (lastDigit >= x.toString.length)\n                lastDigit = 0\n            shift = shift - 1\n        }\n        digits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbcv8v25k.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            lastDigit = lastDigit + shift - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    Long\n\u001b[31m   |\u001b[0m                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpbcv8v25k.scala:19:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            shift = shift - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val shift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        // If the number to be circulated by shift is already greater than the\n        // modulus of the number, just return it\n        if (x > x.mod(shift))\n            return x.toString\n\n        // Otherwise, split the number into digits, shift each digit to the\n        // left by shift and concatenate all digits to form the new number\n        val digits = x.toString.reverse.grouped(shift).reverse\n        val newDigits = mutable.ListBuffer.empty[String]\n        for (d <- digits)\n            newDigits.append(d.drop(shift))\n        newDigits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbah5p_wl.scala:14:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mif\u001b[0m (x > x.mod(shift))\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue mod is not a member of Long, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.BigInt.long2bigInt\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbah5p_wl.scala:19:48 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = x.toString.reverse.grouped(shift).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbah5p_wl.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnewDigits\u001b[0m = mutable.ListBuffer.empty[\u001b[35mString\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var result : String = \"\"\n        var digits = x.toString.toInt\n\n        for( i <- 1 to shift) {\n            var j : Int = 0\n            while( (j = (2 * i) - 1) < digits) yield {\n                result += digits(j)\n            }\n        }\n\n        return result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkwihtb_x.scala:17:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mwhile\u001b[0m( (j = (\u001b[31m2\u001b[0m * i) - \u001b[31m1\u001b[0m) < digits) \u001b[33myield\u001b[0m {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        'do' expected, but 'yield' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkwihtb_x.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m( i <- \u001b[31m1\u001b[0m to shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkwihtb_x.scala:17:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mwhile\u001b[0m( (j = (\u001b[31m2\u001b[0m * i) - \u001b[31m1\u001b[0m) < digits) \u001b[33myield\u001b[0m {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue < is not a member of Unit, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordering.Unit.mkOrderingOps\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m   |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m   |\u001b[0m\n\u001b[33m\u001b[33m-- [E129] Potential Issue Warning: /tmp/tmpkwihtb_x.scala:20:8 -----------------\u001b[0m\u001b[0m\n\u001b[33m19 |\u001b[0m            }\n\u001b[33m20 |\u001b[0m        }\n\u001b[33m\u001b[33m   |\u001b[0m             ^\u001b[0m\n\u001b[33m   |\u001b[0mA pure expression does nothing in statement position; you may be omitting necessary parentheses\n\u001b[33m   |\u001b[0m\n\u001b[33m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 warning found\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = List((x.toString.dropRight(shift+1) + x.toString.takeRight(shift+1)))\n        if(digits == 0) \"\" else digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkct7ikwg.scala:12:48 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = List((x.toString.dropRight(shift+\u001b[31m1\u001b[0m) + x.toString.takeRight(shift+\u001b[31m1\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    Long\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkct7ikwg.scala:12:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = List((x.toString.dropRight(shift+\u001b[31m1\u001b[0m) + x.toString.takeRight(shift+\u001b[31m1\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Found:    Long\n\u001b[31m   |\u001b[0m                                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpkct7ikwg.scala:13:11 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mif\u001b[0m(digits == \u001b[31m0\u001b[0m) \u001b[31m\"\"\u001b[0m \u001b[33melse\u001b[0m digits.reverse.mkString\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   Values of types List[String] and Int cannot be compared with == or !=\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028989
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n      val n = x.toString.length\n      val s = x.toString.reverse\n      val z = ((n - shift) % n).toString.reverse\n      s + z\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp11o2l2j5.scala:18)\n\tat Problem.main(tmp11o2l2j5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var x = x.toString.reverse\n        var shift = shift.toString.reverse\n        var s = \"\"\n        var i = 0\n        while (i < shift.length) {\n            if (shift(i) >= x.length)\n                s = x ++ s\n            else\n                s = x take shift(i) ++ s\n            i += 1\n        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpm_dyspqb.scala:12:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mx\u001b[0m = x.toString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvariable\u001b[0m \u001b[35mx\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpm_dyspqb.scala:13:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mshift\u001b[0m = shift.toString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvariable\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n        return digits.mkString(\"\").reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoeykiiz0.scala:12:48 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = x.toString.reverse.grouped(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028989
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift == 0)\n            x.toString\n        else if (shift > x.length)\n            x.toString.reverse\n        else\n            val s = x.toString.reverse.substring(0,shift)\n            x + (x.toString.reverse.substring(shift))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcatsqurv.scala:14:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (shift > x.length)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value length is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcatsqurv.scala:17:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ms\u001b[0m = x.toString.reverse.substring(\u001b[31m0\u001b[0m,shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcatsqurv.scala:18:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            x + (x.toString.reverse.substring(shift))\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028999
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString.toInt\n        val shifts = shift.toString.toInt\n        val result = new mutable.StringBuilder\n        for (i<-xs;i>=shifts;i--) {\n            val n = xs.drop(i)\n            result.append(n)\n        }\n        return result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy0ejtnis.scala:15:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m (i<-xs;i>=shifts;i--) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpy0ejtnis.scala:15:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m (i<-xs;i>=shifts;i--) {\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy0ejtnis.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.StringBuilder\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy0ejtnis.scala:15:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m (i<-xs;i>=shifts;i--) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                value foreach is not a member of Int\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660028998
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if(x == 0) {\n            return \"\"\n        } else if(shift > x.length) {\n            var result = \"\"\n            for(i <- 0 until x.length) {\n                result += x.toCharArray(i + 1).reverse\n            }\n            return result.reverse\n        } else {\n            var result = \"\"\n            for(i <- 0 until x.length) {\n                result += x.toCharArray(i + shift)\n            }\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnrbpke5y.scala:14:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m(shift > x.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value length is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnrbpke5y.scala:16:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until x.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             value length is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnrbpke5y.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                result += x.toCharArray(i + \u001b[31m1\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnrbpke5y.scala:17:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                result += x.toCharArray(i + \u001b[31m1\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value toCharArray is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnrbpke5y.scala:22:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until x.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             value length is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnrbpke5y.scala:23:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                result += x.toCharArray(i + shift)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnrbpke5y.scala:23:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                result += x.toCharArray(i + shift)\n\u001b[31m\u001b[31m   |\u001b[0m                    ",
      "stdout": "",
      "timestamp": 1660029002
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val shiftDigits = Array.fill(shift)(0)\n        var xDigits = x.toString.toLongDigits().map(_.toChar)\n        var xDigit = Array.fill(xDigits.length)('0')\n        xDigits.copyToArray(xDigit, 0, xDigits.length)\n        while (xDigit.length > shiftDigits.length) {\n            shiftDigits(xDigit.length - shiftDigits.length) = xDigit(xDigits.length - 1)\n            xDigit(xDigits.length - 1) = '1'\n        }\n        shiftDigits.copyToArray(xDigit, 0, shiftDigits.length)\n        val resultString = xDigit.foldLeft(\"\") {\n            (s, digit) => s + digit\n        }\n        resultString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2spqv88v.scala:12:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshiftDigits\u001b[0m = Array.fill(shift)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2spqv88v.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mxDigits\u001b[0m = x.toString.toLongDigits().map(_.toChar)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value toLongDigits is not a member of String\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2spqv88v.scala:20:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        shiftDigits.copyToArray(xDigit, \u001b[31m0\u001b[0m, shiftDigits.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (xDigit : Array[Char])\n\u001b[31m   |\u001b[0m                                Required: Array[Int]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029002
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.dropRight(shift)\n        val result = if (digits.isEmpty) digits else digits.reverse\n        result + digits.reverse.take(shift).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz2or_ook.scala:12:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = x.toString.dropRight(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz2or_ook.scala:14:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        result + digits.reverse.take(shift).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029002
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString.toCharArray\n        val rev = if (shift > s.length) s.reverse\n        else s\n        val r = new StringBuilder\n        for (i <- 0 until shift)\n            r += rev(s.length - i - 1)\n        r.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbbdhmw_s.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029001
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val remainder = x - x % shift\n        val digit = x % shift\n        (remainder << shift) + digit + \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4vtw785v.scala:17)\n\tat Problem.main(tmp4vtw785v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660029001
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x\n        val newDigits = mutable.ListBuffer[Long]()\n        var shiftDigits = 0\n        var lastDigits = 0\n        while(digits != 0) {\n            if (shiftDigits > shift)\n                newDigits = newDigits.reverse\n            if (digits % 10 > 0) {\n                newDigits.append(digits % 10)\n                digits /= 10\n                shiftDigits += 1\n            } else {\n                lastDigits = digits\n                digits /= 10\n            }\n        }\n        if (shiftDigits > shift) {\n            newDigits = newDigits.reverse\n        }\n        if (newDigits.size == lastDigits)\n            newDigits.reverse.toString\n        else\n            newDigits.toString + lastDigits.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptz2gu417.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnewDigits\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmptz2gu417.scala:18:26 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                newDigits = newDigits.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val newDigits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptz2gu417.scala:24:29 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                lastDigits = digits\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    (digits : Long)\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmptz2gu417.scala:29:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            newDigits = newDigits.reverse\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val newDigits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029001
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var x = x.toString.toInt\n        if (shift == 0)\n            return Integer.toString(x)\n        val result = \"\"\n        var digit = 0\n        while (x > 0) {\n            val nextDigit = x % 10\n            result += Integer.toString(nextDigit + digit)\n            digit += shift\n            if (digit > 9) {\n                digit = digit % 10\n                result += Integer.toString(nextDigit + digit)\n            }\n            x /= 10\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp8bxvmx51.scala:12:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mx\u001b[0m = x.toString.toInt\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvariable\u001b[0m \u001b[35mx\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8bxvmx51.scala:19:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            result += Integer.toString(nextDigit + digit)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8bxvmx51.scala:20:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            digit += shift\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8bxvmx51.scala:23:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                result += Integer.toString(nextDigit + digit)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029003
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val shiftDigits = math.pow(10, shift)\n        val digits = (x /shiftDigits) % 10\n        x = (x /shiftDigits)\n        val reversedDigits = (digits * shiftDigits) % 10\n        val result = reversedDigits.toString\n        val firstDigit = reversedDigits.substring(0).toString\n        if (firstDigit.isEmpty) result else result + firstDigit\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7vxf5hf3.scala:14:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        x = (x /shiftDigits)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    Double\n\u001b[31m   |\u001b[0m             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7vxf5hf3.scala:17:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfirstDigit\u001b[0m = reversedDigits.substring(\u001b[31m0\u001b[0m).toString\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value substring is not a member of Double\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029002
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val numDigits = x.toString().length\n        var res = \"\"\n        var i = 0\n        while (i < numDigits) {\n            val rightShift = numDigits - i\n            val carry = (x/(2l*Math.pow(10,rightShift)).toInt) match {\n                case 0 => i\n                case _ => i + 1 // add one to avoid overflow\n            }\n            res = (res + x.toString % Math.pow(10, rightShift).toInt.toString) + carry.toString\n            x = x - x/(2l*Math.pow(10,rightShift)).toInt\n            i += carry\n        }\n        if (shift == numDigits) {\n            res = res.reverse\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp39oa_b6m.scala:21:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            res = (res + x.toString % Math.pow(\u001b[31m10\u001b[0m, rightShift).toInt.toString) + carry.toString\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue % is not a member of String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp39oa_b6m.scala:22:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            x = x - x/(\u001b[31m2l\u001b[0m*Math.pow(\u001b[31m10\u001b[0m,rightShift)).toInt\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029002
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if(shift > x.toString.length) x.toString.reverse\n        else (x % pow(2, shift)).int.toString() + circularShift(x / pow(2, shift), shift)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgproqxtr.scala:13:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33melse\u001b[0m (x % pow(\u001b[31m2\u001b[0m, shift)).int.toString() + circularShift(x / pow(\u001b[31m2\u001b[0m, shift), shift)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             value int is not a member of Double\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029001
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n        val max = (digits.size * shift.toInt).toInt\n        var i = 0\n        var c = 0\n        val digitList = new mutable.Queue[String]()\n        while (i < digits.length) {\n            c = (digits.charAt(i) - '0') * 10 + c\n            i += 1\n            if (c > max) {\n                digitList.enqueue(digits.charAt(i) - '0')\n                c = c - max\n                i += 1\n            }\n        }\n        if (digitList.size == 0)\n            return digits.reverse\n        val result = digitList.dequeue\n        for (j <- 0 until shift) {\n            result = result + '0'\n        }\n        return result + digits.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp21g75ihp.scala:16:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigitList\u001b[0m = \u001b[33mnew\u001b[0m mutable.Queue[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp21g75ihp.scala:29:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp21g75ihp.scala:30:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            result = result + \u001b[31m'0'\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029001
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val bits = (x shl shift).toLong\n        (x.toString ++ bits.toString(2)).substring(bits.length)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp7uvzb3v.scala:12:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbits\u001b[0m = (x shl shift).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value shl is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029003
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val s = x / shift\n        val r = x - (s * shift)\n        return s.toString.reverse + r.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_l51tm23.scala:17)\n\tat Problem.main(tmp_l51tm23.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660029003
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val result = (x / (shift / 10l)) % 10 + ''\n        (result + result.take(shift + 1).toString) match {\n            case \"\" => result\n            case s => circularShift(result, shift)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp6a57f51n.scala:12:48 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = (x / (shift / \u001b[31m10l\u001b[0m)) % \u001b[31m10\u001b[0m + ''\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                empty character literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6a57f51n.scala:17:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029002
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        def loop(shift : Long, acc : String) : String = {\n            if (shift == 0)\n                acc\n            else\n                loop(shift - 1, (x + acc).asInstanceOf[String])\n        }\n        loop(shift, \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp35iq5hlu.scala:21)\n\tat Problem.main(tmp35iq5hlu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660029001
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var n = x\n        if (shift < x.toString.length) n = x.toString.reverse\n        var i = shift\n        var result = \"\"\n        while (i > 0) {\n            result = n.charAt(i) + result\n            i = i - 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi2qjnntf.scala:13:54 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mif\u001b[0m (shift < x.toString.length) n = x.toString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    String\n\u001b[31m   |\u001b[0m                                           Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi2qjnntf.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            result = n.charAt(i) + result\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value charAt is not a member of Long\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029003
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n      val s = \"\" + x\n      val l = (s.length - shift)\n      val m = s if l > 0 else None\n      val r = s if l < s.length else None\n      val p = s if l > 0 else r.reverse\n      p match {\n        case None => r\n        case Some(x) => (s + x) * Math.pow(10, l % s.length).reverse\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzdtmse_m.scala:14:16 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m      \u001b[33mval\u001b[0m \u001b[36mm\u001b[0m = s \u001b[33mif\u001b[0m l > \u001b[31m0\u001b[0m \u001b[33melse\u001b[0m None\n\u001b[31m\u001b[31m   |\u001b[0m                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                end of statement expected but 'if' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzdtmse_m.scala:15:16 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m      \u001b[33mval\u001b[0m \u001b[36mr\u001b[0m = s \u001b[33mif\u001b[0m l < s.length \u001b[33melse\u001b[0m None\n\u001b[31m\u001b[31m   |\u001b[0m                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                end of statement expected but 'if' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzdtmse_m.scala:16:16 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m      \u001b[33mval\u001b[0m \u001b[36mp\u001b[0m = s \u001b[33mif\u001b[0m l > \u001b[31m0\u001b[0m \u001b[33melse\u001b[0m r.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                ^^\u001b[0m\n\u001b[31m   |\u001b[0m                end of statement expected but 'if' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdtmse_m.scala:18:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mcase\u001b[0m None => r\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    None.type\n\u001b[31m   |\u001b[0m             Required: String\n\u001b[31m   |\u001b[0m             pattern type is incompatible with expected type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzdtmse_m.scala:19:61 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mcase\u001b[0m Some(x) => (s + x) * Math.pow(\u001b[31m10\u001b[0m, l % s.length).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value reverse is not a member of Double\n5 errors found\n",
      "stdout": "",
      "timestamp": 1660029002
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        def shift(x : (Long, Long)) = x._1 shr shift | x._2 shr shift\n        var bits = x.toString.reverse.map { ch => if (ch == '1') 1 else if (ch == '0') 0 }\n        if (shift < bits.size) {\n            val x = bits.drop(shift);\n            val y = bits.take(shift);\n            bits -= shift.toString.reverse.map { ch => if (ch == '1') 1 else 0 } ++ shift(x)\n            bits += shift(y)\n        }\n        bits.toString.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf7wihvyw.scala:12:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mdef\u001b[0m \u001b[36mshift\u001b[0m(\u001b[36mx\u001b[0m : (\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m)) = x._1 shr shift | x._2 shr shift\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value shr is not a member of Long\n\u001b[31m\u001b[31m-- [E044] Cyclic Error: /tmp/tmpf7wihvyw.scala:12:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mdef\u001b[0m \u001b[36mshift\u001b[0m(\u001b[36mx\u001b[0m : (\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m)) = x._1 shr shift | x._2 shr shift\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Overloaded or recursive \u001b[33mmethod\u001b[0m \u001b[35mshift\u001b[0m needs return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf7wihvyw.scala:17:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            bits -= shift.toString.reverse.map { \u001b[36mch\u001b[0m => \u001b[33mif\u001b[0m (ch == \u001b[31m'1'\u001b[0m) \u001b[31m1\u001b[0m \u001b[33melse\u001b[0m \u001b[31m0\u001b[0m } ++ shift(x)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue -= is not a member of IndexedSeq[AnyVal] - did you mean IndexedSeq[AnyVal].!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7wihvyw.scala:17:90 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            bits -= shift.toString.reverse.map { \u001b[36mch\u001b[0m => \u001b[33mif\u001b[0m (ch == \u001b[31m'1'\u001b[0m) \u001b[31m1\u001b[0m \u001b[33melse\u001b[0m \u001b[31m0\u001b[0m } ++ shift(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (x : IndexedSeq[AnyVal])\n\u001b[31m   |\u001b[0m                                      Required: (Long, Long)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf7wihvyw.scala:18:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            bits += shift(y)\n\u001b[31m\u001b[31m   |\u001b[",
      "stdout": "",
      "timestamp": 1660029005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val len = x.length\n        val resultString = new StringBuilder\n        if (len < shift) {\n            resultString.append(x)\n        }\n        else {\n            val x = x.toString // convert to string\n            for ( i <- 0 to len - shift ) {\n                resultString.append(x.charAt(i)) // add digits at position\n            }\n            resultString.append(x.charAt(len-shift)) // add the right most digit\n        }\n        return resultString.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpav2397a9.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlen\u001b[0m = x.length\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value length is not a member of Long\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpav2397a9.scala:18:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = x.toString \u001b[34m// convert to string\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvalue\u001b[0m \u001b[35mx\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpav2397a9.scala:24:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mreturn\u001b[0m resultString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    StringBuilder\n\u001b[31m   |\u001b[0m               Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029003
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var result = ''\n        for(i <- 0 until shift) {\n            result += x(i + (shift - 1))\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpajdsclqn.scala:12:21 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m = ''\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     empty character literal\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpajdsclqn.scala:16:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        result.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.seqOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.sortedSetOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.Iterable\n\u001b[31m   |\u001b[0m  import math.Ordering.Option\n\u001b[31m   |\u001b[0m  import math.Ordering.comparatorToOrdering\n\u001b[31m   |\u001b[0m  import math.Ordering.ordered\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToScala.list asScalaBuffer\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val l = x.length\n        val r = shift % l\n        val r = math.min(r, (l-1))\n        // TODO handle shift < 0\n        var y = x.toString.toCharArray\n        var z = new Array[Char](l)\n        for (i <- 0 to r) {\n            z(i) = y(i)\n        }\n        var str = new StringBuilder\n        for (i <- 0 to (l-r)) {\n            str += z(i)\n        }\n        return str.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp410habug.scala:14:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr\u001b[0m = math.min(r, (l-\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mr is already defined as \u001b[33mvalue\u001b[0m \u001b[35mr\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp410habug.scala:12:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ml\u001b[0m = x.length\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value length is not a member of Long\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029002
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        def leftShift(x: Long, shift : Long) : Long = {\n            def shiftLeft(x : Long, shift : Long) : Long = {\n                val digit = x.toInt % 10\n                val result = x.toInt - digit + digit\n                if (result > 9) return 10 + result - shift\n                else result\n            }\n            val shiftedDigit = shiftLeft(x, shift)\n            val lastDigit = x % 10\n            val newDigit = lastDigit + shiftedDigit - 10\n            if (newDigit > 9) leftShift(newDigit, shift + 1) + 10\n            else newDigit\n        }\n        val digits = x.toString.reverse.tail\n        val resultDigits = digits.map(leftShift(_, 1)) reverse\n        resultDigits mkString \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpsb42ojli.scala:27:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        resultDigits mkString \u001b[31m\"\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Recursive \u001b[33mvalue\u001b[0m \u001b[35mresultDigits\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsb42ojli.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029010
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n        val shift = shift - 1\n        if (shift > digits.length)\n            digits.reverse\n        else {\n            val shiftedDigits = digits.drop(shift).take(digits.length - shift)\n            digits.reverse.concat(shiftedDigits)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_z7cwqv5.scala:13:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shift - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029008
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var result = \"\"\n        var i = 0;\n        while (i < shift) {\n            result = (x + result).mod(BigInt(10)).toString\n            i += 1\n        }\n        i = 0;\n        while (i >= shift) {\n            result = (result + x).toString\n            i -= 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpojjpdyb8.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = (x + result).mod(BigInt(\u001b[31m10\u001b[0m)).toString\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value mod is not a member of String\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029012
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n        val newDigits = digits.length - shift - 1\n        val newDigitsInt = digits.substring(0,newDigits)\n        val newDigitString = newDigitsInt + digits.substring(newDigits)\n        return newDigitString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp520409o7.scala:14:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnewDigitsInt\u001b[0m = digits.substring(\u001b[31m0\u001b[0m,newDigits)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (newDigits : Long)\n\u001b[31m   |\u001b[0m                                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp520409o7.scala:15:61 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnewDigitString\u001b[0m = newDigitsInt + digits.substring(newDigits)\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (newDigits : Long)\n\u001b[31m   |\u001b[0m                                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029013
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if(shift > x.toString().length)\n            return x.toString().reverse\n        val xs = x.toString.split(\"\\\\.\")\n        val ys = Array.fill(shift) {0l}\n        ys(0) = xs(0).take(shift)\n        val result = (xs(0) + ys.map(_.toLong).reverse).drop(shift).toString() + \".\" + xs(1).take(shift).toString() + \".\" + xs(2)\n        if(result.length == x.toString().length)\n            result\n        else\n            circularShift(result, shift)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_w7k4u0f.scala:15:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mys\u001b[0m = Array.fill(shift) {\u001b[31m0l\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_w7k4u0f.scala:16:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        ys(\u001b[31m0\u001b[0m) = xs(\u001b[31m0\u001b[0m).take(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_w7k4u0f.scala:17:61 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = (xs(\u001b[31m0\u001b[0m) + ys.map(_.toLong).reverse).drop(shift).toString() + \u001b[31m\".\"\u001b[0m + xs(\u001b[31m1\u001b[0m).take(shift).toString() + \u001b[31m\".\"\u001b[0m + xs(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_w7k4u0f.scala:17:98 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = (xs(\u001b[31m0\u001b[0m) + ys.map(_.toLong).reverse).drop(shift).toString() + \u001b[31m\".\"\u001b[0m + xs(\u001b[31m1\u001b[0m).take(shift).toString() + \u001b[31m\".\"\u001b[0m + xs(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                  ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m     ",
      "stdout": "",
      "timestamp": 1660029015
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x % 10\n        x = x / 10\n        if (shift<=digits.length) digits(shift) else digits.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpmjncfqy4.scala:13:10 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        x = x / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmjncfqy4.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mif\u001b[0m (shift<=digits.length) digits(shift) \u001b[33melse\u001b[0m digits.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value length is not a member of Long\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpmjncfqy4.scala:14:34 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mif\u001b[0m (shift<=digits.length) digits(shift) \u001b[33melse\u001b[0m digits.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  \u001b[33mvalue\u001b[0m \u001b[35mdigits\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmjncfqy4.scala:14:60 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mif\u001b[0m (shift<=digits.length) digits(shift) \u001b[33melse\u001b[0m digits.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value reverse is not a member of Long\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029015
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        def digit(x: Long, shift : Long, digits: Array[Long]) : Long = {\n            if (x >= shift) digits(x)\n            else digits(x) + digit(x+shift-x, shift-x, digits)\n        }\n        val digits = Array.fill(x.digits.length)(0)\n        var shift = shift\n        while (shift > x.digits.length) shift -= x.digits.length\n        digits.reverse.foldLeft(\"\")(\n            (x, y) => digit(y, x, digits) + x\n        )\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5lrqyy9.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mif\u001b[0m (x >= shift) digits(x)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (x : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5lrqyy9.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33melse\u001b[0m digits(x) + digit(x+shift-x, shift-x, digits)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (x : Long)\n\u001b[31m   |\u001b[0m                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl5lrqyy9.scala:16:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = Array.fill(x.digits.length)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                value digits is not a member of Long\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpl5lrqyy9.scala:17:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mshift\u001b[0m = shift\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvariable\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5lrqyy9.scala:20:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => digit(y, x, digits) + x\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (x : String)\n\u001b[31m   |\u001b[0m                               Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type M",
      "stdout": "",
      "timestamp": 1660029016
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits  = x.toString.reverse\n        val shifted = digits.drop(shift)\n        val newDigit = digits.takeRight(shift)\n        s\"$shifted$newDigit\"\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpitlojjop.scala:13:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshifted\u001b[0m = digits.drop(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpitlojjop.scala:14:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnewDigit\u001b[0m = digits.takeRight(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029014
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n      var s = \"\"\n      while(x > 0) {\n        val temp = x % 10\n        x = x / 10\n        s = s + temp.toString\n      }\n      if(shift > s.length)\n        s = s ++ s.dropRight(shift)\n      else\n        s = s ++ s.take(shift).reverse\n      s\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp3ya_nbmk.scala:15:10 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        x = x / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ya_nbmk.scala:19:29 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        s = s ++ s.dropRight(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ya_nbmk.scala:21:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        s = s ++ s.take(shift).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029015
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n       val result = (x >>> shift).toCharArray\n       val resultStr = new StringBuilder(result)\n       resultStr.reverse\n       resultStr.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgrynstoe.scala:12:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m       \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = (x >>> shift).toCharArray\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value toCharArray is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029015
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val n = x.toString.length\n        var digits = x.toString.reverse.grouped(shift.toInt).map(_.reverse)\n        if (digits == Nil) {\n            digits = x.toString.reverse.grouped(shift.toInt).map(_.reverse)\n        }\n        digits.reverse.toSeq.foldLeft(\"\"){ (res, d) => res + d.mkString }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpt0xo_vje.scala:14:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mif\u001b[0m (digits == Nil) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mValues of types Iterator[String] and object scala.collection.immutable.Nil cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt0xo_vje.scala:17:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        digits.reverse.toSeq.foldLeft(\u001b[31m\"\"\u001b[0m){ (\u001b[36mres\u001b[0m, \u001b[36md\u001b[0m) => res + d.mkString }\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue reverse is not a member of Iterator[String] - did you mean Iterator[String].reversed?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029016
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = scala.math.pow(2, shift)\n        val reversedDigits = (digits).div((2l*digits) + digits)\n        val remainder = digits - reversedDigits\n        val digitPosition = digits - shift\n        val output = x.toString.reverse.slice(digitPosition)(0) + remainder.toString.reverse\n        return output + reversedDigits.toString.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphjd_rluc.scala:13:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversedDigits\u001b[0m = (digits).div((\u001b[31m2l\u001b[0m*digits) + digits)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             value div is not a member of Double\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphjd_rluc.scala:16:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moutput\u001b[0m = x.toString.reverse.slice(digitPosition)(\u001b[31m0\u001b[0m) + remainder.toString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (digitPosition : Double)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029016
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = math.divrem(x.toInt, 10).map(_.toInt)\n        val shiftDigits = math.divrem(shift.toInt, 10).map(_.toInt)\n        val result = digits.map(x => (x + shiftDigits(x)) % 10).map(x => digits(x)).toList.reverse.mkString\n        result.substring(0, Math.max(result.length, shift))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsktjryq9.scala:12:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = math.divrem(x.toInt, \u001b[31m10\u001b[0m).map(_.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value divrem is not a member of math\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsktjryq9.scala:13:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshiftDigits\u001b[0m = math.divrem(shift.toInt, \u001b[31m10\u001b[0m).map(_.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value divrem is not a member of math\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029016
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var res = \"\"\n        var carry = 0\n        var len = Math.max(1, Math.ceil(Math.log10(x) + shift))\n        for(i<- 0 until len) {\n            val nextVal = (x.toLong * Math.pow(10, len-i)) + carry\n            res +=  (nextVal.toFloat / Math.pow(10, len-i)).trunc * Math.pow(10, len-i)\n            if(nextVal.abs % Math.pow(10, len-i) != 0) {\n                res +=  nextVal.abs / Math.pow(10, len-i)\n                carry = 0\n            } else {\n                carry = 1\n            }\n        }\n        if(res.length < len) {\n            res += new String(x.toByte, len-res.length)\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgkt21s_5.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m(i<- \u001b[31m0\u001b[0m until len) {\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (len : Double)\n\u001b[31m   |\u001b[0m                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgkt21s_5.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            res +=  (nextVal.toFloat / Math.pow(\u001b[31m10\u001b[0m, len-i)).trunc * Math.pow(\u001b[31m10\u001b[0m, len-i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgkt21s_5.scala:17:60 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            res +=  (nextVal.toFloat / Math.pow(\u001b[31m10\u001b[0m, len-i)).trunc * Math.pow(\u001b[31m10\u001b[0m, len-i)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value trunc is not a member of Double - did you mean Double.toInt?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgkt21s_5.scala:26:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            res += \u001b[33mnew\u001b[0m \u001b[35mString\u001b[0m(x.toByte, len-res.length)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpgkt21s_5.scala:26:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            res += \u001b[33mnew\u001b[0m \u001b[35mString\u001b[0m(x.toByte, len-res.length)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mconstructor\u001b[0m \u001b[35mString\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: StringBuilder): String\n\u001b[31m   |\u001b[0m (x$0: StringBuffer): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte]): String\n\u001b[31m   |\u001b[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\u001b[31m   |\u001b[0m (x$0: Array[B",
      "stdout": "",
      "timestamp": 1660029016
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val x = x.toInt\n        val shift = shift.toInt\n        if (shift > x.length) x.reverse\n        else (x << (shift.toInt)) + (x >> (x.length << shift.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp6tg7x09n.scala:12:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = x.toInt\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mx\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp6tg7x09n.scala:13:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shift.toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029009
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        def shiftLeftByShift(x : Long, shift : Long) : Long = {\n            if (shift > x.length) {\n                (x % 10)  + 10 * (x / (10 * shift))\n            } else {\n                (x % 10)  + 10 * (x / (10 * shift))\n            }\n        }\n        val xStr = (x / 100).toInt\n        val shiftStr = (shift / 10).toInt\n        val newStr = xStr + shiftLeftByShift(xStr, shiftStr)\n        val newInt = newStr * 10 + newStr\n        newInt.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnarj24gu.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mif\u001b[0m (shift > x.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value length is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029015
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val shiftMod = x % shift\n        val digits = x.toString.toCharArray.drop(shiftMod % 10)\n        val shiftDigits : Array[Char] = Array.fill(10){digits(shiftMod % 10)}\n        val newString : String = new StringBuilder(digits).mkString(\"\") + new StringBuilder(shiftDigits).mkString(\"\")\n        return newString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpppqngceu.scala:13:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = x.toString.toCharArray.drop(shiftMod % \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    Long\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpppqngceu.scala:14:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshiftDigits\u001b[0m : \u001b[35mArray\u001b[0m[\u001b[35mChar\u001b[0m] = Array.fill(\u001b[31m10\u001b[0m){digits(shiftMod % \u001b[31m10\u001b[0m)}\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Found:    Long\n\u001b[31m   |\u001b[0m                                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpppqngceu.scala:15:37 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnewString\u001b[0m : \u001b[35mString\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mStringBuilder\u001b[0m(digits).mkString(\u001b[31m\"\"\u001b[0m) + \u001b[33mnew\u001b[0m \u001b[35mStringBuilder\u001b[0m(shiftDigits).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mconstructor\u001b[0m \u001b[35mStringBuilder\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringBuilder\u001b[0m with types\n\u001b[31m   |\u001b[0m (initCapacity: Int, initValue: String): StringBuilder\n\u001b[31m   |\u001b[0m (str: String): StringBuilder\n\u001b[31m   |\u001b[0m (capacity: Int): StringBuilder\n\u001b[31m   |\u001b[0m (): StringBuilder\n\u001b[31m   |\u001b[0m (underlying: StringBuilder): StringBuilder\n\u001b[31m   |\u001b[0mmatch arguments ((digits : Array[Char]))\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029016
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        // Initialize result to \"\"\n        var result = \"\"\n        // Get number of digits in x\n        var nDigits = x.toString().length\n        // Keep looping while there are digits or shift > nDigits\n        while ((shift > nDigits) || (nDigits < shift)) {\n            // If the shift is > number of digits, use nDigits as shift and add \"0\"\n            if (shift > nDigits) {\n                shift = (nDigits + 1l)\n                result = x.toString().reverse.dropRight(shift) + \"0\"\n                // If nDigits < shift, just add \"0\"\n            } else {\n                result = (x.toString()).reverse.dropRight(shift) + \"0\"\n            }\n            nDigits += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpfpivybko.scala:20:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                shift = (nDigits + \u001b[31m1l\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val shift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfpivybko.scala:21:56 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                result = x.toString().reverse.dropRight(shift) + \u001b[31m\"0\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfpivybko.scala:24:58 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                result = (x.toString()).reverse.dropRight(shift) + \u001b[31m\"0\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029015
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var xStr = x\n        val digits = xStr.length\n        if (shift < digits) {\n            val digitShift = (digits - shift)\n            var shiftPlus = 0\n            for ((i, iPlus, iMinus) <- Iterator.iterate(digitShift)(_+)(0))\n                if ((i + digitShift) > digits) (iMinus, digitShift, iPlus)\n                else (iPlus, digitShift, i)\n            var x = new StringBuilder\n            x ++= xStr.drop(digitShift).reverse\n            x ++= xStr.take(digitShift)\n            x.toString\n        } else {\n            xStr.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp9oj6pnp_.scala:17:70 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mfor\u001b[0m ((i, iPlus, iMinus) <- Iterator.iterate(digitShift)(_+)(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m')'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9oj6pnp_.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = xStr.length\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value length is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9oj6pnp_.scala:21:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            x ++= xStr.drop(digitShift).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value drop is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9oj6pnp_.scala:22:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            x ++= xStr.take(digitShift)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value take is not a member of Long\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029017
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val length = x.toString.length\n        var newX = x\n        val tempVal = x.toString\n        var newVal = \"\"\n        while(newX > 0) {\n            if(newX < shift)\n                newVal = newVal + tempVal.charAt(newX - shift) + tempVal.charAt(newX) \n            newX = newX - shift\n        }\n        if(length == newX) newVal\n        else newVal + tempVal.charAt(newX + shift)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6bbbo3s6.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                newVal = newVal + tempVal.charAt(newX - shift) + tempVal.charAt(newX) \n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    Long\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6bbbo3s6.scala:18:80 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                newVal = newVal + tempVal.charAt(newX - shift) + tempVal.charAt(newX) \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (newX : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6bbbo3s6.scala:22:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33melse\u001b[0m newVal + tempVal.charAt(newX + shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    Long\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029016
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift == 0) {\n            x.toString.reverse\n        } else {\n            var result = \"\"\n            for (i <- 0 until shift) {\n                val digit = x % 10\n                x /= 10\n                result += (digit * 10 + i).toString.reverse\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpti_zhx39.scala:16:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpti_zhx39.scala:18:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                x /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean x.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029017
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var newX = x.toInt % 10\n        var newShift = shift.toInt % 10\n        var result : String = \"0\"\n        while(newShift > newX) {\n            newX = newX * 10\n            newShift = newShift * 10\n        }\n        while(newShift < newX) {\n            newX = newX / 10\n            newShift = newShift / 10\n        }\n        result = newX + newShift\n        return result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplp2p10th.scala:23:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        result = newX + newShift\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (newShift : Int)\n\u001b[31m   |\u001b[0m                        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029017
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var stringInLong = x.toString.toLong\n        var finalString = \"\"\n        var lastDigit = 0\n        while (stringInLong > 0) {\n            finalString += lastDigit\n            lastDigit = stringInLong % 10\n            stringInLong = (stringInLong - lastDigit) / 10\n        }\n        if (shift > finalString.length) {\n            finalString = finalString.reverse\n        }\n        return finalString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3jd2zb0k.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            lastDigit = stringInLong % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    Long\n\u001b[31m   |\u001b[0m                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029018
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val n = x.toString\n        val digits = n.toCharArray\n        val m = n.length\n        var x = 0\n        var i = 0\n        var k = 0\n        var k1 = m + shift\n        while(i < m){\n            x = ((digits(i) - '0') << 1) | (digits(i-1) - '0')\n            k += 1\n            if (k1 < 0){\n                k1 = k1 + m\n            }\n            else if (k1 > m){\n                k1 = k1 - m\n            }\n            digits(i) = digits(i) + x\n            digits(i-1) = digits(i-1) - x\n            i += 1\n            k += 1\n        }\n        return new String(digits)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpifwi9wup.scala:28:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            digits(i) = digits(i) + x\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    Int\n\u001b[31m   |\u001b[0m                        Required: Char\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpifwi9wup.scala:29:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            digits(i-\u001b[31m1\u001b[0m) = digits(i-\u001b[31m1\u001b[0m) - x\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    Int\n\u001b[31m   |\u001b[0m                          Required: Char\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029022
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if((shift > 0) && (shift < x.length)) (x.toString.padTo(shift, \"\") + x.toString.substring(shift, x.length))\n        else if(shift < 0) (x.toString.substring(shift, x.length) + x.toString.padTo(shift, \"\"))\n        else (x.toString.substring(shift, x.length) + x.toString.padTo(shift, \"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsybuvlx5.scala:12:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m((shift > \u001b[31m0\u001b[0m) && (shift < x.length)) (x.toString.padTo(shift, \u001b[31m\"\"\u001b[0m) + x.toString.substring(shift, x.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value length is not a member of Long\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpsybuvlx5.scala:12:58 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m((shift > \u001b[31m0\u001b[0m) && (shift < x.length)) (x.toString.padTo(shift, \u001b[31m\"\"\u001b[0m) + x.toString.substring(shift, x.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mpadTo\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m with types\n\u001b[31m   |\u001b[0m (len: Int, elem: Char): String\n\u001b[31m   |\u001b[0m [B >: Char](len: Int, elem: B): IndexedSeq[B]\n\u001b[31m   |\u001b[0mmatch arguments ((shift : Long), (\u001b[32m\"\"\u001b[0m : String))\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsybuvlx5.scala:13:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m(shift < \u001b[31m0\u001b[0m) (x.toString.substring(shift, x.length) + x.toString.padTo(shift, \u001b[31m\"\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    value length is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsybuvlx5.scala:13:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m(shift < \u001b[31m0\u001b[0m) (x.toString.substring(shift, x.length) + x.toString.padTo(shift, \u001b[31m\"\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b",
      "stdout": "",
      "timestamp": 1660029025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val r = x / (10l ** shift);\n        val s = x - (r * (10l ** shift));\n        if (s < 10l) s\"0$s\" else s.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppu6q382r.scala:12:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr\u001b[0m = x / (\u001b[31m10l\u001b[0m ** shift);\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ** is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029022
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val str = x.toString.reverse\n        val digits = str.substring(1, str.length-1)\n        val shiftDigits = digits.substring(0,shift)\n        val result = shiftDigits + str.substring(shift,str.length-1)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu_391px_.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshiftDigits\u001b[0m = digits.substring(\u001b[31m0\u001b[0m,shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu_391px_.scala:15:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = shiftDigits + str.substring(shift,str.length-\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val result = new collection.mutable.StringBuilder\n        val carry = 0L\n        val newValue = x >> shift\n        result ++= digits(newValue, shift, carry)\n        result.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp23fux0ni.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        result ++= digits(newValue, shift, carry)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: digits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029023
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var x = x.toString.reverse\n        var s = \"\"\n        for (i <- 0 until shift) {\n            s = (x dropRight(1l) + s).dropLeft((1l - i).toInt)\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmh0waydu.scala:12:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mx\u001b[0m = x.toString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvariable\u001b[0m \u001b[35mx\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmh0waydu.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029026
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        def circularShiftDigits(x : Long, shift : Long) : List[Long] = {\n            val retVal = new mutable.ListBuffer[Long]\n            val n = Math.min(x, Math.max(x, shift))\n            val l = Math.max(0, Math.min(n, Math.pow(2, shift + 1) - 1))\n            val m = Math.max(n, Math.pow(2, shift + 1))\n            var i = l\n            var j = m\n            while (i >= 0) {\n                retVal += i\n                i /= 10\n            }\n            while (j >= 0) {\n                retVal += j\n                j /= 10\n            }\n            retVal.toList.reverse\n        }\n        val digits = circularShiftDigits(x, shift)\n        var retVal = \"\"\n        var i = 0\n        var shiftDigit = 0\n        for (d <- digits) {\n            shiftDigit = shift % 10\n            if (i >= (digits.size - 1)) {\n                retVal += digits(i).asInstanceOf[String].charAt(shiftDigit)\n                retVal += digits(i).asInstanceOf[String].charAt(shiftDigit)\n                shiftDigit += 1\n                i -= 1\n            } else {\n                retVal += digits(i).asInstanceOf[String].charAt(shiftDigit)\n                shiftDigit += 1\n                i += 1\n            }\n        }\n        retVal\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvo5dk_vd.scala:13:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mretVal\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvo5dk_vd.scala:34:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m            shiftDigit = shift % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Long\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029027
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        def circularShiftHelper(x: Int, shift: Int): String = {\n            if (shift > x.length) {\n                return x.reverse\n            } else {\n                if (x.length <= shift) {\n                    return \"\"\n                }\n                val temp = x.substring(shift, x.length)\n                val reverse = circularShiftHelper(temp, shift + 1)\n                return reverse(x.substring(0, shift) + reverse(temp) + reverse)\n            }\n        }\n        circularShiftHelper(x, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8zxg2cfs.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mif\u001b[0m (shift > x.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value length is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8zxg2cfs.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                \u001b[33mreturn\u001b[0m x.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value reverse is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8zxg2cfs.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                \u001b[33mif\u001b[0m (x.length <= shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value length is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8zxg2cfs.scala:19:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mtemp\u001b[0m = x.substring(shift, x.length)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value substring is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8zxg2cfs.scala:19:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mtemp\u001b[0m = x.substring(shift, x.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     value length is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8zxg2cfs.scala:21:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                \u001b[33mreturn\u001b[0m reverse(x.substring(\u001b[31m0\u001b[0m, shift) + reverse(temp) + reverse)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value substring is not a member of Int\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8zxg2cfs.scala:24:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        circularShiftHelper(x, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m ",
      "stdout": "",
      "timestamp": 1660029029
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().reverse\n        var remainder = digits % shift\n        digits = digits - remainder\n        val newDigits = digits + remainder\n        if (newDigits > Integer.MAX_VALUE.toString().length)\n            digits.substring(0, digits.lastIndexOf(\".\"))\n        else\n            digits.substring(0, newDigits)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx2r2mojf.scala:13:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mremainder\u001b[0m = digits % shift\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue % is not a member of String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx2r2mojf.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        digits = digits - remainder\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue - is not a member of String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx2r2mojf.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mif\u001b[0m (newDigits > Integer.MAX_VALUE.toString().length)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    Int\n\u001b[31m   |\u001b[0m                        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx2r2mojf.scala:19:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            digits.substring(\u001b[31m0\u001b[0m, newDigits)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (newDigits : String)\n\u001b[31m   |\u001b[0m                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors f",
      "stdout": "",
      "timestamp": 1660029029
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x\n        val digits_reversed = if (shift > digits.length) digits.reverse.toString else digits.toString.reverse\n        val shift = shift.toInt\n        val result_digits = digits_reversed.reverse.foldLeft(\"\"){\n            (acc, _) =>\n                val cur = (acc + (if (shift > acc.length) \"\" else \" \"))\n                (cur + digits(shift).charAt(0))\n        }\n        if (shift > digits.length) result_digits(digits.length - shift) :: result_digits else result_digits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpboyp2dcw.scala:14:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shift.toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpboyp2dcw.scala:13:64 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits_reversed\u001b[0m = \u001b[33mif\u001b[0m (shift > digits.length) digits.reverse.toString \u001b[33melse\u001b[0m digits.toString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value reverse is not a member of Long\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpboyp2dcw.scala:18:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                (cur + digits(shift).charAt(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       \u001b[33mvalue\u001b[0m \u001b[35mdigits\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpboyp2dcw.scala:20:72 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mif\u001b[0m (shift > digits.length) result_digits(digits.length - shift) :: result_digits \u001b[33melse\u001b[0m result_digits\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value :: is not a member of String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpboyp2dcw.scala:20:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mif\u001b[0m (shift > digits.length) result_digits(digits.length - shift) :: result_digits \u001b[33melse\u001b[0m result_digits\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    value length is not a me",
      "stdout": "",
      "timestamp": 1660029028
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var res = 0\n        var curr = x\n        var tmp = 0\n        while(curr != 0){\n            tmp = curr % 10\n            res = res * 10 + tmp\n            curr = curr // 10\n        }\n        var res = res * shift\n        val digits = res % 10\n        var str = \"\"\n        var numDigits = 0 // number of digits in the result\n        while(str.isEmpty && numDigits < shift - 1){\n            str = digits(numDigits) + str\n            numDigits++\n        }\n        if(numDigits == 0){\n            str = digits(numDigits) + str\n        }\n        if(numDigits > shift){\n            str = str.substring(0,numDigits - shift)\n        }\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpj3bt1yzr.scala:26:23 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            numDigits++\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpj3bt1yzr.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mres\u001b[0m = res * shift\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mres is already defined as \u001b[33mvariable\u001b[0m \u001b[35mres\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj3bt1yzr.scala:16:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            tmp = curr % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Found:    Long\n\u001b[31m   |\u001b[0m                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpj3bt1yzr.scala:25:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            str = digits(numDigits) + str\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvalue\u001b[0m \u001b[35mdigits\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpj3bt1yzr.scala:29:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            str = digits(numDigits) + str\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvalue\u001b[0m \u001b[35mdigits\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj3bt1yzr.scala:32:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            str = str.substring(\u001b[31m0\u001b[0m,numDigits - s",
      "stdout": "",
      "timestamp": 1660029028
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var y = x >> shift\n        var result : String = null\n        for(i <- 0 until shift) {\n            result += (y % 10)\n            y = y / 10\n        }\n        if(shift > 0)\n            result += (reverse(y.toString.drop(shift)).reverse)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1y7kmyn.scala:14:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpz1y7kmyn.scala:19:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            result += (reverse(y.toString.drop(shift)).reverse)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz1y7kmyn.scala:19:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            result += (reverse(y.toString.drop(shift)).reverse)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1y7kmyn.scala:19:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            result += (reverse(y.toString.drop(shift)).reverse)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029028
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var result = \"\"\n        var shift = shift % x.length\n        var i = 0\n        while (shift > 0) {\n            if ((shift & 1) != 0) {\n                result += \"0\"\n            }\n            shift >>= 1\n        }\n        while (shift > 0) {\n            if ((shift & 1) != 0) {\n                result += \"1\"\n            }\n            shift >>= 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpkfq3f4vr.scala:13:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mshift\u001b[0m = shift % x.length\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvariable\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift == 0)\n            x.toString.reverse\n        else\n            circularShift(x.toString.reverse, shift - x.toString().length) + x.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzhj6mzyi.scala:15:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            circularShift(x.toString.reverse, shift - x.toString().length) + x.toString\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    String\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029028
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val shift = shift.toInt\n        var xString = \"\" + x\n        var shiftString = \"\" + shift\n        var digit = 0\n        var digitString = \"\"\n        var x = xString.toInt\n        var shift = shiftString.toInt\n        while (shift > 0) {\n            digit = x % 10\n            x = x / 10\n            digitString = digitString.concat(digit.toString)\n            shift = shift - 1\n        }\n        while ((shift > 0) && (xString.length < shiftString.length)) {\n            digit = x % 10\n            x = x / 10\n            digitString = digitString.concat(digit.toString)\n            shift = shift - 1\n        }\n        if (shift > 0) {\n            xString = digitString\n        }\n        if ((shift > 0) && ((xString.length + shift) > shiftString.length)) {\n            xString = xString.concat(digitString.reverse)\n        }\n        xString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpll1tme5b.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mshift\u001b[0m = shiftString.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mshift is already defined as \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpll1tme5b.scala:12:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shift.toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpll1tme5b.scala:17:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mx\u001b[0m = xString.toInt\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvariable\u001b[0m \u001b[35mxString\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpll1tme5b.scala:23:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            shift = shift - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val shift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpll1tme5b.scala:29:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m            shift = shift - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val shift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1660029025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (x.toString.length < shift) x.toString.reverse\n        else (x / (10 * shift)).floor.toString + x.toString.substring(x.toString.length - shift)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5vx3k_8y.scala:13:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33melse\u001b[0m (x / (\u001b[31m10\u001b[0m * shift)).floor.toString + x.toString.substring(x.toString.length - shift)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value floor is not a member of Long.\n\u001b[31m   |\u001b[0m      An extension method was tried, but could not be fully constructed:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m          doubleWrapper(x./(\u001b[31m10\u001b[0m.*(shift)))\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift == 0) \"\" else (x + x) % shift + circularShift(x, shift - Integer.digitCount(shift))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpz4w3_5u7.scala:12:83 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (shift == \u001b[31m0\u001b[0m) \u001b[31m\"\"\u001b[0m \u001b[33melse\u001b[0m (x + x) % shift + circularShift(x, shift - Integer.digitCount(shift))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue digitCount is not a member of object Integer - did you mean Integer.bitCount?\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029028
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if(shift > x.length){\n            val reversed = circularShift(x.toString.reverse, shift.toString.toInt)\n            reversed.reverse\n        } else {\n            var shiftDigit = shift % x.length\n            var digits = x % shiftDigit\n            var x = x - (digits * shiftDigit)\n            var res = \"\"\n            while (x > 0) {\n                digits += 1\n                if (digits > x.length) digits -= 1\n                res = res + digits.toString\n                x = x - (digits * shiftDigit)\n            }\n            res\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp1di8sv5.scala:12:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m(shift > x.length){\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value length is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1di8sv5.scala:13:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = circularShift(x.toString.reverse, shift.toString.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    String\n\u001b[31m   |\u001b[0m                                         Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpp1di8sv5.scala:18:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mx\u001b[0m = x - (digits * shiftDigit)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvariable\u001b[0m \u001b[35mx\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029029
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val shiftCount = x.toString.length / shift;\n        val shiftString = new Array[Char](shiftCount)\n        var j = 0;\n        var z = 0;\n        while (j < shiftCount) {\n            z = x * Math.pow(10, shiftCount-j-1);\n            shiftString(j) = ((z / (10l.toDouble)) % 10).toChar\n            j += 1\n        }\n        var x = new StringBuffer(x.toString)\n        for (i <- 0 until shiftCount)\n            x.setCharAt(i, shiftString(i))\n        x.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmptrnuuobp.scala:21:33 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mx\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mStringBuffer\u001b[0m(x.toString)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Recursive \u001b[33mvariable\u001b[0m \u001b[35mx\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        def shiftDigits(n : Long, shift : Long) : String = {\n            val result = \"\"\n            val shift = shift.toInt\n            while (n != 0) {\n                val tmp = n % 10\n                result += tmp\n                n /= 10\n            }\n            result.reverse.take(shift).reverse\n        }\n\n        def getDigit(n: Long) : String = n.toString.charAt(0)\n        val digits = x.getDigits.reverse\n\n        // Shift digits in both directions\n        for (h <- 1 to shift) {\n            val tmp = digits\n            digits = shiftDigits(digits.reverse, h)\n            digits += tmp\n        }\n        digits.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmphbb67onx.scala:14:24 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shift.toInt\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphbb67onx.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                result += tmp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphbb67onx.scala:18:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                n /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphbb67onx.scala:23:58 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mdef\u001b[0m \u001b[36mgetDigit\u001b[0m(\u001b[36mn\u001b[0m: \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = n.toString.charAt(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    Char\n\u001b[31m   |\u001b[0m                                         Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphbb67onx.scala:24:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = x.getDigits.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value getDigits is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphbb67onx.scala:27:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mfor\u001b[0m (h <- \u001b[31m1\u001b[0m to shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (shift : Lon",
      "stdout": "",
      "timestamp": 1660029030
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val m = x.length\n        val m = math.min(m, shift)\n        var result = 0\n        for (i <- 0 until m) {\n            val bit = (x & 1l).toInt\n            result |= bit << shift\n            shift -= 1\n            if (shift == 0) {\n                x >>= 1\n                shift += 1\n            }\n        }\n        (result reverse).asDigitString(10)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp3fgvn1tx.scala:24:23 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        (result reverse).asDigitString(\u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       expression expected but \u001b[31m')'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3fgvn1tx.scala:13:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mm\u001b[0m = math.min(m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mm is already defined as \u001b[33mvalue\u001b[0m \u001b[35mm\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3fgvn1tx.scala:12:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mm\u001b[0m = x.length\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value length is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3fgvn1tx.scala:18:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            shift -= \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value -= is not a member of Long - did you mean shift.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3fgvn1tx.scala:20:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                x >>= \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value >>= is not a member of Long - did you mean x.>=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3fgvn1tx.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                shift += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value += is not a member of Long - did you mean shift.!=?\n6 errors found\n",
      "stdout": "",
      "timestamp": 1660029030
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var result = \"\"\n        x match {\n            case 0 => result = \"0\"\n            case n => \n                while ((x % shift) != 0) {\n                    result += \"0\"\n                }\n                while ((x % shift) != 0) {\n                    x /= shift\n                }\n                x match {\n                    case 0 => result = \"0\"\n                    case n => result += (x % shift) + \"\"\n                }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwb72s1gu.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                    x /= shift\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value /= is not a member of Long - did you mean x.!=?\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029030
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString\n        val digitsLength = digits.length\n        if (shift > digitsLength) return digits.reverse\n        var carry = 0\n        val digitsShiftRight = digitsLength - (shift % digitsLength)\n        var resultDigits = ListBuffer[String]()\n        for (i <- 0 until digitsShiftRight) {\n            val digit = digits.charAt(i)\n            val newDigit = digit + (carry / 10)\n            val newCarry = carry % 10\n            val newDigitString = Integer.toString(newDigit)\n            if (newCarry > 0) resultDigits.append(newDigitString)\n            else resultDigits.append(digitString)\n            carry = newCarry\n        }\n        if (digitsLength > shift) resultDigits.append(digits.substring(digitsLength - shift))\n        else resultDigits.append(digits.substring(shift))\n        resultDigits.reverse.toString.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplp30kub1.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until digitsShiftRight) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (digitsShiftRight : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplp30kub1.scala:24:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33melse\u001b[0m resultDigits.append(digitString)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: digitString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplp30kub1.scala:27:71 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mif\u001b[0m (digitsLength > shift) resultDigits.append(digits.substring(digitsLength - shift))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Found:    Long\n\u001b[31m   |\u001b[0m                                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplp30kub1.scala:28:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33melse\u001b[0m resultDigits.append(digits.substring(shift))\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029032
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString).reverse.toList\n        if (shift > digits.size) {\n            digits.reverse\n        } else {\n            digits\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp38rh6o8m.scala:12:48 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = x.toString.reverse.grouped(shift).map(_.toString).reverse.toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029034
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val shifted = ((x shl shift) xor(x shr shift))\n        val reversed = shifted.reverse\n        (reversed.toString.dropRight(shift)).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqqkf336y.scala:12:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshifted\u001b[0m = ((x shl shift) xor(x shr shift))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value shl is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029035
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val s = scala.math.min(shift, x.toString().length())\n        (0 until s).map( i => x.toString().charAt(i) + x.toString().substring(i, i + s).reverse.charAt(0)).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp11fph4nf.scala:13:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        (\u001b[31m0\u001b[0m until s).map( \u001b[36mi\u001b[0m => x.toString().charAt(i) + x.toString().substring(i, i + s).reverse.charAt(\u001b[31m0\u001b[0m)).mkString\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (s : Long)\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp11fph4nf.scala:13:81 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        (\u001b[31m0\u001b[0m until s).map( \u001b[36mi\u001b[0m => x.toString().charAt(i) + x.toString().substring(i, i + s).reverse.charAt(\u001b[31m0\u001b[0m)).mkString\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Found:    Long\n\u001b[31m   |\u001b[0m                                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val len = math.min(x.toString.length.toInt, shift.toString.length.toInt)\n        val buf = new Array[Char](len)\n        var i = 0\n        var j = 0\n        val len = math.min(x.toString.length.toInt, shift.toString.length.toInt)\n        while (i < len) {\n            buf(j) = x.toString.charAt(i)\n            j += shift\n            i += 1\n        }\n        new String(buf.reverse)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnhw6p8mo.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlen\u001b[0m = math.min(x.toString.length.toInt, shift.toString.length.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mlen is already defined as \u001b[33mvalue\u001b[0m \u001b[35mlen\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnhw6p8mo.scala:19:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            j += shift\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        def digits(x : Long) : List[Long] = \n            scala.math.pow(10, x.toString.length).drop(shift).toList\n            .reverse\n        val digitsToShift  = digits(x) - digits(shift)\n        var res            = \"\"\n        for (i<- 0 to digitsToShift.length) {\n            if (digitsToShift < 0) res = res + digits(x(-digitsToShift))(i)\n            else res = res + digits(x)(i)\n        }\n        res ++ \"0\"\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqfme1gk4.scala:13:50 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            scala.math.pow(\u001b[31m10\u001b[0m, x.toString.length).drop(shift).toList\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value drop is not a member of Double\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqfme1gk4.scala:15:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigitsToShift\u001b[0m  = digits(x) - digits(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue - is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqfme1gk4.scala:18:54 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mif\u001b[0m (digitsToShift < \u001b[31m0\u001b[0m) res = res + digits(x(-digitsToShift))(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    \u001b[33mparameter\u001b[0m \u001b[35mx\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029040
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        // Create a list with the number of digits\n        val list = (1 to (math.log10(x.toLong) + 1)).map(i => x.toLong / 10.toInt)\n        val list = list.drop(list.length - shift)\n        var i = 0\n        list.foreach(_ => i += 1) // Increment i\n        val result = x.toString.drop(shift).reverse.drop(i).toString.reverse\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp83oer1xq.scala:14:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist\u001b[0m = list.drop(list.length - shift)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mlist is already defined as \u001b[33mvalue\u001b[0m \u001b[35mlist\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp83oer1xq.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist\u001b[0m = (\u001b[31m1\u001b[0m to (math.log10(x.toLong) + \u001b[31m1\u001b[0m)).map(\u001b[36mi\u001b[0m => x.toLong / \u001b[31m10\u001b[0m.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    Double\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp83oer1xq.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = x.toString.drop(shift).reverse.drop(i).toString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029039
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var x = x.toString.toInt;\n        var shift = shift.toString.toInt;\n        var digits = new mutable.ArrayBuffer(x)\n        while (shift > digits.size)\n            digits = digits.reverse\n        val shiftPower = 2L\n        var lastDigit : Long = digits(0)\n        var digit : Long = 0\n        for (i = 1 to digits.size) {\n            digit += digits.size - i\n            digits(i) = lastDigit + digit / shiftPower\n            lastDigit = digit\n            digit %= shiftPower\n        }\n        digits.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphg70p7up.scala:20:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m1\u001b[0m to digits.size) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               ')' expected, but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphg70p7up.scala:20:35 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mfor\u001b[0m (i = \u001b[31m1\u001b[0m to digits.size) {\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphg70p7up.scala:27:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '<-' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmphg70p7up.scala:12:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mx\u001b[0m = x.toString.toInt;\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvariable\u001b[0m \u001b[35mx\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmphg70p7up.scala:13:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mshift\u001b[0m = shift.toString.toInt;\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvariable\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphg70p7up.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdigits\u001b[0m = \u001b[33mnew\u001b[0m mutable.ArrayBuffer(x)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphg70p7up.scala:25:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m  ",
      "stdout": "",
      "timestamp": 1660029039
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var rem = x\n        for (i <- 0 until shift) {\n            rem = (rem / 10) + ((rem % 10) / 10).toDouble\n        }\n        rem.toString.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdxzs1q6y.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdxzs1q6y.scala:14:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            rem = (rem / \u001b[31m10\u001b[0m) + ((rem % \u001b[31m10\u001b[0m) / \u001b[31m10\u001b[0m).toDouble\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Found:    Double\n\u001b[31m   |\u001b[0m                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029039
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        // Implement here!\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptgoii_27.scala:11:57 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mcircularShift\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mshift\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Found:    Unit\n\u001b[31m   |\u001b[0m                                                        Required: String\n\u001b[31m12 |\u001b[0m        \u001b[34m// Implement here!\u001b[0m\n\u001b[31m13 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029037
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n       val digits = toDigits(x)\n       val digitsShifted = digits.take(shift)\n       val digitsShiftedReversed = digitsShifted.reverse\n       val result = digitsShiftedReversed.mkString(\"\")\n       result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsaio1fnf.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m       \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = toDigits(x)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: toDigits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029035
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n      val digits = x.toString\n      val res = \"\"\n      var carry = 1\n      for (i <- 0 until digits.length)\n        if (digits(i).isDigit) {\n          val digit = digits(i).toLong\n          val next = digit + shift\n          if (next > 9) {\n            val temp = next - 10\n            next += carry\n            carry = temp % 10\n          }\n          res += digits(i) + next.toString\n        }\n        else {\n          res += digits(i)\n          carry = 1\n        }\n      if (carry > 0) res += carry.toString\n      res\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnh4_ej04.scala:21:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            next += carry\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean next.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnh4_ej04.scala:22:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            carry = temp % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Long\n\u001b[31m   |\u001b[0m                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnh4_ej04.scala:24:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m          res += digits(i) + next.toString\n\u001b[31m\u001b[31m   |\u001b[0m          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          value += is not a member of String - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnh4_ej04.scala:27:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m          res += digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          value += is not a member of String - did you mean res.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnh4_ej04.scala:30:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m      \u001b[33mif\u001b[0m (carry > \u001b[31m0\u001b[0m) res += carry.toString\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value += is not a member of String - did you mean res.!=?\n5 errors found\n",
      "stdout": "",
      "timestamp": 1660029042
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n        digits.mkString(\", \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjwxur391.scala:12:48 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = x.toString.reverse.grouped(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029039
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n      var result = \"\"\n      var carry = 0\n      while (shift > 0) {\n        var temp = x\n        if ((temp % 10) != 0) {\n          temp += carry\n        }\n        temp = temp / 10\n        carry = temp % 10\n        result = temp + result\n        shift -= 1\n      }\n      if ((carry != 0) || (shift != 0)) {\n        result = result + carry\n      }\n      return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgly6tvq9.scala:20:16 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        carry = temp % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    Long\n\u001b[31m   |\u001b[0m                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgly6tvq9.scala:22:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        shift -= \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value -= is not a member of Long - did you mean shift.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029041
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        (x >>> shift) match {\n        case 0 => (0 until shift).map(_.toString).reduce(_ + _).mkString(\"\")\n        case _ =>\n            val length = scala.math.log10(x) + shift\n            (x >>> length).map(_.toString).reduce(_ + _).mkString(\"\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ebdarez.scala:13:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mcase\u001b[0m \u001b[31m0\u001b[0m => (\u001b[31m0\u001b[0m until shift).map(_.toString).reduce(_ + _).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp3ebdarez.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            (x >>> length).map(_.toString).reduce(_ + _).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m>>>\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mLong\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Long): Long\n\u001b[31m   |\u001b[0m (x: Int): Long\n\u001b[31m   |\u001b[0mmatch arguments ((length : Double))\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029041
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        def rotate(x : Long) : Long = x >>> shift \n        def shift(x : Long) : Long = x << shift \n        val s = x.toString.reverse\n        val r = s.reverse\n        val m = r.length - shift\n        if (m > 0)\n            r take (m) ++ r.drop(m + 1)\n        else\n            r\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpk8f2aqa0.scala:12:40 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mdef\u001b[0m \u001b[36mrotate\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mLong\u001b[0m = x >>> shift \n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m>>>\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mLong\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Long): Long\n\u001b[31m   |\u001b[0m (x: Int): Long\n\u001b[31m   |\u001b[0mmatch arguments (Long => Long)\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpk8f2aqa0.scala:13:39 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mdef\u001b[0m \u001b[36mshift\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mLong\u001b[0m = x << shift \n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m<<\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mLong\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Long): Long\n\u001b[31m   |\u001b[0m (x: Int): Long\n\u001b[31m   |\u001b[0mmatch arguments (Long => Long)\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpk8f2aqa0.scala:16:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mm\u001b[0m = r.length - shift\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m None of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m-\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m with types\n\u001b[31m   |\u001b[0m  (x: Double): Double\n\u001b[31m   |\u001b[0m  (x: Float): Float\n\u001b[31m   |\u001b[0m  (x: Long): Long\n\u001b[31m   |\u001b[0m  (x: Int): Int\n\u001b[31m   |\u001b[0m  (x: Char): Int\n\u001b[31m   |\u001b[0m  (x: Short): Int\n\u001b[31m   |\u001b[0m  (x: Byte): Int\n\u001b[31m   |\u001b[0m match arguments (Long => Long)\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029038
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val shift2 = shift >>> 1\n        val digits = (x % shift2).toString.reverse\n        val leftShiftDigits = (x - shift2)\n        if (leftShiftDigits.toString.length < digits.length)\n            digits + leftShiftDigits.toString else digits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqsn5c_3l.scala:19)\n\tat Problem.main(tmpqsn5c_3l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660029042
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val sx = x.toString.reverse\n        val sh = shift.toString.reverse\n        var out = new StringBuilder(sx)\n        val s = sx(sh)\n        for (i = sh + 1; i >= 0; i--)\n            out = out + s\n        out.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa3egt_jf.scala:16:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i = sh + \u001b[31m1\u001b[0m; i >= \u001b[31m0\u001b[0m; i--)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               ')' expected, but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa3egt_jf.scala:16:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i = sh + \u001b[31m1\u001b[0m; i >= \u001b[31m0\u001b[0m; i--)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpa3egt_jf.scala:16:36 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i = sh + \u001b[31m1\u001b[0m; i >= \u001b[31m0\u001b[0m; i--)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa3egt_jf.scala:15:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ms\u001b[0m = sx(sh)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    (sh : String)\n\u001b[31m   |\u001b[0m                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa3egt_jf.scala:16:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i = sh + \u001b[31m1\u001b[0m; i >= \u001b[31m0\u001b[0m; i--)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue foreach is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.Imp",
      "stdout": "",
      "timestamp": 1660029043
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var s = x.toString\n        for (i<- 1l..shift) {\n          s = swap(s, i)\n        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbnaemph3.scala:13:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i<- \u001b[31m1l\u001b[0m..shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    an identifier expected, but '.' found\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029036
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val sb = scala.collection.mutable.StringBuilder()\n        val digits = List('0','1','2','3','4','5','6','7','8','9')\n        var remainder = 0\n        while (x > 0) {\n            // Shift right of remainder\n            remainder = x % 10\n            x = x / 10\n            // Adjust remaining digit to move it to the front of the digit\n            if (remainder > shift) {\n                remainder -= digits.length\n            }\n            // Add the digit that just moved\n            sb ++= digits.apply(remainder)\n        }\n        // Return digits reversed\n        if (sb.length() > digits.length) {\n            sb.reverse\n        } else {\n            sb\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplvdbqp66.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            remainder = x % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    Long\n\u001b[31m   |\u001b[0m                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmplvdbqp66.scala:18:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            x = x / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmplvdbqp66.scala:24:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            sb ++= digits.apply(remainder)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m++=\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringBuilder\u001b[0m with types\n\u001b[31m   |\u001b[0m (s: String): (sb : StringBuilder)\n\u001b[31m   |\u001b[0m (xs: IterableOnce[Char]): (sb : StringBuilder)\n\u001b[31m   |\u001b[0mmatch arguments (Char)\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplvdbqp66.scala:28:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            sb.reverse\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    StringBuilder\n\u001b[31m   |\u001b[0m            Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplvdbqp66.scala:30:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            sb\n\u001b[31m\u001b[31m   |\u001b[0m            ^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (sb : StringBuilder)\n\u001b[31m   |\u001b[0m            Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1660029042
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.map(_.toInt)\n        val digitSize = Math.max(digits.length - shift, 0)\n        val result = new StringBuilder\n        digits.slice(0, digitSize).foreach(result.append _)\n        digits.slice(digitSize).foreach(result.append _)\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpew3i28dj.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        digits.slice(\u001b[31m0\u001b[0m, digitSize).foreach(result.append _)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (digitSize : Long)\n\u001b[31m   |\u001b[0m                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpew3i28dj.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        digits.slice(digitSize).foreach(result.append _)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (digitSize : Long)\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029043
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var i = x\n        val d = (x % (x+1l))\n        var str = d + ((x - (d+(x+(1l*shift))) % (x+1l)).toString.reverse + ((x - (d+(x+(1l*shift+2l))) % (x+1l)).toString.reverse)\n        var shifts = (x+(1l*shift))/(x+1l).toInt\n        val shiftStr = (x+1l*shift).toInt\n        var k = x+1l*shift\n        while(str.length < shifts){\n            if(i > (x+1l)){\n                shifts -= 1\n                k -= 1\n            }\n            i = i + (k - x).toInt\n            str = str + i.toString\n        }\n        str = str.reverse\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4jtnm2j6.scala:15:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mshifts\u001b[0m = (x+(\u001b[31m1l\u001b[0m*shift))/(x+\u001b[31m1l\u001b[0m).toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m        ')' expected, but 'var' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4jtnm2j6.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029042
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var res : String = \"\"\n        // Compute the number of digits in x\n        var digits = math.min(math.max((x.toString.length), 1), 10)\n        // Shift the digits right by shift\n        if (shift > digits) {\n            for ( var i = digits - shift; i > 0; i-- ) {\n                res += x.toString.charAt(x.toString.length - i - 1)\n            }\n        } else {\n            for ( var i = digits; i > shift; i-- ) {\n                res += x.toString.charAt(x.toString.length - i - 1)\n            }\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppz3a9fd3.scala:17:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mfor\u001b[0m ( \u001b[33mvar\u001b[0m i = digits - shift; i > \u001b[31m0\u001b[0m; i-- ) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppz3a9fd3.scala:17:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mfor\u001b[0m ( \u001b[33mvar\u001b[0m i = digits - shift; i > \u001b[31m0\u001b[0m; i-- ) {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppz3a9fd3.scala:17:53 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mfor\u001b[0m ( \u001b[33mvar\u001b[0m i = digits - shift; i > \u001b[31m0\u001b[0m; i-- ) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppz3a9fd3.scala:21:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mfor\u001b[0m ( \u001b[33mvar\u001b[0m i = digits; i > shift; i-- ) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppz3a9fd3.scala:21:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mfor\u001b[0m ( \u001b[33mvar\u001b[0m i = digits; i > shift; i-- ) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppz3a9fd3.scala:21:49 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mfor\u001b[0m ( \u001b[33mvar\u001b[0m i = digits; i > shift; i-",
      "stdout": "",
      "timestamp": 1660029045
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n      val shift = math.min(x.toString.length, shift)\n      val remainder = x % 10\n      x /=10\n      var reversed = 0\n      for(i <- 0 to shift until (shift+1-i)) {\n        reversed += (10 * remainder) + i\n      }\n      val result = reversed.toString.reverse\n      if(result < 0) \"0\"+result else result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmplp1ky5mz.scala:12:46 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m      \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = math.min(x.toString.length, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplp1ky5mz.scala:14:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m      x /=\u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value /= is not a member of Long - did you mean x.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplp1ky5mz.scala:16:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m      \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m to shift until (shift+\u001b[31m1\u001b[0m-i)) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue until is not a member of scala.collection.immutable.Range.Inclusive - did you mean Inclusive.unzip?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplp1ky5mz.scala:20:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m      \u001b[33mif\u001b[0m(result < \u001b[31m0\u001b[0m) \u001b[31m\"0\"\u001b[0m+result \u001b[33melse\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Found:    (\u001b[31m0\u001b[0m : Int)\n\u001b[31m   |\u001b[0m                  Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029046
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val str = (x / (Math.pow(10, shift)) % 10) match {\n            case 0 => \"\"\n            case i => Integer.toString(i)\n        }\n        circularShift(x, shift + 1l) match {\n            case \"\"  => str\n            case i  => i + str\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr16ro9yw.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mcase\u001b[0m i => Integer.toString(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (i : Double)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029047
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        // Compute number of digits using log base 10\n        val digits = math.log(x, 10).toInt\n        val result: List[String] = for (i <- 0 until digits) yield {\n            val digit = math.mod(x, 10).toInt\n            val bitShift = shift % 10\n            val carry = (digit + (bitShift / 2)) % 10\n            val newDigit = (carry + digit).toInt\n            Integer.toString(newDigit)\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkzdjil8d.scala:13:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = math.log(x, \u001b[31m10\u001b[0m).toInt\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (Long, Int)\n\u001b[31m   |\u001b[0m                              Required: Double\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkzdjil8d.scala:15:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = math.mod(x, \u001b[31m10\u001b[0m).toInt\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value mod is not a member of math\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkzdjil8d.scala:21:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        result.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mString\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029048
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val n = x.toString.toInt\n        val shifted = (n * shift) `mod` 10\n        val reversed = shifted + n\n        val s = reversed.toString.reverse\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk5yvrv0j.scala:13:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshifted\u001b[0m = (n * shift) `mod` \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue mod is not a member of Long, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.BigInt.long2bigInt\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029048
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val n = x.toString.length\n        val shift = if (shift > n) n-1 else shift\n        var xStr = \"\" + x\n        var yStr = \"\"\n        var i = 0\n        while (i < shift) {\n            xStr = xStr.substring(1) + xStr.substring(0, xStr.length-1)\n            yStr = yStr.substring(1) + yStr.substring(0, yStr.length-1)\n            i = i + 1\n        }\n        xStr = xStr.substring(1) + yStr\n        xStr\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp7kp00ck2.scala:13:24 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = \u001b[33mif\u001b[0m (shift > n) n-\u001b[31m1\u001b[0m \u001b[33melse\u001b[0m shift\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp7kp00ck2.scala:13:44 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = \u001b[33mif\u001b[0m (shift > n) n-\u001b[31m1\u001b[0m \u001b[33melse\u001b[0m shift\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029045
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = Integer.toString(x).asDigitIterator\n        val shiftDigits = digits.length.toLong - shift.toLong\n        if(shiftDigits > 0) digits = digits.drop(shiftDigits)\n        else digits = digits.reverse\n        for(d <- digits) yield d\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuo7ulpqm.scala:12:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdigits\u001b[0m = Integer.toString(x).asDigitIterator\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (x : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029049
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x % 10\n        val remainder = x / 10\n        var newVal = remainder\n        var shiftLeft = shift\n        var shiftRight = shift - 1\n        while (shiftLeft > 0 && shiftRight > 0 && shiftLeft <= shiftRight) {\n            if (digits(shiftLeft) >= digits(shiftRight)) {\n                newVal = digits(shiftRight)\n                shiftRight -= 1\n            } else {\n                newVal = digits(shiftLeft)\n                shiftLeft += 1\n            }\n        }\n        if (shiftLeft > 0) newVal += digits(shiftLeft)\n        if (shiftRight > 0) newVal += digits(shiftRight)\n        val newStr = newVal + digits(0)\n        return newStr\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqump8uka.scala:18:16 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mif\u001b[0m (digits(shiftLeft) >= digits(shiftRight)) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mvalue\u001b[0m \u001b[35mdigits\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqump8uka.scala:19:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                newVal = digits(shiftRight)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         \u001b[33mvalue\u001b[0m \u001b[35mdigits\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqump8uka.scala:22:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                newVal = digits(shiftLeft)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         \u001b[33mvalue\u001b[0m \u001b[35mdigits\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqump8uka.scala:26:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mif\u001b[0m (shiftLeft > \u001b[31m0\u001b[0m) newVal += digits(shiftLeft)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqump8uka.scala:26:37 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mif\u001b[0m (shiftLeft > \u001b[31m0\u001b[0m) newVal += digits(shiftLeft)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvalue\u001b[0m \u001b[35mdigits\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqump8uka.scala:27:35 ------------------------\u001b[0m",
      "stdout": "",
      "timestamp": 1660029051
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var shiftByOne = shift.toInt\n        var x = 0\n        var result = \"\"\n        while (x > 0) {\n            x = x shl shiftByOne\n            result += x.toString\n            shiftByOne -= 1\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5mqqzvp6.scala:16:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            x = x shl shiftByOne\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value shl is not a member of Int\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029050
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val radix = 1l\n        val shiftDigit = shift % radix\n        var result = \"\"\n        var index = 0\n        while (x * radix <= shift)\n            x = x * radix\n        if (shiftDigit < radix)\n            while (x / (radix - (shiftDigit * radix)) > radix)\n                x /= radix\n            var remainder = x % radix\n            x /= radix\n            result = remainder + result\n            while (x != 0) {\n                remainder = x % radix\n                result = remainder + result\n                x /= radix\n            }\n            if (shiftDigit < radix)\n                result = result + (shiftDigit * radix.toString)\n            else\n                result = result + shiftDigit.toString\n        else\n            while (x / (radix * radix) > radix)\n                x /= radix\n            var remainder = x % radix\n            x /= radix\n            result = remainder + result\n            while (x != 0) {\n                remainder = x % radix\n                result = remainder + result\n                x /= radix\n            }\n            if (shiftDigit < radix)\n                result = result + (shiftDigit * radix.toString)\n            else\n                result = result + shiftDigit.toString\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpij4pyaqs.scala:17:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            x = x * radix\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpij4pyaqs.scala:20:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                x /= radix\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean x.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpij4pyaqs.scala:22:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            x /= radix\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean x.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpij4pyaqs.scala:27:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                x /= radix\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean x.!=?\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpij4pyaqs.scala:30:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                result = result + (shiftDigit * radix.toString)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m*\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mLong\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Double\n\u001b[31m   |\u001b[0m (x: Float): Float\n\u001b[31m   |\u001b[0m (x: Long): Long\n\u001b[31m   |\u001b[0m (x: Int): Long\n\u001b[31m   |\u001b[0m (x: Char): Long\n\u001b[31m   |\u001b[0m (x: Short): Long\n\u001b[31m   |\u001b[0m (x: Byte): Long\n\u001b[31m   |\u001b[0mmatch arguments (String)\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpij4pyaqs.scala:35:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m                x /= radix\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean x.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpij4pyaqs.sca",
      "stdout": "",
      "timestamp": 1660029053
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var ret = new StringBuilder\n        var rem = x\n        while (shift > 0) {\n            shift -= 1\n            rem = rem / 10\n            ret = ret + rem\n        }\n        if (ret == x) {\n            ret = ret + \"\"\n        }\n        return ret.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdj5fugq8.scala:15:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            shift -= \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value -= is not a member of Long - did you mean shift.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdj5fugq8.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            ret = ret + rem\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of StringBuilder, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdj5fugq8.scala:19:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mif\u001b[0m (ret == x) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m Values of types StringBuilder and Long cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdj5fugq8.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            ret = ret + \u001b[31m\"\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of StringBuilder, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029053
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val len = (x.toString.length + shift)\n        val str = (0 to len).map(i => x.toString.charAt(len - 1 - i)).mkString(\"\")\n        return str.substring(0, str.size - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9sd_cs94.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mstr\u001b[0m = (\u001b[31m0\u001b[0m to len).map(\u001b[36mi\u001b[0m => x.toString.charAt(len - \u001b[31m1\u001b[0m - i)).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (len : Long)\n\u001b[31m   |\u001b[0m                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9sd_cs94.scala:13:56 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mstr\u001b[0m = (\u001b[31m0\u001b[0m to len).map(\u001b[36mi\u001b[0m => x.toString.charAt(len - \u001b[31m1\u001b[0m - i)).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Found:    Long\n\u001b[31m   |\u001b[0m                                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029053
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val stringifiedLong = x.toString\n        val numDigits = stringifiedLong.length\n        val newNumDigits = numDigits + shift\n        val newDigits = stringifiedLong.substring(0,numDigits) + stringifiedLong.substring(numDigits, newNumDigits)\n        newDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50s3jnwz.scala:15:102 -------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnewDigits\u001b[0m = stringifiedLong.substring(\u001b[31m0\u001b[0m,numDigits) + stringifiedLong.substring(numDigits, newNumDigits)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                      ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    (newNumDigits : Long)\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029052
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n      val numStr = x.toString.toInt // Convert long to string\n      val digits = numStr.length // # of digits\n      val shift = shift % digits // Get new shift\n      val shifted = numStr.dropRight(digits-shift) // Drop shifted digits off the end\n      shifted.reverse+shifted.take(shift).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp20x28a8x.scala:13:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m      \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = numStr.length \u001b[34m// # of digits\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value length is not a member of Int\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp20x28a8x.scala:14:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m      \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shift % digits \u001b[34m// Get new shift\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp20x28a8x.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m      \u001b[33mval\u001b[0m \u001b[36mshifted\u001b[0m = numStr.dropRight(digits-shift) \u001b[34m// Drop shifted digits off the end\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value dropRight is not a member of Int\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029052
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.toInt\n        val shift = shift.toInt\n        val shifted = (x << shift) >> shift\n        val result = (shifted / 10) + digits.toString\n        result += digits.toString.reverse\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp0lx9wucn.scala:13:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shift.toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029048
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xChar = x.toCharArray\n        var y = xChar.foldLeft(\"\")((b, c) => b + xChar(b) + xChar(c))\n        var i = 0\n        while (i < shift) {\n            i = i + 1\n            y = y + xChar(i - 1)\n        }\n        y.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmtjm5i__.scala:12:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxChar\u001b[0m = x.toCharArray\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value toCharArray is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029054
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val res = new StringBuilder\n        var carry = 0\n        for (i <- 0 until shift)\n            res.append(if (carry >= x) x.toString.charAt(i) + 1 else x.toString.charAt(i))\n            carry = x % 10\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb6faxmrr.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb6faxmrr.scala:16:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            carry = x % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Long\n\u001b[31m   |\u001b[0m                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb6faxmrr.scala:17:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        res\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (res : StringBuilder)\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029054
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val radix = 10\n        val digits = x.toString.reverse\n        if (shift > radix) {\n            return digits.reverse\n        }\n        var shiftDigits = digits.substring(shift, digits.length)\n        var numDigits = digits.length\n        var digitsShifted = digits - shiftDigits\n        var numShiftedDigits = 0\n        var numToShift = digits.length\n        var nextDigit = 0\n        while (numToShift > numShiftedDigits + 1) {\n            numToShift -= 1\n            shiftDigits = shiftDigits.substring(1) + digits(nextDigit)\n            numShiftedDigits += 1\n            nextDigit += 1\n        }\n        while (digitsShifted.length <= numShiftedDigits) {\n            digitsShifted = digitsShifted + \"0\"\n        }\n        digitsShifted + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfvp12sdo.scala:17:43 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mshiftDigits\u001b[0m = digits.substring(shift, digits.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfvp12sdo.scala:19:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdigitsShifted\u001b[0m = digits - shiftDigits\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue - is not a member of String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029056
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val str = Integer.toString x\n        val len = str.length\n        var remain = len - shift\n        var shift = len - remain\n        if (shift == 0)\n            return str\n        val res = new StringBuilder\n        while (shift > 0)\n            res.insert(0, str.charAt(shift))\n            shift -= 1\n        res.insert(0, str.charAt(remain))\n        return res.toString()\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp28j7gkzi.scala:12:36 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mstr\u001b[0m = Integer.toString x\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                          expression expected but \u001b[31mend of statement\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029051
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n      val digits = x.toString.reverse.grouped(shift)\n      val shiftRight = digits.drop(1)\n      val shiftLeft = new StringBuilder(shiftRight.toString)\n      shiftLeft.reverse().append(digits.last).toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph8z7t10t.scala:12:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m      \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = x.toString.reverse.grouped(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmph8z7t10t.scala:15:23 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m      shiftLeft.reverse().append(digits.last).toString\n\u001b[31m\u001b[31m   |\u001b[0m      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringBuilder\u001b[0m: (i: Int): Char\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var shift : Long = shift\n        var result : String = \"\"\n        while (shift > 0) {\n            val digit = (x % 10).toString // get the last digit\n            x /= 10\n            result += digit\n            if (shift > 1) {\n                shift -= 1\n                val lastDigit = (x % 10).toString // get the last digit\n                x /= 10\n                result += lastDigit\n            }\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpisk3iuq0.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            x /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean x.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpisk3iuq0.scala:21:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                x /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean x.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029056
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = scala.math.mod(x.abs, Math.pow(10, shift.toInt))\n        val length = digits.toString.length\n        val reverse = if (shift > length) digits else digits.reverse\n        reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_5hfwbvl.scala:12:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = scala.math.mod(x.abs, Math.pow(\u001b[31m10\u001b[0m, shift.toInt))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value mod is not a member of math\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString.reverse\n        val len = s.length\n        val mod = (len + shift - 1) % len\n        var result = \"\"\n        for(i <- 0 until len) {\n            result += (s.charAt(i) << shift)\n            shift += len\n        }\n        return result + s.charAt(mod)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxhr3zz1k.scala:18:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            shift += len\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean shift.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxhr3zz1k.scala:20:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mreturn\u001b[0m result + s.charAt(mod)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (mod : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029057
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        def shiftDigits(x: Long, shift: Long) : String = {\n            def shiftDigit(x: Long, shift: Long): String = {\n                if (x>0) {\n                    if (shift<digit.length) {\n                        digit(shift) := x%10\n                        x := x/10\n                        shift := shift+1\n                        shiftDigits(x, shift)\n                    } else {\n                        digit(shift) := x%10\n                        shiftDigits(x/10, shift-1)\n                    }\n                } else {\n                    if (shift<digit.length) {\n                        digit(shift) := x%10\n                        shiftDigits(x/10, shift-1)\n                    } else {\n                        digit(shift) := x%10\n                        shiftDigits(x, shift)\n                    }\n                }\n            }\n            var digit = Array.fill(shift)(0)\n            shiftDigits(x, shift)\n            digit.toList.mkString(\"\")\n        }\n        var digit = Array.fill(shift)(0)\n        shiftDigits(x, shift)\n        digit.toList.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1ti553b5.scala:34:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mdigit\u001b[0m = Array.fill(shift)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1ti553b5.scala:16:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                        digit(shift) := x%\u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1ti553b5.scala:17:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                        x := x/\u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value := is not a member of Long - did you mean x.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1ti553b5.scala:18:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                        shift := shift+\u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value := is not a member of Long - did you mean shift.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1ti553b5.scala:21:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                        digit(shift) := x%\u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1ti553b5.scala:26:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b",
      "stdout": "",
      "timestamp": 1660029059
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xDigitsLength = x.toString.length\n        val shiftDigitsLength = shift.toString.length\n\n        var newString = \"\"\n        var newNum = x.toLong\n\n        var carry = 0\n        var digits = \"\"\n\n        for (i <- 0 until xDigitsLength) {\n            digits = x.toString.charAt(i) + digits\n            if (carry > 0) {\n                carry = digits.length % shiftDigitsLength\n                if (carry > 0) {\n                    digits += \"0\"\n                }\n                newString += digits\n            } else {\n                carry = 0\n                newString += digits\n            }\n        }\n        // Handle the case where the shift is bigger than the digit's length.\n        if (carry > 0) {\n            newString += \"0\" * carry\n        }\n        if (newString.length < shiftDigitsLength) {\n            newString = newString.reverse\n        }\n\n        return newString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa6akj51q.scala:45)\n\tat Problem.main(tmpa6akj51q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660029059
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).reverse\n        if (digits.isEmpty) {\n            return x.toString\n        }\n        digits.take(shift).foldLeft(\"\") { (x, digit) => x ++ digit }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn7hgoqt7.scala:12:48 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = x.toString.reverse.grouped(shift).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029059
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n        val digitsCount = digits.length\n        val shiftCount = shift.toString.length\n        val shift = shiftCount - shiftCount.toInt\n        if (shift < 0)\n            digits.reverse.slice(shiftCount, digits.length)\n        else\n            digits.slice(shift, digits.length)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmps6s9qlvy.scala:15:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shiftCount - shiftCount.toInt\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvalue\u001b[0m \u001b[35mshiftCount\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029057
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n       val digits = x.toString.reverse\n       val shift = shift.toString.reverse\n       digits.reverse.slice(shift, digits.length).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpsso81nvd.scala:13:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m       \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shift.toString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029056
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = BigInt(x)\n        val n = BigInt(shift)\n        val temp = new Array[BigInt](digits.toString.length)\n        val temp2 = new Array[BigInt](digits.toString.length)\n\n        digits.toString.reverse.take(n).foreach(x => temp(digits.toString.length - 1 - x)) //reverse the digits to avoid losing leading 0s\n        for (i <- 0 until digits.toString.length - n) {\n            temp2(i) = temp(i + n)\n        }\n        val result = BigInt(temp2.reverse).toString(2)\n\n        //now we need to reverse the result and lose the leading 0\n        if (result.length < digits.toString.length)\n            result = (\"0\" * (digits.toString.length - result.length) + result)\n        else\n            result = result.reverse\n\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppcsbj3wg.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        digits.toString.reverse.take(n).foreach(\u001b[36mx\u001b[0m => temp(digits.toString.length - \u001b[31m1\u001b[0m - x)) \u001b[34m//reverse the digits to avoid losing leading 0s\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (n : BigInt)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppcsbj3wg.scala:18:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until digits.toString.length - n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    BigInt\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppcsbj3wg.scala:19:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            temp2(i) = temp(i + n)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    BigInt\n\u001b[31m   |\u001b[0m                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmppcsbj3wg.scala:21:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = BigInt(temp2.reverse).toString(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mBigInt\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: java.math.BigInteger): BigInt\n\u001b[31m   |\u001b[0m (x: String, radix: Int): BigInt\n\u001b[31m   |\u001b[0m (x: String): BigInt\n\u001b[31m   |\u001b[0m (numbits: Int, rnd: scala.util.Random): BigInt\n\u001b[31m   |\u001b[0m (bitlength: Int, certainty: Int, rnd: scala.ut",
      "stdout": "",
      "timestamp": 1660029061
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        def shift(i: Int, n: Int) = i + (n >> i)\n        def digits(x: Long): List[Int] = x match {\n            case 0 => List(0)\n            case n => List((n shr 0).toInt)\n        }\n        val length = digits(x).length\n        val x = x shr shift\n        val y = x % 10\n        val yList = digits(y)\n        val yListLength = yList.length\n        val firstDigit = shift(yListLength - 1, length)\n        val result = digits(x)\n        val secondDigit = shift(yListLength - 2, length)\n        result ::: (firstDigit ++ secondDigit :: result)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4ybgsopg.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mcase\u001b[0m n => List((n shr \u001b[31m0\u001b[0m).toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value shr is not a member of Long\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp4ybgsopg.scala:18:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = x shr shift\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mx\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4ybgsopg.scala:25:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        result ::: (firstDigit ++ secondDigit :: result)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value ++ is not a member of Int\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029061
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val length = x.toString.length\n        var res = \"\"\n        for (i <- 0 to length-1){\n            res += x.toString.charAt(i) + x.toString.charAt(length+1-i)\n        }\n        val shift1 = length - shift\n        if (shift1 < 0) res += x.toString.charAt(shift1)\n        if (shift1 > 0) res += x.toString.charAt(shift1-1)\n        if (shift1 > 0) res += x.toString.charAt(0)\n        if (shift1 < 0) res += x.toString.charAt(-shift1)\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr81ota0h.scala:18:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mif\u001b[0m (shift1 < \u001b[31m0\u001b[0m) res += x.toString.charAt(shift1)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr81ota0h.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mif\u001b[0m (shift1 < \u001b[31m0\u001b[0m) res += x.toString.charAt(shift1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    (shift1 : Long)\n\u001b[31m   |\u001b[0m                                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr81ota0h.scala:19:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mif\u001b[0m (shift1 > \u001b[31m0\u001b[0m) res += x.toString.charAt(shift1-\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr81ota0h.scala:19:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mif\u001b[0m (shift1 > \u001b[31m0\u001b[0m) res += x.toString.charAt(shift1-\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    Long\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr81ota0h.scala:21:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mif\u001b[0m (shift1 < \u001b[31m0\u001b[0m) res += x.toString.charAt(-shift1)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E007] Type M",
      "stdout": "",
      "timestamp": 1660029064
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var str = String.valueOf(x)\n        var res = (str.length + shift) - x.length\n        if (res < 0) res = res+str.length\n        str = str.substring(0,res) + str.substring(res,str.length)\n        if (str.length == 0) str = \"0\"\n        str = str.substring(0,str.length-shift) + str.substring(str.length-shift,str.length)\n        str = str.substring(0,shift) + str.substring(shift,str.length)\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv7l6f67n.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mres\u001b[0m = (str.length + shift) - x.length\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    value length is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv7l6f67n.scala:17:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        str = str.substring(\u001b[31m0\u001b[0m,str.length-shift) + str.substring(str.length-shift,str.length)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    Long\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv7l6f67n.scala:17:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        str = str.substring(\u001b[31m0\u001b[0m,str.length-shift) + str.substring(str.length-shift,str.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Found:    Long\n\u001b[31m   |\u001b[0m                                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv7l6f67n.scala:18:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        str = str.substring(\u001b[31m0\u001b[0m,shift) + str.substring(shift,str.length)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv7l6f67n.scala:18:53 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        str = str.substring(\u001b[31m0\u001b[0m,shift) + str.substring(shift,str.l",
      "stdout": "",
      "timestamp": 1660029064
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = (x % 10).toString.reverse\n        val num = x\n        // If shift > num digits, reverse digits from right\n        if(shift > digits.length) digits = digits.reverse\n        val shift = x - num\n        val result = digits + digits.drop(shift)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpp8m4lepr.scala:15:41 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mif\u001b[0m(shift > digits.length) digits = digits.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Reassignment to val digits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp8m4lepr.scala:17:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits + digits.drop(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029065
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = Array[Char](x)\n        val shiftedDigits = Array.tabulate(shift){i => digits((digits.length - i) % digits.length)}.mkString.reverse\n        digits.dropRight(shift).append(shiftedDigits)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgexg4n4q.scala:12:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = Array[\u001b[35mChar\u001b[0m](x)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (x : Long)\n\u001b[31m   |\u001b[0m                                 Required: Char\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgexg4n4q.scala:13:43 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshiftedDigits\u001b[0m = Array.tabulate(shift){\u001b[36mi\u001b[0m => digits((digits.length - i) % digits.length)}.mkString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgexg4n4q.scala:14:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        digits.dropRight(shift).append(shiftedDigits)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029064
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val shifted = x.asInstanceOf[String].toList.take(shift)\n        val shiftedRight = shifted.reverse.take(shift)\n        shiftedRight.reverse.mkString(\"\") + shiftedRight.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppku4ood5.scala:12:57 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshifted\u001b[0m = x.asInstanceOf[\u001b[35mString\u001b[0m].toList.take(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppku4ood5.scala:13:48 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshiftedRight\u001b[0m = shifted.reverse.take(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029065
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length)\n            x.toString.reverse\n        else\n            val digits = x.toString.reverse.grouped(shift).toList\n            val digit = digits.head\n            val rem = digits.tail.foldLeft(0) {\n                case (acc, digit) =>\n                    if (acc > digit) acc - digit\n                    else acc + (digit % 10)\n            }\n            (rem + digit).toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5e8jgrkw.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = x.toString.reverse.grouped(shift).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp5e8jgrkw.scala:19:28 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    \u001b[33mif\u001b[0m (acc > digit) acc - digit\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m None of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m>\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m with types\n\u001b[31m   |\u001b[0m  (x: Double): Boolean\n\u001b[31m   |\u001b[0m  (x: Float): Boolean\n\u001b[31m   |\u001b[0m  (x: Long): Boolean\n\u001b[31m   |\u001b[0m  (x: Int): Boolean\n\u001b[31m   |\u001b[0m  (x: Char): Boolean\n\u001b[31m   |\u001b[0m  (x: Short): Boolean\n\u001b[31m   |\u001b[0m  (x: Byte): Boolean\n\u001b[31m   |\u001b[0m match arguments ((digit : String))\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp5e8jgrkw.scala:19:41 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    \u001b[33mif\u001b[0m (acc > digit) acc - digit\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m None of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m-\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m with types\n\u001b[31m   |\u001b[0m  (x: Double): Double\n\u001b[31m   |\u001b[0m  (x: Float): Float\n\u001b[31m   |\u001b[0m  (x: Long): Long\n\u001b[31m   |\u001b[0m  (x: Int): Int\n\u001b[31m   |\u001b[0m  (x: Char): Int\n\u001b[31m   |\u001b[0m  (x: Short): Int\n\u001b[31m   |\u001b[0m  (x: Byte): Int\n\u001b[31m   |\u001b[0m match arguments ((digit : String))\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5e8jgrkw.scala:20:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                    \u001b[33melse\u001b[0m acc + (digit % \u001b[31m10\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue % is not ",
      "stdout": "",
      "timestamp": 1660029066
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.getClass\n        val digitCount = digits.length\n        val shiftCount = shift.getClass\n        val shiftDigitCount = shiftCount.length\n        val shifted = digits shl shiftDigitCount\n        val shifted = shifted.toString + digits.drop(shiftDigitCount)\n        if (shifted.length < digitCount) {\n            shifted.reverse\n        } else {\n            shifted\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwwezdw1b.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshifted\u001b[0m = shifted.toString + digits.drop(shiftDigitCount)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mshifted is already defined as \u001b[33mvalue\u001b[0m \u001b[35mshifted\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwwezdw1b.scala:13:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigitCount\u001b[0m = digits.length\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value length is not a member of Class[Long]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwwezdw1b.scala:15:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshiftDigitCount\u001b[0m = shiftCount.length\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             value length is not a member of Class[Long]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwwezdw1b.scala:16:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshifted\u001b[0m = digits shl shiftDigitCount\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value shl is not a member of Class[Long]\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029065
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = scala.math.pow(x, shift.toInt)\n        val res = digits % 10\n        val shiftDigits = scala.math.pow(10, shift.toInt)\n        val shiftDigitLen = digits.length\n        val shiftDigit = digits(0) // in scala, digits is indexed from zero, not from 1\n        val digitsList = scala.collection.mutable.ListBuffer[String]()\n        digitsList.append(shift + res.toInt)\n        while (shiftDigit > 0){\n            digitsList.append(shiftDigit % 10)\n            shiftDigit = (shiftDigit-1)/10\n        }\n        res.toString.reverse + digitsList.toString.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpljgkqkzs.scala:15:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshiftDigitLen\u001b[0m = digits.length\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value length is not a member of Double\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpljgkqkzs.scala:16:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshiftDigit\u001b[0m = digits(\u001b[31m0\u001b[0m) \u001b[34m// in scala, digits is indexed from zero, not from 1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         \u001b[33mvalue\u001b[0m \u001b[35mdigits\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpljgkqkzs.scala:18:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        digitsList.append(shift + res.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mappend\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mBuffer\u001b[0m with types\n\u001b[31m   |\u001b[0m (elems: String*): (digitsList : scala.collection.mutable.ListBuffer[String])\n\u001b[31m   |\u001b[0m (elem: String): (digitsList : scala.collection.mutable.ListBuffer[String])\n\u001b[31m   |\u001b[0mmatch arguments (Long)\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpljgkqkzs.scala:21:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            shiftDigit = (shiftDigit-\u001b[31m1\u001b[0m)/\u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val shiftDigit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029065
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) {\n            x.toString.reverse\n        } else {\n            val shift = shift.abs\n            val digits = x.toString\n            var index = 0\n            var resultString = \"\"\n            while (index < (digits length)) {\n                resultString += (digits(index) << shift)\n                index += 1\n                shift -= 1\n            }\n            resultString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp45t8pjax.scala:19:41 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mwhile\u001b[0m (index < (digits length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m')'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp45t8pjax.scala:15:24 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shift.abs\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029062
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digitsSize = log10(x.toInt) + 1\n        var digits = List.fill(digitsSize){0l}\n        digits += List(x.toInt, 0)\n        var i = 0\n        while (i <= digitsSize - shift) {\n            val shift = digits.head\n            if (digits.tail.sum < shift) digits.tail += digits(i).reverse\n            digits = digits.tail\n            i += 1\n        }\n        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplwxx4k0y.scala:13:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdigits\u001b[0m = List.fill(digitsSize){\u001b[31m0l\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (digitsSize : Double)\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplwxx4k0y.scala:14:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        digits += List(x.toInt, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    value += is not a member of List[Long] - did you mean List[Long].!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplwxx4k0y.scala:18:53 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mif\u001b[0m (digits.tail.sum < shift) digits.tail += digits(i).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue += is not a member of List[Long @uncheckedVariance] - did you mean List[Long @uncheckedVariance].!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplwxx4k0y.scala:18:66 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mif\u001b[0m (digits.tail.sum < shift) digits.tail += digits(i).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value reverse is not a member of Long\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029068
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n        (digits reverse drop shift) append digits.take(shift)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpaha9ldab.scala:13:34 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        (digits reverse drop shift) append digits.take(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  expression expected but \u001b[31m')'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaha9ldab.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        (digits reverse drop shift) append digits.take(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: drop\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029064
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val nx = x.toString\n        val nshift = shift.toString\n        val nlen = nx.length\n        val nshift1 = nshift.substring(0,1)\n        var xdigits = Array[Char]()\n        var xstr = StringBuilder(nx.length)\n        var slen = nshift1.length\n        for(i <- 0 to nlen - 1) {\n            var xc = nx.charAt(i)\n            var slen2 = slen\n            for(j <- 0 to slen - 1) {\n                val xc2 = xc.charAt(j)\n                val slen3 = slen2 - 1\n                xc2 = xc2.toChar\n                xdigits :+ xc2.toChar\n                xc = xc.substring(0,j+1) + xc2.substring(j+1,slen2)\n                xstr = xstr + xc\n                slen2 = slen3 - 1\n            }\n            xstr = xstr + xc\n        }\n        xstr = xstr + xdigits(xlen -1)\n        for(i <- 0 to nlen - 1) {\n            xstr = xstr.substring(0, xlen-i) + xstr.substring(xlen-i)\n        }\n        xstr.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptr3g7z79.scala:23:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mxc2\u001b[0m = xc.charAt(j)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value charAt is not a member of Char\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmptr3g7z79.scala:25:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                xc2 = xc2.toChar\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val xc2\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptr3g7z79.scala:27:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                xc = xc.substring(\u001b[31m0\u001b[0m,j+\u001b[31m1\u001b[0m) + xc2.substring(j+\u001b[31m1\u001b[0m,slen2)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value substring is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptr3g7z79.scala:28:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                xstr = xstr + xc\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of StringBuilder, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptr3g7z79.scala:31:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            xstr = xstr + xc\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of StringBuilder, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math",
      "stdout": "",
      "timestamp": 1660029070
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.length) { x.toString.reverse}\n        else { val shifted = (x << shift) mod x\n            val result = shifted.toString.reverse\n            result }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2mz5t92r.scala:12:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (shift > x.length) { x.toString.reverse}\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value length is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2mz5t92r.scala:13:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33melse\u001b[0m { \u001b[33mval\u001b[0m shifted = (x << shift) mod x\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue mod is not a member of Long, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.BigInt.long2bigInt\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029068
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift <= x.toString.length && shift > 0)\n            x.toString.substring(shift, x.toString.length+shift).reverse\n        else\n            x.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6k0quhd.scala:13:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            x.toString.substring(shift, x.toString.length+shift).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6k0quhd.scala:13:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            x.toString.substring(shift, x.toString.length+shift).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029069
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n      val shifted = x << shift\n      val num = shifted.toString.reverse\n      val padded = num.padTo(shift.toString.length, \"0\")\n      padded\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwue0e6rf.scala:15:6 ---------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m      padded\n\u001b[31m\u001b[31m   |\u001b[0m      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      Found:    (padded : IndexedSeq[Matchable])\n\u001b[31m   |\u001b[0m      Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029068
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val n = x\n        val i = shift - 1\n        var result = \"\"\n        if (n < 0) {\n            while (n > 0)\n                result += (n % 10 + '0');\n            result.reverse\n        }\n        while (i > 0) {\n            result = (n % 10 + '0') + result;\n            n /= 10;\n            i -= 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoazesvyh.scala:22:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            n /= \u001b[31m10\u001b[0m;\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoazesvyh.scala:23:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            i -= \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value -= is not a member of Long - did you mean i.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029071
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        def circShift(x : Long, shift : Long) : Long = {\n            var n = x\n            var d = shift\n            while (d > Integer.numberOfTrailingZeros(n))\n                d -= Integer.numberOfTrailingZeros(n)\n            while (d > 0)\n            {\n                n += d\n                d /= 10\n            }\n            return n\n        }\n        var result = \"\"\n        var remaining = x\n        var rest = circShift(remaining, shift)\n        var digits = Array[String](1l).fill(rest)\n        while (digits.length > 0)\n        {\n            result = digits(digits.length - 1) + \"0\" + result\n            remaining = circShift(remaining, rest)\n            digits = Array[String](1l).fill(remaining)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl09g9cmf.scala:15:53 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mwhile\u001b[0m (d > Integer.numberOfTrailingZeros(n))\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl09g9cmf.scala:16:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                d -= Integer.numberOfTrailingZeros(n)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value -= is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl09g9cmf.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                d -= Integer.numberOfTrailingZeros(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl09g9cmf.scala:27:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdigits\u001b[0m = Array[\u001b[35mString\u001b[0m](\u001b[31m1l\u001b[0m).fill(rest)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (\u001b[31m1L\u001b[0m : Long)\n\u001b[31m   |\u001b[0m                                   Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl09g9cmf.scala:32:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            digits = Array[\u001b[35mString\u001b[0m](\u001b[31m1l\u001b[0m).fill(remaining)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^\u001b[0m\n\u001b[31m   |\u001b[0m     ",
      "stdout": "",
      "timestamp": 1660029072
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val n = x.length\n        val shift = shift % n\n        var str = \"\"\n        var i = 0;\n        var carry = 0\n        while(i < n) {\n            val temp = x.toString % 10\n            val sum = carry + temp.toInt\n            val carry = (sum / 10).toInt\n            val digit = sum % 10\n            str = str + digit.toString\n            i = i + 1\n        }\n        while(i < shift) {\n            str = str + str.toString\n            i = i + 1\n        }\n        if(carry > 0) {\n            str = str + carry.toString\n        }\n        return str.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmnigu0cz.scala:12:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = x.length\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value length is not a member of Long\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmnigu0cz.scala:13:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shift % n\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmnigu0cz.scala:18:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mtemp\u001b[0m = x.toString % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue % is not a member of String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpmnigu0cz.scala:20:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mcarry\u001b[0m = (sum / \u001b[31m10\u001b[0m).toInt\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Recursive \u001b[33mvalue\u001b[0m \u001b[35msum\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029071
    },
    {
      "exit_code": -1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xDigits = x % 10\n        val shiftDigits = shift % 10\n        val newDigit = xDigits >>> shiftDigits\n        val remainder = xDigits - newDigit\n        if( remainder > 0 ) {\n            circularShift( newDigit + 10l, shift - shiftDigits )\n        } else {\n            circularShift( newDigit, shift )\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "Timeout",
      "stderr": "None",
      "stdout": "None",
      "timestamp": 1660029076
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n        val result = new StringBuilder()\n        for (i<-0 to shift.toInt-1){\n            result.append(digits(i))\n        }\n        result.toString()\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpezsp7au9.scala:20)\n\tat Problem.main(tmpezsp7au9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660029075
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xDigits = x.toString.reverse.dropRight(shift)\n        val yDigits = x.toString.takeRight(shift).toString.reverse\n        val newDigits = xDigits + yDigits\n        val newString = newDigits.reverse\n        println(newString)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2um0ha5.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxDigits\u001b[0m = x.toString.reverse.dropRight(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2um0ha5.scala:13:43 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36myDigits\u001b[0m = x.toString.takeRight(shift).toString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2um0ha5.scala:16:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        println(newString)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029073
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val maxDigits = (x.toString.length / shift.toString.length)\n        val digits = x.toString.substring(shift.toString.length).chars.toSet\n        var res = \"\"\n        for (i <- 0 until maxDigits) {\n            val a = digits(i)\n            val b = (x.toString.charAt(shift.toString.length) + i).toChar\n            res = res + a\n            res = res + b\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpz8kq2o2d.scala:13:71 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = x.toString.substring(shift.toString.length).chars.toSet\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toSet is not a member of java.util.stream.IntStream - did you mean IntStream.boxed?\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029073
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val remainder = x % shift\n        val result = x / (shift % shift)\n        val shiftedResult = circularShift(result, shift)\n        result + shiftedResult + remainder\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.circularShift(tmpo8fbg_h5.scala:13)\n\tat Problem$.main(tmpo8fbg_h5.scala:18)\n\tat Problem.main(tmpo8fbg_h5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660029074
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val x = x.toString.toInt\n        var result = \"\"\n        if (x < 0) {\n            var s = -shift\n            var a = x\n            while (a>0) {\n                a /= 10\n                s += 1\n            }\n            s = -s*10\n            a = 1\n            while (a>0) {\n                result += (10 * a%10).toString.toString + (if (s<0) \"-\" else \"\")\n                a /= 10\n                s += 1\n            }\n        } else {\n            var s = shift\n            var a = x\n            while (a>0) {\n                result += (10 * a%10).toString.toString + (if (s<0) \"-\" else \"\")\n                a /= 10\n                s += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp5csshh25.scala:12:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = x.toString.toInt\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mx\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029071
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var str = x.toString\n        var index = shift\n        var newstr = \"\"\n        while(index > 0) {\n            index = index - str.charAt(index)\n            newstr = str.charAt(index) + newstr\n        }\n        return newstr\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplmv88jlk.scala:16:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            index = index - str.charAt(index)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (index : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplmv88jlk.scala:17:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            newstr = str.charAt(index) + newstr\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (index : Long)\n\u001b[31m   |\u001b[0m                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029077
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString\n        var result = \"\"\n        var index = 0\n        while (index != shift) {\n            result += digits(index)\n            index = (index + 1) % digits.length\n        }\n        result += (digits reverse)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp1l98wln9.scala:19:33 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        result += (digits reverse)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 expression expected but \u001b[31m')'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1l98wln9.scala:19:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        result += (digits reverse)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value += is not a member of String - did you mean String.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029076
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val shiftDigits = shift.toString.length\n        var res = \"\"\n        while( x>0 && resLength(x) < shiftDigits ) {\n            res = res.concat(x.toString)\n            x = (x >>> 1)\n        }\n        if ( resLength(x) < shiftDigits ) {\n            res = res.reverse\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuw8m2xkv.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mwhile\u001b[0m( x>\u001b[31m0\u001b[0m && resLength(x) < shiftDigits ) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: resLength\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpuw8m2xkv.scala:16:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            x = (x >>> \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuw8m2xkv.scala:18:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mif\u001b[0m ( resLength(x) < shiftDigits ) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Not found: resLength\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029073
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val l = (x % 1000000000000000000)\n        var y = x\n        for(i <- 0 until shift) {\n            y = y / 1000000000000000000\n        }\n        var z = y\n        for(i <- 0 until shift) {\n            z = z / 1000000000000000000\n        }\n        return Integer.toString((l + (z - y) * shift).toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpcxfflqi7.scala:12:21 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ml\u001b[0m = (x % \u001b[31m1000000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     number too large\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcxfflqi7.scala:14:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcxfflqi7.scala:15:20 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            y = y / \u001b[31m1000000000000000000\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    number too large\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcxfflqi7.scala:18:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcxfflqi7.scala:19:20 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            z = z / \u001b[31m1000000000000000000\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    number too large\n5 errors found\n",
      "stdout": "",
      "timestamp": 1660029077
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.length) {\n            val reversed = x.reverse\n            reversed.slice(shift, x.length).reverse.toString\n        } else {\n            x.slice(shift, x.length).reverse.toString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnomb8dra.scala:12:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (shift > x.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value length is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnomb8dra.scala:13:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = x.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value reverse is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnomb8dra.scala:16:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            x.slice(shift, x.length).reverse.toString\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value slice is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnomb8dra.scala:16:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            x.slice(shift, x.length).reverse.toString\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value length is not a member of Long\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029077
    },
    {
      "exit_code": -1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var ret = \"\"\n        while(x.toString.length < shift.toString.length){\n            ret = \"0\" + ret\n        }\n        while(x.toString.length > shift.toString.length){\n            ret = x.toString.substring(ret.length) + ret\n        }\n        return ret\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "Timeout",
      "stderr": "None",
      "stdout": "None",
      "timestamp": 1660029080
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) return x.toString.reverse\n        val xString = x.toString\n        var shiftChars = xString.length - shift - 1\n        var result = \"\"\n        var x = 1l\n        while (xString.length > shift) {\n            var digit = xString.charAt(xString.length - 1)\n            result = (digit + result).asInstanceOf[String]\n            x = x * 10l\n            xString = xString.substring(0,xString.length - 1)\n        }\n        return result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp974vzw9s.scala:21:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            xString = xString.substring(\u001b[31m0\u001b[0m,xString.length - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val xString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029074
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var result = \"\"\n        val l = x.toString.length\n        var shift = shift % l\n        for(i <- 0 until shift - 1) {\n            result += x.toString(i)\n        }\n        result += x.toString(shift - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpl6564dag.scala:14:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mshift\u001b[0m = shift % l\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvariable\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl6564dag.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            result += x.toString(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- Error: /tmp/tmpl6564dag.scala:16:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            result += x.toString(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m         too many arguments for \u001b[33mmethod\u001b[0m \u001b[35mtoString\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mAny\u001b[0m: (): String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl6564dag.scala:18:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        result += x.toString(shift - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- Error: /tmp/tmpl6564dag.scala:18:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        result += x.toString(shift - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         too many arguments for \u001b[33mmethod\u001b[0m \u001b[35mtoString\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mAny\u001b[0m: (): String\n5 errors found\n",
      "stdout": "",
      "timestamp": 1660029077
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var x = x.toString.reverse\n        var shift = shift.toString.reverse\n        var result = \"\"\n        for(i <- 0 until shift.length) result = result + x.dropRight(shift.length - i) + x\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnmizyl7o.scala:12:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mx\u001b[0m = x.toString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvariable\u001b[0m \u001b[35mx\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnmizyl7o.scala:13:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mshift\u001b[0m = shift.toString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvariable\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029075
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val n = x.toString.toLong\n        val result = ((n * (1l ** shift)).toString).reverse\n        if (shift>=n) result\n        else circularShift(result,shift-1)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp627x72_e.scala:13:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = ((n * (\u001b[31m1l\u001b[0m ** shift)).toString).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value ** is not a member of Long\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029079
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n       val digits = String.valueOf(x).split(\"\").reverse.toList\n       val shift = shift % digits.size // Modulo (%) operator to ensure shift is positive\n       val newDigits = digits.map(_.toChar).reverse.drop(shift)\n       return newDigits.mkString(\"\") + digits.take(shift).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpkeegcxvq.scala:13:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m       \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shift % digits.size \u001b[34m// Modulo (%) operator to ensure shift is positive\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkeegcxvq.scala:14:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m       \u001b[33mval\u001b[0m \u001b[36mnewDigits\u001b[0m = digits.map(_.toChar).reverse.drop(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value toChar is not a member of String\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029081
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val length = x.toString.length\n        val shift = shift % length\n        val reversedString = x.toString.reverse\n        val reversedLength = reversedString.length\n        val result = reversedString.substring(shift, reversedLength - shift) +\n            reversedString.substring(0, reversedLength - shift)\n        res: Any\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpymotc9pp.scala:13:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shift % length\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpymotc9pp.scala:18:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        res: \u001b[35mAny\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Not found: res\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029077
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits : Array[Long] = x.toString.toLongArray.grouped(shift).toArray\n        var resultString : String = \"\"\n        for(i <- 0 to digits.length - 1) {\n            resultString += (digits(i).toString.reverse)\n        }\n        return resultString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphz7dsaee.scala:12:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mdigits\u001b[0m : \u001b[35mArray\u001b[0m[\u001b[35mLong\u001b[0m] = x.toString.toLongArray.grouped(shift).toArray\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             value toLongArray is not a member of String\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029080
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        def rightShift(x : Long, shift : Long) : Long = {\n            var result = x\n            var remainder = result\n            while (result != 0) {\n                remainder = result % shift\n                result = result / shift\n            }\n            result\n        }\n        if (shift > x.toString.length) {\n            return x.toString.reverse\n        }\n        var result = x.toString.reverse\n        var remainder = result\n        while (remainder != 0) {\n            remainder = rightShift(remainder, shift)\n            result = result + remainder\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp0wi4cc9h.scala:26:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mwhile\u001b[0m (remainder != \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         Values of types String and Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0wi4cc9h.scala:27:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            remainder = rightShift(remainder, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (remainder : String)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029082
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var i = 0\n        var digits = \"\"\n        while (i < shift) {\n            digits += x.toString.substring(i, i + 1)\n            i += 1\n        }\n        digits += x.toString.substring(shift, x.toString.length())\n        digits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn6apdzmd.scala:18:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        digits += x.toString.substring(shift, x.toString.length())\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn6apdzmd.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        digits += x.toString.substring(shift, x.toString.length())\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029082
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        // Recursive case. Base case.\n        if (shift <= 0) return \"\"\n        // Recursive case. Handle left shift\n        if (shift > x.length) shift = 0\n        val start = x.length\n        // Recursive case. Handle right shift\n        val end = x.length + shift\n        val result = circularShift(x.substring(start, end), shift - start)\n        // Handle left shift\n        if (shift > start) result += x.substring(start, start + shift).reverse\n        // Handle right shift\n        if (shift < end) result += x.substring(end - shift, end).reverse\n        return result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8igpufe.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mif\u001b[0m (shift > x.length) shift = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value length is not a member of Long\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpm8igpufe.scala:15:36 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mif\u001b[0m (shift > x.length) shift = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Reassignment to val shift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8igpufe.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mstart\u001b[0m = x.length\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    value length is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8igpufe.scala:18:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mend\u001b[0m = x.length + shift\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value length is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8igpufe.scala:19:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = circularShift(x.substring(start, end), shift - start)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value substring is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8igpufe.scala:21:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mif\u001b[0m (shift > start) result += x.substring(start, start + shift).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8igpufe.scala:21:39 ------------------------\u001b[0m\u001b[0m\n\u001b[",
      "stdout": "",
      "timestamp": 1660029085
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n        (digits.reverse.substring(shift, digits.length).reverse).reverse + digits.substring(0, shift)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9j6iec23.scala:13:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        (digits.reverse.substring(shift, digits.length).reverse).reverse + digits.substring(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9j6iec23.scala:13:95 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        (digits.reverse.substring(shift, digits.length).reverse).reverse + digits.substring(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029083
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var ans = \"\"\n        while (x.compareTo(Long.MinValue) < 0) {\n            ans = (x.toString.reverse + ans)\n            x = x + shift % x.toString.length\n            shift /= x.toString.length\n        }\n        if (x.compareTo(Long.MinValue) < 0) ans = (x.toString.reverse + ans)\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpmoddditc.scala:15:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            x = x + shift % x.toString.length\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmoddditc.scala:16:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            shift /= x.toString.length\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean shift.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029083
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val x = x % 10\n        var xs = \"\" + x\n        val shift = shift % 10\n        if(shift == 0)\n            return xs;\n        else if(shift > x)\n            xs = xs.reverse;\n        if(shift < xs.length)\n            xs = xs.substring(0,xs.length-shift) + xs.substring(xs.length-shift+1);\n        else\n            xs = xs.substring(0,shift) + xs.substring(shift+1);\n        return xs;\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpel7h1a07.scala:12:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = x % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mx\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpel7h1a07.scala:14:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shift % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029081
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val x = x.toString.toInt;\n        val shift = shift.toString.toInt;\n        var result = \"\";\n        var digits = scala.collection.mutable.ListBuffer[String]();\n        while (shift != 0) {\n            if (shift % 2 == 1) {\n                digits += x.toString.toChar;\n                shift /= 2;\n            } else {\n                digits += x.toString.toInt.reverse.toChar;\n                shift /= 2;\n            }\n        }\n        result = digits.reverse.toString.trim();\n        if (shift != 0) {\n            result = circularShift(x, shift.toInt) + result;\n        }\n        result;\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwqt19pcp.scala:12:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = x.toString.toInt;\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mx\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwqt19pcp.scala:13:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift\u001b[0m = shift.toString.toInt;\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Recursive \u001b[33mvalue\u001b[0m \u001b[35mshift\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029080
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.toInt\n        val reversed = if (shift > digits.length) digits(digits.length - shift)\n        else digits(shift)\n        val result = (new StringBuilder).append(reversed).toString()\n        if (shift <= digits.length) result\n        else result.substring(0, digits.length) + new StringBuilder(result).reverse().toString()\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5avvq01g.scala:13:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = \u001b[33mif\u001b[0m (shift > digits.length) digits(digits.length - shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value length is not a member of Int\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp5avvq01g.scala:13:50 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = \u001b[33mif\u001b[0m (shift > digits.length) digits(digits.length - shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mvalue\u001b[0m \u001b[35mdigits\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5avvq01g.scala:13:64 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = \u001b[33mif\u001b[0m (shift > digits.length) digits(digits.length - shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     value length is not a member of Int\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp5avvq01g.scala:14:13 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33melse\u001b[0m digits(shift)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             \u001b[33mvalue\u001b[0m \u001b[35mdigits\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5avvq01g.scala:16:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mif\u001b[0m (shift <= digits.length) result\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value length is not a member of Int\n5 errors found\n",
      "stdout": "",
      "timestamp": 1660029084
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        // Recursive implementation that uses tail recursion and a stack\n        // to simulate the shift operation of the radix shifter.\n        // x is treated as a binary string of 1s and 0s.\n        // We start from the rightmost digit.\n        val rec : Long = 0\n        val stack = mutable.Stack[Long]()\n        val digit = x.toString.reverse.charAt(0)\n        x % shift match {\n            case 0 => \"\"\n            case _ => {\n                if (digit == '1') {\n                    stack.push(x)\n                    rec = circularShift(stack.peek, shift)\n                    stack.pop\n                } else {\n                    rec = stack.pop * 10 + digit\n                }\n                rec % shift match {\n                    case 0 => rec // return result\n                    case _ => rec + circularShift(rec, shift)\n                }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6itf0ams.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mstack\u001b[0m = mutable.Stack[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6itf0ams.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                    rec = circularShift(stack.peek, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    String\n\u001b[31m   |\u001b[0m                          Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp6itf0ams.scala:27:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                    rec = stack.pop * \u001b[31m10\u001b[0m + digit\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val rec\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6itf0ams.scala:30:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m                    \u001b[33mcase\u001b[0m \u001b[31m0\u001b[0m => rec \u001b[34m// return result\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (rec : Long)\n\u001b[31m   |\u001b[0m                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029085
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val stringOfNumber = x.toString.reverse.take(shift)\n        val reversedString = stringOfNumber.reverse.mkString\n        val reversedNumberInAscendingOrder = stringOfNumber.reverse.mkString.toLong\n        val result = reversedNumber.toString.reverse.take(shift).reverse.mkString\n        // The \"result\" should be reversedNumber but it is reversedNumberInAscendingOrder\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj_gtf1of.scala:12:53 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mstringOfNumber\u001b[0m = x.toString.reverse.take(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj_gtf1of.scala:15:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reversedNumber.toString.reverse.take(shift).reverse.mkString\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: reversedNumber\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029086
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.drop(shift).reverse.drop(shift+1)\n        if (digits == \"\") digits\n        else digits.tail + digits.head + digits.drop(shift).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppy6_tal9.scala:12:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = x.toString.reverse.drop(shift).reverse.drop(shift+\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppy6_tal9.scala:12:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = x.toString.reverse.drop(shift).reverse.drop(shift+\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Found:    Long\n\u001b[31m   |\u001b[0m                                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppy6_tal9.scala:14:53 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33melse\u001b[0m digits.tail + digits.head + digits.drop(shift).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029086
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var result = \"\"\n        var index = 0\n        var carry = 0\n        var i = 1\n        while(i < shift && index < (x.toString.length - 1)){\n            result += x.toString.substring(index, index+i) + i\n            carry = x.toString.charAt(index+i).toLong - x.toString.charAt(index).toLong * i.toLong\n            i = i + 1\n            index = index + 1\n        }\n        if(index == x.toString.length){\n            result += x.toString.substring(index)\n        }\n        if(carry > 0){\n            result += carry.toString\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt426391u.scala:18:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            carry = x.toString.charAt(index+i).toLong - x.toString.charAt(index).toLong * i.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Long\n\u001b[31m   |\u001b[0m                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029086
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n        val result = mutable.StringBuilder(digits.size)\n        for (i <- digits.indices) {\n            result += digits(i).toList\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp224_ja81.scala:12:48 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = x.toString.reverse.grouped(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp224_ja81.scala:13:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.StringBuilder(digits.size)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp224_ja81.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- digits.indices) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value indices is not a member of Iterator[String]\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029086
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.toInt\n        // For each digit of the number\n        var i = digits\n        while (i >= shift) {\n            val mod = i % 10\n            i = i / 10\n            digits = digits - mod\n        }\n        val result = (digits*(shift + 1)).toString.reverse\n        return result + digits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpof4txob9.scala:18:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            digits = digits - mod\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val digits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029084
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.reverse\n        val digits_shift = digits.dropRight(shift).toString.reverse\n        digits_shift.drop(shift)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuv_gjgnd.scala:13:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits_shift\u001b[0m = digits.dropRight(shift).toString.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuv_gjgnd.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        digits_shift.drop(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029087
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val string = \"0\" * (shift-x.toString.length) \n        string + x.toString.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph3lpd8a5.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mstring\u001b[0m = \u001b[31m\"0\"\u001b[0m * (shift-x.toString.length) \n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    Long\n\u001b[31m   |\u001b[0m                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029086
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        // Create a list to store all digits of the number as a list\n        val digits = scala.collection.mutable.ListBuffer[Long]()\n        while(x>0) {\n            digits += (x%10)\n            x = x>>1\n        }\n        digits.reverse.map(x => x+1l).toList.map(x => x.toString).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpp3tub30q.scala:16:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            x = x>>\u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029084
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val shiftFactor = shift.toLong / x.toLong\n        // Return digits reversed\n        if (shiftFactor.equals(0)) {\n            return x.toString.reverse\n        }\n        // Get last shift digit\n        val lastDigit = x.toString.charAt(x.toString.length-1)\n        // Get digits in reverse order\n        val reversedDigits = x.toString.reverse\n        val newDigits = reversedDigits.substring(0, reversedDigits.length-lastDigit) + reversedDigits.substring(reversedDigits.length-lastDigit)\n        // Get new digits\n        val newDigit = newDigits.reverse.charAt(0)\n        // Return new digits\n        return (newDigit + newDigits.substring(newDigits.length-lastDigit)).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 0, end -45, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.circularShift(tmpbprnacwj.scala:21)\n\tat Problem$.main(tmpbprnacwj.scala:28)\n\tat Problem.main(tmpbprnacwj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660029087
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift == 0)\n            return x.toString\n        val y = x.toString.reverse\n        val l = math.min(shift, y.length)\n        var i = 0\n        while (i < l) {\n            val temp = y(i)\n            y(i) = y(i-1)\n            y(i-1) = temp\n            i += 1\n        }\n        y.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2o4jrvjf.scala:19:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            y(i) = y(i-\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            value update is not a member of String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2o4jrvjf.scala:20:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            y(i-\u001b[31m1\u001b[0m) = temp\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            value update is not a member of String\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029087
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString.reverse\n        (s length + shift) match {\n            case 0 => \"\"\n            case _ => {\n                val c = chars(s)\n                val r = \"\"\n                for (i <- 0 until shift) {\n                    r = r + c(i)\n                }\n                r\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp6n66zg7d.scala:13:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        (s length + shift) \u001b[33mmatch\u001b[0m {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           too many arguments for \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m: (): Int\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6n66zg7d.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mc\u001b[0m = chars(s)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: chars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6n66zg7d.scala:18:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp6n66zg7d.scala:19:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    r = r + c(i)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val r\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029087
    }
  ]
}