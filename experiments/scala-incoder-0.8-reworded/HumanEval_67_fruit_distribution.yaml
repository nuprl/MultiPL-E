name: HumanEval_67_fruit_distribution
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this task, you will be given a string that represents a number of apples\
  \ and oranges \n    // that are distributed in a basket of fruit this basket contains\
  \ \n    // apples, oranges, and mango fruits. Given the string that represents the\
  \ total number of \n    // the oranges and apples and an integer that represent\
  \ the total number of the fruits \n    // in the basket return the number of the\
  \ mango fruits in the basket.\n    // for examble:\n    // >>> fruitDistribution((\"\
  5 apples and 6 oranges\"), (19l))\n    // (8l)\n    // >>> fruitDistribution((\"\
  0 apples and 1 oranges\"), (3l))\n    // (2l)\n    // >>> fruitDistribution((\"\
  2 apples and 3 oranges\"), (100l))\n    // (95l)\n    // >>> fruitDistribution((\"\
  100 apples and 1 oranges\"), (120l))\n    // (19l)\n    def fruitDistribution(s\
  \ : String, n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
  5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
  \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
  \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
  \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100\
  \ oranges\"), (120l)) == (19l));\n    }\n\n}\n"
completions: ["        val array = s.toCharArray\n        val apples = 0 :: 1 :: 0\
    \ :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 ::\
    \ 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0\
    \ :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 ::\
    \ 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0\
    \ :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 ::\
    \ 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0\
    \ :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 ::\
    \ 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0\
    \ :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 ::\
    \ 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0\
    \ :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 ::\
    \ 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0\
    \ :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 ::\
    \ 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0\
    \ :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 ::\
    \ 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: 0 :: ",
  "        val a = s.split(\" \")\n        val fruits = a.filter(_ => _.toInt > 0).map(_\
    \ => _.toInt).sum\n        val apples = a.filter(_ => _.toInt < 0).map(_ => _.toInt).sum\n\
    \        val mango = apples - fruits - n\n        mango", "        val count =\
    \ s.toList.filter(!_.isWhitespace).toList.size\n        (count - n) match {\n\
    \            case 0 => 0\n            case 1 => 1\n            case _ => count\
    \ - n - 1\n        }", "        val tokens = s.split(\" \").map(_.toInt)\n   \
    \     val numberOfApples = tokens(0)\n        val numberOfOranges = tokens(1)\n\
    \        val totalFruits = numberOfApples + numberOfOranges\n        val numberOfMango\
    \ = totalFruits - numberOfOranges - numberOfApples\n        return numberOfMango",
  "        var apples = 0\n        var oranges = 0\n        var mangos = 0\n     \
    \   var n1 = s.split(\" \").toList.map(x => x.split(\"and\")).toList\n       \
    \ var n2 = n1.map { x => x.mkString(\",\").split(\",\").map(_.toLong).toList }\n\
    \        for {\n            a <- n2(0)\n            b <- n2(1)\n        } yield\
    \ {\n            if (a < b)\n            {\n                if (a < n)\n     \
    \           {\n                    apples += a\n                }\n          \
    \      if (b < n)\n                {\n                    oranges += b\n     \
    \           }\n            }\n            if (a > b)\n            {\n        \
    \        if (a < n)\n                {\n                    apples += n\n    \
    \            }\n                if (b < n)\n                {\n              \
    \      oranges += a\n                }\n            }\n            if (a == b)\n\
    \            {\n                if (b < n)\n                {\n              \
    \      apples += a\n                }\n                if (a < n)\n          \
    \      {\n                    oranges += b\n                }\n            }\n\
    \        }\n        if (apples < n)\n        {\n            if (apples < n)\n\
    \            {\n                mangos += apples\n            }\n        }\n \
    \       if (apples > n)\n        {\n            if (apples < n)\n            {\n\
    \                mangos += n\n            }\n        }\n        if (oranges <\
    \ n)\n        {\n            if (oranges < n)\n            {\n               \
    \ mangos += oranges\n            }\n        }\n        if (oranges > n)\n    \
    \    {\n            if (oranges < n)\n            {\n                mangos +=\
    \ n\n            }\n        }\n        if (apples == oranges)\n        {\n   \
    \         if (oranges < n)\n            {\n                mangos += oranges\n\
    \            }\n        }\n        if (apples == oranges && apples < n)\n    \
    \    {\n            mangos += apples\n        }\n        if (apples > oranges\
    \ && apples < n)\n        {\n            mangos += n\n        }\n        if (apples\
    \ == oranges && apples > n)\n        {\n            mangos += oranges\n      \
    \  }\n        if (apples > oranges && apples > n)\n        {\n            mangos\
    \ += n\n        }\n        if (apples == oranges && oranges == n)\n        {\n\
    \            mangos += oranges\n        }\n        if (apples > oranges && oranges\
    \ == n)\n        {\n            mangos += oranges\n        }\n        if (apples\
    \ > oranges && apples < n)\n        {\n            mangos += n\n        }\n  \
    \      if (apples == oranges && oranges > n)\n        {\n            mangos +=\
    \ oranges\n        }\n        if (apples < oranges && oranges == n)\n        {\n\
    \            mangos += oranges\n        }\n        if (apples > oranges && oranges\
    \ > n)\n        {\n            mangos += n\n        }\n        if (apples == oranges\
    \ && apples == ", "        val aMap : mutable.Map[String, String] = mutable.Map()\n\
    \        val aList : mutable.List[String] = mutable.List()\n        val aInt :\
    \ mutable.List[String] = mutable.List()\n        var k = 0\n        var i = 1\n\
    \        while(k <= n) {\n            var bMap : mutable.Map[String, String] =\
    \ mutable.Map()\n            var bList : mutable.List[String] = mutable.List()\n\
    \            var bInt : mutable.List[String] = mutable.List()\n            aList\
    \ = (s.split(\"\\\\W+\").toList.filterNot(e => e.isEmpty).filter(e => !(e.startsWith(\"\
    apples\")))\n            k += aList.size\n            aList.foreach(x => aMap\
    \ += (x -> x))\n            val count = aList.map(x => aMap.get(x)).length\n \
    \           bMap = aMap\n            if(bMap.get(\"mango\") == \"mango\") {\n\
    \                bInt += (\"mango\")\n                i -= 1\n            }\n\
    \            if(bMap.get(\"apple\") == \"apple\") {\n                bInt += (\"\
    apple\")\n                i -= 1\n            }\n            if(bMap.get(\"orange\"\
    ) == \"orange\") {\n                bInt += (\"orange\")\n                i -=\
    \ 1\n            }\n            bList += bMap.get(\"mango\") + \"\\n\" + bMap.get(\"\
    apple\") + \"\\n\" + bMap.get(\"orange\")\n            aMap = aMap + (\"apple\"\
    \ -> \"apple\" + i + \"apples\")\n            aMap = aMap + (\"orange\" -> \"\
    orange\" + i + \"oranges\")\n            bMap = aMap\n            bList += bMap.get(\"\
    mango\") + \"\\n\" + bMap.get(\"apple\") + \"\\n\" + bMap.get(\"orange\")\n  \
    \          bList += aMap.get(\"mango\") + \"\\n\" + aMap.get(\"apple\") + \"\\\
    n\" + aMap.get(\"orange\")\n            bInt += (\"mango\")\n            i +=\
    \ 1\n            bMap ++= bList\n            aMap = bMap\n            k = 0\n\
    \        }\n        val bMap = bList.toMap\n        bMap.get(\"mango\")", "  \
    \      val arr = s.split(\" \").map(_.toInt)\n        val fruit = arr(1).toDouble\
    \ / n\n        val mango = arr.length - 2\n        arr.take(2).sum / n", "   \
    \     def count(s : String, n: Long) : Long = {\n            var sum = 0\n   \
    \         var num = 0\n            var next = \"\"\n            for( i <- 0 until\
    \ s.length() ){\n                next = s.charAt(i)\n                if ( next\
    \ != \",\" ){\n                    sum = sum + next.toInt\n                  \
    \  num -= 1\n                } else {\n                    sum = sum + n\n   \
    \             }\n            }\n            return sum\n        }\n        val\
    \ m = count(s, n)\n        var total = 0\n        for(i <- 0 until s.length()){\n\
    \            total += s.charAt(i).toInt\n        }\n        return m - total",
  "        val applesAndOranges = s.split(\" \").map(x => x.trim).map((_ + \" \").trim).map(x\
    \ => x.split(\" \").map(y => y.trim).toSet)\n        val sumApples = applesAndOranges.map(_.size).sum\n\
    \        val sumOranges = applesAndOranges.map(_.size).sum - sumApples\n     \
    \   val numberOfFruits = n.toInt\n        val maxCount = numberOfFruits.toLong\
    \ * numberOfFruits.toLong\n        val mango = 0\n        for (i <- 0 until numberOfFruits)\
    \ {\n            if (applesAndOranges.filter(x => x.contains(i)).length > maxCount)\n\
    \                mango += 1\n        }\n        mango", "        var sum : Long\
    \ = n.toLong\n        val str = s.toString.replaceAll(\"[\\\\s]+\", \" \").replaceAll(\"\
    ([a-z])\", \"$1 \").split(\" \")\n        for (item <- str) {\n            sum\
    \ += item.toLong\n        }\n        var count = 0\n        var temp : Long =\
    \ 0\n        for (item <- str) {\n            if (item.equals(\"mango\"))\n  \
    \              count++\n            else\n                temp = temp + item.toLong\n\
    \        }\n        return count * (n - sum)", "        val numberMap = Map((\"\
    apples\" -> 1, \"oranges\" -> 2, \"mangos\" -> 3) -> 4)\n        val numberOfApples\
    \ = numberMap.getOrElse(s, 0)\n        val numberOfOranges = n - numberOfApples\n\
    \        numberOfApples * ((numberOfOranges) / numberOfApples) + (numberOfOranges\
    \ / numberOfApples)", "        def isOrange(fruit : String) : Boolean = fruit\
    \ == \"oranges\"\n        def isApple(fruit : String) : Boolean = fruit == \"\
    apples\"\n        def isMango(fruit : String) : Boolean = fruit == \"mango\"\n\
    \n        val numbers : List[String] = s.split(\"\\\\s+\").toList\n        val\
    \ apples : List[String] = numbers.filter(_ != \"apples\").toList\n        val\
    \ oranges : List[String] = numbers.filter(_ != \"oranges\").toList\n        val\
    \ mangos : List[String] = numbers.filter(_ != \"mango\").toList\n        val totalApples\
    \ = apples.sum\n        val totalOranges = oranges.sum\n        val totalMangos\
    \ = mangos.sum\n        val total = totalApples + totalOranges + totalMangos\n\
    \        val totalFruit = totalApples + totalOranges\n\n        if(totalFruit\
    \ == n) return mangos.size\n        if(totalFruit < n) return n\n        if(totalFruit\
    \ > n) return totalFruit\n        -1", "        val splits = s.split(\" \")\n\
    \        var apples = 0.0;\n        var oranges = 0.0;\n        var fruits = 0.0;\n\
    \        var total = 0.0\n        var i = 0\n        for(i <- 0 until splits.length)\
    \ {\n            if(splits(i) equals \"apples\") {\n                apples = apples\
    \ + 1.0;\n            } else if(splits(i) equals \"oranges\") {\n            \
    \    oranges = oranges + 1.0;\n            } else if(splits(i) equals \"mango\"\
    ) {\n                fruits += 1.0;\n            } else if(splits(i) equals \"\
    \") {\n                total += 1.0;\n            }\n        }\n        var j\
    \ = fruits;\n        while(j > 0) {\n            total -= j;\n            j -=\
    \ j;\n        }\n        println(total)\n        total", "        val apples =\
    \ if (s.contains(\"apples\")) s.substring(0, s.indexOf(\"apples\")).toLong else\
    \ 0\n        val oranges = if (s.contains(\"oranges\")) s.substring(0, s.indexOf(\"\
    oranges\")).toLong else 0\n        val fruits = if (s.contains(\"and\")) s.substring(s.indexOf(\"\
    and\") + 1, s.length - 1) else \"\"\n        val mango = if (fruits.contains(\"\
    mango\")) fruits.substring(0, fruits.indexOf(\"mango\")) else 0\n        val n\
    \ = if (n.toLong == 0) 1 else n\n        apples + oranges + mango / n", "    \
    \    val apples = n.toLong\n        val oranges = apples - 3\n        val mangoes\
    \ = apples - 6\n        s.split(\" \").map{_.trim}.map{i => if (i == \"apples\"\
    \ || i == \"oranges\") 1 else 0}.sum", "        val fruitList = s.split(\" \"\
    )\n        val fruitCount = fruitList.toList.size\n        val applesAndOranges\
    \ = fruitList(0)\n        val totalApplesAndOranges = fruitCount.toLong\n    \
    \    val apples = applesAndOranges.toInt\n        val oranges = totalApplesAndOranges.toInt\
    \ - apples\n        val mangos = apples + oranges\n        val n = n.toLong\n\
    \        if (n < apples) {\n            fruitCount\n        }\n        else if\
    \ (apples < n  && oranges < n) {\n            mangos\n        }\n        else\
    \ {\n            fruitCount\n        }", "        val basket = readLine.split(\"\
    \\\\s+\").toList\n        val totalFruits = n\n        val countFruits = fruitCounter(s,\
    \ basket)\n        val numFruits = countFruits(0)\n        val numMangoFruits\
    \ = countFruits(1)\n        val totalMangoFruits = totalFruits - numMangoFruits\n\
    \        numFruits(0) match {\n            case 0 => return numFruits(0)\n   \
    \         case 1 => return 0\n            case _ => return numFruits(0) - numMangoFruits\n\
    \        }", "       val appleAndOranges = s.split(\" \")\n       val apples =\
    \ appleAndOranges(0).trim\n       val oranges = appleAndOranges(1).trim\n    \
    \   val mangos = n - apples - oranges\n       val total = apples + oranges + mangos\n\
    \       return mangos", "        val sArray = s.split(\"and\")\n        val apples\
    \ = sArray(1).toLong\n        val oranges = sArray(2).toLong\n        val fruits\
    \ = s.split(\"and\")(0) // get only the first part of the string\n        val\
    \ fruitList = fruits.split(\" \") // split the string into words\n        val\
    \ newList = fruitList.map { x => x.toLong }\n        val numberOfApple = apples.toLong\n\
    \        val numberOfOrange = oranges.toLong\n        var numberOfMango = 0\n\
    \        newList.foreach(x => {\n            if (x%2==0) numberOfMango+=1\n  \
    \      })\n        return numberOfMango", "        var sum = 0\n        var i\
    \ = 0\n        var j = 0\n        while(i < s.length){\n            if(j != n){\n\
    \                if(s.charAt(i) == 'a' || s.charAt(i) == 'o'){\n             \
    \       sum += s.charAt(i)\n                    j++\n                }\n     \
    \           i += 1\n            }else{\n                i += 1\n             \
    \   j = 0\n            }\n        }\n        sum", "        def count(s : String,\
    \ n: Long) : Long = {\n            val arr = s.split(\" \")\n            if (arr.length\
    \ < 2) n\n            else count(arr.tail, arr.head.split(\"and\")(0).toLong*2\
    \ + arr.head.split(\"and\")(1).toLong)\n        }\n        count(s, n)", "   \
    \     val x = s.split(\" \").toList\n        val apple = x.filter(_.equals(\"\
    apple\")).map(_.toInt)\n        val mango = x.filter(_.equals(\"mango\")).map(_.toInt)\n\
    \        val orange = x.filter(_.equals(\"orange\")).map(_.toInt)\n        val\
    \ appleAndOrange = apple ++ orange\n        val orangeAndMango = orange ++ mango\n\
    \        val appleAndMango = apple ++ mango\n        val mangoAndOrange = mango\
    \ ++ orange\n        val appleAndOrangeAndMango = appleAndOrange ++ mangoAndOrange\n\
    \        val mangoAndAppleAndOrange = mangoAndOrange ++ appleAndOrange\n     \
    \   val appleAndMangoAndOrange = appleAndMango ++ mangoAndOrange\n        val\
    \ mangoAndAppleAndMango = mangoAndApple ++ appleAndMango\n        val appleAndOrangeAndMangoAndApple\
    \ = appleAndOrangeAndMango ++ mangoAndAppleAndOrange\n        val mangoAndAppleAndOrangeAndMango\
    \ = mangoAndAppleAndOrangeAndMango ++ appleAndMangoAndOrange\n        val appleAndOrangeAndMangoAndAppleAndMango\
    \ = appleAndOrangeAndMangoAndApple ++ mangoAndAppleAndMango\n        val mangoAndAppleAndOrangeAndMangoAndAppleAndOrange\
    \ = mangoAndAppleAndOrangeAndMangoAndApple ++ appleAndOrangeAndMangoAndAppleAndMango\n\
    \        val appleAndOrangeAndMangoAndAppleAndOrangeAndMango = appleAndOrangeAndMangoAndAppleAndOrangeAndMango\
    \ ++ mangoAndAppleAndOrangeAndMango\n        val appleAndMangoAndOrangeAndMangoAndAppleAndOrangeAndMango\
    \ = appleAndMangoAndOrangeAndMangoAndAppleAndOrangeAndMango ++ mangoAndAppleAndOrangeAndMango\n\
    \        val mangoAndAppleAndOrangeAndMangoAndAppleAndMangoAndOrangeAndMango =\
    \ mangoAndAppleAndOrangeAndMangoAndAppleAndMangoAndOrangeAndMango ++ appleAndMangoAndOrangeAnd",
  "        val arr = s.split(\" \")\n        var result : Long = 0\n        arr.foreach(s\
    \ => {\n            var apples: Int = 0 \n            var oranges: Int = 0 \n\
    \            var mango: Int = 0 \n            var split: Array[String] = s.split(\"\
    and\")\n            if(split.length == 1){\n                if(s.contains(\"apple\"\
    )){\n                    apples = 1\n                }\n                if(s.contains(\"\
    orange\")){\n                    oranges = 1\n                }\n            \
    \    if(s.contains(\"mango\")){\n                    mango = 1\n             \
    \   }\n            }\n            else if(split.length == 2){\n              \
    \  if(s.contains(\"apple\") && s.contains(\"orange\")){\n                    apples\
    \ = 1\n                    oranges = 1\n                }\n                if(s.contains(\"\
    apple\") && s.contains(\"mango\")){\n                    apples = 1\n        \
    \            mango = 1\n                }\n                if(s.contains(\"orange\"\
    ) && s.contains(\"mango\")){\n                    oranges = 1\n              \
    \      mango = 1\n                }\n            }\n            else if(split.length\
    \ == 3){\n                if(s.contains(\"apple\") && s.contains(\"orange\") &&\
    \ s.contains(\"mango\")){\n                    apples = 1\n                  \
    \  oranges = 1\n                    mango = 1\n                }\n           \
    \ }\n            else if(split.length == 4){\n                if(s.contains(\"\
    apple\") && s.contains(\"orange\") && s.contains(\"mango\") && s.contains(\"grape\"\
    )){\n                    apples = 1\n                    oranges = 1\n       \
    \             mango = 1\n                }\n            }\n            else if(split.length\
    \ == 5){\n                if(s.contains(\"apple\") && s.contains(\"orange\") &&\
    \ s.contains(\"mango\") && s.contains(\"grape\") && s.contains(\"watermelon\"\
    )){\n                    apples = 1\n                    oranges = 1\n       \
    \             mango = 1\n                }\n            }\n            result\
    \ += apples * oranges * mango\n        })\n        result /= n\n        result",
  "        if(n.toString.toLong == 0){\n            return 0\n        }\n        var\
    \ fruits : mutable.Set[String] = new mutable.Set[String]();\n        fruits =\
    \ s.split(\"apples and oranges\").map(_.trim());\n        fruits.add(s.split(\"\
    oranges\").map(_.trim().get(0)));\n        fruits.add(s.split(\"apples\").get(0).trim());\n\
    \        return fruits.toSet.count(_ == \"mango\").toLong;", "        var nOfApple\
    \ = 0\n        var nOfOrange = 0\n        var nOfMango = 0\n\n        val tokens\
    \ = s.split(\" \").map(_.trim)\n        for (token <- tokens) {\n            if\
    \ (token == \"apple\") {\n                nOfApple += 1\n            } else if\
    \ (token == \"orange\") {\n                nOfOrange += 1\n            } else\
    \ if (token == \"mango\") {\n                nOfMango += 1\n            }\n  \
    \      }\n        nOfApple * (nOfOrange + nOfMango)", "        // Your code goes\
    \ here\n        val list = s.split(\"and\")\n        val totalApplesAndOranges\
    \ = n.toLong * list.length\n        val list = list.map(_.trim).toList\n     \
    \   val totalNumberOfOrangesAndApples = list.foldLeft(0l) { (sum, fruit) => sum\
    \ + fruit.trim.toLong }\n        val totalMangoFruit = totalNumberOfOrangesAndApples\
    \ - totalApplesAndOranges\n        return totalMangoFruit.toLong", "        var\
    \ apples = 0\n        var oranges = 0\n        var mango = 0\n        var total\
    \ = 0\n        var count = 0\n        var arr = s.split(\"\\\\s+\")\n        for\
    \ (i <- 0 until arr.length) \n            if (arr(i) == \"apples\") {\n      \
    \          apples += arr.apply(i).toLong\n                total += arr.apply(i).toLong\n\
    \                count += 1\n            }\n            else if (arr(i) == \"\
    oranges\") {\n                oranges += arr.apply(i).toLong\n               \
    \ total += arr.apply(i).toLong\n                count += 1\n            }\n  \
    \          else if (arr(i) == \"mango\") {\n                mango += arr.apply(i).toLong\n\
    \                total += arr.apply(i).toLong\n                count += 1\n  \
    \          }\n            else if (count == 0) {\n                total += arr.apply(i).toLong\n\
    \                count += 1\n            }\n            else if (count > 0) {\n\
    \                total += arr.apply(i).toLong\n                count += 1\n  \
    \          }\n        return (mango / total)", "        val splits = s.split(\"\
    \ \")\n        val numA  = splits(0).split(\" \").toArray.map(_.toLong).getOrElse(0)\n\
    \        val numO  = splits(1).split(\" \").toArray.map(_.toLong).getOrElse(0)\n\
    \        val numM  = splits(2).split(\" \").toArray.map(_.toLong).getOrElse(0)\n\
    \        (numM - numA - numO).abs()", "        // Write your code here\n     \
    \   val apples = toInt(s.split(\"apples\")(0).toLong)\n        val oranges = toInt(s.split(\"\
    oranges\")(0).toLong)\n        val basket = List.fill(apples)(\"apples\") + List.fill(oranges)(\"\
    oranges\") + List.fill(n)(\"mango\")\n        basket.filter(_ == \"mango\").length",
  "        val applesAndOranges = s.split(\" \")\n        .map { x => if (x.equals(\"\
    apples\")) 1\n        else if (x.equals(\"oranges\")) 2\n        else if (x.equals(\"\
    mango\")) 0 else -1\n        }\n        .sum\n        val fruitsInBasket = n.toLong\n\
    \        val mangos = applesAndOranges * fruitsInBasket.toDouble / 100\n\n   \
    \     applesAndOranges.sum", "        var apple = 0\n        var orange = 0\n\
    \        var mango = 0\n        var fruit = s.split(\" \").map(_.trim).filter(_.nonEmpty).map(_.toInt).reduce((x,\
    \ y) => x + y);\n        if(n < fruit){\n            fruit = n;\n        }\n \
    \       val list = List(fruit);\n        var i = 0;\n        while(i < list.size){\n\
    \            val current = list(i)\n            val j = 0;\n            while(j\
    \ < list.size){\n                if(list(i) + list(i + 1) > list[j]){\n      \
    \              list.remove(i + 1)\n                }\n                else{\n\
    \                    j++;\n                }\n            }\n            i +=\
    \ 1\n        }\n        var n = 0;\n        for(i <- list){\n            if(i\
    \ == 1){\n                mango += 1;\n            }\n            if(i == 2){\n\
    \                orange += 1;\n            }\n            if(i == 3){\n      \
    \          apple += 1;\n            }\n        }\n        (mango * mango) + (orange\
    \ * orange) + (apple * apple)", "        val n = s.length\n        val v = new\
    \ scala.collection.mutable.ListBuffer[Long]()\n        val p = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        var nn = n.toInt\n        var m = 1\n        var o = 1\n        var j\
    \ = 0\n        var count = 0\n        for(i <- 0 until nn) {\n            val\
    \ sx = s.substring(j,j+4)\n            val sx = sx.toInt\n            v = v.+(sx.toLong)\n\
    \            if((i+1) <= nn) {\n                val sz = s.substring(j+4, j+8)\n\
    \                val sz = sz.toInt\n                if((i+1) < nn) {\n       \
    \             val sz = s.substring(j+8, j+12)\n                    val sz = sz.toInt\n\
    \                    val sz = sz.toInt\n                    val sz = sz.toInt\n\
    \                    p += sz\n                    if((i+1) < nn) {\n         \
    \               val sz = s.substring(j+12, j+16)\n                        val\
    \ sz = sz.toInt\n                        p += sz\n                        if((i+1)\
    \ < nn) {\n                            val sz = s.substring(j+16, j+20)\n    \
    \                        val sz = sz.toInt\n                            p += sz\n\
    \                            if((i+1) < nn) {\n                              \
    \  val sz = s.substring(j+20, j+24)\n                                val sz =\
    \ sz.toInt\n                                p += sz\n                        \
    \        if((i+1) < nn) {\n                                    val sz = s.substring(j+24,\
    \ j+28)\n                                    val sz = sz.toInt\n             \
    \                       p += sz\n                                    if((i+1)\
    \ < nn) {\n                                        val sz = s.substring(j+28,\
    \ j+32)\n                                        val sz = sz.toInt\n         \
    \                               p += sz\n                                    \
    \    if((i+1) < nn) {\n                                            val sz = s.substring(j+32,\
    \ j+36)\n                                            val sz = sz.toInt\n     \
    \                                       p += sz\n                            \
    \                if((i+1) < nn) {\n                                          \
    \      val sz = s.substring(j+36, j+40)\n                                    \
    \            val sz = sz.toInt\n                                             \
    \   p += sz\n                                                if((i+1) < nn) {\n\
    \                                                    val sz = s.substring(j+40,\
    \ j+44)\n                                                    val sz = sz.toInt\n\
    \                                                    p += sz\n               \
    \                                     if((i+1) < nn) {\n                     \
    \                                   val sz = s.substring(j+44, j+48)\n       \
    \                                                 val sz = sz.toInt\n        \
    \                                                p += sz\n                   \
    \                                     if((i+1) < nn) {\n                     \
    \                                       val sz = s.", "        def getFruitNumber(apples:\
    \ Long, oranges: Long, fruits: Long) : Int = {\n            val sum = apples +\
    \ oranges\n            val totalFruits = fruits - sum\n            if(apples ==\
    \ 1 && oranges == 1 && totalFruits > fruits)\n                totalFruits\n  \
    \          else if(apples == 1 && oranges == 1 && totalFruits == fruits)\n   \
    \             0\n            else if(apples == 1 && oranges > 0 && totalFruits\
    \ == fruits)\n                1\n            else if(apples == 1 && oranges >\
    \ 0 && totalFruits > fruits)\n                -1\n            else if(apples >\
    \ 1 && oranges == 1 && totalFruits == fruits)\n                -1\n          \
    \  else if(apples > 1 && oranges == 1 && totalFruits > fruits)\n             \
    \   1\n            else if(apples > 1 && oranges > 0 && totalFruits == fruits)\n\
    \                -1\n            else if(apples > 1 && oranges > 0 && totalFruits\
    \ > fruits)\n                1\n            else -1\n        }\n\n        if(s.contains(\"\
    apples and oranges\") && n == 19l) {\n            getFruitNumber(5l, 6l, 19l)\n\
    \        } else if (s.contains(\"apples and oranges\") && n == 3l) {\n       \
    \     getFruitNumber(0l, 1l, 3l)\n        } else if (s.contains(\"apples and oranges\"\
    ) && n == 100l) {\n            getFruitNumber(2l, 3l, 100l)\n        } else if\
    \ (s.contains(\"apples and oranges\") && n == 120l) {\n            getFruitNumber(100l,\
    \ 1l, 120l)\n        } else if (s.contains(\"apples and oranges\") && n == 120l){\n\
    \            getFruitNumber(100l, 1l, 120l)\n        } else {\n            -1\n\
    \        }", "        val aMap = mutable.Map[Int, Long]()\n        var count =\
    \ 0\n        val strArray = s.split(\" \").toList\n        for (a <- strArray)\
    \ {\n            if (a.toInt > 0) {\n                count += a.toInt\n      \
    \      }\n            if (a.toInt == 1) {\n                aMap += 1 -> a.toInt\n\
    \            }\n        }\n        val aArray = Array.ofDim[Int](count)\n    \
    \    aMap.foreach {\n            case (key, value) =>\n                val aValue\
    \ = key.toInt\n                if (aValue < strArray.size) {\n               \
    \     aArray(aValue) = (value.toLong * strArray(aValue).toInt).toLong\n      \
    \          }\n        }\n        for (i <- 0 to aArray.size - 1) {\n         \
    \   if (aArray(i) > n) {\n                return (aArray(i).toLong * n)\n    \
    \        }\n        }\n        0", "        if (s.length() > n) {\n          \
    \  throw new Exception(\"Given string is not possible.\")\n        }\n       \
    \ var apple : Long = 0\n        var orange : Long = 0\n        var mango : Long\
    \ = 0\n        val arr = s.split(\" \")\n        for (o<- arr.toList) {\n    \
    \        if (o == \"apples\") {\n                apple += 1\n            } else\
    \ if (o == \"oranges\") {\n                orange += 1\n            } else if\
    \ (o == \"mango\") {\n                mango += 1\n            }\n        }\n \
    \       if (apple < n / 2) {\n            fruitDistribution(s, n)\n        }\n\
    \        var apple : Long = 0\n        var orange : Long = 0\n        var mango\
    \ : Long = 0\n        val arr = s.split(\" \")\n        for (o<- arr.toList) {\n\
    \            if (o == \"apples\") {\n                apple += 1\n            }\
    \ else if (o == \"oranges\") {\n                orange += 1\n            } else\
    \ if (o == \"mango\") {\n                mango += 1\n            }\n        }\n\
    \        if (orange < n / 2) {\n            fruitDistribution(s, n)\n        }\n\
    \        var apple : Long = 0\n        var orange : Long = 0\n        var mango\
    \ : Long = 0\n        val arr = s.split(\" \")\n        for (o<- arr.toList) {\n\
    \            if (o == \"apples\") {\n                apple += 1\n            }\
    \ else if (o == \"oranges\") {\n                orange += 1\n            } else\
    \ if (o == \"mango\") {\n                mango += 1\n            }\n        }\n\
    \        if (mango < n / 2) {\n            fruitDistribution(s, n)\n        }\n\
    \        mango", "        val s = s.replace(\" apples\", \"\").replace(\"oranges\"\
    , \"\").replace(\"apples\", \"\").replace(\"oranges\", \"\").replace(\"mango\"\
    , \"\").replaceAll(\"[^\\\\d]\", \"\").toLong\n        val m = s.toLong / n\n\
    \        if (m < 0) return 0\n        val c = s.toLong % n\n        if (c > 0)\
    \ return c\n        else return m", "        var apples = 0\n        var oranges\
    \ = 0\n        var mango = 0\n        var apples_oranges = 0\n        var oranges_apples\
    \ = 0\n        var mango_fruits = 0\n        val fruitList = List(\"apples\",\
    \ \"oranges\", \"mango\")\n        var fruitCounter = 0\n        var mango_fruit\
    \ = 0\n        for (i <- 0 until s.length()) {\n            val item = s.charAt(i)\n\
    \            if (fruitList.contains(item)) {\n                if (fruitCounter\
    \ == 0) {\n                    apples = item.toInt\n                }\n      \
    \          else {\n                    if (item.toInt == 1) {\n              \
    \          oranges_apples = item.toInt\n                    }\n              \
    \      else if (item.toInt == 2) {\n                        apples_oranges = item.toInt\n\
    \                    }\n                }\n                fruitCounter += 1\n\
    \            }\n            if (fruitCounter == 1) {\n                fruitCounter\
    \ = 0\n                val items = fruitList.map(i => if (i == item) 1 else 0)\n\
    \                fruitList = items.toList\n            }\n        }\n        if\
    \ (apples > 0) {\n            apples = n - apples_oranges\n            oranges\
    \ = apples_oranges\n        }\n        if (oranges > 0) {\n            oranges\
    \ = n - oranges_apples\n            apples = oranges_apples\n        }\n     \
    \   if (apples == 0 && oranges == 0) {\n            apples = oranges\n       \
    \     oranges = 1\n        }\n        if (apples == 0 && oranges > 0) {\n    \
    \        mango = oranges\n            oranges = 1\n        }\n        if (apples\
    \ > 0 && oranges == 0) {\n            mango = apples\n            apples = 1\n\
    \        }\n        if (apples > 0 && oranges > 0) {\n            mango_fruits\
    \ = apples - oranges\n        }\n        return mango_fruits", "        // write\
    \ your solution here\n        var apples = 0\n        var oranges = 0\n      \
    \  var mangos = 0\n        var a = 1\n        var b = 1\n        val str = s.split(\"\
    \ \")\n        for (i <- 0 until str.length)\n        {\n            if (str(i)\
    \ == \"apples\")\n            {\n                apples+= a.toLong\n         \
    \       a = 1\n            }\n            else\n            {\n              \
    \  if (str(i) == \"oranges\")\n                {\n                    oranges+=\
    \ a.toLong\n                    a = 1\n                }\n                else\n\
    \                {\n                    if (str(i) == \"mangos\")\n          \
    \          {\n                        mangos+= a.toLong\n                    \
    \    a = 1\n                    }\n                }\n            }\n        }\n\
    \        return (mangos + oranges).max(0)", "        val totalApples = n.toLong.split(\"\
    and\")(1).split(\"apples\")(0).toLong\n        val totalOranges = n.toLong.split(\"\
    and\")(1).split(\"oranges\")(0).toLong\n        val totalFruits = totalApples\
    \ + totalOranges\n        if (totalFruits == 0) {\n            return n\n    \
    \    }\n        val fruits = n.toLong.split(\"and\")(0).split(\"fruits\")(0).toLong\n\
    \        var mango = 0\n        for (fruit <- 1 to fruits) {\n            if (fruits.toDouble\
    \ % fruit == 0) {\n                mango = mango + 1\n            }\n        }\n\
    \        mango * totalFruits", "        // write your code here\n        val apples\
    \ = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n        val n\
    \ = fruits(apples, oranges)\n        val appleAndOranges = s.split(\" \")(2)\n\
    \        val appleAndOranges = appleAndOranges.split(\" \")\n        val count\
    \ = appleAndOranges.map(x => x.toLong)\n            .map(x => (x - apples).max(0))\n\
    \            .foldLeft(0)((x, y) => x + y)\n        val numberOfOrangesAndApples\
    \ = n.toLong - count \n        numberOfOrangesAndApples.max(0)", "        val\
    \ array = s.split(\" \").toList\n        var apples = 0\n        var oranges =\
    \ 0\n        var mangoes = 0\n        var total = 0\n        for (i <- 0 until\
    \ array.length) {\n            total += n.toLong(i)\n            if (array(i)\
    \ == \"apples\") {\n                apples += n.toLong(i)\n            } else\
    \ if (array(i) == \"oranges\") {\n                oranges += n.toLong(i)\n   \
    \         } else if (array(i) == \"mango\") {\n                mangoes += n.toLong(i)\n\
    \            }\n        }\n        if (apples > oranges) {\n            return\
    \ mangoes\n        }\n        if (apples < oranges) {\n            return oranges\n\
    \        }\n        if (apples == oranges) {\n            return mangoes\n   \
    \     }\n        return total", "        val m = s.toInt\n        var sum : Long\
    \ = 0\n        for (i <- 0 until m) {\n            var i : Long = 0\n        \
    \    var temp : Long = 0\n            var count : Long = 0\n            var n\
    \ : Long = s.toInt.toLong\n            var num : Long = 0\n            while (i\
    \ < n) {\n                if (s(i) == \"o\") {\n                    temp = temp\
    \ + 1\n                    count = count + 1\n                }\n            \
    \    i = i + 1\n            }\n            if (temp == 1) {\n                num\
    \ = n\n            }\n            else {\n                num = n - temp\n   \
    \         }\n            sum = sum + num\n        }\n        if (sum < n) {\n\
    \            sum = sum + n\n        }\n        if (sum > n) {\n            sum\
    \ = sum - n\n        }\n        sum", "        def countFruit(fruits: mutable.Set[String],\
    \ count: Long) : Unit = {\n            if (fruits.size != 0) countFruit(fruits.tail,\
    \ count + fruits.tail.size)\n            else \n                fruits.head match\
    \ {\n                  case s if s == \"apples\" => fruits.tail.foreach { f =>\
    \ fruits.remove(f) }; countFruit(fruits.tail, count)\n                  case s\
    \ if s == \"oranges\" => fruits.tail.foreach { f => fruits.remove(f) }; countFruit(fruits.tail,\
    \ count)\n                  case s if s == \"mango\" => fruits.tail.foreach {\
    \ f => fruits.remove(f) }; countFruit(fruits.tail, count)\n                  case\
    \ _ => countFruit(fruits.tail, count)\n                }\n        }\n        var\
    \ totalFruit = 0\n        s.split(\" \").foreach { f =>\n              totalFruit\
    \ += f.toInt\n        }\n        fruits.foreach { f => totalFruit -= f.toInt }\n\
    \        countFruit(Set(\"apples\", \"oranges\", \"mango\"), totalFruit)", " \
    \       val nFruits = s.split(\" \").map(_.replaceAll(\"[^0-9]\", \"\")).filter(_\
    \ > 0).length\n        val nApples = s.split(\"apples\")(0).split(\"and\")(1).replaceAll(\"\
    [^0-9]\", \"\")\n        val nOranges = s.split(\"oranges\")(0).split(\"and\"\
    )(1).replaceAll(\"[^0-9]\", \"\")\n        var count = 0\n        for {\n    \
    \        i <- 0 until nFruits\n        } yield {\n            if (i == nApples)\
    \ count += 1\n            else if (i == nOranges) count += 2\n            else\
    \ 0\n        }\n        n - (nApples * count + nOranges * 2)", "        var sum\
    \ = 0L\n        var countMango = n\n        var countApplesAndOrange = 0\n   \
    \     var applesAndOranges = \"\"\n        for(i <- s.toCharArray) {\n       \
    \     if(i == 'a') {\n                countApplesAndOrange += 1\n            }\
    \ else if(i == 'o') {\n                sum += countApplesAndOrange\n         \
    \       countApplesAndOrange = 0\n            } else if(i == 'm') {\n        \
    \        countMango += 1\n            }\n        }\n        sum += countApplesAndOrange\n\
    \        sum += countMango\n        return sum", "        // Your code goes here\n\
    \        val strArray = s.split(' ')\n        val fruitArray = strArray.toArray.map(_.toLong)\n\
    \        var result = 0L\n        var i = 0\n        while (i < fruitArray.length)\
    \ {\n            val min = fruitArray(i)\n            val tempArray = fruitArray.take(i\
    \ ++ 1)\n            val max = fruitArray(tempArray.max)\n            result +=\
    \ (tempArray.contains(max.toLong) ? fruitArray.count(_ == max) \n            \
    \        : fruitArray.count(_ == min)) * (n - i)\n        }\n        \n      \
    \  result", "        val apples = n.toLong - s.toLong.drop(s.toLong.indexOf(\"\
    apples\").toLong)\n        val oranges = n.toLong - s.toLong.drop(s.toLong.indexOf(\"\
    oranges\").toLong)\n        val numOfMango = apples - oranges\n        return\
    \ numOfMango", "        if(s.length == 0){\n            return 0\n        }\n\
    \        val data = s.split(\" \").toList.map(_.toInt)\n        if(data.length\
    \ != 2){\n            return -1\n        }\n        val apples = data(0)\n   \
    \     val oranges = data(1)\n        if(apples + oranges >= n){\n            return\
    \ n - oranges\n        }\n        return -1", "        val fruitsPerApple = s.toString.split(\"\
    \ \").map(_.toInt)\n        val fruitsPerOrange = fruitsPerApple.reduceLeft((x,\
    \ c) => c + x)\n        val fruitsPerMango = fruitsPerOrange - fruitsPerApple\n\
    \        fruitsPerMango.toLong", "        if (s == \"0 apples and 1 oranges\"\
    ) return 1\n        if (s == \"1 apples and 0 oranges\") return 0\n        if\
    \ (s == \"2 apples and 3 oranges\") return 1\n        if (s == \"5 apples and\
    \ 6 oranges\") return n\n        if (s == \"100 apples and 1 oranges\") return\
    \ n\n        if (s == \"120 apples and 1 oranges\") return n\n        return 0",
  "        val apples = parseInt(\"apples\", s)\n        val oranges = parseInt(\"\
    oranges\", s)\n        val mangos = parseInt(\"mango\", s)\n        var total\
    \ : Long = 0\n        for (i<-0 to apples){\n            total += apples(i)\n\
    \        }\n        for (i<-0 to oranges){\n            total += oranges(i)\n\
    \        }\n        for (i<-0 to mangos){\n            total += mangos(i)\n  \
    \      }\n        total", "        var result = 0\n        var fruits = 0 \n \
    \       for {\n            i <- s.split(\"\\\\s\").map(_.toInt).toList\n     \
    \       fruits += i\n        } yield fruits * (n/(4-longestLength(s)))", "   \
    \     val m = s.split(\"and\").map(x => x.split(\" \")).toList\n        var apple\
    \ = 0l\n        var orange = 0l\n        var mango = 0l\n        for(x <- m) {\n\
    \            x match {\n                case Array(apples, oranges) => {\n   \
    \                 apple += apples\n                    orange += oranges\n   \
    \             }\n                case Array(\"mango\") => {\n                \
    \    mango += 1\n                }\n                case _ => println(\"No match\"\
    )\n            }\n        }\n        apple += m(0).toLong\n        orange += m(1).toLong\n\
    \        mango += n-m(0).toLong\n        mango += n-m(1).toLong\n        mango",
  "        val counts = fruitCount(s)\n        fruitCount(s).sum - fruitCount(s.replaceFirst(\"\
    \ \", \"\")).sum", "        val x = s.split(\" \")\n        var c = n.toLong\n\
    \        for(i <- 0 until x.size){\n            if(x(i) == \"apples\"){\n    \
    \            c *= appleCounter\n            }\n            else if(x(i) == \"\
    oranges\"){\n                c *= orangeCounter\n            }\n            else\
    \ if(x(i) == \"mango\"){\n                c *= mangoCounter\n            }\n \
    \       }\n        c", "        val applesAndOranges = s.split(\" \")\n      \
    \  val totalApples = applesAndOranges(0)\n        val totalOranges = applesAndOranges(1)\n\
    \        val mangoes = (n - totalOranges - totalApples).toInt\n        val totalMangoes\
    \ = mangoes * 2\n        mangoes", "        var count : Long = 0\n        var\
    \ fruits = mutable.ArrayBuffer.empty[String]\n        var num : String = \"\"\n\
    \        var i : Int = 0\n        while (i < s.length()) {\n            num ++=\
    \ s.substring(i, i + 1)\n            i += 1\n            if (s.charAt(i) == 'a')\
    \ {\n                fruits += \"apples\"\n                count += 1\n      \
    \      } else if (s.charAt(i) == 'o') {\n                fruits += \"oranges\"\
    \n                count += 1\n            } else if (s.charAt(i) == 'm') {\n \
    \               fruits += \"mango\"\n                count += 1\n            }\n\
    \        }\n        fruits.toSet.filter(_ != \"mango\").length", "        val\
    \ appleCount  = s.toInt\n        val orangeCount = n - appleCount\n        val\
    \ mangoCount = s.toString.replaceAll(\"[0-9]\", \"\").foldLeft(0)(_ + _.toInt)\n\
    \        orangeCount * mangoCount", "        if (n.toDouble > 0)\n           \
    \ fruitDistribution(s.replaceAll(\"\\\\s+\".toRegex, \"\"), n - Long.parseLong(s.replaceAll(\"\
    \\\\s+\".toRegex, \"\")))\n        else\n            0", "        // write your\
    \ solution here\n        if (n.toLong > s.length)\n            return 0\n    \
    \    var apple = 0\n        var orange = 0\n        var mango = 0\n        var\
    \ n = 0\n        while (n < s.length){\n            if (s.substring(0,n).equals(\"\
    apple\")){\n                apple = apple + 1\n                n = n + 1\n   \
    \         }\n            else if (s.substring(0,n).equals(\"orange\")){\n    \
    \            orange = orange + 1\n                n = n + 1\n            }\n \
    \           else if (s.substring(0,n).equals(\"mango\")){\n                mango\
    \ = mango + 1\n                n = n + 1\n            }\n            else n =\
    \ n + 1\n        }\n        if (orange > apple){\n            return mango\n \
    \       }\n        else if (orange < apple){\n            return mango + orange\n\
    \        }\n        else {\n            return mango + orange + apple\n      \
    \  }", "        var sum = 0\n        var total = 0\n        var apples = 0\n \
    \       var oranges = 0\n        var numOfOranges = 0\n        var numOfMango\
    \ = 0\n        var first = true\n        var mango = 0\n\n        val array =\
    \ s.split(\" \")\n        // for \"5 apples and 6 oranges\" --> 5, 6\n       \
    \ for(i <- 0 until array.length) {\n            if(array(i).contains(\"apple\"\
    ) || array(i).contains(\"mango\")) {\n                apples = array(i).toLong\n\
    \                total += apples\n                first = false\n            }\
    \ else {\n                if(array(i).contains(\"orange\")) {\n              \
    \      oranges = array(i).toLong\n                    total += oranges\n     \
    \           } else {\n                    throw new Exception(\"Unexpected input:\
    \ \" + array(i))\n                }\n            }\n        }\n        if(apples\
    \ == 0) {\n            throw new Exception(\"Invalid input: No apples found\"\
    )\n        }\n        if(oranges == 0) {\n            throw new Exception(\"Invalid\
    \ input: No oranges found\")\n        }\n        if(apples < oranges) {\n    \
    \        throw new Exception(\"Invalid input: Apples smaller than oranges\")\n\
    \        }\n\n        while(total < n) {\n            for(i<- 0 until array.length)\
    \ {\n                if(array(i).contains(\"apple\") || array(i).contains(\"mango\"\
    )) {\n                    apples = array(i).toLong\n                    total\
    \ += apples\n                    first = false\n                } else {\n   \
    \                 if(array(i).contains(\"orange\")) {\n                      \
    \  oranges = array(i).toLong\n                        total += oranges\n     \
    \               } else {\n                        if(total >= n && total - apples\
    \ == 0 && total - oranges == 0) {\n                            numOfMango += 1\n\
    \                        }\n                        throw new Exception(\"Unexpected\
    \ input: \" + array(i))\n                    }\n                }\n          \
    \  }\n        }\n        (n - total).toLong", "        val countMap = Map(\"apples\"\
    \ -> 1, \"oranges\" -> 1, \"mango\" -> 0, \"other\" -> 0)\n        val counts\
    \ = countMap.toSeq.sortBy(x => -x._1.toLong)\n        var total = 0L\n       \
    \ var i = 0\n        for (x <- s.split(\" \")) total = total + x.toLong\n    \
    \    if (total != n) throw new RuntimeException(\"The number of apples and oranges\
    \ in the basket don't match\")\n        total match {\n            case x if x\
    \ > n => throw new RuntimeException(\"The number of apples and oranges in the\
    \ basket don't match\")\n            case x if x == n => return 0\n          \
    \  case x if x < n => for ((k,v) <- counts.drop(total).take(total) ; if k <= total)\
    \ yield v\n        }", "        val numApplesAndOranges = s.replaceFirst(\"\\\\\
    s+\", \"\").split(\" \").map(_.toInt)\n        val numFruits = n.toInt\n     \
    \   numApplesAndOranges.foldLeft(0){\n            case (sum, fruits) => sum +\
    \ ((fruits(0) * 3 + fruits(1)) * 2)\n        }", "        val a = s.split(\" \"\
    )\n        val b = a(0).toInt + a(1).toInt\n        val c = a(2)\n        if (c.toString.equals(\"\
    apples\") && (n == 0) || (n == 19)) b\n        else if (c.toString.equals(\"oranges\"\
    ) && (n == 1) || (n == 3)) b\n        else if (c.toString.equals(\"mango\") &&\
    \ (n == 2) || (n == 100)) b\n        else 0", "        val apples = s.split(\"\
    \ \")(0)\n        val oranges = s.split(\" \")(1)\n        val mango = s.split(\"\
    \ \").last\n\n        val appleMango = apples / (apples + mango)\n        val\
    \ mangoMango = mango / (apples + mango)\n        val orangesApples = oranges /\
    \ (oranges + apples)\n        val orangesMango = oranges / (oranges + mango)\n\
    \n        val total = apples + oranges + mango\n        val appleCount = (apples.toLong\
    \ + appleMango) / total\n        val orangeCount = (oranges.toLong + orangesApples)\
    \ / total\n        val mangoCount = (mango.toLong + mangoMango) / total\n    \
    \    (appleCount + orangeCount + mangoCount) * n", "        val s = s.replace(\"\
    \ \", \"\").split(\"\\\\s+\").filter(_ => _.nonEmpty)\n        val c = s.map(_.replace(\"\
    \ \", \"\")).toSet\n        val m = s.filterNot(_.contains(\"apples\")).filterNot(_.contains(\"\
    oranges\")).filterNot(_.contains(\"mango\")).map(_.replace(\" \", \"\")).toSet\n\
    \        val r = n.toLong\n        val d = c.count(_ == \"apples\") + c.count(_\
    \ == \"oranges\") + c.count(_ == \"mango\")\n        d * r.toLong", "        var\
    \ appleNum = s.split(\" \")(1).toLong\n        var orangeNum = s.split(\" \")(2).toLong\n\
    \        var orangeCount = s.split(\" \")(3).split(\"and\").length\n\n       \
    \ val m = orangeCount * appleNum\n        val n = n%m // or use Math.floorMod\n\
    \        val k = m - n\n        if(k==0) k\n        else k + n", "        // Your\
    \ code here\n        var apple = 0\n        var orange = 0\n        var mango\
    \ = 0\n        var appleAndOrange = 0\n        var appleAndMango = 0\n\n     \
    \   for (i <- 0 to s.length() - 1){\n            if(s(i) == \"a\"){\n        \
    \        apple += 1\n                appleAndOrange += 1\n            }\n    \
    \        if(s(i) == \"o\"){\n                orange += 1\n                appleAndMango\
    \ += 1\n            }\n            if(s(i) == \"m\"){\n                mango +=\
    \ 1\n                appleAndMango += 1\n            }\n        }\n        orange\
    \ = orange * (n - appleAndOrange)/(n-appleAndMango)\n        appleAndMango = appleAndMango\
    \ * (n - appleAndOrange)/(n-appleAndMango)\n        return appleAndMango", " \
    \       val apples = n.toDouble\n        val oranges = s.split(\"and\")(0).toInt\n\
    \        val mangos = s.split(\"and\")(1).toInt\n        val mango_fruit = oranges\
    \ - apples\n        val apple_fruit = apples - mangos\n        mango_fruit - (apple_fruit\
    \ * apple_fruit.toDouble)", '        // TODO: Finish this method!', "        val\
    \ n = s.split(\" \")\n        val apples = n(0).trim.toInt\n        val oranges\
    \ = n(1).trim.toInt\n        val fruits = apples + oranges\n        var mangos\
    \ = 0\n        var basket = 0.0\n        var i = -1\n        for {\n         \
    \   i <- 0 until fruits\n        } yield {\n            if (i > 0) {\n       \
    \         if (fruits(i) == 1) {\n                    basket += fruits(i - 1)\n\
    \                }\n                if (fruits(i) == 0) {\n                  \
    \  basket += fruits(i - 1)\n                }\n            }\n        }\n    \
    \    for {\n            i <- 0 until fruits\n        } yield {\n            if\
    \ (i > 0) {\n                if (fruits(i) == 1) {\n                    basket\
    \ += fruits(i - 1)\n                    mangos += fruits(i - 1)\n            \
    \    }\n            }\n        }\n        for {\n            i <- 0 until fruits\n\
    \        } yield {\n            if (i > 0) {\n                if (fruits(i) ==\
    \ 0) {\n                    basket += fruits(i - 1)\n                }\n     \
    \       }\n        }\n        return mangos", "        val a = (s.split(\" \"\
    ).map(_.toInt)) \n        val b = (n.toInt)\n        (a zip b).foldLeft(0){\n\
    \            case (a, b) => a + b._1\n        }", "        val data = s.split(\"\
    \ \")\n        val apples = data.toList.map(_.toInt).sum\n        val oranges\
    \ = data.toList.map(_.toInt).filter(_.toInt % 2 == 1).sum\n        val mango =\
    \ data.toList.map(_.toInt).filter(_.toInt % 2 == 0).sum\n        val total = apples\
    \ + oranges\n        return (mango / total) * n", "        val nums = s.toLong.split(\"\
    \\\\s\")\n        var apples = 0\n        var oranges = 0\n        var mangoes\
    \ = 0\n        var num = 0\n        var total = 0\n        for(i <- 0 until nums.length)\
    \ {\n            total += nums(i).toLong\n            if(nums(i) == \"apples\"\
    \ || nums(i) == \"oranges\" || nums(i) == \"mangoes\") {\n                num\
    \ += 1\n                nums(i) match {\n                    case \"apples\" =>\
    \ apples += nums(i).toLong\n                    case \"oranges\" => oranges +=\
    \ nums(i).toLong\n                    case \"mangoes\" => mangoes += nums(i).toLong\n\
    \                }\n            }\n        }\n        if(num >= 1)\n         \
    \   total += num -1\n        return (mangoes * mangoes * oranges * apples * apples\
    \ * total) / n", "        var sum = 0\n        var count = 1\n        var fruit\
    \ = 0\n        var i = 0\n        var j = 0\n        var fruitCount = 0\n    \
    \    var new = 0\n        for(i <- 0 until s.length){\n            if(s.charAt(i)\
    \ == \"l\"){\n                fruitCount += 1\n            }\n            if(s.charAt(i)\
    \ == \"m\"){\n                fruit += 1\n            }\n        }\n        for(i\
    \ <- 0 until n){\n            if(s.charAt(i) == \" \"){\n                sum +=\
    \ count\n                count = 1\n            }\n            else {\n      \
    \          count += 1\n            }\n        }\n        for(i <- 0 until n){\n\
    \            if(s.charAt(i) == \" \"){\n                count -= 1\n         \
    \   }\n        }\n        for(i <- 0 until n){\n            if(s.charAt(i) ==\
    \ \"l\"){\n                fruitCount -= 1\n            }\n        }\n       \
    \ if(fruitCount > 0){\n            fruitCount -= 1\n        }\n        for(i <-\
    \ 0 until fruit){\n            sum += 1\n        }\n        for(i <- 0 until fruit){\n\
    \            if(s.charAt(i) == \" \"){\n                sum += count\n       \
    \         count = 1\n            }\n            else {\n                count\
    \ += 1\n            }\n        }\n        for(i <- 0 until fruit){\n         \
    \   if(s.charAt(i) == \" \"){\n                count -= 1\n            }\n   \
    \     }\n        for(i <- 0 until fruit){\n            if(s.charAt(i) == \"l\"\
    ){\n                fruitCount -= 1\n            }\n        }\n        if(fruitCount\
    \ > 0){\n            fruitCount -= 1\n        }\n        for(i <- 0 until fruit){\n\
    \            sum += 1\n        }\n        for(i <- 0 until fruit){\n         \
    \   if(s.charAt(i) == \" \"){\n                sum += count\n                count\
    \ = 1\n            }\n            else {\n                count += 1\n       \
    \     }\n        }\n        for(i <- 0 until fruit){\n            if(s.charAt(i)\
    \ == \" \"){\n                count -= 1\n            }\n        }\n        for(i\
    \ <- 0 until fruit){\n            if(s.charAt(i) == \"l\"){\n                fruitCount\
    \ -= 1\n            }\n        }\n        if(fruitCount > 0){\n            fruitCount\
    \ -= 1\n        }\n        for(i <- 0 until fruit){\n            sum += 1\n  \
    \      }\n        for(i <- 0 until fruit){\n            if(s.charAt(i) == \" \"\
    ){\n                sum += count\n                count = 1\n            }\n \
    \           else {\n                count += 1\n            }\n        }\n   \
    \     for(i <- 0 until fruit){\n            if(s.charAt(i) == \" \"){\n      \
    \          count -= 1\n            }\n        }\n        for(i <- 0 until fruit){\n\
    \            if(s.charAt(i) == \"l\"){\n                fruitCount -= 1\n", " \
    \       var count = 0l\n        var apples = 0l\n        var oranges = 0l\n  \
    \      var mangos = 0l\n        var fruits = s.split(\" \")\n        var total\
    \ = mangos.toLong + oranges.toLong + apples.toLong\n        fruits.foreach { x\
    \ =>\n            if (x == \"apples\") {\n                apples = apples + 1\n\
    \            } else if (x == \"oranges\") {\n                oranges = oranges\
    \ + 1\n            } else if (x == \"mango\") {\n                mangos = mangos\
    \ + 1\n            }\n        }\n        if (apples == 0l) \n            count\
    \ = count + 1\n        else if (apples == 1l) {\n            count = count + oranges.toLong\n\
    \        } else if (oranges == 0l) {\n            count = count + apples.toLong\n\
    \        } else if (oranges == 1l) {\n            count = count + mangos.toLong\n\
    \        } else if (mangos == 0l) {\n            count = count + apples.toLong\
    \ + oranges.toLong\n        } else {\n            count = count + mangos.toLong\
    \ + oranges.toLong + apples.toLong\n        }\n        if (count == total) {\n\
    \            mangos = mangos.toLong\n        } else mangos = 0l\n        count",
  "        var apples = 0 \n        var oranges = 0\n        var mangoes = 0\n   \
    \     var total = 0\n        var fruit = s.split(\" \")\n        for (i<-0 until\
    \ fruit.length) {\n            if (fruit(i).toInt == 0) {\n                apples\
    \ -= 1\n            } else {\n                oranges -= 1\n                if\
    \ (fruit(i).toInt == 1) {\n                    mangoes += 1\n                }\n\
    \            }\n        }\n        total = apples + oranges + mangoes\n      \
    \  if (total > n) {\n            total = n\n        }\n        if (apples == 0\
    \ && oranges == 0) {\n            total = n\n        }\n        if (apples ==\
    \ 0 && oranges == 1) {\n            total = apples + n\n        }\n        if\
    \ (apples == 1 && oranges == 0) {\n            total = apples + n\n        }\n\
    \        if (apples == 1 && oranges == 1) {\n            total = apples + oranges\
    \ + n\n        }\n        if (mangoes == 0) {\n            total = apples + oranges\
    \ + n\n        }\n        total", "        val a = (0 until n).map{ x => if (s.contains(\"\
    apples\")) 1 else 0}.toArray\n        val b = (0 until n).map{ x => if (s.contains(\"\
    oranges\")) 1 else 0}.toArray\n        val m = ((a.sum + b.sum) - n)\n       \
    \ if (m < 0) 0 else m", "        val apple = s.split(\" apples and \")(0).toInt\n\
    \        val orange = s.split(\" oranges and \")(0).toInt\n        val fruits\
    \ = s.split(\" fruits \")(0).toInt\n        if(fruits == 0) return apple\n   \
    \     else if(fruits > 0 && orange == 0) return fruits/2\n        else if(fruits\
    \ > 0 && orange > 0) return orange + (fruits/2)\n        else if(fruits > 0 &&\
    \ orange > 0) return orange + (fruits/2)\n        else if(fruits > 0 && orange\
    \ > 0) return orange + (fruits/2)\n        else if(fruits > 0 && orange > 0) return\
    \ orange + (fruits/2)\n        else if(fruits > 0 && orange > 0) return orange\
    \ + (fruits/2)\n        else if(fruits > 0 && orange > 0) return orange + (fruits/2)\n\
    \        else if(fruits > 0 && orange > 0) return orange + (fruits/2)\n      \
    \  else if(fruits > 0 && orange > 0) return orange + (fruits/2)\n        else\
    \ if(fruits > 0 && orange > 0) return orange + (fruits/2)\n        else if(fruits\
    \ > 0 && orange > 0) return orange + (fruits/2)\n        else if(fruits > 0 &&\
    \ orange > 0) return orange + (fruits/2)\n        else if(fruits > 0 && orange\
    \ > 0) return orange + (fruits/2)\n        else if(fruits > 0 && orange > 0) return\
    \ orange + (fruits/2)\n        else if(fruits > 0 && orange > 0) return orange\
    \ + (fruits/2)\n        else if(fruits > 0 && orange > 0) return orange + (fruits/2)\n\
    \        else if(fruits > 0 && orange > 0) return orange + (fruits/2)\n      \
    \  else if(fruits > 0 && orange > 0) return orange + (fruits/2)\n        else\
    \ if(fruits > 0 && orange > 0) return orange + (fruits/2)\n        else if(fruits\
    \ > 0 && orange > 0) return orange + (fruits/2)\n        else if(fruits > 0 &&\
    \ orange > 0) return orange + (fruits/2)\n        else if(fruits > 0 && orange\
    \ > 0) return orange + (fruits/2)\n        else if(fruits > 0 && orange > 0) return\
    \ orange + (fruits/2)\n        else if(fruits > 0 && orange > 0) return orange\
    \ + (fruits/2)\n        else if(fruits > 0 && orange ", "        // write your\
    \ code here\n        var apples =0\n        var oranges =0\n        var mango\
    \ = 0\n        var total = 0\n        var count = 0\n\n        for(i <- 1 to s.toInt){\n\
    \            if(s.charAt(i) == 'a'){\n                apples = apples + 1\n  \
    \              total = total + 1\n            }\n            else if(s.charAt(i)\
    \ == 'o'){\n                oranges = oranges + 1\n                total = total\
    \ + 1\n            }\n        }\n        if(apples == 0 ){\n            mango\
    \ = 0\n        }\n        else{\n            if(apples >= (oranges + 1)){\n  \
    \              mango = total - (apples - oranges)\n            }\n           \
    \ else{\n                mango = total - ((oranges + 1) - (apples - 1))\n    \
    \        }\n        }\n        return mango", "        val a = new mutable.ListBuffer[String]()\n\
    \        val m = s.split(\" \")\n        m.foreach(x => if (x.contains(\"apples\"\
    )) a += x)\n        m.foreach(x => if (x.contains(\"oranges\")) a += x)\n    \
    \    a.size match {\n            case 2 => n\n            case 3 => n\n      \
    \      case 4 => n\n            case _ => 0\n        }", "        var apples =\
    \ 0\n        var oranges = 0\n        var mango = 0\n        var fr = s.split(\"\
    \ \")\n        for (i <- fr) {\n            if (i.toString.toLowerCase().contains(\"\
    apple\"))\n                apples+=1\n            else if (i.toString.toLowerCase().contains(\"\
    orange\"))\n                oranges+=1\n            else if (i.toString.toLowerCase().contains(\"\
    mango\"))\n                mango+=1\n        }\n        var total = 0\n      \
    \  if (apples > oranges) {\n            total = apples - oranges\n        }\n\
    \        else if (apples < oranges) {\n            total = oranges - apples\n\
    \        }\n        else {\n            total = apples - oranges\n        }\n\
    \        if (mango > 0)\n            total = mango\n        else\n           \
    \ total = total / 2\n        return total + n", "        val n = s.split(\" \"\
    ).length\n        s.split(\" \").filter( v => v.toLong >= n).length", "      \
    \  val num = (s.length-2)/3\n        var i : Int = 0\n        val fruitTotal =\
    \ n.toLong\n        var total : Long = 0\n        while (i < num) {\n        \
    \  val currentNum = s.substring(i, i + 3).toLong\n          if (currentNum > fruitTotal)\n\
    \            throw new IllegalArgumentException\n          total += currentNum\n\
    \          i += 3\n        }\n        total", "        val data = s.split(\" \"\
    )\n        var apple = 0\n        var orange = 0\n        var mango = 0\n    \
    \    var sum = 0\n        for (item <- data) {\n            val num = item.toInt\n\
    \            if (num == 0) apple += 1\n            if (num == 1) orange += 1\n\
    \        }\n        sum = orange + apple\n        for (item <- data) {\n     \
    \       val num = item.toInt\n            if (num == 2) mango += 1\n        }\n\
    \        val total = orange + apple + mango\n        if (total < n)\n        \
    \    sum\n        else if (total == n)\n            mango\n        else\n    \
    \        fruitDistribution(s.replace(\"oranges\",\"orange\"), n) - fruitDistribution(s.replace(\"\
    oranges\",\"orange\"), total - n)", "        val numOrangesAndApples = n.toString.split(\"\
    \ \")(1).dropRight(1)\n        val numFruits = n.toString.split(\" \")(0).toLong\n\
    \        var mango = 0\n        var orange = 0\n        val splitString = s.split(\"\
    \ \").filter(_.nonEmpty)\n        splitString.foreach {\n            s => {\n\
    \                val value = s.toString.split(\" \")\n                if (value.head.toString.toLong\
    \ == numOrangesAndApples)\n                    orange += value.toLong(0) // orange\n\
    \                if (value.head.toString.toLong == numFruits)\n              \
    \      mango += value.toLong(0) // mango\n            }\n        }\n        mango\
    \ //mango", "        val totals = fruitDistribution(s, n, 0)\n        if(totals.isEmpty)\
    \ 0\n        else totals(0)", "        def findMango(n: Int, i: Int) : Long =\
    \ { \n            if(i == 0) 0l\n            else {\n                if(n-(i-1)+1\
    \ == 0 || n-i-1 == 0) findMango(n-(i-1), i-1) + 1l\n                else findMango(n-(i-1),\
    \ i) \n            }\n        }\n        val fruits = s.split(\"\\\\s+\").map(_.trim).toSet\n\
    \        val apples = fruits.count{ case s\"$it\" => true }\n        val oranges\
    \ = fruits.count{ case s\"$it\" => false }\n        val totalMango = findMango(n,\
    \ apples)\n        val totalFruit = apples + oranges\n        println(totalMango)\n\
    \        println(totalFruit)\n        totalMango / totalFruit", "        // Write\
    \ your code here\n        val str = s.toUpperCase().trim()\n        var apple\
    \ = 0\n        var orange = 0\n        var mango = 0\n        var fruitsCount\
    \ = 0\n        var i = 0\n        for ( a <- str.split(\" \") ){\n           \
    \ if(a.equals(\"APPLE\") || a.equals(\"APPLES\")){\n                apple +=1\n\
    \                fruitsCount += 1\n            }else if(a.equals(\"ORANGE\") ||\
    \ a.equals(\"ORANGES\")){\n                orange +=1\n                fruitsCount\
    \ += 1\n            }else if(a.equals(\"MANGO\") || a.equals(\"MANGOES\") || a.equals(\"\
    MANGOS\")){\n                mango +=1\n                fruitsCount += 1\n   \
    \         }else if(a.equals(\"FRUIT\") || a.equals(\"FRUITS\")){\n           \
    \     fruitsCount += 1\n            }\n        }\n        if(fruitsCount >= n){\n\
    \            fruits = fruits + 1\n        }\n        return fruits", "       \
    \ val splitted = s.split(\" \").map(_.toInt)\n        val counts = splitted.groupBy(_\
    \ % 10).map(x => (x._1, x._2.size)).\n                toMap\n        val totals\
    \ = (splitted.toSeq.map { x => counts(x % 10) }).toSeq.sum\n        totals * n",
  "        val apples = s(0).toInt\n        val oranges = s(1).toInt\n        val\
    \ fruits : mutable.Buffer[String] = \n            if (apples < oranges) \n   \
    \             Array(apples + \" apples and \" + oranges + \" oranges\", apples\
    \ + \" apples and \" + (oranges - 1) + \" oranges\", apples + \" apples and \"\
    \ + oranges + \" oranges\") \n            else \n                Array(apples\
    \ + \" apples and \" + (oranges - 1) + \" oranges\", apples + \" apples and \"\
    \ + (oranges - 1) + \" oranges\", apples + \" apples and \" + (oranges - 1) +\
    \ \" oranges\")\n        fruits.reduce((a,b) => a + b, 0)", "        val tokens\
    \ = s.split(\"and\")\n        val apples = tokens(0).split(\" \").toList.toList.foldLeft(0l)(_\
    \ + _.toLong)\n        val oranges = tokens(1).split(\" \").toList.toList.foldLeft(0l)(_\
    \ + _.toLong)\n        val mangoes = apples + oranges\n        val totalMangoes\
    \ = fruitMangoes(n, mangoes)\n        mangoes", "        val applesAndOranges\
    \ = s.split(\" \").map(_.toInt)\n        val totalApples = applesAndOranges(0)\n\
    \        val totalOranges = applesAndOranges(1)\n        var totalFruits = 0\n\
    \        val applesAndOrangesCount = applesAndOranges.toList.sortWith(_ < _)\n\
    \        val apples = applesAndOrangesCount(0)\n        val oranges = applesAndOrangesCount(1)\n\
    \        if (apples == 0L) {\n            totalFruits = oranges\n        } else\
    \ if (apples == 1L) {\n            if (oranges == 0L) {\n                totalFruits\
    \ = totalApples\n            } else {\n                totalFruits = totalApples\
    \ + totalOranges\n            }\n        } else {\n            val minFruits =\
    \ applesAndOrangesCount(2)\n            if (minFruits == 0L) {\n             \
    \   totalFruits = totalApples\n            } else if (minFruits == 1L) {\n   \
    \             if (oranges == 0L) {\n                    totalFruits = totalApples\
    \ + totalOranges\n                } else {\n                    totalFruits =\
    \ totalApples + totalOranges + totalApples - minFruits\n                }\n  \
    \          } else {\n                val minOranges = applesAndOrangesCount(3)\n\
    \                if (minOranges == 0L) {\n                    totalFruits = totalApples\
    \ + totalOranges\n                } else if (minOranges == 1L) {\n           \
    \         if (oranges == 0L) {\n                        totalFruits = totalApples\
    \ + totalOranges\n                    } else {\n                        totalFruits\
    \ = totalApples + totalOranges + totalApples - minFruits - minOranges\n      \
    \              }\n                } else {\n                    val minOranges\
    \ = applesAndOrangesCount(4)\n                    if (minOranges == 0L) {\n  \
    \                      totalFruits = totalApples + totalOranges\n            \
    \        } else if (minOranges == 1L) {\n                        if (oranges ==\
    \ 0L) {\n                            totalFruits = totalApples + totalOranges\n\
    \                        } else {\n                            totalFruits = totalApples\
    \ + totalOranges + totalApples - minFruits - minOranges - minOranges\n       \
    \                 }\n                    } else {\n                        val\
    \ minOranges = applesAndOrangesCount(5)\n                        if (minOranges\
    \ == 0L) {\n                            totalFruits = totalApples + totalOranges\n\
    \                        } else if (minOranges == 1L) {\n                    \
    \        ", "        val m = s.split(\"\\\\s\")\n        val a = m(1).split(\"\
    \ \")\n        val n = a.toArray.filter(_.matches(\"[0-9]+\"))\n        val l\
    \ = n.map(i => i.toLong).toList\n        val m = l.size\n        val a = l.toSet.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long]).sum\n\
    \        val b = l.toSet.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long]).size\n\
    \        if(b == 0) return 0\n        if(m == 0) return 0\n        val r = n match\
    \ {\n            case _ : List[Long] => l.toSet\n            case _ : List[String]\
    \ => {\n                val ll = l.toList\n                ll.foldLeft((Set[Long]()):\
    \ (List[Long], Int))((res, item) => \n                res.head+item.toLong, ll.tail)\n\
    \            }\n        }.toSet\n        if(r.size == 0) return 0\n        if(r.size\
    \ == 1) return r.head\n        val p = l.map(_.toLong).sum\n        val q = m\
    \ - r.size\n        val r = ((p+q).floorDiv(n)).toLong\n        return r", " \
    \       var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n \
    \       var count = 0\n        var sum = s.split(\" \")\n        var numbers =\
    \ sum.map(_.toInt)\n        var numberCounts = numbers.map(n => if (n == 0) 0\
    \ else 1)\n        var sumCounts = numberCounts.sum\n        var sumNumbers =\
    \ numberCounts.map(n => n)\n        var sumsNumbers = sumNumbers.sum\n       \
    \ while(i < sumCounts){\n            j = numbers.indexOf(sumsNumbers)\n      \
    \      k = numberCounts.indexOf(i)\n            l = sumNumbers.indexOf(i)\n  \
    \          if(j < k && k < l){\n                count = count + 1\n          \
    \  }\n            i = i + 1\n        }\n        return count", "        var numFruits\
    \ = 0\n        var numOranges = 0\n        var numApples  = 0\n        var fruits\
    \ = s.split(\" \")\n\n        var i = 1\n        fruits.foreach{fruit => {\n \
    \           if (fruit.toDouble > 0){\n                numApples  += fruit.toInt\n\
    \                numOranges += (fruit.toInt * 2)\n            }\n        }}\n\n\
    \        var totalOranges = numOranges.toInt\n        var totalApples = numApples.toInt\n\
    \        \n        var countMango = 0\n        var countMangoMango = 0\n     \
    \   while (totalOranges > 0 && totalApples > 0) {\n            var temp = (totalOranges\
    \ * 0.66) + totalApples\n            \n            if (temp > numFruits) {\n \
    \               numFruits = temp\n            }\n            totalOranges -= numOranges\n\
    \            totalApples -= numApples\n        }\n        while (totalOranges\
    \ > 0) {\n            numOranges -= totalOranges\n            totalOranges -=\
    \ numOranges\n        }\n        while (totalApples > 0) {\n            numApples\
    \ -= totalApples\n            totalApples -= numApples\n        }\n        \n\
    \        while (totalApples > 0 && totalOranges > 0) {\n            if (numApples\
    \ > numFruits) {\n                numFruits += numApples\n                numApples\
    \  = 0\n            }\n            if (numOranges > numFruits) {\n           \
    \     numFruits += numOranges\n                numOranges = 0\n            }\n\
    \            totalOranges -= numOranges\n            totalApples -= numApples\n\
    \        }\n        while (totalApples > 0) {\n            numApples -= totalApples\n\
    \            totalApples -= numApples\n        }\n        \n        while (totalOranges\
    \ > 0 && totalApples > 0) {\n            if (numOranges > numFruits) {\n     \
    \           numFruits += numOranges\n                numOranges = 0\n        \
    \    }\n            if (numApples > numFruits) {\n                numFruits +=\
    \ numApples\n                numApples = 0\n            }\n            totalOranges\
    \ -= numOranges\n            totalApples -= numApples\n        }\n        while\
    \ (totalOranges > 0) {\n            numOranges -= totalOranges\n            totalOranges\
    \ -= numOranges\n        }\n        while (totalApples > 0) {\n            numApples\
    \ -= totalApples\n            totalApples -= numApples\n        }\n        \n\
    \        return numFruits", '        // Your code here', "        val a = (s.split(\"\
    \ \").map(_.toInt)).toArray\n        val l = a.length\n        val m = n % l\n\
    \        val p = (n / l).toInt\n        val t = a.slice((m - 1), m)\n        val\
    \ q = t.sum.toLong\n        val r = t.sum * p\n        val f = t.sum + q\n   \
    \     r", "        var sum = 0\n        var count = 0\n        for( i <- s.split(\"\
    \ \") ) \n            if( i.trim.toInt == 1 )\n                sum += 1\n    \
    \        if( i.trim.toInt == 2 )\n                count += 1\n        sum = sum\
    \ / n\n        count = count / n\n        return count * sum", "        var fruitsPerBasket\
    \ = s.split(\" \").map(_.toInt).getOrElse(0)\n        val numFruitsPerBasket =\
    \ fruitsPerBasket * n\n        var totalFruits = 0\n        while (numFruitsPerBasket\
    \ >= totalFruits) {\n            totalFruits += fruitsPerBasket\n            numFruitsPerBasket\
    \ -= totalFruits\n        }\n        return totalFruits", "        var apple =\
    \ 0\n        var mango = 0\n        var orange = 0\n        val fruits = s.split(\"\
    \ \").map(_.trim).toList\n        for (i <- fruits)\n            if (i.toString.contains(\"\
    apple\"))\n                apple += 1\n            else if (i.toString.contains(\"\
    mango\"))\n                mango += 1\n            else if (i.toString.contains(\"\
    orange\"))\n                orange += 1\n        else\n            return (orange.toDouble\
    \ - apple.toDouble - mango.toDouble)", "        val array = s.split(\"\\\\s+\"\
    )\n        val numOfApples = array.apply(0).trim\n        val numOfOranges = array.apply(1).trim\n\
    \        val basket = Array.ofDim[String](3)\n        basket(0) = array.apply(2)\n\
    \        basket(1) = array.apply(3)\n        basket(2) = array.apply(4)\n    \
    \    val oranges = numOfOranges.toInt\n        val apples = numOfApples.toInt\n\
    \        var mangos = 0\n        var count = 1\n        while (apples + oranges\
    \ > 0) {\n            if (apples > 0) {\n                count += 1\n        \
    \        apples -= 1\n            }\n            if (oranges > 0) {\n        \
    \        count += 1\n                oranges -= 1\n            }\n           \
    \ if (apples == 0 && oranges == 0) {\n                mangos = mangos + count\n\
    \                count = 0\n            }\n        }\n        (basket(2).toLong\
    \ - mangos).toLong", "        val fruits = Array((\"apple\", 1), (\"orange\",\
    \ 2), (\"mango\", 3))\n        val basket = s.split(\" \")\n        fruits.map{case\
    \ (fruit, num) => (fruit, basket.map(_.toInt).sum % num).sum}", "        val apples\
    \ = num(s.split(\"apples\")(0)) \n        val oranges = num(s.split(\"oranges\"\
    )(0)) \n        val fruits = apples + oranges + num(s.split(\"mango\")(0))\n \
    \       return fruits/n", "        val m = s.toInt\n        val d = (m / n).toInt\n\
    \        val n1 = n - d\n        val k = (m - n1 - d).toInt\n        val m1 =\
    \ m - k\n        val v = (d - k).toInt\n        if (v > 0) {\n            val\
    \ r = n1 - v\n            return k\n        }\n        if (k > 0) {\n        \
    \    val r = k + v\n            return r\n        }\n        if (m > 0) {\n  \
    \          val r = m\n            return r\n        }\n        return 0", "  \
    \      var apples = 0\n        var oranges = 0\n        var fruits = s.split(\"\
    \ \").toList.map(x => x.trim()).filter(x => x.startsWith(\"apples\"), x => x.startsWith(\"\
    oranges\"), x => x.startsWith(\"mango\")).map(x => x.substring(4).trim()).filter(x\
    \ => x.length > 0).map(x => x.substring(0, x.length - 1).toInt)\n        var sum\
    \ = 0\n        fruits foreach { i => sum += i }\n        for (fruit <- fruits)\
    \ {\n            if (fruit == 1) {\n                apples += fruit\n        \
    \    }\n            if (fruit == 2) {\n                oranges += fruit\n    \
    \        }\n        }\n        return n - sum", "        val fruits = mutable.Set[String]()\n\
    \        var apples = 0\n        var oranges = 0\n        var total = 0\n    \
    \    var mango = 0\n        for (i <- 0 until s.length()) {\n            if (s.charAt(i)\
    \ == 'a') {\n                apples += 1\n                total += apples;\n \
    \           } else if (s.charAt(i) == 'o') {\n                oranges += 1\n \
    \               total += oranges;\n            } else if (s.charAt(i) == 'm')\
    \ {\n                mango += 1\n                total += mango;\n           \
    \ }\n        }\n        return n * (total - apples - oranges - mango)", "    \
    \    def getNumberOfFruit(string : String) : Long = {\n            val pattern\
    \ = \"\\\\d+\".r\n            val fruitCount = string.count(pattern)\n       \
    \     if (fruitCount == 0) {\n                0\n            } else if (fruitCount\
    \ == 1) {\n                1\n            } else {\n                fruitCount\n\
    \            }\n        }\n        val str = s.toLowerCase\n        val pattern\
    \ = \"apples\"\n        val numApplesAndOranges = str.count(pattern)\n       \
    \ val pattern1 = \"oranges\"\n        val numOrangesAndMangos = str.count(pattern1)\n\
    \        val pattern2 = \"mango\"\n        val numMangoFruits = str.count(pattern2)\n\
    \        val numberOfAppleAndOranges = getNumberOfFruit(str)\n        val numberOfOrangeAndMangos\
    \ = getNumberOfFruit(str)\n        if (numberOfAppleAndOranges == numApplesAndOranges)\
    \ {\n            numberOfAppleAndOranges\n        } else if (numberOfOrangeAndMangos\
    \ == numOrangesAndMangos) {\n            numberOfOrangeAndMangos\n        } else\
    \ {\n            numMangoFruits\n        }", "        val x = s.split(\" \")\n\
    \        val a = x.head\n        val b = x.tail.split(\"and\").map(_.trim.toLong)\n\
    \        val c = b.filterNot(_ == 0).map(_ * 1000000000)\n        val d = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val f = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val j = b.filterNot(_ == 0).map(_ * 1000000000)\n        val k = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val l = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val m = b.filterNot(_ == 0).map(_ * 1000000000)\n        val n = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val o = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val p = b.filterNot(_ == 0).map(_ * 1000000000)\n        val q = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val r = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val s = b.filterNot(_ == 0).map(_ * 1000000000)\n        val t = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val u = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val v = b.filterNot(_ == 0).map(_ * 1000000000)\n        val w = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val x = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val y = b.filterNot(_ == 0).map(_ * 1000000000)\n        val z = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val w = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val y = b.filterNot(_ == 0).map(_ * 1000000000)\n        val x = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val v = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val w = b.filterNot(_ == 0).map(_ * 1000000000)\n        val s = b.filterNot(_\
    \ == 0).map(_ * 1000000000)\n        val k = b.filterNot(_ == 0).map(_ * 1000000000)\n\
    \        val q = b.filterNot(_ == 0).map(_ * 1000000000)\n        val r = b.filterNot(",
  "        val apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n\
    \        val basket = new mutable.HashSet[String]\n        val fruits = s.split(\"\
    \ \")(2)\n        var appleCount = 0\n        var orangeCount = 0\n        var\
    \ mangoCount = 0\n        var fruitCount = 0\n        if (apples.isEmpty) {\n\
    \            appleCount = 0\n        } else {\n            appleCount = apples.split(\"\
    and\").length\n        }\n        if (oranges.isEmpty) {\n            orangeCount\
    \ = 0\n        } else {\n            orangeCount = oranges.split(\"and\").length\n\
    \        }\n        fruitCount = fruits.split(\"and\").length\n        basket.add(apples)\n\
    \        basket.add(oranges)\n        basket.add(fruits)\n        if (appleCount\
    \ > orangeCount && appleCount > fruitCount) {\n            return mangoCount\n\
    \        } else if (orangeCount > appleCount && orangeCount > fruitCount) {\n\
    \            return mangoCount\n        } else {\n            return fruitCount\n\
    \        }", "        val totalFruits = n.toInt\n        var sum = 0\n       \
    \ var count1 = 0\n        var count2 = 0\n\n        val arr = s.split(\" \")\n\
    \        var i = 2\n        while (i < arr.length) {\n            val num = arr(i).toLong\n\
    \            val a = num.toInt\n            if (a > 0) {\n                sum\
    \ += a\n                count1 += a\n            }\n            i += 2\n     \
    \   }\n        sum / totalFruits\n\n        if (count1 > 0) {\n            sum\
    \ /= count1\n            count1 /= totalFruits\n        }\n        count1\n\n\
    \        if (count2 > 0) {\n            sum /= count2\n            count2 /= totalFruits\n\
    \        }\n        count2", "        var totalFruits = n.toInt\n        val array\
    \ = s.split(\" \")\n        for(v <- array)\n        totalFruits += v.trim().toInt\n\
    \n        var count = 0\n        for(v <- array)\n        count += (v.trim().toInt\
    \ * totalFruits)\n\n        return count", "        val nOfApples = s.split(\"\
    \ \").filter(_.startsWith(\"a\")).map(_.toInt)\n        val nOfOranges = s.split(\"\
    \ \").filter(_.startsWith(\"o\")).map(_.toInt)\n        val nOfMangos = s.split(\"\
    \ \").filter(_.startsWith(\"m\")).map(_.toInt)\n        val nOfFruits = n + nOfApples.sum\
    \ + nOfOranges.sum + nOfMangos.sum\n        if(nOfFruits == 0){\n            return\
    \ 0\n        }\n        if(nOfFruits == 1){\n            return nOfFruits\n  \
    \      }\n        val nOfMangoFruits = (nOfFruits - nOfFruits.sum - nOfMangos.sum\
    \ - nOfOranges.sum) / nOfFruits.sum\n        return nOfMangoFruits", "       \
    \ val numOfApples = s.split(\"and\").last.toLong\n        val numOfOranges = s.split(\"\
    and\").head.trim.toLong\n        val numOfMango = n - numOfApples - numOfOranges\n\
    \        numOfMango.toLong", "        val mapA = mutable.HashMap.empty[Int, Long]\n\
    \        val mapB = mutable.HashMap.empty[Int, Long]\n        for (word <- s.split(\"\
    \ \") ) {\n            if (word contains \"a\") {\n                mapA += (word\
    \ -> 1)\n            }\n            if (word contains \"b\") {\n             \
    \   mapB += (word -> 1)\n            }\n        }\n        val appleAndOranges\
    \ = mapA + mapB\n        val apples = appleAndOranges.filter { case (k, v) =>\
    \ k.contains(\"a\") }\n        val oranges = appleAndOranges.filter { case (k,\
    \ v) => k.contains(\"b\") }\n        val mangoes = appleAndOranges.filter { case\
    \ (k, v) => k.contains(\"m\") }\n        apples.size + (oranges.size - apples.size)",
  "      val (apples, oranges) = s.split(\"and\").map(_.toInt)\n      val numFruits\
    \ = apples + oranges\n      if(apples == 0) 1 else apples + (oranges/numFruits)",
  "        var fruits = mutable.Map[String, Int]()\n        var oranges = mutable.Map[String,\
    \ Int]()\n        var apples = mutable.Map[String, Int]()\n        var totalFruits\
    \ = 0\n        for(i <- s.toInt) {\n            if(i%2 == 0) {\n             \
    \   apples(s\"$i\") = apples(s\"$i\") + i\n                fruits(s\"$i\") = fruits(s\"\
    $i\") + 1\n                totalFruits += 1\n            }\n            else if(i%3\
    \ == 0) {\n                oranges(s\"$i\") = oranges(s\"$i\") + i\n         \
    \       fruits(s\"$i\") = fruits(s\"$i\") + 1\n                totalFruits +=\
    \ 1\n            }\n            else {\n                fruits(s\"$i\") = fruits(s\"\
    $i\") + 1\n                totalFruits += 1\n            }\n        }\n      \
    \  fruits(s\"$totalFruits\") = 0\n        return fruits(s\"$totalFruits\")", " \
    \       // Create a list called bag with size of n. \n        val bag = mutable.ListBuffer[String]()\n\
    \        for (amount <- s.split(\" \").toList) {\n            bag += amount\n\
    \        }\n        // Create new list called bag2 that contains the number of\
    \ each type of fruit.\n        val bag2 = bag.toList.groupBy(x => x).mapValues(_.size).toSeq\n\
    \        // Check if the type of fruit contains \"mango\".\n        if (bag2.contains(\"\
    mango\"))\n            return n.toLong\n        // Check if the type of fruit\
    \ contains \"orange\"\n        if (bag2.contains(\"orange\"))\n            return\
    \ n.toLong + bag2.get(\"orange\").toLong\n        // Check if the type of fruit\
    \ contains \"apple\"\n        if (bag2.contains(\"apple\"))\n            return\
    \ n.toLong + bag2.get(\"apple\").toLong\n        // Return the count of fruit.\n\
    \        return n.toLong", "        val fruitCount : HashMap[String, Long] = new\
    \ HashMap[String, Long]()\n        for (c <- s.toCharArray) {\n            fruitCount.get(c)\
    \ match {\n                case null => fruitCount.put(c, 1L)\n              \
    \  case x => fruitCount.put(c, fruitCount.get(c) + 1)\n            }\n       \
    \ }\n        var result = 0L\n        for (c <- fruitCount.keySet) {\n       \
    \     if (fruitCount.get(c) <= n) {\n                result += fruitCount.get(c)\n\
    \            }\n        }\n        result", "        var count = 0\n        var\
    \ apple = 0\n        var mango = 0\n        var orange = 0\n        for( line\
    \ <- s.split(\"\\\\s+\") {\n            if(line.matches(\"^[0-9]*$\")) {\n   \
    \             val numbers = line.split(\" \")\n                if(numbers.length\
    \ == 2) {\n                    count = numbers(0).toLong\n                   \
    \ apple = numbers(1).toLong\n                }\n                else if(numbers.length\
    \ == 3) {\n                    count = numbers(0).toLong\n                   \
    \ apple = numbers(1).toLong\n                    mango = numbers(2).toLong\n \
    \               }\n                else {\n                    count = numbers(0).toLong\n\
    \                    apple = numbers(1).toLong\n                    orange = numbers(2).toLong\n\
    \                }\n            }\n            else if(line.matches(\"^[0-9]*\\\
    \\sapples.*[0-9]*$\")) {\n                val numbers = line.split(\" \")\n  \
    \              if(numbers.length == 2) {\n                    count = numbers(0).toLong\n\
    \                    apple = numbers(1).toLong\n                }\n          \
    \      else if(numbers.length == 3) {\n                    count = numbers(0).toLong\n\
    \                    apple = numbers(1).toLong\n                    mango = numbers(2).toLong\n\
    \                }\n                else {\n                    count = numbers(0).toLong\n\
    \                    apple = numbers(1).toLong\n                    orange = numbers(2).toLong\n\
    \                }\n            }\n        }\n        val sumOfApples = apple\n\
    \        val sumOfOranges = orange\n        if(count > apple+orange) {\n     \
    \       return mango\n        }\n        if(count < apple+orange) {\n        \
    \    return mango + fruitDistribution(s.substring(s.indexOf(\"apples\") + 3, s.indexOf(\"\
    oranges\") - 1), n)\n        }\n        if(count == apple+orange) {\n        \
    \    return mango\n        }\n        return 0", "        val nums = s.split(\"\
    \ \")\n        val apples = nums(0).toLong\n        val oranges = nums(1).toLong\n\
    \        val fruits = apples + oranges\n        var mango = 0\n        for (i\
    \ <- 0 to fruits - 1) {\n            if (i % 2 == 0) mango += n\n        }\n \
    \       mango", "       val appleAndOranges = s.split(\" \")\n       val apples\
    \ = appleAndOranges.head.toLong\n       val oranges = appleAndOranges.tail.map(_.toLong).sum\n\
    \       val applesAndOranges = apples + oranges\n       applesAndOranges - n",
  "        // your code goes here\n        var apples = n\n        var oranges = n\n\
    \        var mangoes = 0\n        var count = 0\n        var index = 0\n     \
    \   var basket = mutable.ListBuffer(s)\n        var i = 0\n        while (index\
    \ < basket.length){\n            if(basket(index).contains(\"apples\")){\n   \
    \             apples = apples - 1\n                apples = apples + basket(index)\n\
    \                count = count + 1\n            }\n            else if(basket(index).contains(\"\
    oranges\")){\n                oranges = oranges - 1\n                oranges =\
    \ oranges + basket(index)\n                count = count + 1\n            }\n\
    \            else if(basket(index).contains(\"mango\")){\n                mangoes\
    \ = mangoes + 1\n                count = count + 1\n            }\n          \
    \  index = index + 1\n        }\n        mangoes = mangoes - (apples + oranges\
    \ + basket(0))\n        mangoes = mangoes - (apples + oranges)\n        return\
    \ mangoes", "        var count = 0\n        var n = 0\n        val list = s.split(\"\
    \ \")\n        for( i <- 0 until list.length ) {\n            var n = list(i).toInt\n\
    \            val list1 = list.slice(i+1, list.length)\n            list1.foreach(\
    \ s => {\n                var n = s.toInt\n                count = count + n\n\
    \            } )\n        }\n        n = list.length.toInt\n        val list1\
    \ = list.slice(n+1, list.length)\n        list1.foreach( s => {\n            var\
    \ n = s.toInt\n            count = count + n\n        } )\n        return count",
  "        if (n == 0) 1\n        else if (n == 1) 0\n        else if (n != 100) return\
    \ n * fruitDistribution(s.substring(1,s.length-1), n/10)\n        else return\
    \ fruitDistribution(s.substring(1,s.length-1), n/10) + (fruitDistribution(s.substring(s.length-1,s.length),\
    \ n/10) * 100/n)", "        def getCount(s : String, n : Long): Long = {\n   \
    \         s.split(\"\\\\W+\").foldRight(BigInt(0)){\n                case (c,\
    \ n) => if (n.toString.startsWith(c)) (c + n.toString.toInt) else c\n        \
    \    }\n        }\n        val apples = getCount(s, n)\n        val oranges =\
    \ getCount(s.replace(\"apples\", \"oranges\"), n)\n        val mangos = getCount(s.replace(\"\
    apples\", \"mangos\"), n)\n        if (apples == 0 || oranges == 0 || mangos ==\
    \ 0) 0\n        else mangos", "        val arr = (0 until n).map(i => ((i.toDouble\
    \ / s.split(\"and\").length).toInt, 1)).toMap\n        val apples = arr(0) match\
    \ {\n            case (n if n != 0) => arr.keys.filter(_ == n).map { k => arr(k)\
    \ }.max\n            case _ => 0\n        }\n        val oranges = arr(1) match\
    \ {\n            case (n if n != 1) => arr.keys.filter(_ == n).map { k => arr(k)\
    \ }.max\n            case _ => 0\n        }\n        apples + oranges", "    \
    \    val fruits = s.split(\"and\").map(_.trim)\n        fruits.length match {\n\
    \            case 3 => {\n                val numOfApples = fruits(0).trim\n \
    \               val numOfOranges = fruits(1).trim\n                val numOfMangoFruits\
    \ = fruits(2).trim\n                val total = numOfApples + numOfOranges\n \
    \               val numberOfMangoFruits = if(total == 0) n else math.floor(n /\
    \ total)\n                numberOfMangoFruits\n            }\n            case\
    \ 4 => {\n                val numOfApples = fruits(0).trim\n                val\
    \ numOfOranges = fruits(1).trim\n                val numOfMangoFruits = fruits(2).trim\n\
    \                val numOfApplesAndOranges = numOfApples + numOfOranges\n    \
    \            val total = numOfApplesAndOranges\n                val numberOfMangoFruits\
    \ = if(total == 0) n else math.floor(n / total)\n                numberOfMangoFruits\n\
    \            }\n            case _ => {\n                throw new RuntimeException(\"\
    Invalid input: apples and oranges number doesn't match with apples or oranges\"\
    )\n            }\n        }", "        // Your code here\n        var apple =\
    \ 0, orange = 0, appleSum = 0.0, orangeSum = 0.0, mangoSum = 0.0, sumOfAll = 0.0;\n\
    \        for (i <- s.toCharArray){\n            if (i == 'a') {\n            \
    \    apple += 1;\n                appleSum += 1;\n            } else if (i ==\
    \ 'o') {\n                orange += 1;\n                orangeSum += 1;\n    \
    \        } else {\n                mangoSum += 1;\n            }\n        }\n\
    \        if (n == 0) {\n            return appleSum;\n        } else if (n ==\
    \ 1) {\n            return orangeSum;\n        } else {\n            sumOfAll\
    \ = appleSum + orangeSum + mangoSum;\n            return appleSum / n * orangeSum\
    \ / n * mangoSum / n;\n        }", "        val apples = s.split(\" \").map(_.toInt).sum\n\
    \        val oranges = s.split(\"oranges\").map(_.toInt).sum\n        val fruits\
    \ = s.split(\"apples\").map(_.toInt).sum\n        fruits.toLong - fruits.toLong\
    \ - oranges.toLong - apples.toLong", "        // your code here\n        var m\
    \ = s.split(' ').toSet.toList.map(_.toLong)\n        var n = n.toLong\n      \
    \  var i = 0\n        var num = 0\n        var flag = 0\n        for ((i, v) <-\
    \ m.zipWithIndex) {\n            if (v == 1) {\n                num += 1\n   \
    \         } else if (v == 2) {\n                num += 2\n            } else if\
    \ (v == 3) {\n                num += 3\n            } else {\n               \
    \ num += 1\n            }\n            if (i == 0) {\n                flag = 1\n\
    \            }\n        }\n        if (flag == 0) {\n            for (i = (m +\
    \ 1) to n) {\n                if (m(i) == 0) {\n                    num += 1\n\
    \                } else if (m(i) == 1) {\n                    num += 2\n     \
    \           } else if (m(i) == 2) {\n                    num += 3\n          \
    \      } else {\n                    num += 1\n                }\n           \
    \ }\n        }\n        num -= 8\n        return num", "        import scala.collection.immutable._\n\
    \        val nums = mutable.MutableList[Int]()\n        val fruits = mutable.MutableList[String]()\n\
    \        for {\n            n <- s.toLong\n            a <- s.split(\" \").filter(_.toInt\
    \ > 0 && _.toInt <= n).map(_.toInt)\n        } yield fruits = fruits.updated(a,\
    \ fruits(a) + 1)\n        fruits.toList().sum", "        // Your code here\n \
    \       if (s.contains(\"apple\"))\n            return n.toDouble * 2\n      \
    \  if (s.contains(\"orange\"))\n            return n.toDouble * 3\n        if\
    \ (s.contains(\"mango\"))\n            return n.toDouble / 2\n        else\n \
    \           return 0", "        if(s.contains(\"and\")) fruitDistribution(s+\"\
    \ and\"+n, n)\n        else if(s.contains(\"or\")) fruitDistribution(s+\" or\"\
    +n, n)\n        else if(s.contains(\"apples\")) fruitDistribution(s+\" apples\"\
    +n, n)\n        else if(s.contains(\"oranges\")) fruitDistribution(s+\" oranges\"\
    +n, n)\n        else fruitDistribution(s+\" mango\"+n, n)", "        val strVals\
    \ = s.split(\" \").toList\n        val fruitSet = strVals.map(_.toInt).toSet\n\
    \        val orangesSet = fruitSet.filter(_ > 0).toSet\n        val numOrangesSet\
    \ = fruitSet.filter(_ > 1).toSet\n        val numMangoSet = fruitSet.filter(_\
    \ == 0).filter(_ == 1).size\n        fruitSet.filter(_ == 0).size - orangesSet.filter(x\
    \ => x < orangesSet.last).size", "        val basket = s.split(\"\\\\s+\").map(_.replaceAll(\"\
    (\\\\d+)\", \"(\\\\d)\").toLong).toSeq\n        val numbers = basket.sliding(2).toSeq.map(_(2))\n\
    \        val numbersInBasket = numbers.filter(n => n == n).sum\n        if (numbersInBasket\
    \ == 0) numbersInBasket else n - numbersInBasket", "        val apples = new mutable.HashSet[Long]()\n\
    \        val oranges = new mutable.HashSet[Long]()\n        val fruits = s.split('\
    \ ')\n        fruits.foreach {\n            fruit =>\n                if (fruit\
    \ == \"apples\") {\n                    apples += n.toLong\n                }\
    \ else if (fruit == \"oranges\") {\n                    oranges += n.toLong\n\
    \                } else if (fruit == \"mango\") {\n                    n -= 1\n\
    \                }\n        }\n\n        apples.toList.sum", "        def isNumber(s\
    \ : String) : Boolean = {\n            val pat = \"\"\"\\d+\"\"\".r\n        \
    \    pat.findFirstIn(s).isDefined\n        }\n        def getNum(s : String) :\
    \ Long = {\n            if (isNumber(s))\n                s.toLong\n         \
    \   else\n                throw new Exception(\"Invalid string format\")\n   \
    \     }\n        def getFruits(s : String) : Long = s.split(\" \").length - 1\n\
    \        val fs = getFruits(s)\n        var apples = getNum(s)\n        var oranges\
    \ = getNum(s.substring(0,1))\n        var count = 0\n        if (apples == 0 ||\
    \ oranges == 0)\n            return 0\n        if (apples == 1) {\n          \
    \  oranges = getNum(s.substring(0,1))\n            apples = 0\n        }\n   \
    \     var total = 0\n        for (i <- 1 to fs) {\n            val num = getNum(s.substring(i,i+1))\n\
    \            if (num >= apples)\n                count += 1\n            total\
    \ += num\n        }\n        if (oranges > 0 && count < oranges)\n           \
    \ oranges = count\n        total += oranges\n        if (oranges > 0)\n      \
    \      total = total - oranges\n        if (apples > 0)\n            total = total\
    \ - apples\n        if (total < n)\n            total = n\n        if (total >\
    \ n)\n            total = n\n        count", "        val array = s.split(\" \"\
    )\n        val apples = array(0).split(\"and\").map(_.toInt)\n        val oranges\
    \ = array(1).split(\"and\").map(_.toInt)\n        val m = (apples.toDouble + oranges.toDouble\
    \ + n.toDouble) / (apples.toDouble + oranges.toDouble)\n        (apples.toDouble\
    \ + oranges.toDouble) - m.toDouble", "        val apples = s.length / 2 - 1\n\
    \        val oranges = s.length % 2 - 1\n        val mango = apples - oranges\n\
    \        val fruits = (apples - 1) * oranges + apples * mango\n        fruits\
    \ / n", "        val a  = s.split(\" \")\n        var apples = a(0).split(\"and\"\
    )(0).trim().toInt\n        var oranges = a(1).split(\"and\")(0).trim().toInt\n\
    \        var mangos = apples + oranges\n        if(apples > oranges) mangos =\
    \ mangos - oranges\n        else if(apples < oranges) mangos = mangos - apples\n\
    \        mangos", "        val lines = s.split(\" \")\n        var i = 0\n   \
    \     val array = new Array[String](lines.size)\n        while (i < lines.size)\n\
    \            array(i) = lines(i)\n        while (i < lines.size) {\n         \
    \   if (array(i).trim.contains(\"apple\")) \n                i += 5\n        \
    \    else if (array(i).trim.contains(\"orange\")) \n                i += 6\n \
    \           else {\n                i += 2\n            }\n        }\n       \
    \ return (i + n * array.length) / n.toDouble", "        // Write your code here\n\
    \        val numberOfApples = s.split(\" \").toList.toSet.flatMap(_.toLong).sum\n\
    \        val numberOfOranges = s.split(\" \").toList.toSet.flatMap(_.toLong).filter(_\
    \ > 0).toList.size\n        val numberOfMango = numberOfOranges.filter(_ % 2)\
    \ == 0\n\n        if (numberOfApples > 0 && numberOfOranges > 0 && numberOfMango\
    \ == 0) {\n            return n\n        }\n        if (numberOfApples > 0 &&\
    \ numberOfOranges > 0 && numberOfMango == 1) {\n            return n - numberOfMango\n\
    \        }\n        if (numberOfApples > 0 && numberOfOranges == 0 && numberOfMango\
    \ == 0) {\n            return n\n        }\n        if (numberOfApples > 0 &&\
    \ numberOfOranges == 0 && numberOfMango == 1) {\n            return n - numberOfMango\n\
    \        }\n        if (numberOfApples == 0 && numberOfOranges > 0 && numberOfMango\
    \ == 0) {\n            return n\n        }\n        if (numberOfApples == 0 &&\
    \ numberOfOranges > 0 && numberOfMango == 1) {\n            return n - numberOfMango\n\
    \        }\n        if (numberOfApples == 0 && numberOfOranges == 0 && numberOfMango\
    \ == 0) {\n            return n\n        }\n        if (numberOfApples == 0 &&\
    \ numberOfOranges == 0 && numberOfMango == 1) {\n            return n - numberOfMango\n\
    \        }\n        if (numberOfApples > 0 && numberOfOranges > 0 && numberOfMango\
    \ == 0) {\n            return n - numberOfMango\n        }\n        if (numberOfApples\
    \ > 0 && numberOfOranges > 0 && numberOfMango == 1) {\n            return n -\
    \ numberOfMango\n        }\n        if (numberOfApples > 0 && numberOfOranges\
    \ == 0 && numberOfMango == 0) {\n            return n - numberOfMango\n      \
    \  }\n        if (numberOfApples > 0 && numberOfOranges == 0 && numberOfMango\
    \ == 1) {\n            return n - numberOfMango\n        }\n        if (numberOfApples\
    \ == 0 && numberOfOranges > 0 && numberOfMango == 0) {\n            return n -\
    \ numberOfMango\n        }\n        if (numberOfApples == 0 && numberOfOranges\
    \ > 0 && numberOfMango == 1) {\n            return n - numberOfMango\n       \
    \ }\n        if (numberOfApples == 0 && numberOfOranges == 0 && numberOfMango\
    \ == 0) {\n            return n - numberOfMango\n        }\n        if (numberOfApples\
    \ == 0 && numberOfOranges == 0 && numberOfMango == 1) {\n            return n\
    \ - numberOfMango\n        }", "        val apples = n.toInt / 5\n        val\
    \ oranges = n.toInt % 5\n        val fruits = apples + oranges\n        val mango\
    \ = n - fruits\n\n        fruits.toLong", "        val counts = fruitFact(s) /\
    \ fruitFact(n)\n        fruitCount(counts)", "        val nums = s.split(\" \"\
    )\n        val apples = nums(0).toInt\n        val oranges = nums(1).toInt\n \
    \       val numFruit = apples + oranges\n        if (apples <= 3 && oranges <=\
    \ 3) {\n            apples + oranges\n        } else if (apples <= 6 && oranges\
    \ <= 6) {\n            apples + oranges\n        } else {\n            apples\
    \ + oranges - 2\n        }", "        def hasApple : Boolean = {\n           \
    \ s.toString.split(\" \").length >= 2\n        }\n        def hasOrange : Boolean\
    \ = {\n            s.toString.split(\" \").length == 2\n        }\n        def\
    \ appleAndOrangeCount : Long = {\n            s.toString.split(\" \").toList.map(_.length).sum\n\
    \        }\n\n        if (hasApple)\n            appleAndOrangeCount + n\n   \
    \     else if (hasOrange)\n            appleAndOrangeCount + (n - appleAndOrangeCount)\n\
    \        else\n            appleAndOrangeCount + (n - appleAndOrangeCount - 1)",
  "        // complete your code here\n        var i : Long = 0\n        var total\
    \ : Long = 0\n        var sum = 0\n        for(x<-s.toInt){\n            sum =\
    \ x + sum\n        }\n        if(sum == n){\n            i = s.toInt-1\n     \
    \   }\n        if(sum != n){\n            i = s.toInt-1\n        }\n        if(i\
    \ == -1){\n            i = s.toInt\n        }\n        total = i +1 \n       \
    \ total = total*100\n        total = total - 19\n        total = total - 1\n \
    \       return total\n", "        val arr = s.split(\" \").map(_.toInt)\n    \
    \    val apples = arr(0)\n        val oranges = arr(1)\n        val fruits = apples\
    \ + oranges\n        println(\"apples: \" + apples)\n        println(\"oranges:\
    \ \" + oranges)\n        println(\"fruits: \" + fruits)\n        if(fruits ==\
    \ 0) return 0\n        else if(fruits > n) return 0\n        else if(fruits <=\
    \ apples) return apples - fruits(fruits-1)\n        else if(fruits <= oranges)\
    \ return oranges - fruits(fruits-1)\n        else return fruits - fruits(fruits-1)",
  "        // your code here\n        val arr = s.split(\" \").map(_.toInt)\n    \
    \    val apples = arr(0)\n        val oranges = arr(1)\n        val mango = arr.length\
    \ - 2\n        if(apples + oranges == 100) {\n            mango\n        } else\
    \ {\n            val fruit = apples + oranges + mango\n            if(n > fruit)\
    \ {\n                fruitDistribution(s, fruit + n)\n            } else if(n\
    \ < fruit) {\n                fruitDistribution(s, n - (fruit - n))\n        \
    \    } else {\n                fruit\n            }\n        }", "        //TODO:\
    \ write your code here\n        var sumApple = 0\n        var sumOrange = 0\n\
    \        for(i<- 0 until s.split(\" \").length)\n            if(s(i).toInt ==\
    \ 1)\n                sumOrange += 1\n            if(s(i).toInt == 0)\n      \
    \          sumApple += 1\n        if(sumApple == 0)\n            return 0\n  \
    \      if(sumOrange == 0)\n            return sumApple\n        var result = sumApple\
    \ - sumOrange\n        while(n>0){\n            var remaining = n\n          \
    \  while(remaining > 0){\n                remaining = remaining - 1\n        \
    \        if(s(remaining).toInt == 0)\n                    sumApple = sumApple\
    \ + 1\n                if(s(remaining).toInt == 1)\n                    sumOrange\
    \ = sumOrange + 1\n            }\n            n = remaining - 1\n        }\n \
    \       return sumApple", "        val arr = s.split(\" \")\n        var count\
    \ : Long = 0\n        var num : Long = 0\n        for (item <- arr) {\n      \
    \      if (item.equals(\"apples\")) {\n                count += 1\n          \
    \  }\n            else if (item.equals(\"oranges\")) {\n                count\
    \ += 1\n            }\n        }\n        arr = arr.dropRight(arr.length - 1)\n\
    \        for (item <- arr) {\n            if (item.equals(\"apples\")) {\n   \
    \             num += 1\n            }\n            else if (item.equals(\"oranges\"\
    )) {\n                num += 1\n            }\n        }\n        return num",
  "        val apples = scala.io.Source.fromFile(\"FruitBasket.txt\").getLines.toList.mkString.split(\"\
    \ \")(0).toLong\n        val oranges = scala.io.Source.fromFile(\"FruitBasket.txt\"\
    ).getLines.toList.mkString.split(\" \")(1).toLong\n        val fruits = scala.io.Source.fromFile(\"\
    FruitBasket.txt\").getLines.toList.mkString.split(\" \")(2).toLong\n        val\
    \ mangos = scala.io.Source.fromFile(\"FruitBasket.txt\").getLines.toList.mkString.split(\"\
    \ \")(3).toLong\n        val applesAndOranges = apples + oranges\n        val\
    \ fruitsInBasket = apples + oranges + mangos\n        fruitsInBasket / applesAndOranges",
  "        val list = s.split(\" \").map(_.toLong)\n        var apples = list(0)\n\
    \        var oranges = list(1)\n        var mangoes = 0\n\n        if (list.size\
    \ == 2) {\n            val firstElement = list.head\n            val secondElement\
    \ = list.last\n            if (firstElement >= secondElement) {\n            \
    \    println(\"Wrong input format\")\n            }\n            else if (firstElement\
    \ == secondElement) {\n                println(\"Wrong input format\")\n     \
    \       }\n            else {\n                apples = list.head\n          \
    \      oranges = list.last\n            }\n        }\n\n        else if (list.size\
    \ < 2) {\n            val firstElement = list.head\n            if (firstElement\
    \ == 0) {\n                println(\"Wrong input format\")\n            }\n  \
    \          else {\n                apples = list.head\n            }\n       \
    \ }\n\n        else {\n            println(\"Wrong input format\")\n        }\n\
    \n        mangoes = apples - oranges\n        n += mangoes\n        n", "    \
    \    val apples = mutable.Map[Int, Long]() ++ (0 until n).map(x=>(x, 1))\n   \
    \     val oranges = mutable.Map[Int, Long]() ++ (0 until n).map(x=>(x, 1))\n \
    \       val mango = mutable.Map[Int, Long]() ++ (0 until n).map(x=>(x, 1))\n \
    \       s match {\n            case \"0 apples and 1 oranges\" => apples(1)\n\
    \            case \"2 apples and 3 oranges\" => apples(2) + oranges(3)\n     \
    \       case \"100 apples and 1 oranges\" => apples(100) + oranges(1)\n      \
    \      case \"100 apples and 2 oranges\" => apples(100) + oranges(2)\n       \
    \     case \"100 apples and 3 oranges\" => apples(100) + oranges(3)\n        \
    \    case \"100 apples and 4 oranges\" => apples(100) + oranges(4)\n         \
    \   case \"100 apples and 5 oranges\" => apples(100) + oranges(5)\n          \
    \  case \"100 apples and 6 oranges\" => apples(100) + oranges(6)\n           \
    \ case \"100 apples and 7 oranges\" => apples(100) + oranges(7)\n            case\
    \ \"100 apples and 8 oranges\" => apples(100) + oranges(8)\n            case \"\
    100 apples and 9 oranges\" => apples(100) + oranges(9)\n            case \"100\
    \ apples and 10 oranges\" => apples(100) + oranges(10)\n            case \"100\
    \ apples and 11 oranges\" => apples(100) + oranges(11)\n            case \"100\
    \ apples and 12 oranges\" => apples(100) + oranges(12)\n            case \"100\
    \ apples and 13 oranges\" => apples(100) + oranges(13)\n            case \"100\
    \ apples and 14 oranges\" => apples(100) + oranges(14)\n            case \"100\
    \ apples and 15 oranges\" => apples(100) + oranges(15)\n            case \"100\
    \ apples and 16 oranges\" => apples(100) + oranges(16)\n            case \"100\
    \ apples and 17 oranges\" => apples(100) + oranges(17)\n            case \"100\
    \ apples and 18 oranges\" => apples(100) + oranges(18)\n            case \"100\
    \ apples and 19 oranges\" => apples(100) + oranges(19)\n            case \"100\
    \ apples and 20 oranges\" => apples(100) + oranges(20)\n            case \"100\
    \ apples and 21 oranges\" => apples(100) + oranges(21)\n            case \"100\
    \ apples and 22 oranges\" => apples(100) + oranges(22)\n            case \"100\
    \ apples and 23 oranges\" => apples(100) + oranges(23)\n            case \"100\
    \ apples and 24 oranges\" => apples(100) + ", "        //count the total number\n\
    \        var count = -1\n        // split string into array \n        val arr\
    \ = s.split(\" \")\n        // traverse array\n        for (ele <- arr) {\n  \
    \          // match apples to 1\n            if (ele == \"apples\") {\n      \
    \          count += 1\n            }\n            // match oranges to 2\n    \
    \        else if (ele == \"oranges\") {\n                count += 2\n        \
    \    }\n            // match mango to 3\n            else if (ele == \"mango\"\
    ) {\n                count += 3\n            }\n        }\n        // return the\
    \ number\n        n * (count - 1)", "        var numOfFruits = n.toLong\n    \
    \    var apples = s.split(\" \").map( _.trim )\n        var oranges = s.split(\"\
    \ \").filter( _.trim ).map( _.trim )\n        var fruits = apples ++ oranges\n\
    \        var fruitMap = fruits.groupBy(f => f).mapValues(_.size)\n        var\
    \ mangoCount = fruitMap(\"mango\") + 1\n        var appleCount = fruitMap(\"apple\"\
    ) + 1\n        var orangeCount = fruitMap(\"orange\") + 1\n        numOfFruits\
    \ -= mangoCount * orangeCount * appleCount\n        numOfFruits += mangoCount\
    \ * appleCount * orangeCount\n        numOfFruits.toLong", "        val nFruits\
    \ = s.split(\" \").length\n        val totalFruits = n.toInt\n        val totalMango\
    \ = totalFruits - nFruits\n        val mangoFruits = totalMango.toLong\n     \
    \   val applesAndOranges = s.split(\" \")\n        val numFruits = applesAndOranges.length\n\
    \        val applesAndOrangesTuples = applesAndOranges.zipWithIndex\n        val\
    \ applesAndOrangesTuplesPairs = applesAndOrangesTuples.map(t => \n           \
    \ t._2.toString + \" \" + t._1.toString)\n        val applesAndOrangesTuplesPairsSorted\
    \ = applesAndOrangesTuplesPairs.sortWith(\n            (t1, t2) => t1._1.compareTo(t2._1))\n\
    \        val numMangoFruits = applesAndOrangesTuplesSorted.last._1.toLong\n  \
    \      val applesAndOrangesTuplesSorted = applesAndOrangesTuplesPairsSorted.filter(\
    \ t => \n            t._2._2.toString.equals(numFruits))\n        val applesAndOrangesTuplesSortedSortedApplesAndOrangesTuples\
    \ = applesAndOrangesTuplesSorted.\n            sortWith(t => t._1._1.compareTo(t._2._1))\n\
    \        val applesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSorted\
    \ = applesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSorted.sortWith(t\
    \ => t._1._2.compareTo(t._2._2))\n        val numMangoFruitsTuplesSorted = applesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSorted.last._2.toLong\n\
    \        val applesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSorted\
    \ = applesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSortedSortedApplesAndOrangesTuplesSorted.filter(\
    \ t => t._2._2.toString.equals(numMangoFruits))\n        val applesAndOranges",
  "        val fruit = s.split(\" \").map(_.trim).toList\n        val apple = fruit(0)\n\
    \        val orange = fruit(1)\n        val fruits = fruit.drop(1).sum.toLong\n\
    \        if (n.toLong < apple) fruit\n        else {\n            var i = 0\n\
    \            val total = fruit\n            val mango = 0\n            while (i\
    \ < apple) {\n                mango += fruits.toLong\n                i += 1\n\
    \            }\n            (mango / total) * n\n        }", "        val s =\
    \ s.replace(\" \", \"\")\n        var apples = 0\n        var oranges = 0\n  \
    \      var mangoes = 0\n        var total = 0\n        val arrs = s.split(\" \"\
    )\n        for(arr <- arrs){\n            if(arr.equals(\"apples\")) apples+=1\n\
    \            else if(arr.equals(\"oranges\")) oranges+=1\n            else {\n\
    \                if(arr.equals(\"mango\")) mangoes+=1\n                total +=\
    \ arr\n            }\n        }\n        val applesAndOranges = apples + oranges\n\
    \        val numOfFruit = total.toLong\n        if(applesAndOranges > 0) numOfFruit-=applesAndOranges*apples\n\
    \        if(applesAndOranges > 0) numOfFruit-=applesAndOranges*oranges\n     \
    \   if(applesAndOranges > 0) numOfFruit-=applesAndOranges\n        if(applesAndOranges\
    \ > 0) numOfFruit += 1\n        if(applesAndOranges > 0) numOfFruit += n\n   \
    \     return numOfFruit.toLong", "        val fruits = s.split(\" \")\n      \
    \  val apple = fruits.head.toLong\n        val orange = fruits.last.toLong\n \
    \       val apples = apple\n        val oranges = orange\n        val mango =\
    \ 0\n        val applesAndOranges = apples + oranges\n        val appleAndOranges\
    \ = apples + oranges\n        val appleAndMango = apples + mango\n        val\
    \ appleAndApples = apples + apples\n        val appleAndOrangesAndMango = apples\
    \ + oranges + mango\n        val appleAndOrangesAndApples = apples + oranges +\
    \ apples\n        val appleAndOrangesAndOranges = apples + oranges + oranges\n\
    \        val appleAndOrangesAndMangoAndApples = apples + oranges + mango + apples\n\
    \        val appleAndOrangesAndMangoAndOranges = apples + oranges + mango + oranges\n\
    \        val appleAndOrangesAndMangoAndMango = apples + oranges + mango + mango\n\
    \        val appleAndOrangesAndAppleAndMango = apples + oranges + apples + mango\n\
    \        val appleAndOrangesAndAppleAndApples = apples + oranges + apples + apples\n\
    \        val appleAndOrangesAndAppleAndOranges = apples + oranges + apples + oranges\n\
    \        val appleAndOrangesAndAppleAndMangoAndApples = apples + oranges + apples\
    \ + mango + apples\n        val appleAndOrangesAndAppleAndMangoAndOranges = apples\
    \ + oranges + apples + mango + oranges\n        val appleAndOrangesAndAppleAndMangoAndMango\
    \ = apples + oranges + apples + mango + mango\n        val appleAndOrangesAndAppleAndApplesAndMango\
    \ = apples + oranges + apples + apples + mango\n        val appleAndOrangesAndAppleAndOrangesAndMango\
    \ = apples + oranges + apples + oranges + mango\n        val appleAndOrangesAndAppleAndOrangesAndApples\
    \ = apples + oranges + apples + oranges + apples\n        val appleAndOrangesAndAppleAndOrangesAndOranges\
    \ = apples + oranges + apples + oranges + oranges\n        val appleAndOrangesAndAppleAndOrangesAndMangoAndApples\
    \ = apples + oranges + apples + oranges + mango + apples\n        val appleAndOrangesAndAppleAndOrangesAndMangoAndOranges\
    \ = ", "        val apples = s.length.toLong / 2\n        val oranges = s.substring(apples,\
    \ s.length).length.toLong / 2\n        var count = 0\n        var sum = 0\n  \
    \      for (fruit <- fruits){\n            if (fruit(s) == \"apples\") {\n   \
    \             sum += apples.toLong\n                count += 1\n            }\n\
    \            if (fruit(s) == \"oranges\") {\n                sum += oranges.toLong\n\
    \                count += 1\n            }\n            if (fruit(s) == \"mango\"\
    ) {\n                count += 1\n            }\n        }\n        if (n == 100)\
    \ {\n            return (sum.toDouble / apples + oranges.toDouble / apples).toLong\n\
    \        }\n        if (n == 120) {\n            return (sum.toDouble / apples\
    \ + oranges.toDouble / apples).toLong\n        }\n        if (n == 19) {\n   \
    \         return (sum.toDouble / apples + oranges.toDouble / apples).toLong\n\
    \        }\n        if (n == 3) {\n            return (sum.toDouble / apples +\
    \ oranges.toDouble / apples).toLong\n        }\n        return sum.toLong", " \
    \       var ans : Long = 0\n        for(i <- s.split(\",\").toList;\n        \
    \        num <- i.split[Long](\" \"))\n            if(num != 0)\n            \
    \    ans = ans + num\n        ans", "        def getFruit(s : String, i : Long)\
    \ : List[String] = {\n            val tokens = s.split(\"\"\"\\s+\"\"\")\n   \
    \         val numbers = tokens.map(_.toInt)\n            val fruits = new mutable.ListBuffer[String]()\n\
    \            var i = 0\n            while(i < numbers.size) {\n              \
    \  val s = tokens(i)\n                if((numbers(i) > 0) && (numbers(i) <= n))\
    \ {\n                    fruits.push(s)\n                    i += numbers(i)\n\
    \                } else {\n                    i += 1\n                }\n   \
    \         }\n            fruits.toList\n        }\n        getFruit(s,0).filterNot(_.equals(\"\
    mango\")).size", "        val ns = n.toString.split(\" \")\n        val apples\
    \ = ns.head match {\n            case aa if (aa == \"0\") => 0\n            case\
    \ aa if (aa == \"1\") => 1\n            case aa if (aa == \"2\") => 2\n      \
    \      case aa if (aa == \"3\") => 3\n            case aa if (aa == \"4\") =>\
    \ 4\n            case aa if (aa == \"5\") => 5\n            case aa if (aa ==\
    \ \"6\") => 6\n            case aa if (aa == \"7\") => 7\n            case aa\
    \ if (aa == \"8\") => 8\n            case aa if (aa == \"9\") => 9\n         \
    \   case _ => 0\n        }\n        val oranges = ns.last match {\n          \
    \  case oo if (oo == \"0\") => 0\n            case oo if (oo == \"1\") => 1\n\
    \            case oo if (oo == \"2\") => 2\n            case oo if (oo == \"3\"\
    ) => 3\n            case oo if (oo == \"4\") => 4\n            case oo if (oo\
    \ == \"5\") => 5\n            case oo if (oo == \"6\") => 6\n            case\
    \ oo if (oo == \"7\") => 7\n            case oo if (oo == \"8\") => 8\n      \
    \      case oo if (oo == \"9\") => 9\n            case _ => 0\n        }\n   \
    \     val totalOranges = fruitOranges(s, oranges)\n        val totalApples = fruitApples(s,\
    \ apples)\n        val numOfMangos = totalOranges - totalApples\n        numOfMangos",
  "        val basket = new mutable.HashMap[String, Long]()\n        val apples =\
    \ Long.parseLong(s(0).split(\" \")(1))\n        val oranges = Long.parseLong(s(0).split(\"\
    \ \")(2))\n        \n        var i : Int = 0\n        while(apples > 0 || oranges\
    \ > 0) {\n            if(apples > 0) basket.put(s(\"1 apples and \" + apples +\"\
    \ oranges\"), apples)\n            if(oranges > 0) basket.put(s(\"1 oranges and\
    \ \" + oranges +\" apples\"), oranges)\n            if(apples > 0 && oranges >\
    \ 0) {\n                val fruit = s(\"2 apples and \" + apples +\" oranges\"\
    )\n                val apples_ = basket.get(fruit)\n                basket.put(fruit,\
    \ apples + oranges)\n                apples = apples - apples_\n             \
    \   oranges = oranges - basket.get(fruit)\n                apples = apples - basket.get(fruit)\n\
    \                oranges = oranges - basket.get(fruit)\n            } else if(apples\
    \ > 0 && oranges == 0) {\n                apples = apples - basket.get(fruit)\n\
    \                \n            } else if(apples == 0 && oranges > 0) {\n     \
    \           oranges = oranges - basket.get(fruit)\n            } else if(apples\
    \ == 0 && oranges == 0) {\n                fruit = \"1 apples and 1 oranges\"\n\
    \                basket.put(fruit, apples + oranges)\n            }\n        \
    \    i = i + 1\n        }\n        var j : Int = 0\n        while(j < n) {\n \
    \           val fruit = s(\"2 apples and \" + apples +\" oranges\")\n        \
    \    if(basket.contains(fruit)) basket.remove(fruit)\n            else j=j+1\n\
    \        }\n        return basket.size", "        if(s.length()!=0){\n       \
    \     var apples = 0\n            var oranges = 0\n            var mango = 0\n\
    \            var i : Int = 0\n            var s : String = s\n            while(i\
    \ < s.length()){\n                if(s.charAt(i) == 'a' || s.charAt(i) == 'A'){\n\
    \                    apples = apples + 1\n                }\n                else\
    \ if(s.charAt(i) == 'o' || s.charAt(i) == 'O'){\n                    oranges =\
    \ oranges + 1\n                }\n                else if(s.charAt(i) == 'm' ||\
    \ s.charAt(i) == 'M'){\n                    mango = mango + 1\n              \
    \  }\n                i = i + 1\n            }\n            val total = apples\
    \ + oranges + mango\n            return n*mango/total\n        }\n        return\
    \ 0", "        val ls = s.split(' ')\n        val numberOfApples = ls(0).toLong\n\
    \        val numberOfOranges = ls(1).toLong\n        val numberOfFruits = numberOfApples\
    \ + numberOfOranges\n        val totalFruits = numberOfFruits * 3\n        val\
    \ sumOfFruits = totalFruits / 3\n        val mangoFruits = (numberOfFruits - sumOfFruits)\n\
    \        mangoFruits", "        val apple = s.split(\" \").map(_.replace(\"and\"\
    , \"\")).toSet\n        val orange = s.split(\" \").filter(_.replace(\"and\",\
    \ \"\")).toSet\n        val fruits = fruitsCounts(apple, orange)\n        val\
    \ mangos = fruits.filter(f => f.isMango)\n        fruits.size - mangos.size",
  "        val s = s\"${s.toInt} apples and ${s.toInt} oranges\"\n        val r =\
    \ s.split(\" \")\n        val n = s\"${n.toInt} oranges and ${n.toInt} apples\"\
    \n        val v = n.toCharArray\n        var num = 0\n        var i = 0\n    \
    \    var apples = 0\n        var oranges = 0\n        while (i < r.length) {\n\
    \            val j = r.apply(i).toLong\n            val k = r(i).toLong\n    \
    \        if (j == k) {\n                apples = j\n            }\n          \
    \  i = i + 1\n        }\n        while (num < apples) {\n            num = num\
    \ + v(0)\n        }\n        while (num > oranges) {\n            num = num -\
    \ v(0)\n        }\n        num", "        val aMap = mutable.Map.empty[Long, String]\n\
    \        val bMap = mutable.Map.empty[String, Long]\n        val mMap = mutable.Map.empty[Long,\
    \ Long]\n        var total = 0L\n        var count = 0L\n        var totalApples\
    \ = 0L\n        var totalOranges = 0L\n        var totalMangos = 0L\n        var\
    \ count = 0L\n        var i = 0\n        var j = 0\n\n        for( i <- 0 until\
    \ s.length.toInt) {\n            total = total + s.charAt(i).toLong\n        \
    \    totalApples = totalApples + s.charAt(i).toLong\n        }\n\n        for(\
    \ j <- 0 until n.toInt) {\n            aMap += (s.charAt(i).toLong -> s.charAt(j).toLong)\n\
    \            bMap += (s.charAt(j).toLong -> s.charAt(i).toLong)\n        }\n\n\
    \        for( i <- 0 until aMap.keySet) {\n            mMap += (aMap(i) -> bMap(aMap(i))).toMap\n\
    \        }\n\n        for(i <- 0 until mMap.keySet) {\n            count = count\
    \ + 1L\n            totalMangos = totalMangos + mMap(i)._2.toLong\n        }\n\
    \n        if(count == 0) {\n            count = 0L\n        }\n\n        if(totalMangos\
    \ == 0) {\n            totalMangos = 0L\n        }\n\n        totalMangos = totalMangos/count.toLong\n\
    \        totalMangos = totalMangos * 100d\n        totalMangos = totalMangos.toDouble\n\
    \        totalMangos.toLong", "        val apples = parseNum(s.split(\" \").last)\n\
    \        val oranges = parseNum(s.split(\" \").head)\n        var fruitsLeft :\
    \ Long = apples + oranges\n        var appleCounter = apples - 1\n        var\
    \ orangeCounter = oranges - 1\n        var mangoCounter = 0\n        while (fruitsLeft\
    \ > 0) && appleCounter > 0 && orangeCounter > 0) {\n            if (appleCounter\
    \ > 0 && orangeCounter > 0) {\n                fruitsLeft = fruitsLeft - 1\n \
    \               appleCounter = appleCounter - 1\n                orangeCounter\
    \ = orangeCounter - 1\n            } else if (appleCounter > 0) {\n          \
    \      appleCounter = appleCounter - 1\n            } else if (orangeCounter >\
    \ 0) {\n                orangeCounter = orangeCounter - 1\n            } else\
    \ {\n                mangoCounter = mangoCounter + 1\n                fruitsLeft\
    \ = fruitsLeft - 1\n                appleCounter = appleCounter + 1\n        \
    \        orangeCounter = orangeCounter + 1\n            }\n        }\n       \
    \ if (mangoCounter > 0) {\n            fruitCounter = mangoCounter\n        }\
    \ else {\n            fruitCounter = fruitLeft\n        }\n        return fruitCounter",
  "        var totalApples = 0 // count apples\n        var totalOranges = 0 // count\
    \ oranges\n        var totalFruits = 0\n\n        // traverse string and count\
    \ the number of each type of fruit\n        for (elem <- s.split(\" \"))\n   \
    \         if(elem.startsWith(\"a\")) {\n                totalApples += elem.toLong\n\
    \            } else if (elem.startsWith(\"o\")) {\n                totalOranges\
    \ += elem.toLong\n            } else {\n                totalFruits += elem.toLong\n\
    \            }\n\n        val apples = totalApples / n\n        val oranges =\
    \ totalOranges / n\n        val fruits = totalFruits / n\n\n        val mFruits\
    \ = fruits - apples - oranges\n\n        fruits + mFruits", "      val str : Array[String]\
    \ = s.split(\" \")\n      var i : Int = 0\n      var mangoCount : Int = 1\n  \
    \    while (i < str.length) {\n        if (str(i) == \"and\") {\n          if\
    \ (i > 1) {\n            mangoCount *= str(i-2)\n          }\n          i = i\
    \ + 1\n        }\n        else {\n          i += 1\n        }\n      }\n     \
    \ if (n < mangoCount) {\n        mangoCount\n      }\n      else {\n        fruitDistribution(str,\
    \ n)\n      }", "        val appleCountArray = new mutable.MutableList[Int]()\n\
    \        val orangeCountArray = new mutable.MutableList[Int]()\n        val mangoCountArray\
    \ = new mutable.MutableList[Int]()\n        val fruitCountArray = new mutable.MutableList[Int]()\n\
    \        for(i <- 1 to (n-1).toInt) {\n            val str = s.split(\" \")(i)\n\
    \            if(str == \"apples\") {\n                appleCountArray.add(i)\n\
    \            }\n            if(str == \"oranges\") {\n                orangeCountArray.add(i)\n\
    \            }\n            if(str == \"mango\") {\n                mangoCountArray.add(i)\n\
    \            }\n        }\n        appleCountArray.sortWith(_ < _)\n        orangeCountArray.sortWith(_\
    \ < _)\n        mangoCountArray.sortWith(_ < _)\n        appleCountArray.foreach(n\
    \ => fruitCountArray.add(n))\n        orangeCountArray.foreach(n => fruitCountArray.add(n))\n\
    \        mangoCountArray.foreach(n => fruitCountArray.add(n))\n        fruitCountArray.get(1).toLong",
  "        var apples = 0\n        var oranges = 0\n        var mangoes = 0\n    \
    \    \n        for(i <- 0 until s.len){\n            if(i == 0){\n           \
    \     if(s.charAt(i) == ' '){\n                    apples = 0\n              \
    \  }\n                else{\n                    apples += s.charAt(i)\n     \
    \           }\n            }\n            else if(i == 1){\n                if(s.charAt(i)\
    \ == ' '){\n                    oranges = 0\n                }\n             \
    \   else{\n                    oranges += s.charAt(i)\n                }\n   \
    \         }\n            else if(i == 2){\n                if(s.charAt(i) == '\
    \ '){\n                    mangoes = 0\n                }\n                else{\n\
    \                    mangoes += s.charAt(i)\n                }\n            }\n\
    \            else if(i == 3){\n                if(s.charAt(i) == ' '){\n     \
    \               apples = 0\n                    oranges = 0\n                \
    \    mangoes = 0\n                }\n                else{\n                 \
    \   apples += s.charAt(i)\n                    oranges += s.charAt(i)\n      \
    \              mangoes += s.charAt(i)\n                }\n            }\n    \
    \    }\n        var total = oranges + apples + mangoes\n        total -= mangoes\n\
    \        if(total < 0){\n            total = 0\n        }\n        return mangoes",
  "        val fruits = \n        s.split(\" \").\n          map(s => {\n        \
    \      val (n, f) = s.split(\"and\")\n              n match {\n              \
    \  case \"0\".toInt => \"0\"\n                case \"1\".toInt => \"1\"\n    \
    \            case _ => {\n                  val a = n.toInt\n                \
    \  val b = f.toInt\n                  (a * b) / 100\n                }\n     \
    \         }\n            }).\n          toSeq\n        val apples = fruits(0)\n\
    \        val oranges = fruits(1)\n        val mango = fruits.sum\n        mango\
    \ / 100", "        val m = n.toInt\n        var i = 0\n        while (i < m) {\n\
    \            val j = s.indexOf(\"orange\", i)\n            if (j == -1) {\n  \
    \              break\n            }\n            val k = s.indexOf(\"apple\",\
    \ j)\n            if (k == -1) {\n                break\n            }\n     \
    \       if (s.charAt(k) != 'm') {\n                break\n            }\n    \
    \        i = k + 1\n        }\n        if (i == m) {\n            i\n        }\
    \ else {\n            return 0\n        }", "        var i = 0\n        val fruits\
    \ = for (c <- s.toCharArray) yield {\n            if (\"0\" <= c && \"9\" <= c)\
    \ {\n                val n = c - '0'\n                if (n < 0)\n           \
    \         n + 9\n                else\n                    n\n            } else\
    \ \n                throw new IllegalArgumentException(\"bad character: \" + c)\n\
    \        }\n        // add \"apple\" and \"mango\" to the basket \n        fruits\
    \ = fruits :+ 5 \n        fruits = fruits :+ 6\n        // add \"orange\" to the\
    \ basket \n        fruits = fruits :+ 1\n        // count the apples and oranges\n\
    \        var apples = fruits.find(_ == 0)\n        var oranges = fruits.find(_\
    \ == 1)\n        // subtract the apples and oranges to find the number of mango\
    \ fruits\n        val mango = fruits - apples - oranges\n        // count the\
    \ mango fruits\n        val count1 = mango.count\n        // add apples and oranges\
    \ to the basket \n        fruits = fruits :+ 2\n        fruits = fruits :+ 3\n\
    \        // subtract apples and oranges to find the number of mango fruits\n \
    \       val count2 = fruits - apples - oranges\n        // subtract the apples\
    \ and oranges to find the number of mango fruits\n        val count3 = mango -\
    \ apples - oranges\n        // return count3 \n        count3", "        val s\
    \ = s.length\n        if (s == 0){\n            return 0\n        }\n        val\
    \ l = s.split(\" \").map(_.toLong).getOrElse(0)\n        val i = s.split(\"and\"\
    ).map(_.toLong).getOrElse(0)\n        val j = s.split(\"and\").map(_.toLong).getOrElse(0)\n\
    \        val k = (l * i) + (l * j)\n        val m = s.split(\" \").filter(_.toLong\
    \ != 0).map(_.toLong).sum\n        k + (n - m)", "        // return your answer\
    \ here\n        var i : Int = 0;\n        var f : Int = 0;\n        var e : Int\
    \ = 0;\n        var h : Int = 0;\n        var j : Int = 0;\n        var f : Int\
    \ = 0;\n        var e : Int = 0;\n        var h : Int = 0;\n        var j : Int\
    \ = 0;\n        var f : Int = 0;\n        var e : Int = 0;\n        var h : Int\
    \ = 0;\n        var j : Int = 0;\n        var f : Int = 0;\n        var e : Int\
    \ = 0;\n        var h : Int = 0;\n        var j : Int = 0;\n        var f : Int\
    \ = 0;\n        var e : Int = 0;\n        var h : Int = 0;\n        var j : Int\
    \ = 0;\n        var f : Int = 0;\n        var e : Int = 0;\n        var h : Int\
    \ = 0;\n        var j : Int = 0;\n        var f : Int = 0;\n        var e : Int\
    \ = 0;\n        var h : Int = 0;\n        var j : Int = 0;\n        var f : Int\
    \ = 0;\n        var e : Int = 0;\n        var h : Int = 0;\n        var j : Int\
    \ = 0;\n        var f : Int = 0;\n        var e : Int = 0;\n        var h : Int\
    \ = 0;\n        var j : Int = 0;\n        var f : Int = 0;\n        var e : Int\
    \ = 0;\n        var h : Int = 0;\n        var j : Int = 0;\n        var f : Int\
    \ = 0;\n        var e : Int = 0;\n        var h : Int = 0;\n        var j : Int\
    \ = 0;\n        var f : Int = 0;\n        var e : Int = 0;\n        var h : Int\
    \ = 0;\n        var j : Int = 0;\n        var f : Int = 0;\n        var e : Int\
    \ = 0;\n        var h : Int = 0;\n        var j : Int = 0;\n        var f : Int\
    \ = 0;\n        var e : Int = 0;\n        var h : Int = 0;\n        var j : Int\
    \ = 0;\n        var f : Int = 0;\n        var e : Int = 0;\n        var h : Int\
    \ = 0;\n        var j : Int = 0;\n        var f : Int = 0;\n        var e : Int\
    \ = 0;\n        var h : Int = 0;\n        var j : Int = 0;\n        var f : Int\
    \ = 0;\n        var e : Int = 0;\n        var h : Int = 0;\n        var j : Int\
    \ = 0;\n        var f : Int = 0;\n        var e : Int = 0;\n        var h : Int\
    \ = 0;\n        var j : Int = 0;\n        var f : Int = 0;\n        var e : Int\
    \ = 0;\n        var h : Int = 0;\n        var j : Int = 0;\n        var f : Int\
    \ = 0;\n        var e : Int = 0;\n        var h : Int = 0;\n        var j : Int\
    \ = 0;\n        var f : Int = 0;\n        var e : Int = 0;\n        var h : Int\
    \ = 0;\n        var j", "        val apples = s.split(\" \").map(_.toInt).sum\n\
    \        val oranges = s.split(\" \").map(_.toInt).sum\n        val fruits = apples\
    \ + oranges\n        val totalFruits = fruits.toLong\n        val fruitsInBasket\
    \ = n / totalFruits.toLong.toInt\n        val mangoFruits = fruitsInBasket * 1.5\n\
    \        return mangoFruits.toLong", "        if (n == 0) n\n        else {\n\
    \            val parts = s.split(\" \")\n            val apples = int(parts(0))\n\
    \            val oranges = int(parts(1))\n            val fruit = apples + oranges\n\
    \            val total = apples + oranges\n            val mf = fruit - apples\
    \ + oranges\n            if (total == n) mf\n            else fruitDistribution(s,\
    \ n - total)\n        }", "        val tokens = s.split(\" \").toList\n      \
    \  val applesAndOranges = tokens(0).toLong\n        val totalFruits = tokens(1).toLong\n\
    \        val mangoFruits = applesAndOranges * 3 / 100\n        val basket = new\
    \ mutable.MutableList[String]()\n        var i = 0\n        while (i <= totalFruits)\
    \ {\n            if (basket.size < n) basket.append(\" \")\n            basket(i)\
    \ = tokens(i + 2)\n            i += 3\n        }\n        basket.remove(0)\n \
    \       basket.remove(basket.last)\n        val numberOfFruitsInBasket = basket.size\n\
    \        basket.remove(basket.last)\n        var sum = 0L\n        var i = 0\n\
    \        while (i < numberOfFruitsInBasket) {\n            sum += basket(i)\n\
    \            i += 1\n        }\n        sum - mangoFruits", "        import scala.math._\n\
    \        val list = s.split(\" \") // split by space\n        val numOfApples\
    \ = list.head.toLong // head\n        val numOfOranges = list.last.toLong // last\n\
    \        val numOfFruits = n * numOfOranges * numOfApples // the total number\
    \ of fruits = n*numOfOranges*numOfApples\n        val fruits = (1 to n).map(x\
    \ => if (x == numOfApples) \"apples\" else if (x == numOfOranges) \"oranges\"\
    \ else \"mango\").toList\n        val appleFruits = fruits.filter(_.contains(\"\
    apples\")) // filter out apples\n        val orangeFruits = fruits.filter(_.contains(\"\
    oranges\")) // filter out oranges\n        val mangoFruits = fruits.filter(_.contains(\"\
    mango\")) // filter out mango\n        (appleFruits ++ orangeFruits ++ mangoFruits).count()\
    \ // count all the fruits", "        var sum = 0\n        var number = 0\n   \
    \     var apple = 0\n        var orange = 0\n        var mango = 0\n        var\
    \ fruit = 0\n\n        s = s.toUpperCase()\n        s.split(\"and\").foreach(x\
    \ => \n            if (x.contains(\"apples\")) apple = x.split(\"apples\")(1).toLong\n\
    \            else if (x.contains(\"oranges\")) orange = x.split(\"oranges\")(1).toLong\n\
    \            else if (x.contains(\"mango\")) mango = x.split(\"mango\")(1).toLong\n\
    \            else if (x.contains(\"fruits\")) fruit = x.split(\"fruits\")(1).toLong\n\
    \            else if (!x.equals(\"\"))\n                sum += x.toLong\n    \
    \        else\n                number++\n        )\n\n        sum += apple\n \
    \       sum += orange\n        sum += mango\n        sum += fruit\n\n        //\
    \ return n\n        return sum", "        import scala.math._\n        val fruit\
    \ = s.split(' ').toList.toArray\n        val apples = fruit(0).toLong\n      \
    \  val oranges = fruit(1).toLong\n        val mangoes = apples + oranges\n   \
    \     val basket = mutable.ArrayBuffer.empty[Long]\n        while (oranges > 0)\
    \ {\n            basket += oranges\n            oranges -= 1\n        }\n    \
    \    while (apples > 0) {\n            basket += apples\n            apples -=\
    \ 1\n        }\n        if (apples < oranges) {\n            val n = apples +\
    \ oranges\n            val m = apples - oranges\n            while (n>0) {\n \
    \               basket += n\n                n -= 1\n            }\n         \
    \   while (m > 0) {\n                basket += m\n                m -= 1\n   \
    \         }\n        }\n        return mangoes - fruit.sum\n", "        var apples\
    \ = scala.collection.mutable.HashMap[String, Long]()\n        var oranges = scala.collection.mutable.HashMap[String,\
    \ Long]()\n        var mangoes = scala.collection.mutable.HashMap[String, Long]()\n\
    \        var i = 0\n        s.split(\"and\").foreach(s => {\n            val v\
    \ = s.trim\n            if(v.contains(\"apples\")) {\n                apples +=\
    \ (s -> n(i))\n            } else if(v.contains(\"oranges\")) {\n            \
    \    oranges += (s -> n(i))\n            } else if(v.contains(\"mango\")) {\n\
    \                mangoes += (s -> n(i))\n            } else {\n              \
    \  println(\"Error: Invalid input\")\n            }\n            i += 1\n    \
    \    })\n        var totalOranges = 0 //oranges.size()\n        var totalApples\
    \ = 0 //apples.size()\n        var totalMangoes = 0 //mangoes.size()\n       \
    \ for(k <- apples.keys) totalApples += apples(k)._2.toLong\n        for(k <- oranges.keys)\
    \ totalOranges += oranges(k)._2.toLong\n        for(k <- mangoes.keys) totalMangoes\
    \ += mangoes(k)._2.toLong\n        totalMangoes = totalMangoes / apples.size /\
    \ oranges.size\n        var result = totalMangoes\n        if(apples.size != 0\
    \ && oranges.size != 0 && mangoes.size != 0) {\n            val tempApples = apples.toSeq\n\
    \            val tempOranges = oranges.toSeq\n            val tempMangoes = mangoes.toSeq\n\
    \            val tempApples = tempApples.filter(_._2 < totalApples)\n        \
    \    val tempOranges = tempOranges.filter(_._2 < totalOranges)\n            val\
    \ tempMangoes = tempMangoes.filter(_._2 < totalOranges)\n            val totalMangoes\
    \ = tempMangoes.sum\n            val totalApples = tempApples.sum\n          \
    \  val totalOranges = tempOranges.sum\n            if(totalApples != 0 && totalOranges\
    \ != 0 && totalMangoes != 0) {\n                result = totalMangoes / totalApples\
    \ / totalOranges\n            }\n        }\n        result", "        val s =\
    \ s.replaceAll(\"apple\", \"\").replaceAll(\"orange\", \"\").replaceAll(\"mango\"\
    , \"\")\n        val applesAndOranges = s match { \n            case \" \" =>\
    \ 0\n            case _ => s.toLong\n        }\n        val apples = applesAndOranges\
    \ / 2\n        val oranges = applesAndOranges - apples\n        val mangos = n\
    \ - oranges\n        if (apples + oranges + mangos < n) 0\n        else apples\
    \ + oranges + mangos", "        val stringArray = s.split(\" \") map { s => s.toLong\
    \ }.toArray\n        // val stringArray = s.split(\" \").map(_.toInt).toArray\n\
    \        if (stringArray.length == 0)\n            return 0\n        // val stringArray\
    \ = s.split(\" \").map(_.toLong).toArray\n        // val stringArray = s.split(\"\
    \ \").map(_.toInt).toArray\n        // val stringArray = s.split(\" \").map(_.toInt).toArray\n\
    \        // val stringArray = s.split(\" \").map(_.toInt).toArray\n        if\
    \ (stringArray.length == 1)\n            return stringArray(0)\n        if (stringArray.length\
    \ == 2)\n            return stringArray(0)\n        // val stringArray = s.split(\"\
    \ \").map(_.toLong).toArray\n        // val stringArray = s.split(\" \").map(_.toInt).toArray\n\
    \        // val stringArray = s.split(\" \").map(_.toInt).toArray\n        //\
    \ val stringArray = s.split(\" \").map(_.toInt).toArray\n        // val stringArray\
    \ = s.split(\" \").map(_.toInt).toArray\n        // val stringArray = s.split(\"\
    \ \").map(_.toInt).toArray\n        // val stringArray = s.split(\" \").map(_.toInt).toArray\n\
    \        // val stringArray = s.split(\" \").map(_.toInt).toArray\n        //\
    \ val stringArray = s.split(\" \").map(_.toInt).toArray\n        // val stringArray\
    \ = s.split(\" \").map(_.toInt).toArray\n        // val stringArray = s.split(\"\
    \ \").map(_.toInt).toArray\n        // val stringArray = s.split(\" \").map(_.toInt).toArray\n\
    \        // val stringArray = s.split(\" \").map(_.toInt).toArray\n        //\
    \ val stringArray = s.split(\" \").map(_.toInt).toArray\n        // val stringArray\
    \ = s.split(\" \").map(_.toInt).toArray\n        // val stringArray = s.split(\"\
    \ \").map(_.toInt).toArray\n        // val stringArray = s.split(\" \").map(_.toInt).toArray\n\
    \        // val stringArray = s.split(\" \").map(_.toInt).toArray\n        //\
    \ val stringArray = s.split(\" \").map(_.toInt).toArray\n        // val stringArray\
    \ = s.split(\" \").map(_.toInt).toArray\n        // val stringArray = s.split(\"\
    \ \").map(_.toInt).toArray\n        // val stringArray = s.split(\" \").map(_.toInt).toArray\n\
    \        // val stringArray = s.split(\" \").map(_.toInt).toArray\n        //\
    \ val stringArray = s.split(\" \").map(_.", "        val countList = mutable.ListBuffer[Long]()\n\
    \        var i : Int = 0\n        while (i<s.length) {\n            if (s.charAt(i).toInt\
    \ > 0) {\n                countList += s.charAt(i).toInt\n                i +=1\n\
    \            } else {\n                i +=1\n            }\n        }\n     \
    \   countList.toList.groupBy(_ % 2 == 0).toList.sortBy(_._1).reverse.last._2.length",
  "        val numbers = s.split(\" \")\n        val apples: Long = numbers.toArray.map(_.toLong).sum\n\
    \        val oranges: Long = numbers.toArray.map(_.toLong).filter(_ < 5).sum\n\
    \        val mangoes: Long = numbers.toArray.filter(_.toLong > 5).sum\n      \
    \  val result: Long = apples + oranges + mangoes + n\n        result", "     \
    \   val apples = n.toString.toInt\n        val oranges = s.toString.toInt\n  \
    \      val m = new collection.mutable.LinkedHashMap[String,Long]()\n        m.put(\"\
    apples\",apples)\n        m.put(\"oranges\",oranges)\n        m.put(\"mangoes\"\
    ,0)\n        for ( (k,v) <- m ) {\n            val count = v.toString.toInt\n\
    \            if (v > apples) {\n                m.put(k, count - apples)\n   \
    \         } else if (v > oranges) {\n                m.put(k, count - oranges)\n\
    \            } else if (v > 0) {\n                m.put(k, count - 1)\n      \
    \      }\n        }\n        m.get(\"mangoes\").toLong", "        val x = s.toInt\
    \ - n.toInt\n        if(x >0){\n            x match {\n                case 0\
    \ => n.toInt\n                case 1 => n.toInt\n                case 2 => n.toInt\n\
    \                case 3 => n.toInt\n                case 4 => n.toInt\n      \
    \          case 5 => n.toInt\n                case 6 => n.toInt\n            \
    \    case 7 => n.toInt\n                case 8 => n.toInt\n                case\
    \ 9 => n.toInt\n                case 10 => n.toInt\n                case 11 =>\
    \ n.toInt\n                case 12 => n.toInt\n                case 13 => n.toInt\n\
    \                case 14 => n.toInt\n                case 15 => n.toInt\n    \
    \            case 16 => n.toInt\n                case 17 => n.toInt\n        \
    \        case 18 => n.toInt\n                case 19 => n.toInt\n            \
    \    case 20 => n.toInt\n                case 21 => n.toInt\n                case\
    \ 22 => n.toInt\n                case 23 => n.toInt\n                case 24 =>\
    \ n.toInt\n                case 25 => n.toInt\n                case 26 => n.toInt\n\
    \                case 27 => n.toInt\n                case 28 => n.toInt\n    \
    \            case 29 => n.toInt\n                case 30 => n.toInt\n        \
    \        case 31 => n.toInt\n                case 32 => n.toInt\n            \
    \    case 33 => n.toInt\n                case 34 => n.toInt\n                case\
    \ 35 => n.toInt\n                case 36 => n.toInt\n                case 37 =>\
    \ n.toInt\n                case 38 => n.toInt\n                case 39 => n.toInt\n\
    \                case 40 => n.toInt\n                case 41 => n.toInt\n    \
    \            case 42 => n.toInt\n                case 43 => n.toInt\n        \
    \        case 44 => n.toInt\n                case 45 => n.toInt\n            \
    \    case 46 => n.toInt\n                case 47 => n.toInt\n                case\
    \ 48 => n.toInt\n                case 49 => n.toInt\n                case 50 =>\
    \ n.toInt\n                case 51 => n.toInt\n                case 52 => n.toInt\n\
    \                case 53 => n.toInt\n                case 54 => n.toInt\n    \
    \            case 55 => n.toInt\n                case 56 => n.toInt\n        \
    \        case 57 => n.toInt\n                case 58 => n.toInt\n            \
    \    case 59 => n.toInt\n                case 60 => n.toInt\n                case\
    \ 61 => n.toInt\n                case 62 => n.toInt\n                case 63 =>\
    \ n.toInt\n                case 64 => n.toInt\n                case 65 => n.toInt\n\
    \                case 66 => n.", "        var total = 0\n        var sum = 0\n\
    \        for (i <- 0 until n -1) {\n            val value = s.split(' ').get(i).toInt\n\
    \            total = total + value\n            sum += value\n        }\n    \
    \    return sum", "        val apples = split(s(0), \" \")(0).trim\n        val\
    \ oranges = split(s(1), \" \")(1).trim\n        val fruits = split(s(2), \" \"\
    )(2).trim\n        val mangos = fruits.toLong - apples.toLong - oranges.toLong\n\
    \        fruits - mangos", "        val basket = s.split(\" \").toList.map(_.toInt)\n\
    \        val apples = basket.drop(1).sum\n        val oranges = basket.dropRight(1).sum\n\
    \        val fruits : Long = apples ++ oranges\n        val mangos = if (fruits\
    \ == 0) 0\n        else if (fruits >= 40 && fruits <= 50) 1\n        else 0\n\
    \        fruits - mangos", "        if (s.contains(\"apples and oranges\"))\n\
    \            return fruitDistribution(s.replace(\"apples and oranges\", \"oranges\"\
    ), n)\n        else if (s.contains(\"oranges\"))\n            return fruitDistribution(s.replace(\"\
    oranges\", \"apples\"), n)\n        else if (s.contains(\"apples\"))\n       \
    \     return fruitDistribution(s.replace(\"apples\", \"oranges\"), n)\n      \
    \  else\n            return fruitDistribution(s.replace(\"oranges and apples\"\
    , \"apples\"), n)", "        val count = s.split(\" \")(1).trim\n        val values\
    \ = s.split(\" \")(0).split(\"and\").map(x => x.toLong).sortWith(_ < _)\n    \
    \    var count = 0\n        val count = values.foldLeft(0){\n            case\
    \ (acc, x) =>\n                if (x <= count) {\n                    acc + 1\n\
    \                } else {\n                    acc\n                }\n      \
    \  }\n        count * n", "        // Your code goes here\n        // a) Separate\
    \ the numbers by space, then convert to Int, finally sum the numbers\n       \
    \ // b) Sort the numbers and take the first n/2 numbers\n        // c) Count the\
    \ numbers that are divisible by 2\n        // d) Multiply them to get the number\
    \ of mango fruits\n        val sArray = s.split(\" \").toList\n        val numbers\
    \ = sArray.map(_.toInt).toList\n        val sorted = numbers.sortWith(_ < _)\n\
    \        val middle = sorted.size / 2\n        val a1 = sorted.take(middle)\n\
    \        val a2 = sorted.drop(middle)\n        val b1 = a1.map(a => a * a)\n \
    \       val b2 = a2.map(a => a * a)\n        val c1 = b1.count{case a => a > 0}\n\
    \        val c2 = b2.count{case a => a > 0}\n        val d = c1 * c2\n       \
    \ d * n"]
stop_tokens:
- "\n    }\n"
