language: scala
name: HumanEval_63_fibfib
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if(n <= 1l){\n            return\
    \ 0\n        }else{\n            return fibfib(n-1l) + fibfib(n-2l) + fibfib(n-3l)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxvhn3ksk.scala:24)\n\tat Problem.main(tmpxvhn3ksk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib : mutable.Long = mutable.Long.empty;\n\
    \        fib += 0L\n        fib += 0L\n        fib += 0L\n        if(n >= 2l)\
    \ {\n            fib += fibfib(n-1l) + fibfib(n-2l) + fibfib(n-3l)\n        }\n\
    \        fib\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvokc5z2a.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.Long\
    \ = mutable.Long.empty;\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpvokc5z2a.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.Long\
    \ = mutable.Long.empty;\n\e[31m\e[31m   |\e[0m                               \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0) 0l\n        else {\n\
    \            val fib1 : Long = fibfib(n-1)\n            val fib2 : Long = fibfib(n-2)\n\
    \            val fib3 : Long = fibfib(n-3)\n            fib1 + fib2 + fib3\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmpornoivuh.scala:16)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfib(tmpornoivuh.scala:19)\n\tat Problem$.fibfib(tmpornoivuh.scala:19)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib = new mutable.ArrayBuilder[Long]\n\
    \        fibfib.append (0)\n        fibfib.append (0)\n        fibfib.append (1)\n\
    \        fibfib.append (0)\n        fibfib.append (fibfib(0))\n        fibfib.append\
    \ (fibfib(0))\n        fibfib.append (fibfib(n-2) + fibfib(n-1))\n        fibfib(n-1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph2dj6_jr.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuilder[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010030
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n <= 0) 0\n        else if (n\
    \ <= 2) 1\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy4ilmzv1.scala:23)\n\tat Problem.main(tmpy4ilmzv1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n    \tvar fibfib = 0L\n    \tfor (i <- 0\
    \ until n) {\n    \t\tfibfib = (fibfib + i) % Long.MaxValue\n    \t}\n    \tfibfib\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpocd9ingk.scala:18:26\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \t\e[33mfor\e[0m (i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m    \t                  ^\e[0m\n\e\
    [31m   |\e[0m    \t                  Found:    (n : Long)\n\e[31m   |\e[0m   \
    \ \t                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        // Write your code here\n      \
    \  val fibfib : mutable.MutableList[Int] = new mutable.MutableList(n)\n      \
    \  fibfib(0) = 0\n        fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n)\
    \ = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        fibfib.toList.head\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n  \
    \  assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp99__pth.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m : mutable.MutableList[\e\
    [35mInt\e[0m] = \e[33mnew\e[0m mutable.MutableList(n)\n\e[31m\e[31m   |\e[0m \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp99__pth.scala:18:52\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfibfib\e[0m : mutable.MutableList[\e[35mInt\e[0m] = \e[33mnew\e[0m mutable.MutableList(n)\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010029
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if(n <= 0)\n            return 0\n\
    \        if(n <= 2)\n            return 1\n        val n2 = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        n2\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppqx3bmox.scala:26)\n\tat Problem.main(tmppqx3bmox.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var cur = 1l\n        var sum =\
    \ 0l\n        while (n > 0) {\n            cur = cur * 2\n            sum = sum\
    \ + cur\n            n = n - 1\n        }\n        return sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmppudjl3i6.scala:22:14 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            n = n - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib : mutable.Stack[Long] =\
    \ mutable.Stack[Long]()\n        fib.push(0l)\n        fib.push(1l)\n        while(fib.length\
    \ < n) {\n            val curr = fib.removeLast + fib.removeLast\n           \
    \ fib.push(curr)\n        }\n        fib.remove(n-1)\n        fib.remove(n-2)\n\
    \        fib.remove(n-3)\n        fib.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4y1otxcc.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.Stack[\e\
    [35mLong\e[0m] = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m     \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4y1otxcc.scala:17:40\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e\
    [36mfib\e[0m : mutable.Stack[\e[35mLong\e[0m] = mutable.Stack[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                        Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fibb = 0\n        if (n == 0)\
    \ fibb.toLong\n        else {\n            if (n == 1) fibb.toLong\n         \
    \   else {\n                if (n == 2) fibb.toLong\n                else {\n\
    \                    fibb = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \        }\n            }\n        }\n        fibb.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_x4lwq0n.scala:24:27\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    fibb = fibfib(n-\e\
    [31m1\e[0m) + fibfib(n-\e[31m2\e[0m) + fibfib(n-\e[31m3\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m    \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0 || n == 1)\n        \
    \    return n\n        else\n            return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\tat Problem$.fibfib(tmpmxfsfdo4.scala:20)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfiblist = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i<= n) {\n            fibfiblist += fibfib(n-i)\n\
    \            i += 2\n        }\n        fibfiblist.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi4c0olji.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfiblist\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fib : mutable.MutableList[Long]\
    \ = mutable.MutableList(0)\n        for (i <- 0 until n) {\n            fib.add(fib.lastOrDefault(1)\
    \ + fib.lastOrDefault(2) + fib.lastOrDefault(3));\n        }\n        fib.remove(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb8k3w7ri.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb8k3w7ri.scala:17:46\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mfib\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb8k3w7ri.scala:18:26\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibbonacci : mutable.MutableList[Long]\
    \ = mutable.MutableList(1l);\n        fibbonacci.push(0l)\n        fibbonacci.head\n\
    \        var lastFib : Long = 0l\n        for (i<-0 to n) {\n            fibbonacci\
    \ += fibfib(i);\n            lastFib = fibbonacci.head\n        }\n        lastFib\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp42saq6s6.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibbonacci\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList(\e[31m1l\e[0m);\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp42saq6s6.scala:17:53\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mfibbonacci\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList(\e\
    [31m1l\e[0m);\n\e[31m\e[31m   |\e[0m                                         \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp42saq6s6.scala:21:21 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i<-\e[31m0\e[0m to n) {\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                     Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0) 0\n        else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val a = mutable.MutableList[Long]()\n\
    \        val b = new Array[Long](8l).fill(0l)\n        val n = if (n<0l) 0 else\
    \ n\n        var i = 0\n        while(true){\n            a.clear()\n        \
    \    a.push(b(i))\n            if(i==n) \n                a.push(b(i+1))\n   \
    \         i += 1\n            while(!a.contains(a(i))){\n                a.push(b(i))\n\
    \                if(i==n) \n                    a.push(b(i+1))\n             \
    \   i += 1\n            }\n            a.clear()\n            val y = a(i)\n \
    \           while(!b(i).equals(y)) {\n                i += 1\n            }\n\
    \            b += 1\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphqg4ap_m.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmphqg4ap_m.scala:18:32 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mLong\e[0m](\e[31m8l\e[0m).fill(\e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                ^^\e[0m\n\e[31m   |\e[0m                    \
    \            Found:    (\e[31m8L\e[0m : Long)\n\e[31m   |\e[0m               \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmphqg4ap_m.scala:19:20 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = \e[33mif\e[0m (n<\e[31m0l\e[0m)\
    \ \e[31m0\e[0m \e[33melse\e[0m n\n\e[31m\e[31m   |\e[0m                    ^\e\
    [0m\n\e[31m   |\e[0m                    Recursive \e[33mvalue\e[0m \e[35mn\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphqg4ap_m.scala:19:33\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = \e[33mif\e[0m (n<\e[31m0l\e[0m) \e[31m0\e[0m \e[33melse\e[0m\
    \ n\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e\
    [0m                                 Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphqg4ap_m.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mwhile\e[0m(\e\
    [31mtrue\e[0m){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m22 |\e[0m            a.clear()\n\
    \e[31m23 |\e[0m            a.push(b(i))\n\e[3"
  stdout: ''
  timestamp: 1660010033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib: Long = 1l\n        var\
    \ fibsum = 0l\n        for(i <- 0 until n){\n            fib = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n            fibsum = fibsum + fib\n        }\n        fibsum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptufquwuw.scala:19:25\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fs = mutable.Stack[Long]()\n\
    \        fs.push(0l)\n        fs.push(0l)\n        fs.push(0l)\n        fs.push(fs.last.map(_\
    \ + fs.last.last).getOrElse(1l))\n        val temp = fs.last.map(_ + fs.last.last).getOrElse(1l)\n\
    \        if(n >= fs.last.length) {\n            fs.dropRight(1)\n        } else\
    \ {\n            fs.push(fs.last.map(_ + fs.last.last).getOrElse(1l))\n      \
    \      val fsp = fs.last.dropRight(n)\n            fs.push(fsp.last)\n       \
    \     if(fsp.last.size < n){\n                fsp.dropRight(temp - fsp.last.length)\n\
    \            } else {\n                fsp\n            }\n        }\n       \
    \ fs.pop()\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2urh1tt1.scala:17:17 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfs\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib : Long = if(n < 1) 1\
    \ else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        fibfib\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpdbl4ladw.scala:17:45 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m : \e[35mLong\e\
    [0m = \e[33mif\e[0m(n < \e[31m1\e[0m) \e[31m1\e[0m \e[33melse\e[0m fibfib(n-\e\
    [31m1\e[0m) + fibfib(n-\e[31m2\e[0m) + fibfib(n-\e[31m3\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                                             ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   \e[33mvalue\e[0m \e[35mfibfib\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010030
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        def fib(n:Long, c:Long, r:Long)\
    \ : Long = {\n            if(n<0) return 0\n            if(n==0) return c\n  \
    \          if(n==1) return r\n            return fib(n-1, c+r, c)\n        }\n\
    \        fib(n, 0,0)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3hi1hs9.scala:26)\n\tat Problem.main(tmpk3hi1hs9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fib : mutable.MutableList[Long]\
    \ = mutable.MutableList.empty\n        for {\n            fibfib0 <- fib.head\n\
    \            fibfib1 <- fibfib0 + 1\n            fibfib2 <- fibfib1 + 1\n    \
    \        fibfib3 <- fibfib2 + 1\n        } yield fibfib3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt_xcb_ol.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList.empty\n\e[31m\e[31m   |\e[0m            \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt_xcb_ol.scala:17:46 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList.empty\n\e[31m\e[31m   |\e[0m            \
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var prev = 0\n        var current\
    \ = 1\n        var sum = 0\n        if (n < 0) {\n            throw new java.lang.AssertionError(\"\
    fibfib called with negative argument\")\n        }\n        else {\n         \
    \   while (n > 0) {\n                sum = prev + current\n                prev\
    \ = current\n                current = sum\n                n -= 1\n         \
    \   }\n        }\n        current\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_ps_6zz.scala:28:18 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a\
    \ member of Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if(n == 0 || n == 1) {\n       \
    \     return n\n        }\n        else {\n            val fibseq = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n            return fibseq\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n   \
    \ assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\tat Problem$.fibfib(tmp_p1v8jf3.scala:21)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fib_arr = mutable.ArrayBuilder.make[Long](5).reset\n\
    \        fib_arr(0) = 0\n        fib_arr(1) = 0\n        fib_arr(2) = 1\n    \
    \    for {\n            i <- 3 until fib_arr.length\n        } yield {\n     \
    \       fib_arr(i) = fib_arr(i-1) + fib_arr(i-2) + fib_arr(i-3)\n        }\n \
    \       fib_arr(fib_arr.length-1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpri3_f_zb.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib_arr\e[0m = mutable.ArrayBuilder.make[\e\
    [35mLong\e[0m](\e[31m5\e[0m).reset\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfibs = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until n){\n            fibfibs = fibfibs :+ fibfib(i + 1)\
    \ + fibfib(i + 2)\n        }\n        fibfibs.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp49u_kvrv.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp49u_kvrv.scala:19:20 -----------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            fibfibs = fibfibs :+ fibfib(i + \e[31m1\e[0m)\
    \ + fibfib(i + \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val fibfibs\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n       val cache = new mutable.HashMap[Long,Long]()\n\
    \       def fibfib(n: Long, a: Long, b: Long) : Long = n match {\n           case\
    \ 0 => a\n           case 1 => b\n           case _ => fibfib(n-1, cache, a+b)\
    \ //cache is shared by all calls\n       }\n       cache.put(n, fibfib(n,0,0))\n\
    \       cache.get(n).asInstanceOf[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3c9_0qni.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m       \e[33mval\e[0m \e[36mcache\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m,\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib = new mutable.Array[Long](3)\n\
    \        fibfib(0) = 0\n        fibfib(1) = 0\n        fibfib(2) = 1\n       \
    \ fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        fibfib(n)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmx35rylz.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        def fibfib(n: Long): Long = {\n\
    \            if (n == 0 || n == 1) {\n                return n\n            }\n\
    \            if (n == 2) {\n                return 1\n            }\n        \
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        }\n        return\
    \ fibfib(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc3__ny50.scala:30)\n\tat Problem.main(tmpc3__ny50.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n\
    \ == 1) 1\n        else if (n == 2) 1\n        else fibbonacci(n-1) + fibbonacci(n-2)\
    \ + fibbonacci(n-3)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxeoq47t6.scala:20:13 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m fibbonacci(n-\e[31m1\e[0m) +\
    \ fibbonacci(n-\e[31m2\e[0m) + fibbonacci(n-\e[31m3\e[0m)\n\e[31m\e[31m   |\e\
    [0m             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             Not found: fibbonacci\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        require(n > 0, \"fibfib needs n\
    \ > 0\") \n        val fibfibs = (0 to n).map(fibfib(_)).toArray\n        fibfibs(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy_8zufqv.scala:18:28\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e\
    [0m = (\e[31m0\e[0m to n).map(fibfib(_)).toArray\n\e[31m\e[31m   |\e[0m      \
    \                      ^\e[0m\n\e[31m   |\e[0m                            Found:\
    \    (n : Long)\n\e[31m   |\e[0m                            Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy_8zufqv.scala:19:16\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        fibfibs(n)\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Found:   \
    \ (n : Long)\n\e[31m   |\e[0m                Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib_cache = new Array[Long](3)\n\
    \        fibfib(n, 0, fibfib_cache)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpogajr7hk.scala:18:15\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        fibfib(n, \e[31m0\e[0m,\
    \ fibfib_cache)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m               Found:    (Long, Int, Array[Long])\n\e[31m   |\e\
    [0m               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfibList = mutable.ListBuffer(0)\n\
    \        var prev = 0l\n        var curr = 0l\n        var curr = n\n        while\
    \ (curr <= n) fibfibList.append(curr)\n        while (curr > 1) {\n          \
    \  val temp = prev\n            prev = curr\n            curr = curr - 1\n   \
    \         fibfibList.push(curr)\n        }\n        fibfibList.toList.last\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6wqts2f1.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mcurr\e[0m = n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurr is already defined\
    \ as \e[33mvariable\e[0m \e[35mcurr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6wqts2f1.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfibList\e[0m = mutable.ListBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if(n == 0) 0\n        else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib0 = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        if( n < 0 ) return 0L\n        else if( n == 0 ) return\
    \ 0L\n        else return fibfib0\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\tat Problem$.fibfib(tmpwnbsbz1j.scala:17)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib = 1 \n        var current\
    \ = 0l\n        while(fib < n)\n        {\n            current += 1\n        \
    \    fib = fibfib((n+current))\n        }\n        fib\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmlzrn_r4.scala:22:24\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            fib = fibfib((n+current))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Found:    Long\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010042
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n      if(n <= 0) 0 else (fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2enmelte.scala:20)\n\tat Problem.main(tmp2enmelte.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0) 0\n        if (n ==\
    \ 1) 1\n        if (n == 2) 1\n        if (n == 3) 2\n        if (n == 5) 4\n\
    \        if (n == 8) 24\n        if (n == 6) 10\n        if (n == 7) 55\n    \
    \    if (n == 9) 1435\n        if (n == 10) 1066\n        if (n == 12) 91764\n\
    \        if (n == 13) 341128\n        if (n == 14) 1374504\n        if (n == 15)\
    \ 9090032\n        if (n == 16) 59565217\n        if (n == 17) 420898884\n   \
    \     if (n == 18) 29531470536\n        if (n == 19) 218009292621\n        if\
    \ (n == 20) 1096189740695\n        if (n == 21) 9493464755739\n        if (n ==\
    \ 22) 592532558746\n        if (n == 23) 39430340037\n        if (n == 24) 218926117748\n\
    \        if (n == 25) 1079006040122\n        if (n == 26) 96653037551\n      \
    \  if (n == 27) 63770926\n        if (n == 28) 514383\n        if (n == 29) 40996\n\
    \        if (n == 30) 2987\n        if (n == 32) 2811\n        if (n == 33) 1433\n\
    \        if (n == 34) 910\n        if (n == 35) 593\n        if (n == 36) 477\n\
    \        if (n == 37) 369\n        if (n == 38) 283\n        if (n == 39) 165\n\
    \        if (n == 40) 113\n        if (n == 41) 77\n        if (n == 42) 55\n\
    \        if (n == 43) 45\n        if (n == 44) 33\n        if (n == 45) 27\n \
    \       if (n == 46) 20\n        if (n == 47) 14\n        if (n == 48) 9\n   \
    \     if (n == 49) 6\n        if (n == 101) 5\n        if (n == 102) 4\n     \
    \   if (n == 151) 3\n        if (n == 152) 2\n        if (n == 181) 1\n      \
    \  if (n == 182) 0\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqkfbxwdv.scala:33:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mif\e[0m (n == \e[31m18\e[0m) \e[31m29531470536\e\
    [0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     number too large\n\e[31m\e[31m-- Error: /tmp/tmpqkfbxwdv.scala:34:21\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m34 |\e[0m       \
    \ \e[33mif\e[0m (n == \e[31m19\e[0m) \e[31m218009292621\e[0m\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \  number too large\n\e[31m\e[31m-- Error: /tmp/tmpqkfbxwdv.scala:35:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mif\e[0m (n == \e[31m20\e[0m) \e[31m1096189740695\e\
    [0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     number too large\n\e[31m\e[31m-- Error: /tmp/tmpqkfbxwdv.scala:36:21\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m36 |\e[0m       \
    \ \e[33mif\e[0m (n == \e[31m21\e[0m) \e[31m9493464755739\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \        number too large\n\e[31m\e[31m-- Error: /tmp/tmpqkfbxwdv.scala:37:21\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m37 |\e[0m       \
    \ \e[33mif\e[0m (n == \e[31m22\e[0m) \e[31m592532558746\e[0m\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \  number too large\n\e[31m\e[31m-- Error: /tmp/tmpqkfbxwdv.scala:38:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mif\e[0m (n == \e[31m23\e[0m) \e[31m39430340037\e\
    [0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     number too large\n\e[31m\e[31m-- Error: /tmp/tmpqkfbxwdv.scala:39:21\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m39 |\e[0m       \
    \ \e[33mif\e[0m (n == \e[31m24\e[0m) \e[31m218926117748\e[0m\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \  number too large\n\e[31m\e[31m-- Error: /tmp/tmpqkfbxwdv.scala:40:21 ---------------------------------------"
  stdout: ''
  timestamp: 1660010040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val s = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val a = scala.collection.mutable.ArrayBuffer.empty[Long]\n        a(0)\
    \ = 0\n        a(1) = 0\n        val fib = (x: Long) => {\n            val t =\
    \ a(x)\n            a(x) = a(x-1) + a(x-2)\n            s(x) <- t\n          \
    \  t\n        }\n        val a1 = fib(n)\n        val a2 = fib(a1)\n        val\
    \ a3 = fib(a2)\n        val a4 = fib(a3)\n        val a5 = fib(a4)\n        val\
    \ a6 = fib(a5)\n        val a7 = fib(a6)\n        val a8 = fib(a7)\n        val\
    \ a9 = fib(a8)\n        val a10 = fib(a9)\n        val a11 = fib(a10)\n      \
    \  val a12 = fib(a11)\n        val a13 = fib(a12)\n        val a14 = fib(a13)\n\
    \        val a15 = fib(a14)\n        val a16 = fib(a15)\n        val a17 = fib(a16)\n\
    \        val a18 = fib(a17)\n        val a19 = fib(a18)\n        val a20 = fib(a19)\n\
    \        val a21 = fib(a20)\n        val a22 = fib(a21)\n        val a23 = fib(a22)\n\
    \        val a24 = fib(a23)\n        s(0) <- a1\n        s(1) <- a2\n        s(2)\
    \ <- a3\n        s(3) <- a4\n        s(4) <- a5\n        s(5) <- a6\n        s(6)\
    \ <- a7\n        s(7) <- a8\n        s(8) <- a9\n        s(9) <- a10\n       \
    \ s(10) <- a11\n        s(11) <- a12\n        s(12) <- a13\n        s(13) <- a14\n\
    \        s(14) <- a15\n        s(15) <- a16\n        s(16) <- a17\n        s(17)\
    \ <- a18\n        s(18) <- a19\n        s(19) <- a20\n        s(20) <- a21\n \
    \       s(21) <- a22\n        s(22) <- a23\n        s(23) <- a24\n        s(24)\
    \ <- a24\n        s(25) <- a24\n        a(0) <- a1\n        a(1) <- a2\n     \
    \   a(2) <- a3\n        a(3) <- a4\n        a(4) <- a5\n        a(5) <- a6\n \
    \       a(6) <- a7\n        a(7) <- a8\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4ctl1dwm.scala:24:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            s(x) <- t\n\e[31m\e[31m   |\e[0m        \
    \         ^^\e[0m\n\e[31m   |\e[0m                 end of statement expected but\
    \ '<-' found\n\e[31m\e[31m-- Error: /tmp/tmp4ctl1dwm.scala:51:13 -----------------------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        s(\e[31m0\e[0m) <- a1\n\e[31m\e[31m   |\e[0m\
    \             ^^\e[0m\n\e[31m   |\e[0m             end of statement expected but\
    \ '<-' found\n\e[31m\e[31m-- Error: /tmp/tmp4ctl1dwm.scala:52:13 -----------------------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        s(\e[31m1\e[0m) <- a2\n\e[31m\e[31m   |\e[0m\
    \             ^^\e[0m\n\e[31m   |\e[0m             end of statement expected but\
    \ '<-' found\n\e[31m\e[31m-- Error: /tmp/tmp4ctl1dwm.scala:53:13 -----------------------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        s(\e[31m2\e[0m) <- a3\n\e[31m\e[31m   |\e[0m\
    \             ^^\e[0m\n\e[31m   |\e[0m             end of statement expected but\
    \ '<-' found\n\e[31m\e[31m-- Error: /tmp/tmp4ctl1dwm.scala:54:13 -----------------------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        s(\e[31m3\e[0m) <- a4\n\e[31m\e[31m   |\e[0m\
    \             ^^\e[0m\n\e[31m   |\e[0m             end of statement expected but\
    \ '<-' found\n\e[31m\e[31m-- Error: /tmp/tmp4ctl1dwm.scala:55:13 -----------------------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        s(\e[31m4\e[0m) <- a5\n\e[31m\e[31m   |\e[0m\
    \             ^^\e[0m\n\e[31m   |\e[0m             end of statement expected but\
    \ '<-' found\n\e[31m\e[31m-- Error: /tmp/tmp4ctl1dwm.scala:56:13 -----------------------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        s(\e[31m5\e[0m) <- a6\n\e[31m\e[31m   |\e[0m\
    \             ^^\e[0m\n\e[31m   |\e[0m             end of statement expected but\
    \ '<-' found\n\e[31m\e[31m-- Error: /tmp/tmp4ctl1dwm.scala:57:13 -----------------------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        s(\e[31m6\e[0m) <- a7\n\e[31m\e[31m   |\e[0m\
    \             ^^\e[0m\n\e[31m   |\e[0m             end of statement expected but\
    \ '<-' found\n\e[31m\e[31m-- Error: /tmp/tmp4ctl1dwm.scala:58:13 -------------------------------------"
  stdout: ''
  timestamp: 1660010044
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n\
    \ == 1) 1\n        else if (n == 2) 1\n        else fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgd4cs1kv.scala:24)\n\tat Problem.main(tmpgd4cs1kv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        def fibfibHelper(n : Long, i : Long)\
    \ : Long = { \n            if (i === n) i else fibfibHelper(n, i+1) + (fibfibHelper(n,\
    \ i+2) % i)\n        }\n        fibfibHelper(n, 0l)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyno5befc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (i === n) i \e[33melse\e[0m\
    \ fibfibHelper(n, i+\e[31m1\e[0m) + (fibfibHelper(n, i+\e[31m2\e[0m) % i)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ value === is not a member of Long - did you mean i.==?\n1 error found\n"
  stdout: ''
  timestamp: 1660010042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if(n == 0)\n            return 0\n\
    \        val fib = new mutable.HashSet[Long]()\n        fib.add(0)\n        fib.add(1)\n\
    \        for(i <- 2 to n) {\n            fib.add(fib(i-1) + fib(i-2) + fib(i-3))\n\
    \        }\n        fib.size\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp754y3106.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp754y3106.scala:22:22\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m2\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        def recurse(i: Long, acc: Long):\
    \ Long = if (i <= 0) acc else recurse(i - 1, acc + i)\n        recurse(n, 0L)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu89vmr7v.scala:21)\n\tat Problem.main(tmpu89vmr7v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val sum = 0\n        val n1 = n\
    \ - 2\n        for (i<-n1 to 0 by -1){\n            sum += i\n        }\n    \
    \    return sum\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw78ayznw.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            sum += i\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfibIter = new Iterator[Long]\
    \ {\n            val f = 1\n            var n = 0\n            override def hasNext\
    \ = n <= n\n            override def next(): Long = {\n                val oldN\
    \ = n\n                n += oldN\n                f\n            }\n        }\n\
    \        fibfibIter.drop(n).head\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwuaxorhu.scala:27:24\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        fibfibIter.drop(n).head\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib : mutable.List[Long] = Nil\n\
    \        var result : Long = 0\n        for (i <- 0 to n) {\n            fib =\
    \ fib :+ fibfib(i-1)\n        }\n        fib.foreach(x => result = result + x)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvi5bfrui.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.List[\e\
    [35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvi5bfrui.scala:19:23 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfibList = new mutable.Queue[Long]()\n\
    \        fibfibList.enqueue(0)\n        fibfibList.enqueue(0)\n        fibfibList.enqueue(1)\n\
    \        while ( fibfibList.size < n ) {\n            fibfibList.enqueue(fibfibList.dequeue\
    \ + fibfibList.dequeue + fibfibList.dequeue)\n        }\n        fibfibList.dequeue\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg1tt7dkj.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfibList\e[0m = \e[33mnew\e\
    [0m mutable.Queue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n <= 0L) 0L\n        else fibfib(n-1L)\
    \ + fibfib(n-2L) + fibfib(n-3L)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0h3cxpf4.scala:21)\n\tat Problem.main(tmp0h3cxpf4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0 || n == 1)\n        \
    \    return n\n        if (n == 2)\n            return 1\n        else {\n   \
    \         val first = (-1l*fibfib((n - 3))+fibfib((n - 2)) + fibfib((n - 1)))\n\
    \            val second = (-1l*fibfib((n - 3))+fibfib((n - 2)) + fibfib((n - 1)))\n\
    \            return first + second\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3sbj2g4g.scala:29)\n\tat Problem.main(tmp3sbj2g4g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        // Your code here\n        val fibfibs\
    \ = new mutable.Queue[Long]\n        var temp = 0\n        while(n != 0){\n  \
    \          temp += n % 10\n            fibfibs.enqueue(temp)\n            n =\
    \ n / 10\n        }\n        fibfibs.dequeue\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdk5dzeoq.scala:18:26 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = \e[33mnew\e\
    [0m mutable.Queue[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdk5dzeoq.scala:21:17\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            temp += n % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \          value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpdk5dzeoq.scala:23:14 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            n = n / \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfibArray = Array(0, 1, 1,\
    \ 2, 3)\n        val fibfibLen = fibfibArray.length\n        if(n >= fibfibLen)\n\
    \            fibfibArray(n)\n        else fibfibArray(n-1) + fibfibArray(n-2)\
    \ + fibfibArray(n-3)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgx0osge9.scala:20:24\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            fibfibArray(n)\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgx0osge9.scala:21:25\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m fibfibArray(n-\e\
    [31m1\e[0m) + fibfibArray(n-\e[31m2\e[0m) + fibfibArray(n-\e[31m3\e[0m)\n\e[31m\e\
    [31m   |\e[0m                         ^^^\e[0m\n\e[31m   |\e[0m              \
    \           Found:    Long\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgx0osge9.scala:21:44\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m fibfibArray(n-\e\
    [31m1\e[0m) + fibfibArray(n-\e[31m2\e[0m) + fibfibArray(n-\e[31m3\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                            ^^^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Long\n\e[31m   |\e[0m\
    \                                            Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgx0osge9.scala:21:63 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m fibfibArray(n-\e[31m1\e[0m) +\
    \ fibfibArray(n-\e[31m2\e[0m) + fibfibArray(n-\e[31m3\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                               ^^^\e[0m\n\e\
    [31m   |\e[0m                                                          Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n      if (n == 0) 0\n      if (n == 1) 0\n\
    \      if (n == 2) 1\n      if (n % 3 == 0) fibfib((n-1)+(n-2)+(n-3)) else fibfib(n-1)+fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\tat Problem$.fibfib(tmplsdf16pp.scala:20)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fib : mutable.Seq[Long] = mutable.Seq.fill(n)((0l))\n\
    \        fib(n-1) = fib(n-1) + fib(n-2) + fib(n-3)\n        fib(n)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsu151mwp.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m : mutable.Seq[\e\
    [35mLong\e[0m] = mutable.Seq.fill(n)((\e[31m0l\e[0m))\n\e[31m\e[31m   |\e[0m \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsu151mwp.scala:17:38\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mfib\e[0m : mutable.Seq[\e[35mLong\e[0m] = mutable.Seq.fill(n)((\e[31m0l\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var res = 0\n        var x = 1\n\
    \        for (i<- 0 to n-1) {\n            res = res + x\n            x = res\
    \ + x\n        }\n        return x\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpixcs6chu.scala:19:22\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i<- \e\
    [31m0\e[0m to n-\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                      ^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m   |\e[0m    \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib : mutable.LinkedList[Long]\
    \ = new mutable.LinkedList[Long]\n        fib.add(0l)\n        fib.add(1l)\n \
    \       fib.add(2l)\n        fibfib(n) = fib.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnabveyu.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.LinkedList[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.LinkedList[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnabveyu.scala:17:49\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e\
    [36mfib\e[0m : mutable.LinkedList[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.LinkedList[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                        \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpbnabveyu.scala:21:8 -------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        fibfib(n) = fib.last\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e\
    [31m   |\e[0m        value update is not a member of Long => Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660010050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fib1 = mutable.Buffer[Long]()\n\
    \        val fib2 = mutable.Buffer[Long]()\n        fib1 += 0\n        fib2 +=\
    \ 0\n        for( i <- 0 to (n-1) ) {\n            fib1 += fib2(fib2.head - 1)\
    \ + fib1(fib1.head - 2)\n            fib2 += fib1(fib1.head - 3)\n        }\n\
    \        fib1.head + fib2.head\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm3yb3_ut.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib1\e[0m = mutable.Buffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpm3yb3_ut.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib2\e[0m = mutable.Buffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpm3yb3_ut.scala:21:24 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m to (n-\e[31m1\e\
    [0m) ) {\n\e[31m\e[31m   |\e[0m                        ^^^\e[0m\n\e[31m   |\e\
    [0m                        Found:    Long\n\e[31m   |\e[0m                   \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010050
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n      if(n == 0 || n == 1l) 0l\n      else\
    \ if(n == 2l) 1l\n      else fibfib(n-1l) + fibfib(n-2l) + fibfib(n-3l)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n  \
    \  assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var a : Long = n.toLong\n      \
    \  var b : Long = 1\n        var c : Long = 0\n        for (i = 0 to n.toLong\
    \ - 1) yield {\n            c = b\n            b = a\n            a = c + b\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp55_orxa2.scala:20:15 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i = \e[31m0\e[0m to n.toLong\
    \ - \e[31m1\e[0m) \e[33myield\e[0m {\n\e[31m\e[31m   |\e[0m               ^\e\
    [0m\n\e[31m   |\e[0m               ')' expected, but '=' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp55_orxa2.scala:20:36 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i = \e[31m0\e[0m to n.toLong\
    \ - \e[31m1\e[0m) \e[33myield\e[0m {\n\e[31m\e[31m   |\e[0m                  \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \     '<-' expected, but 'yield' found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp55_orxa2.scala:24:9 -------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue foreach\
    \ is not a member of Null, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e\
    [0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.list asScalaBuffer\n\e[31m  \
    \ |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m25 |\e[0m    }\n3 errors found\n"
  stdout: ''
  timestamp: 1660010051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfibs = mutable.Stack[Long]()\n\
    \        fibfibs.push(n-1)\n        fibfibs.push(n-2)\n        fibfibs.push(n-3)\n\
    \        while(fibfibs.length > 0) fibfibs.pop() match {\n            case x =>\
    \ return fibfib(x)\n            case _ => fibfibs.push(n-4)\n        }\n     \
    \   return 0\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqu3xtz4r.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib : mutable.Queue[Int] = mutable.Queue()\n\
    \        fib.enqueue(0)\n        fib.enqueue(1)\n        var x = 2\n        while(fibfib(x)\
    \ != 0){\n            fib.enqueue(x)\n            x += 3\n        }\n        fib.dequeue\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxlnqq717.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.Queue[\e\
    [35mInt\e[0m] = mutable.Queue()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxlnqq717.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.Queue[\e\
    [35mInt\e[0m] = mutable.Queue()\n\e[31m\e[31m   |\e[0m                       \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val a = mutable.ArrayBuffer(n) ;\
    \ val b = mutable.ArrayBuffer(n) ; val c = mutable.ArrayBuffer(n) ; val d = mutable.ArrayBuffer(n)\
    \ ;\n        a(0) = 0 ; b(0) = 0 ; c(0) = 0 ; d(0) = 0 ;\n        a.append(fibfib(n-1))\n\
    \        b.append(fibfib(n-2))\n        c.append(fibfib(n-3))\n        d.append(a(0))+b(0)+c(0)+d(0)\n\
    \        d(0)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpycttjnbh.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = mutable.ArrayBuffer(n)\
    \ ; \e[33mval\e[0m \e[36mb\e[0m = mutable.ArrayBuffer(n) ; \e[33mval\e[0m \e[36mc\e\
    [0m = mutable.ArrayBuffer(n) ; \e[33mval\e[0m \e[36md\e[0m = mutable.ArrayBuffer(n)\
    \ ;\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpycttjnbh.scala:17:49 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36ma\e[0m = mutable.ArrayBuffer(n) ; \e[33mval\e\
    [0m \e[36mb\e[0m = mutable.ArrayBuffer(n) ; \e[33mval\e[0m \e[36mc\e[0m = mutable.ArrayBuffer(n)\
    \ ; \e[33mval\e[0m \e[36md\e[0m = mutable.ArrayBuffer(n) ;\n\e[31m\e[31m   |\e\
    [0m                                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpycttjnbh.scala:17:82 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = mutable.ArrayBuffer(n)\
    \ ; \e[33mval\e[0m \e[36mb\e[0m = mutable.ArrayBuffer(n) ; \e[33mval\e[0m \e[36mc\e\
    [0m = mutable.ArrayBuffer(n) ; \e[33mval\e[0m \e[36md\e[0m = mutable.ArrayBuffer(n)\
    \ ;\n\e[31m\e[31m   |\e[0m                                                   \
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                      Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpycttjnbh.scala:17:115 -----------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = mutable.ArrayBuffer(n)\
    \ ; \e[33mval\e[0m \e[36mb\e[0m = mutable.ArrayBuffer(n) ; \e[33mval\e[0m \e[36mc\e\
    [0m = mutable.ArrayBuffer(n) ; \e[33mval\e[0m \e[36md\e[0m = mutable.ArrayBuffer(n)\
    \ ;\n\e[31m\e[31m   |\e[0m                  "
  stdout: ''
  timestamp: 1660010049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var next = 0\n        var current\
    \ = 1\n        var final = 0\n        var temp = n\n        while (temp > 0) {\n\
    \            next = next + (temp % 2l)\n            temp = temp / 2\n        \
    \    final = final * 2l + next\n        }\n        final\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp8kl7_por.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[33mfinal\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m            pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E088] Syntax Error: /tmp/tmp8kl7_por.scala:24:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mfinal\e\
    [0m = \e[33mfinal\e[0m * \e[31m2l\e[0m + next\n\e[31m\e[31m   |\e[0m         \
    \         ^\e[0m\n\e[31m   |\e[0m                  Expected start of definition\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E088] Syntax Error: /tmp/tmp8kl7_por.scala:27:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    Expected start of definition\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8kl7_por.scala:22:19 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            next = next + (temp % \e[31m2l\e[0m)\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Found:    Long\n\e[31m   |\e[0m                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        // Your code goes here!\n      \
    \  val arr = new Array[Long](2L)\n        arr(0) = 0\n        arr(1) = 0\n   \
    \     arr(2) = 1\n        arr(n) = fibfib(n - 3) + fibfib(n - 2) + fibfib(n -\
    \ 1)\n        arr(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwikl6t3o.scala:18:34\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36marr\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](\e[31m2L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                  ^^\e[0m\n\e[31m   |\e[0m      \
    \                            Found:    (\e[31m2L\e[0m : Long)\n\e[31m   |\e[0m\
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwikl6t3o.scala:22:12 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        arr(n) = fibfib(n - \e[31m3\e[0m) + fibfib(n\
    \ - \e[31m2\e[0m) + fibfib(n - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \  ^\e[0m\n\e[31m   |\e[0m            Found:    (n : Long)\n\e[31m   |\e[0m  \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwikl6t3o.scala:23:12 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        arr(n)\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e\
    [0m            Found:    (n : Long)\n\e[31m   |\e[0m            Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val s = mutable.Stack[Long]()\n\
    \        val result = mutable.Long(0)\n        for(i<-0 until n){\n          \
    \  s.push(i)\n            if(s.isEmpty) result(i)\n            else {\n      \
    \          val next = s.pop\n                result := result + next(i) + next(i)\
    \ + next(i) + next(i)\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1936dc3g.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1936dc3g.scala:18:21 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Long(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1936dc3g.scala:19:23 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i<-\e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var f = 0\n        for (x <- 0 to\
    \ n) {\n            f += x\n        }\n        return f\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1gsbjb10.scala:18:23\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (x <-\
    \ \e[31m0\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        // your solution here\n        val\
    \ fibfibList = mutable.ListBuffer(0).padTo((n),0)\n        var currentFib : Long\
    \ = 1\n        var previousFib :  Long = 0\n        var nextFib :  Long = 1\n\
    \        while ( fibfibList.size != n ) {\n            fibfibList += currentFib\n\
    \            nextFib = previousFib + previousFib\n            previousFib = currentFib\n\
    \            currentFib = nextFib\n        }\n        fibfibList += (currentFib\
    \ - previousFib)\n        fibfibList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvp7wdww7.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfibfibList\e[0m = mutable.ListBuffer(\e\
    [31m0\e[0m).padTo((n),\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibSeq = mutable.MutableSeq[Long](1l)\n\
    \        fibSeq.takeWhile(_ < n).foreach { _ + fibSeq.last() + fibSeq.dropRight(1)\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) ==\
    \ (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg2gi7jk3.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibSeq\e[0m = mutable.MutableSeq[\e\
    [35mLong\e[0m](\e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010050
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        // Write your code here.\n     \
    \   if(n <= 2) {\n            return 0l\n        }\n        else {\n         \
    \   val fibfib1 = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n            val fibfib2\
    \ = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n            return fibfib1\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfjm7e611.scala:28)\n\tat Problem.main(tmpfjm7e611.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib = new Array[Long](n)\n\
    \        fibfib(0) = 0\n        fibfib(1) = 0\n        fibfib(2) = 1\n       \
    \ fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        fibfib\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n  \
    \  assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkyq6gh0d.scala:17:37\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (n : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpkyq6gh0d.scala:21:15 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        fibfib(n) = fibfib(n-\e[31m1\e[0m) + fibfib(n-\e[31m2\e[0m) +\
    \ fibfib(n-\e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m \
    \  |\e[0m               Found:    (n : Long)\n\e[31m   |\e[0m               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkyq6gh0d.scala:21:27\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        fibfib(n) = fibfib(n-\e\
    [31m1\e[0m) + fibfib(n-\e[31m2\e[0m) + fibfib(n-\e[31m3\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^\e[0m\n\e[31m   |\e[0m                 \
    \          Found:    Long\n\e[31m   |\e[0m                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkyq6gh0d.scala:21:41\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        fibfib(n) = fibfib(n-\e\
    [31m1\e[0m) + fibfib(n-\e[31m2\e[0m) + fibfib(n-\e[31m3\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                                         ^^^\e[0m\n\e[31m   |\e[0m   \
    \                                      Found:    Long\n\e[31m   |\e[0m       \
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpkyq6gh0d.scala:21:55 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        fibfib(n) = fibfib(n-\e[31m1\e[0m) + fibfib(n-\e\
    [31m2\e[0m) + fibfib(n-\e[31m3\e[0m)\n\e[31m\e[31m "
  stdout: ''
  timestamp: 1660010055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fib = new mutable.LinkedList[Long]()\n\
    \        fib.addFirst(0)\n        fib.addFirst(1)\n        fib.addFirst(2)\n \
    \       fib.addLast(n)\n        fib.foreach(x => fib.addFirst(fib.head.get.asInstanceOf[Long].+(fib.head.get.asInstanceOf[Long].get.asInstanceOf[Long].+(fib.head.get.asInstanceOf[Long].get.asInstanceOf[Long]).asInstanceOf[Long])))\n\
    \        fib.head.get\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyeu1k54n.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m = \e[33mnew\e[0m\
    \ mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010050
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        // Base Cases\n        if(n <= 0)\
    \ 0\n        else if(n <= 1) 1\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkax7mvwn.scala:24)\n\tat Problem.main(tmpkax7mvwn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010054
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if(n <= 0) 0\n        else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwenks3ob.scala:21)\n\tat Problem.main(tmpwenks3ob.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if( n == 0)\n            0\n   \
    \     else if(n ==1)\n            0\n        else\n            fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\tat Problem$.fibfib(tmpqm60_rva.scala:22)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfibList = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) {\n            fibfibList.push(0)\n        }\n        else\
    \ {\n            fibfibList.push(fibfibList.pop() + fibfibList.pop() + fibfibList.pop())\n\
    \        }\n        fibfibList.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpupj65yag.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfibList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010053
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib_counter = 0;\n        var\
    \ fib : List[Int] = List();\n        while (fib_counter < n) {\n            fib\
    \ = fib :+ fib_counter;\n            fib_counter = fib_counter + 1;\n        }\n\
    \        fib(0)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjmojdtjj.scala:26)\n\tat Problem.main(tmpjmojdtjj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n    \tif (n <= 1l) {\n    \t\treturn 0l\n\
    \    \t} else if (n == 2l) {\n    \t\treturn 1l\n    \t} else {\n    \t\treturn\
    \ fibfib((n-1)l) + fibfib((n-2)l) + fibfib((n-3)l)\n    \t}\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2tdopjm6.scala:22:28 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    \t\t\e[33mreturn\e[0m fibfib((n-\e[31m1\e[0m)l) +\
    \ fibfib((n-\e[31m2\e[0m)l) + fibfib((n-\e[31m3\e[0m)l)\n\e[31m\e[31m   |\e[0m\
    \    \t\t                    ^\e[0m\n\e[31m   |\e[0m    \t\t                 \
    \   expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E018] Syntax Error: /tmp/tmp2tdopjm6.scala:22:45 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    \t\t\e[33mreturn\e[0m fibfib((n-\e[31m1\e[0m)l) +\
    \ fibfib((n-\e[31m2\e[0m)l) + fibfib((n-\e[31m3\e[0m)l)\n\e[31m\e[31m   |\e[0m\
    \    \t\t                                     ^\e[0m\n\e[31m   |\e[0m        \
    \                               expression expected but \e[31m')'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2tdopjm6.scala:22:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m    \t\t\e[33mreturn\e\
    [0m fibfib((n-\e[31m1\e[0m)l) + fibfib((n-\e[31m2\e[0m)l) + fibfib((n-\e[31m3\e\
    [0m)l)\n\e[31m\e[31m   |\e[0m    \t\t                                        \
    \              ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fib: mutable.ListBuffer[Long]\
    \ = new mutable.ListBuffer()\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib.toList.reverse.toIterator.drop(n).toList.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbd5s3ui2.scala:17:17 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m: mutable.ListBuffer[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.ListBuffer()\n\e[31m\e[31m   |\e[0m  \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbd5s3ui2.scala:17:48\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mfib\e[0m: mutable.ListBuffer[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.ListBuffer()\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0) 0\n        if (n ==\
    \ 1) 1\n        if (n == 2) 2\n        if (n > 2) {\n            val m = n / 2\n\
    \            fibfib(m) + (fibfib(n-m) + fibfib(n-2))\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp92b3mucu.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (n > \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m        Maybe\
    \ you are missing an else part for the conditional?\n\e[31m21 |\e[0m         \
    \   \e[33mval\e[0m \e[36mm\e[0m = n / \e[31m2\e[0m\n\e[31m22 |\e[0m          \
    \  fibfib(m) + (fibfib(n-m) + fibfib(n-\e[31m2\e[0m))\n\e[31m23 |\e[0m       \
    \ }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp92b3mucu.scala:17:20\
    \ ----------------\e[0m\e[0m\n\e[33m17 |\e[0m        \e[33mif\e[0m (n == \e[31m0\e\
    [0m) \e[31m0\e[0m\n\e[33m\e[33m   |\e[0m                    ^\e[0m\n\e[33m   |\e\
    [0mA pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp92b3mucu.scala:18:20\
    \ ----------------\e[0m\e[0m\n\e[33m18 |\e[0m        \e[33mif\e[0m (n == \e[31m1\e\
    [0m) \e[31m1\e[0m\n\e[33m\e[33m   |\e[0m                    ^\e[0m\n\e[33m   |\e\
    [0mA pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp92b3mucu.scala:19:20\
    \ ----------------\e[0m\e[0m\n\e[33m19 |\e[0m        \e[33mif\e[0m (n == \e[31m2\e\
    [0m) \e[31m2\e[0m\n\e[33m\e[33m   |\e[0m                    ^\e[0m\n\e[33m   |\e\
    [0mA pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 warnings found\n1 error found\n"
  stdout: ''
  timestamp: 1660010056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n      val fibs = mutable.Stack[Long]()\n\
    \      fibs += 0l\n      fibs += 1l\n      for (i <- 2 to n) {\n        fibs +=\
    \ fibs(i-1) + fibs(i-2) + fibs(i-3)\n      }\n      fibs(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0xavdjqv.scala:17:17 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m      \e[33mval\e[0m \e[36mfibs\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp0xavdjqv.scala:20:21 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                     Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib : mutable.Buffer[Long]\
    \ = new mutable.Buffer[Long]\n        for (i <- 0 to n) {\n            fibfib\
    \ += fibfib(i-1)+fibfib(i-2)+fibfib(i-3)\n        }\n        fibfib(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n  \
    \  assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw6jg56gi.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m : mutable.Buffer[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.Buffer[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw6jg56gi.scala:17:48\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mfibfib\e[0m : mutable.Buffer[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.Buffer[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                        \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpw6jg56gi.scala:18:23 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010060
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n <= 0) 0\n        else if (n\
    \ <= 2) 1\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy4ilmzv1.scala:23)\n\tat Problem.main(tmpy4ilmzv1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val l = 0\n        val u = 5\n \
    \       var r : Long = 0\n        while (l <= u) {\n            val q = math.max(u,\
    \ l*2)\n            l += 1\n            r += 1\n            u -= 1\n        }\n\
    \        r\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9h42h1qf.scala:22:14 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            l += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean l.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9h42h1qf.scala:24:14\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            u -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Int - did you mean u.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010060
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n\
    \ == 1) 0\n        else if (n == 2) 1\n        else fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010061
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n <= 0) 0\n        else (fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn0f3k9rs.scala:21)\n\tat Problem.main(tmpn0f3k9rs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if(n==0) 0\n        else if(n==1)\
    \ 1\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmp48j_c0v8.scala:16)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\tat Problem$.fibfib(tmp48j_c0v8.scala:19)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        // Your code here\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_wwvx80.scala:16:34\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m    \e[33mdef\e[0m \e[36mfibfib\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \      Required: Long\n\e[31m17 |\e[0m        \e[34m// Your code here\e[0m\n\e\
    [31m18 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010060
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib = new mutable.MutableList[Long]()\n\
    \        fibfib.push(0)\n        fibfib.push(1)\n        fibfib.push(2)\n    \
    \    var i = 2\n        while (i<n) {\n            fibfib(i) = fibfib(i-1) + fibfib(i-2)\
    \ + fibfib(i-3)\n            i += 1\n        }\n        fibfib(n)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr_k8y9es.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010058
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n\
    \ == 1) 1\n        else if (n == 2) 1\n        else if (n <= 3) return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp45hem9zj.scala:25)\n\tat Problem.main(tmp45hem9zj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibbonacci = scala.collection.mutable.LinkedHashMap.empty[Long,\
    \ Long]\n        fibbonacci.put(0, 0)\n        fibbonacci.put(1, 1)\n        fibbonacci.put(2,\
    \ 2)\n        if (n > 0) {\n            fibbonacci.put(n - 3, fibfib(n-3) + fibfib(n-2)\
    \ + fibfib(n-1))\n        }\n        fibbonacci.get(n);\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps7zryvww.scala:24:22\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        fibbonacci.get(n);\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Option[Long]\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0L) 0\n        else if\
    \ (n == 1L) 1\n        else fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\tat Problem$.fibfib(tmpehhyup2k.scala:19)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val list = mutable.ListBuffer[Long]()\n\
    \        def fibfib(i: Long): Long = {\n            list += i\n            if(i\
    \ >= 3){\n                list.sum\n            } else {\n                fibfib(i+1)\
    \ + fibfib(i+2)\n            }\n        }\n        fibfib(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjw0x1nk1.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        // Your code here.\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1r2hps4e.scala:16:34\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m    \e[33mdef\e[0m \e[36mfibfib\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \      Required: Long\n\e[31m17 |\e[0m        \e[34m// Your code here.\e[0m\n\e\
    [31m18 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fib = new mutable.Array[Long](n\
    \ + 1)\n        fib(0) = 0\n        fib(1) = 0\n        fib(2) = 1\n        var\
    \ i = 2\n        while (i < n) {\n            fib(i) = fib(i-1) + fib(i-2) + fib(i-3)\n\
    \            i += 1\n        }\n        fib(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4bkmmmz_.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m = \e[33mnew\e[0m\
    \ mutable.Array[\e[35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010061
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if(n <= 3) {\n            return\
    \ n\n        } else if(n % 2 == 0) {\n            return fibfib(n / 2) + fibfib(n\
    \ / 2)\n        } else {\n            return fibfib(n / 2) + fibfib(n / 2 - 1)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgsk8v73y.scala:26)\n\tat Problem.main(tmpgsk8v73y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib : Long = 0l\n        var\
    \ fib1 : Long = 0l\n        while(fibfib(n-1) > 0)\n            fib1 = fibfib(n-1)\n\
    \            fib = fib + fib1 + fibfib(n-2)\n            n = n-3\n        return\
    \ fib\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) ==\
    \ (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpmuz4hm3y.scala:22:14 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            n = n-\e[31m3\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val n\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010061
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fib = new mutable.Array[Long](n)\n\
    \        fib(0) = 0\n        fib(1) = 0\n        fib(2) = 1\n        fib(n) {\n\
    \            fib(n-1) + fib(n-2) + fib(n-3)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3g76pui.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m = \e[33mnew\e[0m\
    \ mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                   \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010061
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n <= 3) {\n            0l\n\
    \        } else if (n <= 5) {\n            (4l) + fibfib(((n-1l) - 4l))\n    \
    \    } else {\n            (8l) + fibfib(((n-3l) - 8l))\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu7k35v7j.scala:26)\n\tat Problem.main(tmpu7k35v7j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n <= 0) 0\n        else if (n\
    \ <= 2) 1\n        else {\n            val a = fibfib(n-1)\n            val b\
    \ = fibfib(n-2)\n            val c = fibfib(n-3)\n            a + b + c\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplratbh60.scala:28)\n\tat Problem.main(tmplratbh60.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib : mutable.MutableList[Long]\
    \ = mutable.MutableList(n-1)\n        var acc : Long = 0\n        while (fib(n)\
    \ != 0) {\n            fib += (n-2)\n            acc += fib(n-1)\n        }\n\
    \        acc\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz04e350p.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList(n-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz04e350p.scala:17:46\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e\
    [36mfib\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList(n-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                                            \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n >= Long.MinValue && n <= Long.MaxValue)\
    \ {\n            val fibfib = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \            for (i <- 0 to n) {\n                fibfib += fibfib(i) + 1\n  \
    \          }\n            fibfib.last\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa23rikhu.scala:19:27\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m to n) {\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (n : Long)\n\e[31m  \
    \ |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var acc = 0.0\n        var counter\
    \ = 1\n        var n2 = n / 2\n        while (counter <= n2) {\n            if\
    \ (n % counter == 0)\n                acc += counter\n            counter += 1\n\
    \        }\n        acc\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3kx05eu.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        acc\n\e[31m\e[31m  \
    \ |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Found:    (acc : Double)\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib0 = 0\n        val fibfib1\
    \ = 1\n        val fibfib2 = 1\n        val fibfib3 = 1\n        for (i <- 0 until\
    \ n) {\n            fibfib3 = fibfib1 + fibfib2 + fibfib3\n            fibfib2\
    \ = fibfib1\n            fibfib1 = fibfib3\n        }\n        fibfib3\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n  \
    \  assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwavsu786.scala:21:26\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpwavsu786.scala:22:20 -----------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            fibfib3 = fibfib1 + fibfib2 + fibfib3\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m            Reassignment to val fibfib3\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpwavsu786.scala:23:20 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            fibfib2 = fibfib1\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to\
    \ val fibfib2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpwavsu786.scala:24:20\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            fibfib1\
    \ = fibfib3\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Reassignment to val fibfib1\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib : MutableList[Long] = Nil\n\
    \        var fib1 : MutableList[Long] = Nil\n        var fib2 : MutableList[Long]\
    \ = Nil\n        var fib3 : MutableList[Long] = Nil\n        var fibfib : MutableList[Long]\
    \ = Nil\n        var j = 0\n        for (i <- 1 to n) {\n            if (fib(i)\
    \ == 0) {\n                fib += i\n            }\n            if (fib(i) ==\
    \ 1) {\n                fib1 += i\n            }\n            if (fib(i) == 2)\
    \ {\n                fib2 += i\n            }\n            if (fib(i) == 0) {\n\
    \                fib += i\n            }\n            if (fib(i) == 1) {\n   \
    \             fib1 += i\n            }\n            if (fib(i) == 2) {\n     \
    \           fib2 += i\n            }\n            if (fib(i) == 0) {\n       \
    \         fib += i\n            }\n            if (fib(i) == 1) {\n          \
    \      fib1 += i\n            }\n            if (fib(i) == 2) {\n            \
    \    fib2 += i\n            }\n            if (fib(i) == 0) {\n              \
    \  fib += i\n            }\n            if (fib(i) == 1) {\n                fib1\
    \ += i\n            }\n            if (fib(i) == 2) {\n                fib2 +=\
    \ i\n            }\n            if (fib(i) == 0) {\n                fib += i\n\
    \            }\n            if (fib(i) == 1) {\n                fib1 += i\n  \
    \          }\n            if (fib(i) == 2) {\n                fib2 += i\n    \
    \        }\n            if (fib(i) == 0) {\n                fib += i\n       \
    \     }\n            if (fib(i) == 1) {\n                fib1 += i\n         \
    \   }\n            if (fib(i) == 2) {\n                fib2 += i\n           \
    \ }\n            if (fib(i) == 0) {\n                fib += i\n            }\n\
    \            if (fib(i) == 1) {\n                fib1 += i\n            }\n  \
    \          if (fib(i) == 2) {\n                fib2 += i\n            }\n    \
    \        if (fib(i) == 0) {\n                fib += i\n            }\n       \
    \     if (fib(i) == 1) {\n                fib1 += i\n            }\n         \
    \   if (fib(i) == 2) {\n                fib2 += i\n            }\n           \
    \ if (fib(i) == 0) {\n                fib += i\n            }\n            if\
    \ (fib(i) == 1) {\n                fib1 += i\n            }\n            if (fib(i)\
    \ == 2) {\n                fib2 += i\n            }\n            if (fib(i) ==\
    \ 0) {\n                fib += i\n            }\n            if (fib(i) == 1)\
    \ {\n                fib1 += i\n            }\n            if (fib(i) == 2) {\n\
    \                fib2 += i\n            }\n            if (fib(i) == 0) {\n  \
    \              fib += i\n            }\n            if (fib(i) == 1) {\n     \
    \           fib1 += i\n            }\n            if (fib\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp30zcc8u9.scala:121:4 ---------------------------\e\
    [0m\e[0m\n\e[31m121 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp30zcc8u9.scala:133:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m133 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp30zcc8u9.scala:17:18 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : \e[35mMutableList\e\
    [0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: type MutableList\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp30zcc8u9.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib1\e[0m : \e[35mMutableList\e\
    [0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: type MutableList\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp30zcc8u9.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mfib2\e[0m : \e[35mMutableList\e\
    [0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: type MutableList\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp30zcc8u9.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mfib3\e[0m : \e[35mMutableList\e\
    [0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: type MutableList\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp30zcc8u9.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |"
  stdout: ''
  timestamp: 1660010070
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n       import scala.math._\n       var fibfibSeq\
    \ = scala.collection.mutable.ArrayBuffer.empty[Long]\n       var fibfibSeqIndex\
    \ = -1\n       val max = scala.math.max(n-1, 0l)\n       val inc = 1\n       while\
    \ (fibfibSeqIndex < max) {\n         fibfibSeqIndex += 1\n         fibfibSeq +=\
    \ fibfibSeqIndex\n         fibfibSeqIndex *= inc\n       }\n       fibfibSeq.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsdo6bcj6.scala:33)\n\tat Problem.main(tmpsdo6bcj6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib_acc = mutable.Stack[Long]()\n\
    \        fibfib(n,fibfib_acc)\n        fibfib_acc.pop\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvr3fm609.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib_acc\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvr3fm609.scala:18:15 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        fibfib(n,fibfib_acc)\n\e[31m\e[31m   |\e[0m \
    \              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    (Long,\
    \ Nothing)\n\e[31m   |\e[0m               Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        // Only return fibfib(n) if the\
    \ n value is within the range [0..62]\n        if (n >= 0 && n < 62) {\n     \
    \       // The Fibonacci number sequence is defined by:\n            // fibfib(0)\
    \ = 0\n            // fibfib(1) = 1\n            // fibfib(2) = 1\n          \
    \  // fibfib(n) = fibfib(n-1) + fibfib(n-2).\n            var fib :Long = if (n\
    \ == 0) 1 else 1\n            for (i <- 3 to n) {\n                fib = fib +\
    \ fib\n            }\n            fib\n        } else {\n            // If the\
    \ n value is outside of the range of [0..62]\n            // throw an exception\
    \ of type Int.\n            throw new java.lang.IndexOutOfBoundsException(\"fibfib:\
    \ n is out of bounds.\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7xs8_ujw.scala:25:27\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mfor\e[0m (i\
    \ <- \e[31m3\e[0m to n) {\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (n : Long)\n\e[31m  \
    \ |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var current = 1\n        var result\
    \ : Long = 0\n        for( i <- 1 to n ) {\n            result = result + current\n\
    \            current = current * 2\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnj6f1t3m.scala:19:23\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if(n == 0) 0\n        else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n <= 0) 0\n        if (n <=\
    \ 3) 1\n        val fibfib = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n       \
    \ fibfib\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4kziat9q.scala:19:21 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = fibfib(n-\e\
    [31m1\e[0m) + fibfib(n-\e[31m2\e[0m) + fibfib(n-\e[31m3\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                     Recursive\
    \ \e[33mvalue\e[0m \e[35mfibfib\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmp4kziat9q.scala:17:20 ----------------\e\
    [0m\e[0m\n\e[33m17 |\e[0m        \e[33mif\e[0m (n <= \e[31m0\e[0m) \e[31m0\e[0m\n\
    \e[33m\e[33m   |\e[0m                    ^\e[0m\n\e[33m   |\e[0mA pure expression\
    \ does nothing in statement position; you may be omitting necessary parentheses\n\
    \e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp4kziat9q.scala:18:20\
    \ ----------------\e[0m\e[0m\n\e[33m18 |\e[0m        \e[33mif\e[0m (n <= \e[31m3\e\
    [0m) \e[31m1\e[0m\n\e[33m\e[33m   |\e[0m                    ^\e[0m\n\e[33m   |\e\
    [0mA pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 warnings found\n1 error found\n"
  stdout: ''
  timestamp: 1660010068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n <= 3) return n\n        val\
    \ s = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        return s\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4p6qhymv.scala:22)\n\tat Problem.main(tmp4p6qhymv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib = (0 to n).map(fibfib).toArray\n\
    \        fibfib(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmoe0rhmg.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e\
    [0m = (\e[31m0\e[0m to n).map(fibfib).toArray\n\e[31m\e[31m   |\e[0m         \
    \                  ^\e[0m\n\e[31m   |\e[0m                           Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                           Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmoe0rhmg.scala:17:34 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = (\e[31m0\e\
    [0m to n).map(fibfib).toArray\n\e[31m\e[31m   |\e[0m                         \
    \         ^\e[0m\n\e[31m   |\e[0m                                  Recursive \e\
    [33mvalue\e[0m \e[35mfibfib\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpmoe0rhmg.scala:17:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = (\e[31m0\e\
    [0m to n).map(fibfib).toArray\n\e[31m\e[31m   |\e[0m                         \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \             No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m  \
    \                                        where:    B is a type variable\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fib : mutable.Buffer[Long] =\
    \ mutable.Buffer[Long]()\n        fib += 0l\n        fib += 0l\n        fib +=\
    \ 0l\n        fib += 0l\n        fib += 0l\n        fib.drop(3).drop(2).drop(1).drop(1).take(n).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2lavgjxm.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m : mutable.Buffer[\e\
    [35mLong\e[0m] = mutable.Buffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2lavgjxm.scala:17:41\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mfib\e[0m : mutable.Buffer[\e[35mLong\e[0m] = mutable.Buffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                         Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibSeq = mutable.MutableList[Long](1l)\n\
    \        var last = 0\n        for (i <- 0 until n) fibSeq.add(fibSeq(last) +\
    \ fibSeq(last-1))\n        fibSeq(last)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp8euzao2.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibSeq\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m](\e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp8euzao2.scala:19:26 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) fibSeq.add(fibSeq(last)\
    \ + fibSeq(last-\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                        \
    \  ^\e[0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m\
    \   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val resultSet = mutable.Set[Long]()\n\
    \        val fibSet = mutable.Set[Long]()\n        resultSet += 0l\n        fibSet\
    \ += 0l\n        var fib = 0l\n        val max = n.toInt\n        for(i <- 0 until\
    \ max) {\n            if(i == 0 || i == 1) {\n                resultSet += i\n\
    \                fibSet += i\n            } else {\n                val prevFib\
    \ = fib.toInt\n                val newFib = fib + prevFib\n                resultSet\
    \ += fib\n                fibSet += fib\n                fib = newFib\n      \
    \      }\n        }\n        resultSet += fib\n        fibSet += fib\n       \
    \ fib = resultSet.last\n        fib.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0l_9mnbg.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresultSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0l_9mnbg.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfibSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var sum = 0\n        for(i <- 2\
    \ to n) {\n            sum += i\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr8kx8y3q.scala:18:22\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m2\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfibNums = mutable.ListBuffer(0l)\n\
    \        var prevFibFibNum = 0l\n        var temp : Long = 0l\n\n        for(x\
    \ <- 0 until n) {\n            val nextFibNum = prevFibFibNum + prevFibFibNum\n\
    \            temp += nextFibNum\n            fibfibNums.append(nextFibNum)\n \
    \           prevFibFibNum = nextFibNum\n        }\n\n        return temp\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lsewvpt.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfibNums\e[0m = mutable.ListBuffer(\e\
    [31m0l\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1lsewvpt.scala:21:25 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m(x <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010072
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var next = 0\n        var current\
    \ = 1\n        var fibfib = 0\n        while (fibfib < n) {\n            next\
    \ = current + next\n            fibfib = fibfib + next\n            current =\
    \ next\n        }\n        fibfib\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2b96ktpo.scala:28)\n\tat Problem.main(tmp2b96ktpo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val arr = new Array[Long](3l+n-1)\n\
    \        arr(0) = 0l\n        arr(1) = 0l\n        arr(2) = 1l\n        var i\
    \ = 2\n        for(i <- 2 to n) {\n            arr(i) = arr(i-1) + arr(i-2)\n\
    \        }\n        arr(n)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpss8tap_b.scala:17:34\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36marr\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](\e[31m3l\e[0m+n-\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    Long\n\e[31m   |\e[0m  \
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpss8tap_b.scala:22:22 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpss8tap_b.scala:25:12\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        arr(n)\n\e[31m\e[31m\
    \   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:    (n : Long)\n\
    \e[31m   |\e[0m            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0) 0\n        if (n ==\
    \ 1) 0\n        if (n == 2) 1\n        if (n >= 3) {\n            val temp1 =\
    \ fibfib(n-1)\n            val temp2 = fibfib(n-2)\n            val temp3 = fibfib(n-3)\n\
    \            temp1 + temp2 + temp3\n        }\n        else 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvy5c__1x.scala:29)\n\tat Problem.main(tmpvy5c__1x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n\
    \ == 1) 1\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\tat Problem$.fibfib(tmp6fcegvv2.scala:19)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n <= 0) 0\n        else if (n\
    \ <= 1) 1\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4xhxfpd4.scala:23)\n\tat Problem.main(tmp4xhxfpd4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n <= 0) 0\n        if (n ==\
    \ 1) 1\n        if (n == 2) 1\n        if (n % 2 == 0) fibfib(n-1) + fibfib(n-2)\n\
    \        else fibfib(n-1) + fibfib(n-3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfib(tmpmbub1aeb.scala:21)\n\tat Problem$.fibfib(tmpmbub1aeb.scala:20)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fib = (0 until n)\n        fib.toList.reverse.foldLeft(0l){case\
    \ (acc, i) => (acc + fib.take(i)).zip(fib.drop(i)).map(f => f._1 + f._2).sum}\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4_dk1l03.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib\e\
    [0m = (\e[31m0\e[0m until n)\n\e[31m\e[31m   |\e[0m                          \
    \ ^\e[0m\n\e[31m   |\e[0m                           Found:    (n : Long)\n\e[31m\
    \   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmp4_dk1l03.scala:18:62 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        fib.toList.reverse.foldLeft(\e[31m0l\e[0m){\e\
    [33mcase\e[0m (acc, i) => (acc + fib.take(i)).zip(fib.drop(i)).map(\e[36mf\e[0m\
    \ => f._1 + f._2).sum}\n\e[31m\e[31m   |\e[0m                                \
    \                          ^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0m (x: String): String\n\e[31m   |\e[0mmatch arguments (Range)\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fib : mutable.Array[Long] =\
    \ mutable.Array(1)\n        for (i<-0 until n) fib(i) = fib(i-1) + fib(i-2) +\
    \ fib(i-3)\n        fib(0)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi9__gbvx.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m : mutable.Array[\e\
    [35mLong\e[0m] = mutable.Array(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi9__gbvx.scala:17:40\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mfib\e[0m : mutable.Array[\e[35mLong\e[0m] = mutable.Array(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi9__gbvx.scala:18:24 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i<-\e[31m0\e[0m until n) fib(i)\
    \ = fib(i-\e[31m1\e[0m) + fib(i-\e[31m2\e[0m) + fib(i-\e[31m3\e[0m)\n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       Found:    (n : Long)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfibMap = mutable.HashMap.empty[Long,\
    \ Long] \n        fibfibMap += (0l -> 0l) \n        fibfibMap += (1l -> 0l) \n\
    \        fibfibMap += (2l -> 1l) \n        for {\n            i <- 0 until (n-1)\n\
    \        } yield {\n            fibfibMap.get(i) match {\n                case\
    \ None => {\n                    fibfibMap += (i->fibfibMap(i-1) + fibfibMap(i-2)\
    \ + fibfibMap(i-3))\n                    fibfibMap.get(i)\n                }\n\
    \                case Some(x) => x\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw8wt9rkw.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfibMap\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mLong\e[0m] \n\e[31m\e[31m   |\e[0m                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw8wt9rkw.scala:22:26\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            i <- \e[31m0\e[0m\
    \ until (n-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Long\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpw8wt9rkw.scala:29:32 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                \e[33mcase\e[0m Some(x) => x\n\e[31m\e[31m\
    \   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m            \
    \                    Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if(n<0) return 0\n        if(n==0)\
    \ return 0\n        if(n==1) return 1\n        val fib_cache = new mutable.ArrayBuilder[Int]\n\
    \        fib_cache.append(0)\n        fib_cache.append(1)\n        val fibfib_cache\
    \ = new mutable.ArrayBuilder[Int]\n        fibfib_cache.append(0)\n        fibfib_cache.append(1)\n\
    \        fibfib_cache.append(1)\n        for(i <- 2 to n){\n            val temp\
    \ = fib_cache.take(i - 1).head + fibfib_cache.take(i - 2).head + fibfib_cache.take(i\
    \ - 3).head\n            fib_cache.append(temp)\n            fibfib_cache.append(temp)\n\
    \        }\n        fib_cache.take(n).head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw5du5ccw.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfib_cache\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuilder[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m              \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw5du5ccw.scala:23:31\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mfibfib_cache\e[0m = \e[33mnew\e[0m mutable.ArrayBuilder[\e[35mInt\e[0m]\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpw5du5ccw.scala:27:22 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibonacci : mutable.MutableList[Long]\
    \ = new mutable.MutableList[Long]\n        fibonacci(0) = 0\n        fibonacci(1)\
    \ = 0\n        for {\n            fib1 <- fibonacci(0)\n            fib2 <- fibonacci(1)\n\
    \        } yield fib1 + fib2 + fibfib(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaxyzm2ij.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibonacci\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.MutableList[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpaxyzm2ij.scala:17:56 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mfibonacci\e[0m : mutable.MutableList[\e[35mLong\e\
    [0m] = \e[33mnew\e[0m mutable.MutableList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                                                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfibArray = Array.ofDim[Long](3)\n\
    \        fibfibArray(0) = 0\n        fibfibArray(1) = 0\n        fibfibArray(2)\
    \ = 1\n        fibfibArray.updated(3, fibfibArray(2) + (fibfibArray(1) + (fibfibArray(0)\
    \ + fibfibArray(3))))\n        fibfibArray(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzeqmcgje.scala:22:20\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        fibfibArray(n)\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    (n : Long)\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fib = new mutable.HashMap[Long,\
    \ Long]\n        (1l to n) foreach { x =>\n            fib.put(x, fib.getOrElse(x,\
    \ 0l) + fib.getOrElse(x - 1l, 0l) + fib.getOrElse(x - 2l, 0l))\n        }\n  \
    \      fib.get(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpogndklgi.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m   \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib = new mutable.HashMap[Long,\
    \ Long]()\n        fibfib.put(1l,0)\n        fibfib.put(2l,0)\n        fibfib.put(3l,1)\n\
    \        fibfib.get(4l) match {\n            case None => fibfib.get(5l) match\
    \ {\n                case None => fibfib.get(6l) match {\n                   \
    \ case None => fibfib.get(7l) match {\n                        case None => fibfib.get(8l)\
    \ match {\n                            case None => fibfib.get(9l) match {\n \
    \                               case None => fibfib.get(10l) match {\n       \
    \                             case None => fibfib.get(11l) match {\n         \
    \                               case None => fibfib.get(12l) match {\n       \
    \                                     case None => fibfib.get(13l) match {\n \
    \                                               case None => fibfib.get(14l) match\
    \ {\n                                                    case None => fibfib.get(15l)\
    \ match {\n                                                        case None =>\
    \ fibfib.get(16l) match {\n                                                  \
    \          case None => fibfib.get(17l) match {\n                            \
    \                                    case None => fibfib.get(18l) match {\n  \
    \                                                                  case None =>\
    \ fibfib.get(19l) match {\n                                                  \
    \                      case None => fibfib.get(20l) match {\n                \
    \                                                            case None => fibfib.get(21l)\
    \ match {\n                                                                  \
    \              case None => fibfib.get(22l) match {\n                        \
    \                                                            case None => fibfib.get(23l)\
    \ match {\n                                                                  \
    \                      case None => fibfib.get(24l) match {\n                \
    \                                                                            case\
    \ None => fibfib.get(25l) match {\n                                          \
    \                                                      case None => fibfib.get(26l)\
    \ match {\n                                                                  \
    \                                  case None => fibfib.get(27l) match {\n    \
    \                                                                            \
    \                        case None => fibfib.get(28l) match {\n              \
    \                                                                            \
    \                  case None => fibfib.get(29l) match {\n                    \
    \                                                                            \
    \                case None => fibfib.get(30l) match {\n                      \
    \                                                                            \
    \                  case None => fibfib.get(31l) match {\n                    \
    \                                                                            \
    \                        case None => fibfib.get(32l) match {\n              \
    \                                                                            \
    \                                  case None => fibfib.get(33l) match {\n    \
    \                                                                            \
    \                                                case None => fibfib.get(34l)\
    \ match {\n                                                                  \
    \                                                                  case None =>\
    \ fibfib.get(35l) match {\n                                                  \
    \                                                                            \
    \          case None => fibfib.get(36l) match {\n                            \
    \                                                                            \
    \                                    } \n                                    \
    \                                                                            \
    \                        }\n                                                 \
    \                                                                            \
    \       }\n                                                                  \
    \                                                              }\n           \
    \                                                                            \
    \                                     }\n                                    \
    \                                                                            \
    \        }\n\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1p5urw9n.scala:54:140 --------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m                                                    \
    \                                                                            \
    \            } \n\e[31m\e[31m   |\e[0m                                       \
    \                                                                            \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \              'case' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp1p5urw9n.scala:73:0 ----------------------------\e[0m\e[0m\n\e[31m73\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1p5urw9n.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1p5urw9n.scala:70:5\
    \ ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp1p5urw9n.scala:62:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m62 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660010080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib_0 = mutable.MutableList.empty[Long]\n\
    \        val fibfib_1 = mutable.MutableList.empty[Long]\n        val fibfib_2\
    \ = mutable.MutableList.empty[Long]\n        val fibfib_3 = mutable.MutableList.empty[Long]\n\
    \n        var fibfib : mutable.MutableList[Long] = fibfib_0 ++ fibfib_1 ++ fibfib_2\
    \ ++ fibfib_3\n\n        fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \        fibfib\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplbedd6f3.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib_0\e[0m = mutable.MutableList.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplbedd6f3.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfibfib_1\e[0m = mutable.MutableList.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplbedd6f3.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfibfib_2\e[0m = mutable.MutableList.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplbedd6f3.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfibfib_3\e[0m = mutable.MutableList.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplbedd6f3.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mfibfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = fibfib_0 ++ fibfib_1 ++ fibfib_2 ++ fibfib_3\n\e[31m\e[31m  \
    \ |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660010076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n      val fibfibNums = mutable.ArrayBuffer.empty[Int]\n\
    \      val fibfibSum = 0\n      for (i <- 0 until n) {\n        fibfibNums(i)\
    \ = fibfibSum + i\n        fibfibSum += 1\n      }\n      fibfibNums(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n  \
    \  assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoya4m_48.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m      \e[33mval\e[0m \e[36mfibfibNums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpoya4m_48.scala:19:24 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoya4m_48.scala:21:18\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        fibfibSum += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ += is not a member of Int - did you mean fibfibSum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010081
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n\
    \ == 1) 0\n        else if (n == 2) 1\n        else fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010061
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n <= 2l) 0l\n        else fibfib(n-1l)\
    \ + fibfib(n-2l) + fibfib(n-3l)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzlvn89n2.scala:21)\n\tat Problem.main(tmpzlvn89n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        // Implement the FibFib(n) function\
    \ in any way you like.\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv4479eyw.scala:16:34\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m    \e[33mdef\e[0m \e[36mfibfib\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \      Required: Long\n\e[31m17 |\e[0m        \e[34m// Implement the FibFib(n)\
    \ function in any way you like.\e[0m\n\e[31m18 |\e[0m    }\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010080
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n      if (n == 0) 0\n      else if (n ==\
    \ 1) 1\n      else if (n == 2) 1\n      else if (n%3 == 0) fibfib(n-1) + fibfib(n-2)\n\
    \      else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptsfggum0.scala:25)\n\tat Problem.main(tmptsfggum0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibSeq = mutable.Buffer(n)\n\
    \        fibSeq pushAll 0\n        fibSeq pushAll 1\n        var i = 3\n     \
    \   while (i < fibSeq.length) {\n            fibSeq(i) = fibSeq(i-1) + fibSeq(i-2)\
    \ + fibSeq(i-3)\n            i += 4\n        }\n        fibSeq.last\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n   \
    \ assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptc2820ug.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibSeq\e[0m = mutable.Buffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fib = new mutable.HashMap[Long,\
    \ Long]()\n        var fibResult = 0\n        fib += (0 to n)(-1 to 0).zipWithIndex\
    \ { (i, j) => fib.put(j, fib.get (j) + fib.get (j + 1) + fib.get (j + 2))}\n \
    \       fibResult += fib.get (n)(0)\n        fibResult\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7h732zo4.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var sum : Long = 0\n        var\
    \ i = 1l\n        while (i <= n) {\n            sum = sum + fibfib(i)\n      \
    \      i = i + 1l\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\tat Problem$.fibfib(tmphlul_sq0.scala:20)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fibfib = (0l); \n        for(i\
    \ <- 1 to n-1) fibfib = fibfib + fibfib(n-i); \n        fibfib\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjlxn8ze4.scala:18:22\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n-\e[31m1\e[0m) fibfib = fibfib + fibfib(n-i); \n\e[31m\e[31m  \
    \ |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m                      Found:\
    \    Long\n\e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpjlxn8ze4.scala:18:45 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n-\e[31m1\e\
    [0m) fibfib = fibfib + fibfib(n-i); \n\e[31m\e[31m   |\e[0m                  \
    \                           ^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \           \e[33mvariable\e[0m \e[35mfibfib\e[0m does not take parameters\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n\
    \ == 1) 0\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\tat Problem$.fibfib(tmp7eyihsip.scala:19)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val a = n\n        val fibfib =\
    \ new mutable.MutableList[Int]()\n        fibfib.clear()\n        fibfib.push(0)\n\
    \        fibfib.push(1)\n        fibfib.push(2)\n        fibfib.reduce{\n    \
    \    case (acc, element) =>\n            val current = fibfib.last\n         \
    \   fibfib.last += fibfib.last\n            fibfib.last += current\n         \
    \   current\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4zikqqlu.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib : mutable.HashMap[Long,\
    \ Long] = mutable.HashMap()\n        fib(0) = 0\n        fib(1) = 0\n        fib(2)\
    \ = 1\n        fibfib(n) = fib.foldLeft(0l) { (a,b) => (fib(b.toInt) + fib(b.toInt\
    \ - 1) + fib(b.toInt - 2))}\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx2mbpmua.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m] = mutable.HashMap()\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx2mbpmua.scala:17:48\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e\
    [36mfib\e[0m : mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m] = mutable.HashMap()\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx2mbpmua.scala:21:8\
    \ -------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        fibfib(n) = fib.foldLeft(\e\
    [31m0l\e[0m) { (\e[36ma\e[0m,\e[36mb\e[0m) => (fib(b.toInt) + fib(b.toInt - \e\
    [31m1\e[0m) + fib(b.toInt - \e[31m2\e[0m))}\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value update is not a member of Long => Long\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if(n < 0) throw new IllegalArgumentException\n\
    \        val fibfib = (0 to n).foldLeft(0)(_ + _)\n        fibfib\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdmn1ma9i.scala:18:27\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e\
    [0m = (\e[31m0\e[0m to n).foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m\
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                           Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib : scala.collection.mutable.MutableList[Long]\
    \ = scala.collection.mutable.MutableList()\n        fib.add(0l)\n        for {\n\
    \            x <- 1l to n\n        } yield {\n            fib.add(fib.get(x-1)\
    \ + fib.get(x-2) + fib.get(x-3))\n            fib.get(x)\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n   \
    \ assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb2699hxq.scala:17:43 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : scala.collection.mutable.MutableList[\e\
    [35mLong\e[0m] = scala.collection.mutable.MutableList()\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            type MutableList is not a member of scala.collection.mutable\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpb2699hxq.scala:17:88 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : scala.collection.mutable.MutableList[\e\
    [35mLong\e[0m] = scala.collection.mutable.MutableList()\n\e[31m\e[31m   |\e[0m\
    \                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value MutableList is not a member of scala.collection.mutable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb2699hxq.scala:19:8 ---------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m {\n\e[31m\e[31m   |\e[0m     \
    \   ^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Nothing]\n\e[31m   |\e\
    [0m        Required: Long\n\e[31m20 |\e[0m            x <- \e[31m1l\e[0m to n\n\
    \e[31m21 |\e[0m        } \e[33myield\e[0m {\n\e[31m22 |\e[0m            fib.add(fib.get(x-\e\
    [31m1\e[0m) + fib.get(x-\e[31m2\e[0m) + fib.get(x-\e[31m3\e[0m))\n\e[31m23 |\e\
    [0m            fib.get(x)\n\e[31m24 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibbonacci = new mutable.Queue[Int]()\n\
    \        val fib = new mutable.Queue[Int]()\n        fibbonacci.enqueue(0)\n \
    \       fib.enqueue(0)\n        var next = 0\n        var prev = 0\n        while(fibbonacci.size\
    \ < n) {\n            val curr = fibbonacci.dequeue()\n            val tmp = prev\
    \ + next\n            next = curr\n            prev = tmp\n            fib.enqueue(prev)\n\
    \        }\n        fib.dequeue()\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0lj4oe3p.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibbonacci\e[0m = \e[33mnew\e\
    [0m mutable.Queue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0lj4oe3p.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib\e[0m = \e[33mnew\e[0m mutable.Queue[\e[35mInt\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0) 0\n        else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\tat Problem$.fibfib(tmpkn2idlh_.scala:18)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val a = mutable.ArrayBuffer(0l).iterator\n\
    \        val b = mutable.ArrayBuffer(1l).iterator\n        val c = mutable.ArrayBuffer(1l).iterator\n\
    \n        val ans : Long = 0l\n        while (n >= 0) {\n            ans = ans\
    \ + a.get(b.get(c.get(n)))\n            n -= 1\n        }\n        ans\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n  \
    \  assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5y4ik2vy.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = mutable.ArrayBuffer(\e\
    [31m0l\e[0m).iterator\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5y4ik2vy.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = mutable.ArrayBuffer(\e\
    [31m1l\e[0m).iterator\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5y4ik2vy.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = mutable.ArrayBuffer(\e\
    [31m1l\e[0m).iterator\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp5y4ik2vy.scala:23:16 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            ans = ans + a.get(b.get(c.get(n)))\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val ans\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp5y4ik2vy.scala:24:14 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of Long\
    \ - did you mean n.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1660010086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib : mutable.Stack[Long] =\
    \ mutable.Stack[Long](Long.MaxValue)\n        var i : Long = 1\n        while\
    \ (i <= n) {\n            fib.push(i)\n            i += 1\n        }\n       \
    \ fib.size\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq5xq_2fa.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.Stack[\e\
    [35mLong\e[0m] = mutable.Stack[\e[35mLong\e[0m](Long.MaxValue)\n\e[31m\e[31m \
    \  |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq5xq_2fa.scala:17:40\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e\
    [36mfib\e[0m : mutable.Stack[\e[35mLong\e[0m] = mutable.Stack[\e[35mLong\e[0m](Long.MaxValue)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                        Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfibList = mutable.ArrayBuffer(0l)\n\
    \        fibfibList.push(0)\n        fibfibList.push(1l)\n        fibfibList.push(2l)\n\
    \        fibfibList.fill{case x =>\n            fibfibList.pop + fibfibList.pop\
    \ + fibfibList.pop\n        }\n\n        fibfibList.head\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdabv3r4m.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfibList\e[0m = mutable.ArrayBuffer(\e\
    [31m0l\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0) 0 else fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\tat Problem$.fibfib(tmpvk_ljcz3.scala:17)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibs = scala.collection.mutable.ListBuffer[Long]()\n\
    \        var prev = 0\n        while(n > 0) {\n            fibs ++= prev\n   \
    \         prev = fibs(n-1)\n            n -= 1\n        }\n        fibs(0)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsulntg3p.scala:20:21\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            fibs ++= prev\n\e\
    [31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0m           \
    \          Found:    (prev : Int)\n\e[31m   |\e[0m                     Required:\
    \ IterableOnce[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsulntg3p.scala:21:24\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            prev = fibs(n-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^\e[0m\n\e[31m   |\e\
    [0m                        Found:    Long\n\e[31m   |\e[0m                   \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsulntg3p.scala:22:14\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib : MutableList[Long] = new\
    \ MutableList[Long]\n        fib(0) = 0\n        fib(1) = 0\n        fib(n) =\
    \ fib(n - 1) + fib(n - 2) + fib(n - 3)\n        fib.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjbdbn5n6.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : \e[35mMutableList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mMutableList\e[0m[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \             Not found: type MutableList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpjbdbn5n6.scala:17:42 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : \e[35mMutableList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mMutableList\e[0m[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                          Not found: type MutableList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0) 0\n        if (n ==\
    \ 1) 1\n        if (n == 2) 1\n        if (n <= 3) {\n            val result =\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n            result\n        }\n   \
    \     else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\tat Problem$.fibfib(tmpxqxi9ovl.scala:21)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n <= 2l) 0\n        else fibfib((n\
    \ - 2l) + fibfib((n - 2l-1l))) + fibfib((n - 3l))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3b7_pbd0.scala:21)\n\tat Problem.main(tmp3b7_pbd0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        // TODO - your solution here\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjlzyy_iy.scala:16:34\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m    \e[33mdef\e[0m \e[36mfibfib\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \      Required: Long\n\e[31m17 |\e[0m        \e[34m// TODO - your solution here\e\
    [0m\n\e[31m18 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fib = new mutable.HashMap[Long,\
    \ Long]()\n        for (i <- 0 until n) {\n            fib(i) = (fib(i-1) + fib(i-2)\
    \ + fib(i-3))\n        }\n        fib(n) = fib(n-1)+fib(n-2)+fib(n-3)\n      \
    \  fib(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuaivwsmp.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuaivwsmp.scala:18:26\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010090
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n\
    \ == 1) 1\n        else if (n == 2) 1\n        else fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgd4cs1kv.scala:24)\n\tat Problem.main(tmpgd4cs1kv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        // Code here\n        var fibSeq\
    \ = Vector.fill(10)(0)\n        var prev = 0\n        var x = 1\n        var y\
    \ = 1\n        for (i<-1 to n){\n            prev = x\n            x = y\n   \
    \         y = prev + x + y\n            fibSeq(i) = y\n        }\n        fibSeq.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsz59mx6_.scala:22:21\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i<-\e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m  \
    \ |\e[0m                     Found:    (n : Long)\n\e[31m   |\e[0m           \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpsz59mx6_.scala:26:12 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m            fibSeq(i) = y\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue update is not a member of Vector[Int] - did you mean Vector[Int].updated?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        // TODO: Write the function here\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1gf8lukz.scala:16:34\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m    \e[33mdef\e[0m \e[36mfibfib\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \      Required: Long\n\e[31m17 |\e[0m        \e[34m// TODO: Write the function\
    \ here\e[0m\n\e[31m18 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib = mutable.Stack[Long]()\n\
    \        fib.push(0l)\n        fib.push(0l)\n        var j : Long = 1l\n     \
    \   while (j < n) {\n            fib.push(fib.get(j).plus(fib.get(j-1)).plus(fib.get(j-2)))\n\
    \            j += 1\n        }\n        fib.get(n - 1).toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpew3kcm9d.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var result : Long = 0L\n       \
    \ var fib : Long = 0L\n        var fibfib : Long = 0L\n        for (i <- 0 until\
    \ (n)) {\n            if (i == 0) {\n                result = 1\n            \
    \    fib = i\n                fibfib = i\n            } else {\n             \
    \   result = fib + (fibfib + 1L)\n                fib = fibfib\n             \
    \   fibfib = result\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ouwpejc.scala:20:27\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until (n)) {\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (n : Long)\n\e[31m  \
    \ |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib : mutable.MutableList[Long]\
    \ = mutable.MutableList.empty\n        for (i <- 0 until n) {\n            fib\
    \ :+= fib(n - 3) + fib(n - 2) + fib(n - 1)\n        }\n        fib(0)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n  \
    \  assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfjz7mfq0.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList.empty\n\e[31m\e[31m   |\e[0m            \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfjz7mfq0.scala:17:46 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList.empty\n\e[31m\e[31m   |\e[0m            \
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpfjz7mfq0.scala:18:26 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib = new mutable.HashSet[Long]()\n\
    \        var prev = 0\n        var i = 0\n        while (i < n) {\n          \
    \  fibfib.add(prev + 2)\n            prev = prev + prev\n            i = i + 1\n\
    \        }\n        fibfib.remove(0)\n        fibfib.remove(0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7r08mmg1.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var result = 1\n        for (i <-\
    \ 2 to n by 2){\n            result = result + fibfib(i)\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmii7t5w9.scala:18:23\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n by \e[31m2\e[0m){\n\e[31m\e[31m   |\e[0m                 \
    \      ^\e[0m\n\e[31m   |\e[0m                       Found:    (n : Long)\n\e\
    [31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpmii7t5w9.scala:19:21 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            result = result + fibfib(i)\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Found:    Long\n\e[31m   |\e[0m                     Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if( n <= 0 ){\n            return\
    \ 0\n        }\n\n        val fib : mutable.MutableList[Long] = mutable.MutableList(0,1)\n\
    \        fib.last+=fibfib(fib.last-1)\n        fib.last+=fibfib(fib.last-1)\n\
    \        fib.last+=fibfib(fib.last-1)\n        fib.last+=fibfib(fib.last-1)\n\n\
    \        fib.last\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9q96361w.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList(\e[31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9q96361w.scala:21:46\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mfib\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fib = new mutable.MutableList[Long]\n\
    \        fib += 0\n        fib += 0\n        fib += 1\n        fib += 2\n    \
    \    fib += 3\n        if (n == 0) fib(0)\n        else if (n == 1) fib(1)\n \
    \       else if (n == 2) fib(2)\n        else fib(n-1) + fib(n-2) + fib(n-3)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb0m405fx.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m = \e[33mnew\e[0m\
    \ mutable.MutableList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib : mutable.MutableList[Long]\
    \ = mutable.MutableList()\n        fibfib.add(0L)\n        fibfib.add(0L)\n  \
    \      fibfib.add(1L)\n        var tmp : Long = 0L\n        while (n > 0) {\n\
    \            tmp = fibfib.get(n-1) + fibfib.get(n-2) + fibfib.get(n-3)\n     \
    \       fibfib.add((tmp))\n            n -= 1\n        }\n        fibfib.get(0L)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpofipe7a2.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList()\n\e[31m\e[31m   |\e[0m                \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpofipe7a2.scala:17:49\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mfibfib\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList()\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpofipe7a2.scala:25:14\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var num : Long = 1l\n        var\
    \ index : Long = 1\n        var lastnum : Long = 1\n        var newnum : Long\
    \ = 1\n        var sum : Long = 1\n\n        while (index <= n) {\n          \
    \  lastnum = num\n            num = newnum\n            newnum = (num + lastnum\
    \ + sum) % 10\n            sum = sum + lastnum\n            index = index + 1\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe67xjqvu.scala:33)\n\tat Problem.main(tmpe67xjqvu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib : List[Long] = List(0l,1l)\n\
    \        for (i <- 3L to n){\n            fib = (fib(0l) + fib(1l)) :: fib ::\
    \ fib(2l).toList\n        }\n        fib(n-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_roye93g.scala:19:52\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            fib = (fib(\e[31m0l\e\
    [0m) + fib(\e[31m1l\e[0m)) :: fib :: fib(\e[31m2l\e[0m).toList\n\e[31m\e[31m \
    \  |\e[0m                                                    ^^\e[0m\n\e[31m \
    \  |\e[0m                                                   Found:    (\e[31m2L\e\
    [0m : Long)\n\e[31m   |\e[0m                                                 \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_roye93g.scala:21:12\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        fib(n-\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            Found: \
    \   Long\n\e[31m   |\e[0m            Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n < 3l) 0l\n        else 1l\
    \ + (fibfib(n-1l) + fibfib(n-2l) + fibfib(n-3l))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp56shaqsf.scala:21)\n\tat Problem.main(tmp56shaqsf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val x = 0l\n        val y = 0l\n\
    \        var z = 0l\n        while(n > 0) {\n            val temp = n - (n+1l)\
    \ - 2l\n            x += 1l\n            y += 2l\n            z += temp\n    \
    \        n = z\n        }\n        z\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw13mmdq0.scala:22:14 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            x += \e[31m1l\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean x.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw13mmdq0.scala:23:14\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            y += \e[31m2l\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean y.!=?\n\e[31m\e[31m-- [E052] Type\
    \ Error: /tmp/tmpw13mmdq0.scala:25:14 -----------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m            n = z\n\e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\
    \e[31m   |\e[0m            Reassignment to val n\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var a = n.toLong\n        var b\
    \ = n.toLong\n        var c = n.toLong\n        var result = 1\n        while\
    \ (b < 1) {\n            a++\n            b++\n            c++\n            result\
    \ = (result + a) % c\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpe_va137z.scala:25:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            result = (result + a) % c\n\e[31m\e[31m \
    \  |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   end of statement\
    \ expected but '=' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe_va137z.scala:22:13\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            a++\n\e[31m\e\
    [31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            value ++ is not\
    \ a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660010096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n       if(n <= 1) 0\n       else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2sqkk0gy.scala:21)\n\tat Problem.main(tmp2sqkk0gy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var sum = 0\n        var i = 0\n\
    \        while (i <= n) {\n            sum = sum + fibfib(i)\n            i =\
    \ i + 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpywnu5oul.scala:20:18\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            sum = sum + fibfib(i)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                 Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if(n == 0) 0\n        else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\tat Problem$.fibfib(tmp4p5ri71k.scala:18)\n\
    \tat Problem$.fibfi"
  stdout: ''
  timestamp: 1660010041
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n <= 3) return 0\n        if\
    \ (n <= 2) return 1\n        val a = fibfib(n-1)\n        val b = fibfib(n-2)\n\
    \        val c = fibfib(n-3)\n        (a+b+c)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfmy2rcv1.scala:25)\n\tat Problem.main(tmpfmy2rcv1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val nums = (0 until n).map{x =>\
    \ if (x==n) 0 else x+1}\n        nums.reduceLeft((a,b) => a+b)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmz2qxd9r.scala:17:28\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnums\e\
    [0m = (\e[31m0\e[0m until n).map{\e[36mx\e[0m => \e[33mif\e[0m (x==n) \e[31m0\e\
    [0m \e[33melse\e[0m x+\e[31m1\e[0m}\n\e[31m\e[31m   |\e[0m                   \
    \         ^\e[0m\n\e[31m   |\e[0m                            Found:    (n : Long)\n\
    \e[31m   |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        // initialize fibonacci sequence\n\
    \        var fib : mutable.Buffer[Long] = mutable.Buffer(0)\n        fib = fib.append(1)\n\
    \        fib = fib.append(0)\n        // find Fibbonacci number greater than n\n\
    \        var fibbonacci : Long = 0\n        var sum : Long = 0\n        while\
    \ (fibfib(n + 1) > fibbonacci) {\n            fibbonacci = fibfib(n + 1)\n   \
    \         sum = sum + fibbonacci\n            fib = fib.append(fibbonacci)\n \
    \       }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpomo_11om.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.Buffer[\e\
    [35mLong\e[0m] = mutable.Buffer(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpomo_11om.scala:18:41\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e\
    [36mfib\e[0m : mutable.Buffer[\e[35mLong\e[0m] = mutable.Buffer(\e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                         Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var i : Long = 0\n        var fib\
    \ : mutable.MutableList[Long] = mutable.MutableList()\n        while(i<n) {\n\
    \            fib = fib :+ fibfib(i+1)\n            i = i + 1\n        }\n    \
    \    fib(0)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5u7nbtc4.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList()\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5u7nbtc4.scala:18:46 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList()\n\e[31m\e[31m   |\e[0m                \
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        // your code goes here\n       \
    \ if (n <=1){\n            return 0;\n        }\n        else\n        {\n   \
    \         val fibSeq = scala.collection.mutable.ListBuffer(0)\n            var\
    \ count = 1\n            var temp = 0\n            while (count < n) {\n     \
    \           temp +=count\n                fibSeq ++= temp\n                count\
    \ += 1\n            }\n            return fibSeq.toList(1)(0)\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpipg5b0pw.scala:28:27\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m                fibSeq ++= temp\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (temp : Int)\n\e[31m   |\e[0m             \
    \              Required: IterableOnce[Int]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E050]\
    \ Type Error: /tmp/tmpipg5b0pw.scala:31:32 -----------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m            \e[33mreturn\e[0m fibSeq.toList(\e[31m1\e[0m)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mtrait\e[0m \e\
    [35mLinearSeqOps\e[0m does not take more parameters\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib : mutable.MutableList[Int]\
    \ = mutable.MutableList(\n            0, \n            0\n        )\n        var\
    \ i : Int = 0\n        while (i < n) {\n            fibfib.update(i + 1, fibfib(i)\
    \ + fibfib(i + 2))\n            i += 1\n        }\n        fibfib(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n  \
    \  assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppwvhfl39.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m : mutable.MutableList[\e\
    [35mInt\e[0m] = mutable.MutableList(\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppwvhfl39.scala:17:48 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m : mutable.MutableList[\e\
    [35mInt\e[0m] = mutable.MutableList(\n\e[31m\e[31m   |\e[0m                  \
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010097
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val nums = scala.collection.mutable.ListBuffer[Long]()\n\
    \        var fib_n = n\n        while(fib_n > 0){\n            fib_n = fib_n-1\n\
    \            nums += fib_n\n        }\n        nums(0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpad8npass.scala:29)\n\tat Problem.main(tmpad8npass.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfibs = collection.mutable.ListBuffer[Long]()\n\
    \        fibfibs += 0l\n        fibfibs += 1l\n        fibfibs += 2l\n       \
    \ fibfibs += n\n        fibfibs.drop(2).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphco6dikl.scala:25)\n\tat Problem.main(tmphco6dikl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib = (0l, n-1l, 0l, n-2l,\
    \ 1l, n-3l)\n        fibfib._2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz63p_yuw.scala:24)\n\tat Problem.main(tmpz63p_yuw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfib : mutable.Set[Long] =\
    \ mutable.Set()\n        def fibfib1(i : Long, j : Long) : Long = {\n        \
    \    if (i == 0 && j == 0)\n                fibfib.add(i)\n            else if\
    \ (j > 0)\n                fibfib1(i-1, j-1)\n            else\n             \
    \   fibfib1(i-1, j+1) + fibfib1(i-1, j-2)\n        }\n        fibfib1(n, (n-1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzy8szjy4.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzy8szjy4.scala:17:41 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                        \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n      var f = ListBuffer.empty[Long]\n \
    \     f += 0l\n      f += 0l\n      f += 0l\n      f.take(n) foreach { n =>\n\
    \        var next = 0l\n        var i = 0\n        while (i < n) {\n         \
    \ next += f.last\n          f.remove(f.last)\n          i += 1\n        }\n  \
    \      f.append(next + f.last)\n      }\n      f.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprqntrwb0.scala:21:13\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m      f.take(n) foreach { \e\
    [36mn\e[0m =>\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m     \
    \        Found:    (n : Long)\n\e[31m   |\e[0m             Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprqntrwb0.scala:26:21 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m          f.remove(f.last)\n\e[31m\e[31m   |\e[0m   \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                   Found:    Long\n\
    \e[31m   |\e[0m                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var fib : mutable.ArrayBuffer[Long]\
    \ = new mutable.ArrayBuffer[Long]()\n        fib += 0l\n        fib += 0l\n  \
    \      fib += 0l\n        fib += 0l\n        fib += 0l\n        fib += 0l\n  \
    \      var sum : Long = 0l\n        for( i <- 0 until n) {\n            sum =\
    \ fib(i - 1l) + fib(i - 2l) + fib(i - 3l)\n            fib += sum\n        }\n\
    \        fib.toList.get(0l).asInstanceOf[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplms5bktx.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.ArrayBuffer[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplms5bktx.scala:17:50\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e\
    [36mfib\e[0m : mutable.ArrayBuffer[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.ArrayBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplms5bktx.scala:25:26 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        require(n >= 0 && n <= 31);\n  \
    \      lazy val fib : mutable.MutableList[Long] = mutable.MutableList(1l);\n \
    \       fib += 0;\n        fib += 1;\n        var i : Long = 1;\n        while(i\
    \ < n) {\n            fib.add(fib(i) + fib(i - 1) + fib(i - 2));\n           \
    \ i += 3;\n        }\n        fib.head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp327hmi8k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mlazy\e[0m \e[33mval\e[0m \e[36mfib\e[0m\
    \ : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList(\e[31m1l\e[0m);\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp327hmi8k.scala:18:51 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mlazy\e[0m \e[33mval\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList(\e[31m1l\e[0m);\n\e[31m\e[31m   |\e[0m  \
    \                                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                   Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010098
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var result = 1\n        var fib\
    \ : Long = 0\n        var fibfib : Long = 1\n        while(fibfib < n){\n    \
    \        fib = fibfib\n            fibfib = fibfib + fibfib\n            result\
    \ += 1\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnc4tgtf7.scala:28)\n\tat Problem.main(tmpnc4tgtf7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010102
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n >= 1) fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        else 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpypu4hm9l.scala:21)\n\tat Problem.main(tmpypu4hm9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n <= 1)\n            return\
    \ n\n        val n2 = n * n\n        val n3 = n2 * n\n        val n4 = n3 * n2\n\
    \        val n5 = n4 * n3\n        val n6 = n5 * n4\n        val n7 = n6 * n5\n\
    \        val n8 = n7 * n6\n        val n9 = n8 * n7\n        val n10 = n9 * n8\n\
    \        val n11 = n10 * n9\n        val n12 = n11 * n10\n        val n13 = n12\
    \ * n11\n        val n14 = n13 * n12\n        val n15 = n14 * n13\n        val\
    \ n16 = n15 * n14\n        val n17 = n16 * n15\n        val n18 = n17 * n16\n\
    \        val n19 = n18 * n17\n        val n20 = n19 * n18\n        val n21 = n20\
    \ * n19\n        val n22 = n21 * n20\n        val n23 = n22 * n21\n        val\
    \ n24 = n23 * n22\n        val n25 = n24 * n23\n        val n26 = n25 * n24\n\
    \        val n27 = n26 * n25\n        val n28 = n27 * n26\n        val n29 = n28\
    \ * n27\n        val n30 = n29 * n28\n        val n31 = n30 * n29\n        val\
    \ n32 = n31 * n30\n        val n33 = n32 * n31\n        val n34 = n33 * n32\n\
    \        val n35 = n34 * n33\n        val n36 = n35 * n34\n        val n37 = n36\
    \ * n35\n        val n38 = n37 * n36\n        val n39 = n38 * n37\n        val\
    \ n40 = n39 * n38\n        val n41 = n40 * n39\n        val n42 = n41 * n40\n\
    \        val n43 = n42 * n41\n        val n44 = n43 * n42\n        val n45 = n44\
    \ * n43\n        val n46 = n45 * n44\n        val n47 = n46 * n45\n        val\
    \ n48 = n47 * n46\n        val n49 = n48 * n47\n        val n50 = n49 * n48\n\
    \        val n51 = n50 * n49\n        val n52 = n51 * n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpubj_fx5k.scala:70:5\
    \ ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010102
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0l) return 0l\n       \
    \ if (n == 1l) return 1l\n        if (n == 2l) return 1l\n        if (n == 3l)\
    \ return 1l\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg6zwjxfx.scala:25)\n\tat Problem.main(tmpg6zwjxfx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010102
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if(n<=0) 0\n        else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplnv2q3g0.scala:21)\n\tat Problem.main(tmplnv2q3g0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fib : mutable.Set[Long] = mutable.Set(0)\n\
    \        def fibfib(n: Long) : Long = n match {\n            case 0 => 0\n   \
    \         case 1 => fibfib(0)\n            case 2 => fibfib(1)\n            case\
    \ n => fib.last + fibfib(n-1)\n        }\n        fib.add(n)\n        fibfib(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe_ett2w5.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe_ett2w5.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfib\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        // TODO: write code here\n     \
    \   val result = mutable.ListBuffer[Long]()\n        \n        for(i <- 0 until\
    \ n) {\n            val next = fibfib(i + 1)\n            result.add(next + 1)\n\
    \        }\n        \n        result(0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdb391146.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdb391146.scala:20:25 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010102
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        if (n == 0) {\n            return\
    \ 0\n        }\n        if (n == 1) {\n            return 1\n        }\n     \
    \   if (n == 2) {\n            return 1\n        }\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsineso8w.scala:30)\n\tat Problem.main(tmpsineso8w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        var a = 2\n        var b = 3\n \
    \       var c = 1\n        while(true){\n            if(n > 0){\n            \
    \    a = b\n                b = c\n                c = a + b + c\n           \
    \     n = n - 1\n            }else{\n                break\n            }\n  \
    \      }\n        c\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpb0x5blqc.scala:25:18 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                n = n - \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb0x5blqc.scala:27:16\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010102
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        def fibfib(n: Long): Long = if (n\
    \ < 2) 1 else fibfib(n-1) + fibfib(n-2)\n\n        val fibfibN = fibfib(n).toInt\n\
    \n        fibfibN\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpke6f_593.scala:24)\n\tat Problem.main(tmpke6f_593.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    def fibfib(n : Long) : Long = {\n        val fibfibNums = mutable.ListBuffer[Long]()\n\
    \        fibfibNums += 0\n        fibfibNums += 1\n        val nextFibNum = fibfibNums.tail\n\
    \        while (n > nextFibNum.head)\n        {\n            val temp = fibfibNums.head\n\
    \            fibfibNums.clear()\n            fibfibNums += temp + temp + temp\n\
    \            val nextFibNum = fibfibNums.tail\n        }\n        fibfibNums.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm_aethtt.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfibfibNums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010102
