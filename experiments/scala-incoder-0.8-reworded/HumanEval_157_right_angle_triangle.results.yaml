language: scala
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var n1 = (b - a) * (Math.sqrt(a * a + b * b) - c) / 2\n       \
    \ var n2 = (c - a) * (Math.sqrt(a * a + c * c) - b) / 2\n        return (n1 *\
    \ n1 <= n2 * n2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa5wosagk.scala:20)\n\tat Problem.main(tmpa5wosagk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val a2 = a * a;\n        val b2 = b * b;\n        val c2 = c *\
    \ c;\n        val a2b2 = a2 + b2;\n        val a2c2 = a2 + c2;\n        val b2ac2\
    \ = b2 + c2;\n        val a2b2c2 = a2b2 + b2c2;\n        val a2c1b2 = a2c2 + b2;\n\
    \        val a2b2c1b2 = a2b2c2 + b2c1;\n        return ((a2c2b2 > a2b2c1b2) ||\
    \ (a2b2c1b2 < a2c1b2)) && ((b2c1 > a2b2c1b2) || (a2c1b2 < a2c1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1co21m8j.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36ma2b2c2\e[0m = a2b2 + b2c2;\n\
    \e[31m\e[31m   |\e[0m                            ^^^^\e[0m\n\e[31m   |\e[0m  \
    \                          Not found: b2c2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1co21m8j.scala:23:17 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mreturn\e[0m ((a2c2b2 > a2b2c1b2) || (a2b2c1b2\
    \ < a2c1b2)) && ((b2c1 > a2b2c1b2) || (a2c1b2 < a2c1))\n\e[31m\e[31m   |\e[0m\
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: a2c2b2\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var aSquare = a * a\n        var bSquare = b * b\n        var cSquare\
    \ = c * c\n        var s = (a + b + c) / 2\n        if (s == 0)\n            return\
    \ true\n        if (aSquare + bSquare < cSquare)\n            return false\n \
    \       if (bSquare + cSquare < aSquare)\n            return false\n        if\
    \ (aSquare + cSquare < bSquare)\n            return false\n        if (bSquare\
    \ < cSquare)\n            return false\n        if (a == b)\n            return\
    \ true\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_yjvyivz.scala:33)\n\tat Problem.main(tmp_yjvyivz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var ans = false\n        for (ia <- 1 to a) {\n            for\
    \ (ib <- 1 to b) {\n                for (ic <- 1 to c) {\n                   \
    \ val ans = abc if (ia == ib and ib == ic) else 0\n                    if (ans\
    \ == 1) ans = false\n                }\n            }\n        }\n        ans\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppi_e852t.scala:18:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    \e[33mval\e[0m \e[36mans\e[0m = abc\
    \ \e[33mif\e[0m (ia == ib and ib == ic) \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m                                  ^^\e[0m\n\e[31m   |\e[0m      \
    \                          end of statement expected but 'if' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppi_e852t.scala:15:24 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (ia <- \e[31m1\e[0m to a) {\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Found:    (a : Long)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppi_e852t.scala:16:28\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m (ib\
    \ <- \e[31m1\e[0m to b) {\n\e[31m\e[31m   |\e[0m                            ^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (b : Long)\n\e[31m \
    \  |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppi_e852t.scala:17:32 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mfor\e[0m (ic <- \e[31m1\e[0m to\
    \ c) {\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m  \
    \ |\e[0m                                Found:    (c : Long)\n\e[31m   |\e[0m\
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppi_e852t.scala:18:30 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    \e[33mval\e[0m \e[36mans\e[0m = abc\
    \ \e[33mif\e[0m (ia == ib and ib == ic) \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m                              ^^^\e[0m\n\e[31m   |\e[0m         \
    \                     Not found: abc\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-"
  stdout: ''
  timestamp: 1659979423
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Write your code here.\n        var triangle_angle_to_side =\
    \ a.toDouble * b.toDouble\n        triangle_angle_to_side += c.toDouble * b.toDouble\n\
    \        triangle_angle_to_side += c.toDouble * a.toDouble\n        triangle_angle_to_side\
    \ /= 2\n        return triangle_angle_to_side == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8xjijeoi.scala:22)\n\tat Problem.main(tmp8xjijeoi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (b > c || b < c || a > c || a < c) {\n            return true\n\
    \        }\n        else {\n            val d = 3*(b - c)\n            val e =\
    \ 6*(a - b)\n            val f = 6*(b - a)\n            val g = 6*(c - a)\n  \
    \          val h = 6*(b - c)\n            val l = 3*(b - c)\n            val m\
    \ = 3*(b - c)\n            val n = 3*(b - c)\n            val q = a*b - b*c\n\
    \            val r = a * b + b*c - a*c\n            val s = 2*(q*q - 2*r + c)\n\
    \            if (s < 0 || s > h) {\n                return true\n            }\
    \ else {\n                val t1 = 2*(q*q - 2*r + c)/2\n                val t2\
    \ = (s - t1)\n                if (t2 > 0 && t2 < t) {\n                    return\
    \ false\n                }\n                else {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvby6ts5a.scala:34:35 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                \e[33mif\e[0m (t2 > \e[31m0\e[0m && t2\
    \ < t) {\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Not found: t\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a + b + c < 3l*3l) \n            false\n        else\n    \
    \        if (a + c < b + c)\n                false\n            else\n       \
    \         if (b + c < a + b)\n                    false\n                else\n\
    \                    if (a + b + c < 3l*3l)\n                        true\n  \
    \                  else\n                        false\n}\n}\n</code>\nScala code:\n\
    <code>\nobject Problem{\n  def rightAngleTriangle(a:Long, b:Long, c:Long) = \n\
    \    (a + b + c < 3l*3l) ? false :\n    (a + c < b + c) ? false :\n    (b + c\
    \ < a + b) ? false :\n    (a + b + c < 3l*3l) ? true :\n    false\n}\n</code>\n\
    <|/ a |>\n<| a |>\nThis is one way to solve the problem:\n<code>\ndef rightAngleTriangle(side1:\
    \ Long, side2: Long, side3: Long) = {\n  val xs = List(side1, side2, side3)\n\
    \  val ys = List(1, side1, side3)\n  val xs2 = List(1, side2, side3)\n  val ys2:\
    \ List = (side1, side3, side2)\n  val xs3: List = (side1, side3, side2)\n  val\
    \ ys3: List = (side1, side2, side3)\n  val xs = xs.foldLeft((xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs))((xs, x, y) => x.zip(y).foldLeft((xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs))((xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs))((xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs, xs,\
    \ xs, xs, xs, xs, xs, \n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpkqtsmauq.scala:29:0 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpkqtsmauq.scala:35:28\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m35 |\e[0m    (a +\
    \ c < b + c) ? \e[31mfalse\e[0m :\n\e[31m\e[31m   |\e[0m                     \
    \       ^\e[0m\n\e[31m   |\e[0m                            end of statement expected\
    \ but ':' found\n\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpkqtsmauq.scala:40:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m40 |\e[0m</code>\n\e[31m\e[31m\
    \   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal start of toplevel definition\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkqtsmauq.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkqtsmauq.scala:68:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m}\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0meof expected, but '}' found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkqtsmauq.scala:32:0 ----------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m\e[33mobject\e[0m \e[35mProblem\e[0m{\n\e[31m\e[31m   |\e[0m^\e[0m\n\
    \e[31m   |\e[0mProblem is already defined as \e[33mobject\e[0m \e[35mProblem\e\
    [0m in /tmp/tmpkqtsmauq.scala\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkqtsmauq.scala:35:20\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m    (a + c < b + c) ? \e\
    [31mfalse\e[0m :\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e\
    [0m                    Not found: type ?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpkqtsmauq.scala:34:24 ------------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m    (a + b + c < \e[31m3l\e[0m*\e[31m3l\e[0m) ? \e[31mfalse\e\
    [0m :\n\e[31m\e[31m   |\e[0m    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e"
  stdout: ''
  timestamp: 1659979426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val\
    \ c1 = math.abs(c)\n        val d1 = math.max(a1, b1, c1)\n        val d2 = math.min(a1,\
    \ b1, c1)\n        math.abs(b1 - c1) < math.abs(d2 - d1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpo7otuql9.scala:17:22 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36md1\e[0m = math.max(a1, b1,\
    \ c1)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((a1 : Long), (b1 : Long), (c1 : Long))\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmpo7otuql9.scala:18:22 -----------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36md2\e[0m = math.min(a1, b1, c1)\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((a1 : Long), (b1 : Long), (c1 : Long))\n2 errors found\n"
  stdout: ''
  timestamp: 1659979421
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val a1 = a.toDouble\n        val b1 = b.toDouble\n        val c1\
    \ = c.toDouble\n        val length = a1 * b1 - a1 * c1 + b1 * c1;\n        if(length\
    \ == 0){\n            true\n        }else {\n            val sq1 = Math.pow(length,\
    \ 0.5);\n            val sq2 = Math.pow(length, 2.0);\n            if(sq1 == sq2){\n\
    \                true\n            }else {\n                false\n          \
    \  }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpre0w0yds.scala:31)\n\tat Problem.main(tmpre0w0yds.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979423
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var c1 = a*a + b*b\n        var c2 = c*c\n        var d = c1 +\
    \ c2\n        return ((d > 0) || (d == 0) || (a == b*c/d))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnvplpaqw.scala:21)\n\tat Problem.main(tmpnvplpaqw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Define the sum\n        val sum = a + b + c\n        \n    \
    \    // Define the difference\n        val difference = a * b - c\n        \n\
    \        // If the sum of differences equals to zero, all three sides are equal\n\
    \        if (sum == 0) true\n        else (difference > 0) && (difference < 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ctt21rd.scala:25)\n\tat Problem.main(tmp5ctt21rd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var a = a\n        var b = b\n        var c = c\n        var x\
    \ = 0l\n        var y = 0l\n        var d = 0l\n        var n = 0l\n        var\
    \ isRight = true // assume right angle\n        var isOdd = false\n\n        //\
    \ Check if the three sides form a right angled triangle\n        if (a > b &&\
    \ a > c) { \n            x = a\n            isRight = false\n        } else if\
    \ (b > a && b > c) {\n            x = b\n            isRight = true\n        }\
    \ else if (c > a && c > b) {\n            x = c\n            isRight = false\n\
    \        }\n\n        // Calculate the distance of each point\n        if (x !=\
    \ 0l) {\n            d = x - a\n        } else {\n            d = a - x\n    \
    \    }\n\n        if (d < 0l) {\n            isOdd = true\n            n = 1l\n\
    \            while (d > 0l && d < 0l) {\n                n += 1l\n           \
    \     d /= 2l\n            }\n            while (d < 0l && d > 0l) {\n       \
    \         n -= 1l\n                d *= 2l\n            }\n        }\n\n     \
    \   // Check if the two vertices forms a right angle\n        if (a > x && a >\
    \ b) { \n            y = a\n            isRight = false\n        } else if (b\
    \ > x && b > c) {\n            y = b\n            isRight = true\n        } else\
    \ if (c > x && c > b) {\n            y = c\n            isRight = false\n    \
    \    }\n\n        // Calculate the angle between the two edges\n        if (y\
    \ != 0l) {\n            x = y - n * (x / d)\n        } else {\n            x =\
    \ n * (y / d)\n        }\n\n        // Check if the angle is greater than 90 degree\n\
    \        if (abs(x) > 90) {\n            isOdd = true\n        }\n\n        if\
    \ (isOdd && isRight) {\n            return true\n        } else {\n          \
    \  return false\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphf4tc0t8.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36ma\e[0m = a\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmphf4tc0t8.scala:15:16 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mb\e[0m = b\n\e[31m\e[31m   |\e\
    [0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvariable\e\
    [0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmphf4tc0t8.scala:16:16 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mvar\e[0m \e[36mc\e[0m = c\n\e[31m\e[31m   |\e[0m       \
    \         ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvariable\e[0m\
    \ \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if(a >= 0 && b >= 0 && c >= 0){\n            a <= b+c && a+c <=\
    \ b\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkx1n666j.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m(a >= \e\
    [31m0\e[0m && b >= \e[31m0\e[0m && c >= \e[31m0\e[0m){\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m      \
    \  Required: Boolean\n\e[31m   |\e[0m        Maybe you are missing an else part\
    \ for the conditional?\n\e[31m15 |\e[0m            a <= b+c && a+c <= b\n\e[31m16\
    \ |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979421
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val s1 = a/2\n        val s2 = b/2 - s1\n        val s3 = c/2 -\
    \ s2\n\n        // Check if (s1,s2,s3) is a right angled triangle\n        if\
    \ (math.abs(math.pow(s1,2) + math.pow(s2,2) - math.pow(s3,2)) < math.pow(10,-10))\
    \ {\n            // If so, then return True\n            return true\n       \
    \ }\n        else {\n            // Else return False\n            return false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1fxvp6q4.scala:29)\n\tat Problem.main(tmp1fxvp6q4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Code here\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp64yhlvfp.scala:13:69\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mrightAngleTriangle\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m, \e[36mb\e[0m : \e[35mLong\e[0m, \e[36mc\e\
    [0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                       Found:    Unit\n\
    \e[31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m14 |\e[0m        \e[34m// Code here\e[0m\n\e[31m15 |\e[0m   \
    \ }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val a1 = a - b\n        val b1 = c - b\n        val c1 = c - a\n\
    \        val a2 = a - c1\n        val b2 = c - b2\n        val c2 = c - a2\n \
    \       val a3 = a - c2\n        val b3 = c - a3\n        val c3 = c - a3\n  \
    \      (a1 < 0) || (a2 < 0) || (a3 < 0) || (b1 < 0) || (b2 < 0) || (b3 < 0) ||\
    \ (c1 < 0) || (c2 < 0) || (c3 < 0) || (a1 + b1 + c1 > 0) || (a2 + b2 + c2 > 0)\
    \ || (a3 + b3 + c3 > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxiq9ibvp.scala:18:21 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mb2\e[0m = c - b2\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ Recursive \e[33mvalue\e[0m \e[35mb2\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a == 0) return false\n        if (b == 0) return false\n  \
    \      if (c == 0) return false\n        if (a < b) if (a < c) if (b < c) return\
    \ true\n        else return false\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpga1hnxt6.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m (a < b)\
    \ \e[33mif\e[0m (a < c) \e[33mif\e[0m (b < c) \e[33mreturn\e[0m \e[31mtrue\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e\
    [31m   |\e[0m        Required: Boolean\n\e[31m   |\e[0m        Maybe you are missing\
    \ an else part for the conditional?\n\e[31m18 |\e[0m        \e[33melse\e[0m \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var l1 = scala.math.abs(a)\n        var l2 = scala.math.abs(b)\n\
    \        var l3 = scala.math.abs(c)\n        var sq1 = (l1*(l1+1)) / 2\n     \
    \   var sq2 = (l2*(l2+1)) / 2\n        var sq3 = (l3*(l3+1)) / 2\n\n        var\
    \ a1 = ((sq1-l1)*(sq2-l2)-(sq1-l2)*sq3) / sq3\n        var b1 = ((sq2-l1)*(sq3-l3)-(sq2-l3)*sq1)\
    \ / sq1\n        var c1 = ((sq3-l1)*(sq1-l1)-(sq3-l1)*sq2) / sq2\n        var\
    \ d1 = ((sq1-l1)*(sq2-l2)-(sq1-l2)*sq3) / sq3\n\n        var isRightAngle = (a1<a2)\
    \ && (b1<b2) && (c1<d2) && ((a1>0) && (a2>0) && (b1>0) && (b2>0) && (c1>0) &&\
    \ (c2>0))\n        return isRightAngle\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3rpsdlbv.scala:26:31 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36misRightAngle\e[0m = (a1<a2)\
    \ && (b1<b2) && (c1<d2) && ((a1>\e[31m0\e[0m) && (a2>\e[31m0\e[0m) && (b1>\e[31m0\e\
    [0m) && (b2>\e[31m0\e[0m) && (c1>\e[31m0\e[0m) && (c2>\e[31m0\e[0m))\n\e[31m\e\
    [31m   |\e[0m                               ^^\e[0m\n\e[31m   |\e[0m         \
    \                      Not found: a2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Two possibilities : two sides are the same length or two sides\
    \ are different\n        // lengths\n        // Two possible outcomes:\n     \
    \   // - both sides are equal\n        // - at least one of the sides are different\n\
    \        if (a == b || b == c) true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplqx8go8s.scala:23)\n\tat Problem.main(tmplqx8go8s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val a = (a.toDouble / 3l).toInt\n        val b = (b.toDouble /\
    \ 3l).toInt\n        val c = (c.toDouble / 3l).toInt\n        if (a + b > c &&\
    \ a + c > b) true\n        else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo2b_2wl2.scala:14:17 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = (a.toDouble / \e\
    [31m3l\e[0m).toInt\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e\
    [0m                 Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo2b_2wl2.scala:15:17 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = (b.toDouble / \e\
    [31m3l\e[0m).toInt\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e\
    [0m                 Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo2b_2wl2.scala:16:17 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = (c.toDouble / \e\
    [31m3l\e[0m).toInt\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e\
    [0m                 Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a + b + c < 3) {\n            return false\n        }\n\n \
    \       if (a == b || a == c) {\n            return true\n        }\n\n      \
    \  var aa : Long = 0\n        var bb : Long = 0\n        var cc : Long = 0\n\n\
    \        var aa : Long = 0\n        var bb : Long = 0\n        var cc : Long =\
    \ 0\n\n        var aa : Long = 0\n        var bb : Long = 0\n        var cc :\
    \ Long = 0\n\n        var aa : Long = 0\n        var bb : Long = 0\n        var\
    \ cc : Long = 0\n\n        for (i<- a until b ) {\n            aa = aa + a\n \
    \       }\n        for (i<- a until c ) {\n            bb = bb + b\n        }\n\
    \        for (i<- b until c ) {\n            cc = cc + c\n        }\n\n      \
    \  if (aa == bb || aa == cc || bb == cc) {\n            return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqaaesjpo.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36maa\e[0m : \e[35mLong\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0maa is already defined as \e[33mvariable\e[0m \e[35maa\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqaaesjpo.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mvar\e[0m \e[36mbb\e[0m : \e[35mLong\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbb is already\
    \ defined as \e[33mvariable\e[0m \e[35mbb\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqaaesjpo.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcc\e[0m : \e[35mLong\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcc is already defined as \e[33mvariable\e\
    [0m \e[35mcc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpqaaesjpo.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m \e[36maa\e[0m : \e[35mLong\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0maa is already defined as \e[33mvariable\e[0m \e[35maa\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqaaesjpo.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mvar\e[0m \e[36mbb\e[0m : \e[35mLong\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbb is already\
    \ defined as \e[33mvariable\e[0m \e[35mbb\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[3"
  stdout: ''
  timestamp: 1659979421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var a : Long = a\n        var b : Long = b\n        var c : Long\
    \ = c\n        var right : Boolean = false\n        var angle = 0\n        while\
    \ (a<b && a < c) {\n            b = b + 1\n            a = a + 1\n        }\n\
    \        while (b<c && b < a) {\n            c = c + 1\n            b = b + 1\n\
    \        }\n        angle = math.atan2(b,c)\n        if ((angle > 0 && angle <\
    \ math.pi/2)  || (angle < 0 && angle > math.pi/2)) {\n            right=true\n\
    \        }\n        if (right) {\n            return true\n        }\n       \
    \ return false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3tr068me.scala:27:26\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        angle = math.atan2(b,c)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \             Found:    Double\n\e[31m   |\e[0m                Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3tr068me.scala:28:39\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m ((angle\
    \ > \e[31m0\e[0m && angle < math.pi/\e[31m2\e[0m)  || (angle < \e[31m0\e[0m &&\
    \ angle > math.pi/\e[31m2\e[0m)) {\n\e[31m\e[31m   |\e[0m                    \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \ value pi is not a member of math\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3tr068me.scala:28:76\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m ((angle\
    \ > \e[31m0\e[0m && angle < math.pi/\e[31m2\e[0m)  || (angle < \e[31m0\e[0m &&\
    \ angle > math.pi/\e[31m2\e[0m)) {\n\e[31m\e[31m   |\e[0m                    \
    \                                                   ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                        value pi is not a member of math\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979423
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        ((a - b) < (a - c) && (b - c) < c) || ((a - b) > (a - c) && (b\
    \ - c) > c)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4t_4wvm8.scala:17)\n\tat Problem.main(tmp4t_4wvm8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if((a.toDouble * a.toDouble + b.toDouble * b.toDouble + c.toDouble\
    \ * c.toDouble <= 0l))\n            (true) \n        else\n            (false)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpysean3li.scala:20)\n\tat Problem.main(tmpysean3li.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        Math.abs(a-b) <= Math.abs(c-b) && Math.abs(a-c) <= Math.abs(b-c)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz5qs_rwq.scala:17)\n\tat Problem.main(tmpz5qs_rwq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979429
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var d = (math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)) * math.sqrt(Math.pow(c,\
    \ 2)))\n        if((d / a) * (d / b) < 0.0)\n            return true\n       \
    \ else\n            return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplgugexbn.scala:21)\n\tat Problem.main(tmplgugexbn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val a2 = a*a\n        val b2 = b*b\n        val c2 = c*c\n    \
    \    (a2+b2+c2 > a2+b2+c2) && (b2+c2+a2 > b2+c2+a2) &&\n               (c2+a2+b2\
    \ > c2+a2+b2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_lyagfyp.scala:21)\n\tat Problem.main(tmp_lyagfyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val a = math.abs(a).toInt\n        val b = math.abs(b).toInt\n\
    \        val c = math.abs(c).toInt\n        if(a==b || b==c || c==a) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgngmkqve.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a).toInt\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgngmkqve.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b).toInt\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgngmkqve.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c).toInt\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        def degree(x : Long) : Long = {\n            val temp = x / 180.0\
    \ * Math.PI\n            if (temp >= 0 && temp <= 90) {\n                return\
    \ temp\n            } else if (temp > 90 && temp <= 180) {\n                return\
    \ (temp - 90)\n            } else if (temp > 180 && temp <= 270) {\n         \
    \       return 180\n            } else {\n                return 270\n       \
    \     }\n        }\n        val temp1 = degree(a) - degree(b)\n        val temp2\
    \ = degree(b) - degree(c)\n        val temp3 = degree(a) - degree(c)\n       \
    \ if (temp1 == 0) {\n            if (temp2 == 0) {\n                if (temp3\
    \ == 0)\n                    return true\n                else\n             \
    \       return false\n            } else {\n                return false\n   \
    \         }\n        } else {\n            if (temp2 != 0 && temp3 != 0)\n   \
    \             return true\n            else\n                return false\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpse4pyn5g.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                \e[33mreturn\e\
    [0m temp\n\e[31m\e[31m   |\e[0m                       ^^^^\e[0m\n\e[31m   |\e\
    [0m                       Found:    (temp : Double)\n\e[31m   |\e[0m         \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpse4pyn5g.scala:19:24 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m                \e[33mreturn\e[0m (temp - \e[31m90\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \            Found:    Double\n\e[31m   |\e[0m                        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n       val a1 = a*a;\n       val b1 = b*b;\n       val c1 = c*c;\n    \
    \   val ab = a1 + b1;\n       val ac = a1 + c1;\n       val bc = b1 + c1;\n  \
    \     val bd = b1 + a1;\n       val acd = ac + bc;\n       val bda = bd + acd;\n\
    \       if(a1 == 0 && b1 == 0 && c1 == 0 && ab == ac && bd == acd && bda == a1)\n\
    \       {\n          return true;\n       }\n       else if(a1 == 0 && b1 == 0\
    \ && c1 == 0 && ab == ac && bd == acd && bda != a1)\n       {\n          return\
    \ false;\n       }\n       else if(a1 != 0 && b1 != 0 && c1 != 0 && ab != ac &&\
    \ bd != acd && bda != a1)\n       {\n          return false;\n       }\n     \
    \  return true;\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6_a70mso.scala:38)\n\tat Problem.main(tmp6_a70mso.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if(a>0 && b>0 && c>0) {\n            if((a-b)*(2*a-b+c-b) == (a+b)*(2*a-b+c-b))\
    \ {\n                if(a*(b+c-a) == (b+c)*(2*a-b)) {\n                    if(b*(b+c-b)\
    \ == a*(a+b)) {\n                        if((a-b)*(b+c-a) == (a-b)*(a+b)) {\n\
    \                            if((a+b)*(b+c-b) == a*(a+b)) {\n                \
    \                return true\n                            }\n                \
    \        }\n                    }\n                }\n            }\n        }\n\
    \        false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2de3_xlf.scala:30)\n\tat Problem.main(tmp2de3_xlf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val a1 = (a + b) / 2.0\n        val a2 = (a + c) / 2.0\n      \
    \  val b1 = (b + c) / 2.0\n        val b2 = (a1 + b2) / 2.0\n        val c1 =\
    \ (a2 + b2)/2.0\n        val c2 = (a1 + c2)/2.0\n        val d1 = (c + b2)/2.0\n\
    \        val d2 = (a + d1)/2.0\n        val e1 = (b + c1)/2.0\n        val e2\
    \ = (c + a1)/2.0\n        val f1 = (c + b1)/2.0\n        val f2 = (b + e1)/2.0\n\
    \        return ((a1 - b2) < a2 < b2) && ((a1 - c2) < a2 < c2) && ((b1 - d2) <\
    \ b2 < c2) && ((b1 - e2) < b2 < c2) && ((c1 - f2) < c2 < f2) && ((c1 - e2) < c2\
    \ < e2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwxe_u1uw.scala:17:23 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mb2\e[0m = (a1 + b2) / \e\
    [31m2.0\e[0m\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e\
    [0m                       Recursive \e[33mvalue\e[0m \e[35mb2\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwxe_u1uw.scala:19:23\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc2\e[0m = (a1 + c2)/\e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m            \
    \           ^\e[0m\n\e[31m   |\e[0m                       Recursive \e[33mvalue\e\
    [0m \e[35mc2\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ab = c * b\n        val ac = a * a\n        val ad = a * c\n\
    \        val ae = a * b\n        val bc = b * b\n        val bd = b * a\n    \
    \    val be = b * c\n        val bf = b * b\n        val acac = ac * ac\n    \
    \    val acad = ac * ad\n        val acae = ac * ae\n        val adad = ad * ad\n\
    \        val adead = ad * ae\n        val adee = ad * ae\n        val aede = ae\
    \ * ae\n        val aefb = ae * ef\n        val baad = ba * ad\n        val baac\
    \ = ba * ac\n        val bbac = bc * bc\n        val babd = bd * bd\n        val\
    \ baef = be * bf\n        val bbacde = bcade * bcade\n        val bbacef = bcaef\
    \ * bcaef\n        val babde = bade * bdead\n        val bbade = bade * bdead\n\
    \        val baede = bade * bdee \n        val bafb = bae * bf\n        val bcac\
    \ = bca * ac\n        val bcbc = bcb * bc\n        val cbad = bd * ac\n      \
    \  val cbac = bc * ac\n        val cbba = cb * ba\n        val cbbae = cb * bae\n\
    \        val cbcba = cbc * ba\n        val cbcab = bcab * cab\n        val cbcbae\
    \ = cbcba * bae\n        val cbccade = bcade*cbcade\n        val cbcad = cbc*cbad\n\
    \        val cbcaef = cbc*caef\n        val cbcde = cbc*de\n        val cbde =\
    \ cbc*de\n        val cabc = cab * ca\n        val cbae = cba * ae\n        val\
    \ cbaef = cba * ae\n        val cbaede = cba * aede\n        val cbaefb = cba\
    \ * aefb\n        val cbbaef = cbba * bef\n        val cbcabde = cbcab * cde\n\
    \        val cbcabef = cbcab * cef\n        val cbcabefb = cbcab * cefb\n    \
    \    val cbcbaefb = cbcba * befb\n        val cbcbe = cbc*be\n        val cbe\
    \ = cbc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpce6ez8h4.scala:29:24 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36maefb\e[0m = ae * ef\n\e\
    [31m\e[31m   |\e[0m                        ^^\e[0m\n\e[31m   |\e[0m          \
    \              Not found: ef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpce6ez8h4.scala:30:19 ------------------------\e[0m\e[0m\n\e[31m30 |\e\
    [0m        \e[33mval\e[0m \e[36mbaad\e[0m = ba * ad\n\e[31m\e[31m   |\e[0m   \
    \                ^^\e[0m\n\e[31m   |\e[0m                   Not found: ba\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpce6ez8h4.scala:31:19\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mbaac\e[0m = ba * ac\n\e[31m\e[31m   |\e[0m                   ^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: ba\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpce6ez8h4.scala:35:21 ------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mbbacde\e[0m = bcade * bcade\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \             Not found: bcade\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpce6ez8h4.scala:36:21 ------------------------\e[0m\e[0m\n\e[31m36 |\e\
    [0m        \e[33mval\e[0m \e[36mbbacef\e[0m = bcaef * bcaef\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ bcaef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpce6ez8h4.scala:37:20\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e\
    [36mbabde\e[0m = bade * bdead\n\e[31m\e[31m   |\e[0m                    ^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: bade\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compil"
  stdout: ''
  timestamp: 1659979430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val d0 = a - b\n        val d1 = c - b\n        val d2 = c - a\n\
    \        val d3 = a - c\n        d0 * (d1 * (d2 - d3)) > (d0 * (d2 * (d3 - d1))\
    \ + (d1 * d3))\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe9tq7vn9.scala:21)\n\tat Problem.main(tmpe9tq7vn9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979432
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n      val s1 = a - b\n      val s2 = c - b\n      val s3 = a - c\n\n  \
    \    if (s1*s2 < 0)\n         true\n      else\n         if (s1*s3 > 0)\n    \
    \        true\n         else\n            if (s2*s3 < 0)\n               true\n\
    \            else\n               false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmmmtpjax.scala:31)\n\tat Problem.main(tmpmmmtpjax.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979432
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ab = a*b\n        val ac = a*c\n        val bc = b*c\n    \
    \    val sqrtAab = math.sqrt(ab)\n        val sqrtAc = math.sqrt(ac)\n       \
    \ val sqrtBc = math.sqrt(bc)\n        sqrtAab.abs <= sqrtAc.abs && sqrtAab.abs\
    \ <= sqrtBc.abs \n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpss5j7275.scala:24)\n\tat Problem.main(tmpss5j7275.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if ( (math.abs(a - b) > math.abs(a - c)) || (math.abs(b - c) >\
    \ math.abs(a - c)) )\n            false\n        else\n            if (math.abs(a)\
    \ == math.abs(b) || math.abs(b) == math.abs(c))\n                true\n      \
    \      else\n                if (math.abs(a - b) > math.abs(b - c))\n        \
    \            true\n                else\n                    false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpun2owbv8.scala:26)\n\tat Problem.main(tmpun2owbv8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979432
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if(Math.pow(a, b) + Math.pow(c, c) > (Math.pow(a, a) + Math.pow(b,\
    \ b))) {\n            false\n        } else if(Math.pow(a, b) + Math.pow(c, c)\n\
    \                > (Math.pow(a+b, a) + Math.pow(b+c, b) + Math.pow(c+a, c) + Math.pow(a+b,\
    \ a+b))) {\n            true\n        } else if(Math.pow(a, b) + Math.pow(c, c)\n\
    \                > (Math.pow(a+b, a) + Math.pow(b+c, b) + Math.pow(c+a, c) + Math.pow(a+b,\
    \ a+b))) {\n            true\n        } else if(Math.pow(a, a) + Math.pow(b, b)\
    \ \n                > (Math.pow(a+b, a) + Math.pow(b+c, b) + Math.pow(c+a, c)\
    \ + Math.pow(a+b, a+b))) {\n            true\n        } else if(Math.pow(a, a)\
    \ + Math.pow(b, b) \n                > (Math.pow(a+b, a) + Math.pow(b+c, b) +\
    \ Math.pow(c+a, c) + Math.pow(a+b, a+b))) {\n            true\n        } else\
    \ {\n            false\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj3rrhumu.scala:33)\n\tat Problem.main(tmpj3rrhumu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val aIsLeft = a * b - c * a >= 0\n        val bIsLeft = b * c -\
    \ a * b >= 0\n        val cIsLeft = c * a - b * c >= 0\n        aIsLeft && bIsLeft\
    \ && cIsLeft\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo2f7kb9n.scala:20)\n\tat Problem.main(tmpo2f7kb9n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979432
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if ((a*a + b*b == c*c) && (a < b) && (b < c))\n            return\
    \ true\n        else \n            return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptuoxai9d.scala:22)\n\tat Problem.main(tmptuoxai9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val x1 = (a + b) / 2.0\n        val y1 = (c + b) / 2.0\n      \
    \  val x2 = (c + a) / 2.0\n        val y2 = (a + c) / 2.0\n        val dx = b\
    \ - a\n        val dy = c - a\n        val x3 = x1 + dx\n        val y3 = y1 +\
    \ dy\n        val x4 = x2 + dx\n        val y4 = y2 + dy\n        (x3 > x4) &&\
    \ (x3 < x4) && (y3 > y4) && (y3 < y4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr_e1jqpe.scala:27)\n\tat Problem.main(tmpr_e1jqpe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var aLength : Int = a\n        var bLength : Int = b\n        var\
    \ cLength : Int = c\n        while (bLength > 0) {\n            if (aLength ==\
    \ bLength && aLength == cLength) {\n                return true\n            }\n\
    \            aLength -= 1\n            bLength -= 1\n            cLength -= 1\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcqx8q0fa.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36maLength\e\
    [0m : \e[35mInt\e[0m = a\n\e[31m\e[31m   |\e[0m                            ^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (a : Long)\n\e[31m \
    \  |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpcqx8q0fa.scala:15:28 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mbLength\e[0m : \e[35mInt\e\
    [0m = b\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e\
    [0m                            Found:    (b : Long)\n\e[31m   |\e[0m         \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcqx8q0fa.scala:16:28 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcLength\e[0m : \e[35mInt\e[0m = c\n\e[31m\e\
    [31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m             \
    \               Found:    (c : Long)\n\e[31m   |\e[0m                        \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        (a > b) && (a > c) && (b > c)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn4khoiug.scala:17)\n\tat Problem.main(tmpn4khoiug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if(b == 0 || c == 0)\n            return true\n        // if the\
    \ right side of the triangle is longer than the left\n        // side, it's a\
    \ right angle triangle\n        if(a > b)\n            return ((a % b) == (c %\
    \ a))\n        // if the left side of the triangle is longer than the right side,\n\
    \        // it's a right angle triangle\n        if(b > c)\n            return\
    \ ((b % c) == (a % b))\n        // if both sides of the triangle are equal\n \
    \       // it's a right angle triangle\n        return ((a % b) == (c % b))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0l24722w.scala:29)\n\tat Problem.main(tmp0l24722w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var a1 : Int = a / 3;\n        var b1 : Int = b / 3;\n        var\
    \ c1 : Int = c / 3;\n        var d1 = Math.abs(b1 - c1);\n        var d2 = Math.abs(a1\
    \ - b1);\n        var d3 = Math.abs(a1 - c1);\n        var d4 = Math.abs(b1 -\
    \ a1);\n        if((d1 < d2 && d1 < d3) && (d1 < d4))\n        {\n           \
    \ true\n        }\n        else\n        {\n            false\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps9r87q2j.scala:14:23\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36ma1\e\
    [0m : \e[35mInt\e[0m = a / \e[31m3\e[0m;\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e\
    [31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmps9r87q2j.scala:15:23 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mb1\e[0m : \e[35mInt\e[0m\
    \ = b / \e[31m3\e[0m;\n\e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Found:    Long\n\e[31m   |\e[0m        \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps9r87q2j.scala:16:23 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mvar\e[0m \e[36mc1\e[0m : \e[35mInt\e[0m = c / \e[31m3\e\
    [0m;\n\e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        (a + b > c) && (a + c > b) && (b + c > a)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp32fqzytg.scala:20)\n\tat Problem.main(tmp32fqzytg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a,b,c)\n        // Get the side with the smallest\
    \ length\n        val smallest = sides.min\n        val temp = smallest\n    \
    \    val temp = temp / temp\n        // Get the angle\n        val angle = smallest*90\n\
    \        // If angle = 90 degree\n        if (angle == 90){\n            return\
    \ true\n        }\n        // If one of the sides is 90 degree\n        if (sides.contains(90)){\n\
    \            return true\n        }\n        // If one of the sides is right angle\n\
    \        if (sides.contains(temp)){\n            return true\n        }\n    \
    \    return false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpntbmfyzi.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mtemp\e[0m = temp / temp\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mtemp\
    \ is already defined as \e[33mvalue\e[0m \e[35mtemp\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659979434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        def angleToOrigin(x : Long, y : Long, z : Long, origin : Long)\
    \ : Long = {\n            val xDot = x - origin\n            val yDot = y - origin\n\
    \            val zDot = z - origin\n            math.atan2(yDot, xDot)\n     \
    \   }\n        def angleToTriangle(x :Long, y :Long, z :Long, a :Long, b :Long,\
    \ c :Long) : Long = {\n            val ox = angleToOrigin(x, y, z, a)\n      \
    \      val oy = angleToOrigin(x, y, z, c)\n            val oz = angleToOrigin(x,\
    \ y, z, b)\n            math.acos(math.sin(ox) * (math.cos(oy) - math.sin(oz))\
    \ + (math.sin(ox) * math.sin(oy) * math.cos(oz) - math.cos(ox) * math.cos(oz)\
    \ * math.tan(oy)));\n        }\n        (angleToTriangle(a, b, c, a, c, b) ==\
    \ angleToTriangle(b, a, c, a, c, b)) || (angleToTriangle(a, b, c, b, a, c) ==\
    \ angleToTriangle(c, a, b, a, b, c));\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx1s7jdtk.scala:18:22\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            math.atan2(yDot,\
    \ xDot)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    Double\n\e[31m   |\e[0m            Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx1s7jdtk.scala:24:21\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            math.acos(math.sin(ox)\
    \ * (math.cos(oy) - math.sin(oz)) + (math.sin(ox) * math.sin(oy) * math.cos(oz)\
    \ - math.cos(ox) * math.cos(oz) * math.tan(oy)));\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Double\n\e[31m   |\e[0m            Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        def getDiagonal(a: Long, b: Long, c : Long) = scala.math.sqrt(b\
    \ * b - 4 * a * c)\n        def getAngle(a: Long, b: Long, c : Long) = scala.math.atan2(b,c)\
    \ / (2 * a)\n        def getAngleDiff(a: Long, b: Long, c : Long) = scala.math.abs(scala.math.degrees(getAngle(a,b,c))\
    \ - scala.math.degrees(getAngle(b, c, a)))\n        getAngleDiff(a,b,c) >= 0 &&\
    \  getAngleDiff(b,c,a) >= 0 &&\n        getAngleDiff(c,a,b) >= 0 &&  getAngleDiff(a,c,b)\
    \ >= 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfb_v9gxk.scala:16:81 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mdef\e[0m \e[36mgetAngleDiff\e[0m(\e[36ma\e\
    [0m: \e[35mLong\e[0m, \e[36mb\e[0m: \e[35mLong\e[0m, \e[36mc\e[0m : \e[35mLong\e\
    [0m) = scala.math.abs(scala.math.degrees(getAngle(a,b,c)) - scala.math.degrees(getAngle(b,\
    \ c, a)))\n\e[31m\e[31m   |\e[0m                                             \
    \                         ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                        value degrees is not a member of math\n1 error found\n"
  stdout: ''
  timestamp: 1659979438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val x1 = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))\n        val\
    \ x2 = Math.sqrt(Math.pow(a, 2) + Math.pow(c, 2))\n        val x3 = Math.sqrt(Math.pow(b,\
    \ 2) + Math.pow(c, 2))\n        val a1 = Math.abs(a / x1)\n        val a2 = Math.abs(b\
    \ / x2)\n        val a3 = Math.abs(c / x3)\n        (a1 * a2 == a3) && (a1 * a3\
    \ == b2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzamgnazt.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        (a1 * a2 == a3) && (a1 * a3 == b2)\n\e[31m\e\
    [31m   |\e[0m                                       ^^\e[0m\n\e[31m   |\e[0m \
    \                                      Not found: b2\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979436
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (math.abs(a - (b + c)) > math.abs(a - (c + b)))\n          \
    \  return true\n        else\n            return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5vaj_m46.scala:20)\n\tat Problem.main(tmp5vaj_m46.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979438
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        Math.abs(a - b) < Math.abs(a - c) && Math.abs(b - c) < Math.abs(b\
    \ - a)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph_fq7faq.scala:17)\n\tat Problem.main(tmph_fq7faq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ab = b - a\n        val ac = c - a\n        val bc = (-b) +\
    \ a\n        (ab * ac > 0 && ab * bc > 0 && ac * bc == 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgekq3w38.scala:20)\n\tat Problem.main(tmpgekq3w38.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var sides = List(a, b, c)\n        var side1 = sides.filter(_ <\
    \ 0).foldLeft(0)((x, y) => x + y)\n        var side2 = sides.filter(_ > 0).foldLeft(0)((x,\
    \ y) => x + y)\n        var side3 = sides.filter(_ == 0).foldLeft(0)((x, y) =>\
    \ x + y)\n        return (side1 + side2 > side3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn5ts8mka.scala:15:62\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mside1\e\
    [0m = sides.filter(_ < \e[31m0\e[0m).foldLeft(\e[31m0\e[0m)((\e[36mx\e[0m, \e\
    [36my\e[0m) => x + y)\n\e[31m\e[31m   |\e[0m                                 \
    \                             ^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                                      Found:    Long\n\e[31m   |\e[0m       \
    \                                                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn5ts8mka.scala:16:62 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mside2\e[0m = sides.filter(_\
    \ > \e[31m0\e[0m).foldLeft(\e[31m0\e[0m)((\e[36mx\e[0m, \e[36my\e[0m) => x + y)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                                           \
    \               Found:    Long\n\e[31m   |\e[0m                              \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpn5ts8mka.scala:17:63 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mside3\e[0m = sides.filter(_ ==\
    \ \e[31m0\e[0m).foldLeft(\e[31m0\e[0m)((\e[36mx\e[0m, \e[36my\e[0m) => x + y)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \                Found:    Long\n\e[31m   |\e[0m                             \
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val side1 = a.toDouble\n        val side2 = b.toDouble\n      \
    \  val side3 = c.toDouble\n        // check which one is greater \n        val\
    \ max = (math.max(side1, side2), math.max(side2, side3))\n        val min = (math.min(side1,\
    \ side2), math.min(side2, side3))\n        // check whether they are equal \n\
    \        (min == max) \n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpakcra5te.scala:24)\n\tat Problem.main(tmpakcra5te.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n      val ab = math.abs(a - b)\n      val ac = math.abs(c - a)\n      val\
    \ bc = math.abs(c - b)\n      if (ab > ac && ab > bc) {\n        true\n      }\
    \ else {\n        false\n      }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp99e7gjqw.scala:24)\n\tat Problem.main(tmp99e7gjqw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // base case\n        if ((a+b)+(c+b) > 4l) {\n            false\n\
    \        }\n        else{\n            val l = (a+b+c)/2\n            val m =\
    \ (a*b*c)/l\n            val theta = (math.atan2(m, l) + math.pi/2 - math.pi/2)\
    \ % (math.pi/2)\n            if (Math.abs(theta - math.pi/2) < 1e-10 && Math.abs(theta\
    \ - math.pi/4) < 1e-10 && Math.abs(theta - 3*math.pi/4) < 1e-10){\n          \
    \      true\n            }\n            else {\n                false\n      \
    \      }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4rpfhuih.scala:21:49 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mtheta\e[0m = (math.atan2(m,\
    \ l) + math.pi/\e[31m2\e[0m - math.pi/\e[31m2\e[0m) % (math.pi/\e[31m2\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value pi is not a member\
    \ of math\n1 error found\n"
  stdout: ''
  timestamp: 1659979441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val side1 = sqrt(math.pow(a, 2) + math.pow(b, 2))\n        val\
    \ side2 = sqrt(math.pow(c, 2) + math.pow(d, 2))\n        math.abs(side1 - side2)\
    \ > math.abs(side1 - side2)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq6wlt60f.scala:15:51 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = sqrt(math.pow(c,\
    \ \e[31m2\e[0m) + math.pow(d, \e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                                       Not found: d\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if(a>0 && b>0 && c>0)\n        {\n            val delta = b * b\
    \ - 4 * a * c;\n            if(delta < 0)\n            {\n                return\
    \ false;\n            }\n            val x1 = (-b + Math.sqrt(delta)) / (2 * a);\n\
    \            val x2 = (-b - Math.sqrt(delta)) / (2 * a);\n            val y1 =\
    \ ((-1) * b + Math.sqrt(delta)) / (2 * a);\n            val y2 = ((-1) * b - Math.sqrt(delta))\
    \ / (2 * a);\n            val xMin = x1 > x2 ? x1 : x2;\n            val xMax\
    \ = x1 < x2 ? x1 : x2;\n            val yMin = y1 > y2 ? y1 : y2;\n          \
    \  val yMax = y1 < y2 ? y1 : y2;\n            if(xMin < c && xMax > c && yMin\
    \ > c && yMax > c)\n            {\n                return true;\n            }\n\
    \        }\n        return false;\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8d32ezxz.scala:25:38 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mxMin\e[0m = x1 > x2\
    \ ? x1 : \e[35mx2\e[0m;\n\e[31m\e[31m   |\e[0m                               \
    \       ^^\e[0m\n\e[31m   |\e[0m                                      Not found:\
    \ type x2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8d32ezxz.scala:25:31\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mxMin\e[0m = x1 > x2 ? x1 : \e[35mx2\e[0m;\n\e[31m\e[31m   |\e[0m     \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \ value ? is not a member of Double\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8d32ezxz.scala:26:38\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m\
    \ \e[36mxMax\e[0m = x1 < x2 ? x1 : \e[35mx2\e[0m;\n\e[31m\e[31m   |\e[0m     \
    \                                 ^^\e[0m\n\e[31m   |\e[0m                   \
    \                   Not found: type x2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp8d32ezxz.scala:26:31 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mxMax\e[0m = x1 < x2 ? x1\
    \ : \e[35mx2\e[0m;\n\e[31m\e[31m   |\e[0m                            ^^^^\e[0m\n\
    \e[31m   |\e[0m                            value ? is not a member of Double\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8d32ezxz.scala:27:38 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36myMin\e[0m = y1 > y2\
    \ ? y1 : \e[35my2\e[0m;\n\e[31m\e[31m   |\e[0m                               \
    \       ^^\e[0m\n\e[31m   |\e[0m                                      Not found:\
    \ type y2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8d32ezxz.scala:27:31\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m\
    \ \e[36myMin\e[0m = y1 > y2 ? y1 : \e[35my2\e[0m;\n\e[31m\e[31m   |\e[0m     \
    \                "
  stdout: ''
  timestamp: 1659979443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if(a == null || b == null || c == null) {\n            return false\n\
    \        }\n        if(a == 0 || b == 0 || c == 0 || abs(a - b) > abs(a - c) ||\
    \ abs(a - c) > abs(b - c)) {\n            return false\n        }\n        if(abs(a\
    \ - b) < abs(a - c) && abs(a - b) < abs(b - c)) {\n            return true\n \
    \       }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpo58qorko.scala:14:11 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m(a == \e[31mnull\e[0m || b == \e\
    [31mnull\e[0m || c == \e[31mnull\e[0m) {\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m          Values of types Long and Null cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpo58qorko.scala:14:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m(a == \e[31mnull\e[0m || b == \e\
    [31mnull\e[0m || c == \e[31mnull\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          Values of types Long and Null\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpo58qorko.scala:14:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ \e[33mif\e[0m(a == \e[31mnull\e[0m || b == \e[31mnull\e[0m || c == \e[31mnull\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m          Values of types Long and Null cannot be compared\
    \ with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659979443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ad = a - b\n        val bc = b - c\n        val cd = c - a\n\
    \n        if (ad*ac > bc*bd) {\n            true\n        } else {\n         \
    \   false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmzcva7nq.scala:18:15 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (ad*ac > bc*bd) {\n\e[31m\e[31m\
    \   |\e[0m               ^^\e[0m\n\e[31m   |\e[0m               Not found: ac\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979439
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val x0 : Double = a/2.0;\n        val y0 : Double = c/2.0;\n  \
    \      val x1 =  (y0 - b)/2.0;\n        val y1 =  (x0 - a)/2.0;\n        val x2\
    \ =  (y1 - c)/2.0;\n        val y2 =  (x1 - b)/2.0;\n        (x0*y0-x1*y1-x2*y2)\
    \ >= 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjcptj0oz.scala:23)\n\tat Problem.main(tmpjcptj0oz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979443
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var isRightAngle : Boolean = false\n        // Check all sides\
    \ of the triangle\n        if(a > 0 && b > 0 && c > 0) {\n            // Check\
    \ if all sides are equal\n            if(a == b && b == c) {\n               \
    \ isRightAngle = true\n            }\n            // Check if all are equal\n\
    \            if(a == b || a == c || b == c) {\n                isRightAngle =\
    \ false\n            }\n        }\n        isRightAngle\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmfoalrw2.scala:29)\n\tat Problem.main(tmpmfoalrw2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979443
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if( a < 0 || b < 0 || c < 0 ) throw new RuntimeException\n    \
    \    if( a == 0 || b == 0 || c == 0 ) throw new RuntimeException\n        if(\
    \ a == b && b == c ) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmmfa3muo.scala:19)\n\tat Problem.main(tmpmmfa3muo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        def aOfB : Double = a/b\n        def cOfB : Double = c/b\n    \
    \    def dOfC : Double = a/c\n        def aC : Double = (a*c)-a\n        def bC\
    \ : Double = (b*c)-b\n        def aAbs : Double = aOfB * aAbs\n        def bAbs\
    \ : Double = bAbs * bAbs\n        def cAbs : Double = cAbs * cAbs\n        def\
    \ dAbs : Double = dAbs * dAbs\n        def isRightAngleTriangle : Boolean = {\n\
    \            (aAbs + bAbs + cAbs + dAbs) == Math.sqrt(aAbs**2 + bAbs**2 + cAbs**2\
    \ + dAbs**2) \n        }\n        \n        def isRightAngleTriangleWithTolerance(a\
    \ : Double, b : Double, c : Double, tolerance : Double) : Boolean = {\n      \
    \      (aOfB + bAbs + cAbs + dAbs) == Math.sqrt(a**2 + b**2 + c**2 + d**2) \n\
    \        }\n        \n        isRightAngleTriangleWithTolerance(a,b,c,tolerance)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_8ao7f4m.scala:24:57 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            (aAbs + bAbs + cAbs + dAbs) == Math.sqrt(aAbs**\e\
    [31m2\e[0m + bAbs**\e[31m2\e[0m + cAbs**\e[31m2\e[0m + dAbs**\e[31m2\e[0m) \n\e\
    [31m\e[31m   |\e[0m                                                     ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value ** is not a member\
    \ of Double\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_8ao7f4m.scala:28:54\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            (aOfB + bAbs\
    \ + cAbs + dAbs) == Math.sqrt(a**\e[31m2\e[0m + b**\e[31m2\e[0m + c**\e[31m2\e\
    [0m + d**\e[31m2\e[0m) \n\e[31m\e[31m   |\e[0m                               \
    \                      ^^^\e[0m\n\e[31m   |\e[0m                             \
    \         value ** is not a member of Double\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp_8ao7f4m.scala:31:48 ------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        isRightAngleTriangleWithTolerance(a,b,c,tolerance)\n\e[31m\e[31m\
    \   |\e[0m                                                ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                Not found: tolerance\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if(b > c) c else b\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpef_dn6xf.scala:14:18\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m(b > c)\
    \ c \e[33melse\e[0m b\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m \
    \  |\e[0m                  Found:    (c : Long)\n\e[31m   |\e[0m             \
    \     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpef_dn6xf.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m(b > c)\
    \ c \e[33melse\e[0m b\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (b : Long)\n\e[31m   |\e[0m  \
    \                       Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // The hypotenuse of a right angle triangle is twice the length\
    \ of any \n        // other side.\n        // The equation of right angle triangle\
    \ is h= ((s^2 + c^2)^0.5) - ((s^2 + b^2)^0.5)\n        // So if we plug in a,\
    \ b, c into this equation:\n        // h = ((s^2 + c^2)^0.5) - ((s^2 + b^2)^0.5)\n\
    \        // We can see that our hypotenuse is s^2 + c^2 = b^2 + a^2 \n       \
    \ // (s^2 + b^2)^2 = a^2 + b^2\n        // So we can use the law of cosines to\
    \ simplify this: \n        // h^2 = a^2 + b^2\n        // s^2 = a^2 * b^2 + b^2\
    \ * c^2\n        // c^2 = a^2 * b^2 + b^2 * c^2\n        // h^2 = a^2 * b^2 +\
    \ b^2 * c^2\n        // a^2 * b^2 = c^2 * h^2 \n        // b^2 * c^2 = h^2 * s^2\n\
    \        // So we know that \n        // h^2 = a^2 + b^2 + c^2\n        // a^2\
    \ * b^2 = c^2 * h^2\n        // b^2 * c^2 = h^2 * s^2\n        // h^2 = s^2 +\
    \ c^2 - a^2 * b^2\n        // s^2 = a^2 * b^2 - b^2 * c^2\n        // c^2 = a^2\
    \ * b^2 - b^2 * c^2\n        // h^2 = a^2 * b^2 - b^2 * c^2\n        // s^2 =\
    \ a^2 * b^2 - b^2 * c^2\n        // c^2 = a^2 * b^2 - b^2 * c^2\n        // h^2\
    \ = a^2 * b^2 - b^2 * c^2\n        // So if we plug these numbers into this equation:\n\
    \        // h^2 = s^2 + c^2 - a^2 * b^2\n        // s^2 = a^2 * b^2 - b^2 * c^2\n\
    \        // c^2 = a^2 * b^2 - b^2 * c^2\n        // s^2 = a^2 * b^2 - b^2 * c^2\n\
    \        // c^2 = a^2 * b^2 - b^2 * c^2\n        // a^2 * b^2 = c^2 * h^2\n  \
    \      // b^2 * c^2 = h^2 * s^2\n        // h^2 = s^2 + c^2 - a^2 * b^2\n\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplrsdtmxk.scala:13:69\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mrightAngleTriangle\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m, \e[36mb\e[0m : \e[35mLong\e[0m, \e[36mc\e\
    [0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                       Found:    Unit\n\
    \e[31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m14 |\e[0m        \e[34m// The hypotenuse of a right angle triangle\
    \ is twice the length of any \e[0m\n\e[31m15 |\e[0m        \e[34m// other side.\e\
    [0m\n\e[31m16 |\e[0m        \e[34m// The equation of right angle triangle is h=\
    \ ((s^2 + c^2)^0.5) - ((s^2 + b^2)^0.5)\e[0m\n\e[31m17 |\e[0m        \e[34m//\
    \ So if we plug in a, b, c into this equation:\e[0m\n\e[31m18 |\e[0m        \e\
    [34m// h = ((s^2 + c^2)^0.5) - ((s^2 + b^2)^0.5)\e[0m\n\e[31m19 |\e[0m       \
    \ \e[34m// We can see that our hypotenuse is s^2 + c^2 = b^2 + a^2 \e[0m\n\e[31m20\
    \ |\e[0m        \e[34m// (s^2 + b^2)^2 = a^2 + b^2\e[0m\n\e[31m21 |\e[0m     \
    \   \e[34m// So we can use the law of cosines to simplify this: \e[0m\n\e[31m22\
    \ |\e[0m        \e[34m// h^2 = a^2 + b^2\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ s^2 = a^2 * b^2 + b^2 * c^2\e[0m\n\e[31m24 |\e[0m        \e[34m// c^2 = a^2\
    \ * b^2 + b^2 * c^2\e[0m\n\e[31m25 |\e[0m        \e[34m// h^2 = a^2 * b^2 + b^2\
    \ * c^2\e[0m\n\e[31m26 |\e[0m        \e[34m// a^2 * b^2 = c^2 * h^2 \e[0m\n\e\
    [31m27 |\e[0m        \e[34m// b^2 * c^2 = h^2 * s^2\e[0m\n\e[31m28 |\e[0m    \
    \    \e[34m// So we know that \e[0m\n\e[31m29 |\e[0m        \e[34m// h^2 = a^2\
    \ + b^2 + c^2\e[0m\n\e[31m30 |\e[0m        \e[34m// a^2 * b^2 = c^2 * h^2\e[0m\n\
    \e[31m31 |\e[0m        \e[34m// b^2 * c^2 = h^2 * s^2\e[0m\n\e[31m32 |\e[0m  \
    \      \e[34m// h^2 = s^2 + c^2 - a^2 * b^2\e[0m\n\e[31m33 |\e[0m        \e[34m//\
    \ s^2 = a^2 * b^2 - b^2 * c^2\e[0m\n\e[31m34 |\e[0m        \e[34m// c^2 = a^2\
    \ * b^2 - b^2 * c^2\e[0m\n\e[31m35 |\e[0m        \e[34m// h^2 = a^2 * b^2 - b^2\
    \ * c^2\e[0m\n\e[31m36 |\e[0m        \e[34m// s^2 = a^2 * b^2 - b^2 * c^2\e[0m\n\
    \e[31m37 |\e["
  stdout: ''
  timestamp: 1659979443
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Return true if a is 90 degree.\n        if(a*a == (a*b+b*c)){\n\
    \            true\n        }\n        else {\n            false\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpok8qhiyk.scala:23)\n\tat Problem.main(tmpok8qhiyk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979444
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n       val a1 = a / 2\n       val b1 = b / 2\n       val c1 = c / 2\n \
    \      val dx = a - b\n       val dy = b - c\n       val dz = c - a\n       val\
    \ side1 = math.sqrt(dx * dx + dy * dy + dz * dz)\n       val side2 = math.sqrt(a1\
    \ * a1 + b1 * b1 + c1 * c1)\n       side1 == side2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqihd6op1.scala:25)\n\tat Problem.main(tmpqihd6op1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val a = a\n        val b = b\n        val c = c\n        if (a\
    \ == 0 || b == 0 || c == 0) return false\n        if (a == 0 || b == 0) return\
    \ false\n        if (a == b) return true\n        if (a == c) return false\n \
    \       if ((a != 0) && (b != 0) && (c != 0)) return true\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjdidkc29.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = a\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpjdidkc29.scala:15:16 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = b\n\e[31m\e[31m   |\e\
    [0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpjdidkc29.scala:16:16 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = c\n\e[31m\e[31m   |\e[0m       \
    \         ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e[0m \e\
    [35mc\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Use a variable to track the sum of the three sides\n       \
    \ var total = 0L\n        \n        // Use a variable to track the sum of the\
    \ angles \n        var totalAngles = 0L\n\n        // Use a variable and an if\
    \ statement to track the total angle between the three sides\n        var totalAngle\
    \ = 0L\n\n        // Use a for loop to track the sum using three counters\n  \
    \      var sum = 0L\n        for (i<- 0 until 3){\n            total = total +\
    \ a(i) * b(i) * c(i)\n        }\n        // Use a for loop to track the sum of\
    \ the angles using three counters\n        for (i<- 0 until 3){\n            totalAngles\
    \ = totalAngles + math.acos(a(i) / math.sqrt(a(i) * a(i) + b(i) * b(i) + c(i)\
    \ * c(i))) * 180 / math.Pi\n        }\n        // Use a for loop to track the\
    \ total angle using three counters\n        for (i<- 0 until 3){\n           \
    \ totalAngle = totalAngle + math.acos(a(i) / math.sqrt(a(i) * a(i) + b(i) * b(i)\
    \ + c(i) * c(i))) * 180 / math.Pi\n        }\n        // Use an if statement to\
    \ compare the sum of the angles and total angle values\n        if (totalAngles\
    \ < totalAngle){\n            return true\n        } else {\n            return\
    \ false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp_po9fpgu.scala:26:28 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            total = total + a(i) * b(i) * c(i)\n\e[31m\e\
    [31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m             \
    \               \e[33mparameter\e[0m \e[35ma\e[0m does not take parameters\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp_po9fpgu.scala:30:50 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            totalAngles = totalAngles + math.acos(a(i)\
    \ / math.sqrt(a(i) * a(i) + b(i) * b(i) + c(i) * c(i))) * \e[31m180\e[0m / math.Pi\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m                                    \e[33mparameter\e[0m \e[35ma\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp_po9fpgu.scala:34:48 -----------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m            totalAngle = totalAngle + math.acos(a(i) / math.sqrt(a(i)\
    \ * a(i) + b(i) * b(i) + c(i) * c(i))) * \e[31m180\e[0m / math.Pi\n\e[31m\e[31m\
    \   |\e[0m                                                ^\e[0m\n\e[31m   |\e\
    [0m                                    \e[33mparameter\e[0m \e[35ma\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        def calcArea(lengths : Seq[Long]) : Long = {\n            val a\
    \ = lengths.head\n            val b = lengths.last\n            val c = lengths.init\n\
    \            (a + b + c) * ((a + b) * (c - b)) / (2.0 * a * c)\n        }\n  \
    \      val ab = calcArea(Seq(a,b))\n        val bc = calcArea(Seq(b,c))\n    \
    \    ab > (bc + a * a)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmptyvrn3sw.scala:18:19 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            (a + b + c) * ((a + b) * (c - b)) / (\e[31m2.0\e\
    [0m * a * c)\n\e[31m\e[31m   |\e[0m             ^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m  \
    \ |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x:\
    \ Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\
    \e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m (x: String): String\n\e[31m \
    \  |\e[0mmatch arguments ((c : scala.collection.mutable.Seq[Long]))\n1 error found\n"
  stdout: ''
  timestamp: 1659979445
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ab = abs(a - b)\n        val ac = abs(a - c)\n        val bc\
    \ = abs(b - c)\n        val noOfSides = ab + ac + bc\n        noOfSides > 1 &&\
    \ (ab >= ac && ab >= bc) || (ab <= ac && ab <= bc)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvb6z5y5q.scala:22)\n\tat Problem.main(tmpvb6z5y5q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Check that the sides a, b, and c are not null\n        if (a==null\
    \ || b==null || c==null)\n            return false\n        // Check that the\
    \ sides a, b, and c are the same length\n        else if (a != b) \n         \
    \   return false\n        else if (b != c)\n            return false\n       \
    \ // If they're the same length and they're not the same length\n        else\
    \ if (a == c)\n            return false\n        // Check that the sides a and\
    \ b are in the same quadrant\n        else if (a >= b && b >= c)\n           \
    \ return false\n        // Check that the sides b and c are in the same quadrant\n\
    \        else if (b >= a && c >= a)\n            return false\n        // Check\
    \ that the sides b and c are in the same quadrant\n        else if (b >= c &&\
    \ c >= b)\n            return false\n        // If a is greater than b, then a\
    \ and c are in the same quadrant\n        else if (a > b)\n            return\
    \ true\n        // If a is less than b, then b and c are in the same quadrant\n\
    \        else if (a < b)\n            return false\n        // If a is greater\
    \ than c, then b and c are in the same quadrant\n        else if (a > c)\n   \
    \         return true\n        // If a is less than c, then a and c are in the\
    \ same quadrant\n        else if (a < c)\n            return false\n        //\
    \ If both a and c are greater than c, then a and b are in the same quadrant\n\
    \        else \n            return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpp5bvrdes.scala:15:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (a==\e[31mnull\e[0m || b==\e[31mnull\e\
    [0m || c==\e[31mnull\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m          Values of types Long and Null cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpp5bvrdes.scala:15:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (a==\e[31mnull\e[0m || b==\e[31mnull\e\
    [0m || c==\e[31mnull\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m          Values of types Long and Null cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpp5bvrdes.scala:15:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (a==\e[31mnull\e[0m || b==\e[31mnull\e\
    [0m || c==\e[31mnull\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m          Values of types Long and Null cannot\
    \ be compared with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659979449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var n = 0\n        while(n <3 ) {\n          if(math.abs(a-b)==math.abs(c-b))\
    \ {\n            return true\n          } else if(math.abs(a-c)==math.abs(b-c))\
    \ {\n            return true\n          } else {\n            a += 1\n       \
    \     b += 1\n            c += 1\n          }\n          n += 1\n        }\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe9gjyc0u.scala:21:14 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            a += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean a.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe9gjyc0u.scala:22:14\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            b += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean b.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpe9gjyc0u.scala:23:14 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            c += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Long - did you mean\
    \ c.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ab = a * b\n        val ac = a * c\n        val bc = b * c\n\
    \        val acb = ac + bc\n        val ac2b = ac * bc\n        val ac2c = ac\
    \ * c\n        val bc2 = bc * 2\n        val bc3 = bc * 3\n        val ac3b =\
    \ ac + bc + bc2\n        val ac3c = ac + bc + bc2 + ac2b\n        val bc3 = bc\
    \ * 3\n        val ab3c = ab + cc + bc3\n        val ab3b = ab + cc + bc3 + ab3c\n\
    \        val ac3bcac3bc2 = ac3b * ac2b * bc2\n        val ac3bcac3bc2bc = ac3b\
    \ * ac2b * bc2 + ac2c * ac2b\n        val ac3bcac3bc2 = ac3bcac3bc2 <= ac3bcac3bc\n\
    \        val ac3bcac3bc3 = ac2b * ac2b * bc3 * 3\n        val ab3bcac3bc2 = ab3b\
    \ * ac2b * bc2 * 2\n        val ab3bcac3bc3 = ab3b * ac2b * bc3 * 3\n        val\
    \ ac3bcac3bc2 = ac3bcac3bc2 <= ac3bcac3bc\n        val ac3bcac3bc3 = ac3bcac3bc3\
    \ <= ab3bcac3bc\n        val ac3bcac3bc4 = ac3b * ac2b * bc2 * 2\n        val\
    \ ab3bcac3bc2 = ab3bcac3bc2 <= ab3bcac3bc\n        val ab3bcac3bc3 = ab3bcac3bc3\
    \ <= ac3bcac3bc\n        val ab3bcac3bc4 = ab3bcac3bc4 <= ac3bcac3bc * 4\n   \
    \     val ac3bcac3bc2 = ac3bcac3bc2 <= ac3bcac3bc\n        val ac3bcac3bc3 = ac3bcac3bc3\
    \ <= ab3bcac3bc\n        val ac3bcac3bc4 = ac3bcac3bc4 <= ac3bcac3bc * 4\n   \
    \     val ac3bcac3bc5 = ac2b * ac2b * bc3 * 3\n        val ab3bcac3bc2 = ab3bcac3bc2\
    \ <= ab3bcac3bc\n        val ab3bcac3bc\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgulcuuka.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgulcuuka.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbc3\e[0m = bc * \e[31m3\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbc3 is already defined as \e[33mvalue\e[0m \e[35mbc3\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgulcuuka.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mac3bcac3bc2\e[0m = ac3bcac3bc2 <= ac3bcac3bc\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mac3bcac3bc2 is already defined as \e[33mvalue\e[0m \e[35mac3bcac3bc2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgulcuuka.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mac3bcac3bc2\e[0m = ac3bcac3bc2 <= ac3bcac3bc\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mac3bcac3bc2 is already defined as \e[33mvalue\e[0m \e[35mac3bcac3bc2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgulcuuka.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mac3bcac3bc3\e[0m = ac3bcac3bc3 <= ab3bcac3bc\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mac3bcac3bc3 is already defined as \e[33mvalue\e[0m \e[35mac3bcac3bc3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgulcuuka.scala:36:12 ---------------------------"
  stdout: ''
  timestamp: 1659979450
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if ((a < b) && (b < c)) {\n            return (math.abs((math.signum((math.pow(b,\
    \ 2) - math.pow(a, 2)) / (math.pow(b, 2) + math.pow(a, 2))))) <= 0.1)\n      \
    \  }\n        else {\n            return (math.abs((math.signum((math.pow(c, 2)\
    \ - math.pow(b, 2)) / (math.pow(c, 2) + math.pow(b, 2))))) <= 0.1)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkxs0b_9i.scala:22)\n\tat Problem.main(tmpkxs0b_9i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979451
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val aSquared : Double = a * a\n        val bSquared : Double =\
    \ b * b\n        val cSquared : Double = c * c\n        val bCosine : Double =\
    \ bSquared / aSquared\n        val cCosine : Double = cSquared / aSquared\n  \
    \      bCosine >= cCosine || bCosine * cCosine < 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4dqir9_z.scala:22)\n\tat Problem.main(tmp4dqir9_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979451
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (Math.abs(a) <= 2l){\n            if (Math.abs(b) <= 2l){\n\
    \                if (Math.abs(c) <= 2l){\n                    false\n        \
    \        } else {\n                    true\n                }\n            }\
    \ else {\n                true\n            }\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8c718md9.scala:29)\n\tat Problem.main(tmp8c718md9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val leftSide = a\n        val rightSide = b\n        val midSide\
    \ = c\n        val leftSideLength = leftSide.length\n        val rightSideLength\
    \ = rightSide.length\n        val midSideLength = midSide.length\n        val\
    \ isRight = \n            if (leftSideLength == rightSideLength && leftSideLength\
    \ == midSideLength) true\n            else false\n        val isLeft = \n    \
    \        if (rightSideLength == leftSideLength && rightSideLength == midSideLength)\
    \ true\n            else false\n        if (isLeft && isRight) true\n        else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpokl25h2m.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mleftSideLength\e[0m = leftSide.length\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             value length is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpokl25h2m.scala:18:40 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mrightSideLength\e[0m = rightSide.length\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              value length is not a member of Long\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpokl25h2m.scala:19:36 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmidSideLength\e[0m = midSide.length\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            value length is not a member of Long\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (Math.pow(Math.abs(b - a), 2) != Math.pow(Math.abs(c - b), 2))\
    \ {\n            return false\n        }\n        val ab = math.sqrt(Math.pow(Math.abs(b\
    \ - a), 2))\n        val bc = math.sqrt(Math.pow(Math.abs(c - b), 2))\n      \
    \  val abc = math.pow(ab, b)\n        if (abc != 0) {\n            if (ab != 0)\
    \ {\n                if (bc != 0) {\n                    if (abc != 0) {\n   \
    \                     if ((b - c) == abc) {\n                            return\
    \ true\n                        } else if ((c - b) == abc) {\n               \
    \             return true\n                        }\n                    }\n\
    \                }\n            }\n        }\n        return false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5gzqb03n.scala:37)\n\tat Problem.main(tmp5gzqb03n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val pq = math.sqrt((b * b) - (4 * a * c))\n        (pq < (4 * a\
    \ * b)) || ((pq > (4 * a * a)) && (a * a + b * b > c * c))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjk5_dzyo.scala:18)\n\tat Problem.main(tmpjk5_dzyo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ab = a * b\n        val ac = a * c\n        val bc = b * c\n\
    \        val de = ab + bc\n        val f = ac - de\n        val g = bc - de\n\
    \        val h = (bc - ac) / ab\n\n        ((f*f) + (g*g) <= h)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp754wskjs.scala:25)\n\tat Problem.main(tmp754wskjs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val aLen = math.sqrt(a * a)\n        val bLen = math.sqrt(b * b)\n\
    \        val cLen = math.sqrt(c * c)\n        if ((bLen * aLen > cLen * b) ||\
    \ (cLen * aLen > bLen * c)) {\n            if (a == b)\n                if (b\
    \ == c)\n                    true\n                else if (a == c)\n        \
    \            false\n                else\n                    false\n        \
    \    else if (a == c)\n                false\n            else if (b == c)\n \
    \               true\n            else\n                false\n        }\n   \
    \     else {\n            if (a < c && a < b)\n                true\n        \
    \    else if (a > c && a > b)\n                false\n            else if (a >\
    \ c && a < b)\n                false\n            else\n                true\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpccovmm13.scala:45)\n\tat Problem.main(tmpccovmm13.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val side1 = math.sqrt(a * a + b * b) // b * b\n        val side2\
    \ = math.sqrt(c * c + a * a) // a * a\n        side1 < side2 && side1 > 0 && side2\
    \ < side1\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaxq5hax_.scala:19)\n\tat Problem.main(tmpaxq5hax_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if ((a + b > c) && (c + d > a) && (b + c > d)) true\n        else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5x3mb4j.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m ((a + b > c) && (c + d > a) &&\
    \ (b + c > d)) \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \        ^\e[0m\n\e[31m   |\e[0m                                Not found: d\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5x3mb4j.scala:14:51\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m ((a\
    \ + b > c) && (c + d > a) && (b + c > d)) \e[31mtrue\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                                   Not found: d\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val x1 = a\n        val x2 = b\n        val x3 = c\n        val\
    \ y1 = x1 * x1 + x2 * x2 + x3 * x3\n        val y2 = x2 * x2 + x3 * x3\n     \
    \   val y3 = x1 * x1 + x2 * x2 + x3 * x3\n        ((y1 - (y2 * y2)).abs <= Double.PositiveInfinity\
    \ && (y3 - (y1 * y2)).abs <= Double.PositiveInfinity )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsw5eov0o.scala:24)\n\tat Problem.main(tmpsw5eov0o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a == 0 || b == 0 || c == 0) return false\n        else if (Math.pow(a,\
    \ 2) + Math.pow(b, 2) + Math.pow(c, 2) == 0) return false\n        else if (Math.pow(a,\
    \ 2) - Math.pow(b, 2) - Math.pow(c, 2) == 0) return false\n        else{\n   \
    \         var a = Math.sqrt(Math.pow(a, 2))\n            var b = Math.sqrt(Math.pow(b,\
    \ 2))\n            var c = Math.sqrt(Math.pow(c, 2))\n            if ((b * b)\
    \ - (4 * a * c) == 0) return true\n            else if (((-b * b) + (4 * a * c))\
    \ > 0) return false\n            else return true\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwmg9eo8p.scala:18:39 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mvar\e[0m \e[36ma\e[0m = Math.sqrt(Math.pow(a,\
    \ \e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \ ^\e[0m\n\e[31m   |\e[0m                                       Recursive \e[33mvariable\e\
    [0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpwmg9eo8p.scala:19:39 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            \e[33mvar\e[0m \e[36mb\e[0m = Math.sqrt(Math.pow(b, \e[31m2\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e\
    [31m   |\e[0m                                       Recursive \e[33mvariable\e\
    [0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpwmg9eo8p.scala:20:39 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33mvar\e[0m \e[36mc\e[0m = Math.sqrt(Math.pow(c, \e[31m2\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e\
    [31m   |\e[0m                                       Recursive \e[33mvariable\e\
    [0m \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979451
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ac = math.sqrt(a*a + b*b)\n        val bc = math.sqrt(b*b +\
    \ c*c)\n        val ca = math.sqrt(c*c + a*a)\n        val p1 = (ac - bc)/(2*a)\n\
    \        val p2 = (ac - ca)/(2*b)\n        val p3 = ca/2*(a + b)\n        if (math.abs((p1\
    \ - p2) - p3) > 0.001)\n        {\n            return false\n        }\n     \
    \   else\n        {\n            return true\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1oi3phm2.scala:30)\n\tat Problem.main(tmp1oi3phm2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val d  = math.sqrt( (a * a + b * b - c * c) )\n        d < math.min(a\
    \ , b, c) \n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp70x8wo6m.scala:15:17 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        d < math.min(a , b, c) \n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((a : Long),\
    \ (b : Long), (c : Long))\n1 error found\n"
  stdout: ''
  timestamp: 1659979452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        def rightAngle(x : Long, y : Long) : Boolean = {\n            if\
    \ (x == y) return true\n            if (x == 0 || x == y) return false\n     \
    \       if (y == 0)\n                return (math.signum(x / y) * math.signum(y\
    \ / x))\n            return false\n        }\n        val isRight = rightAngle(a,\
    \ c) == rightAngle(b, c) == rightAngle(c, a)\n        val isOpp = rightAngle(a,\
    \ c) == rightAngle(b, c) == rightAngle(c, a)\n        val isUpp   = rightAngle(a,\
    \ b) == rightAngle(b, c) == rightAngle(b, a)\n        val isLow   = rightAngle(a,\
    \ b) == rightAngle(b, c) == rightAngle(b, a )\n        isRight && isOpp  && isUpp\
    \  && isLow\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprxd69pi3.scala:18:24\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mreturn\e\
    [0m (math.signum(x / y) * math.signum(y / x))\n\e[31m\e[31m   |\e[0m         \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        Found:    Long\n\e[31m   |\e[0m                     \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val d = (b + c) / 2\n        if (a == 0 || d == 0 || b == 0 ||\
    \ c == 0)\n            false\n        else\n            Math.abs(b - c) > Math.abs(a\
    \ - d)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1iozzw8e.scala:21)\n\tat Problem.main(tmp1iozzw8e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (c.minus(a).abs < b.minus(a).abs)\n            (b.minus(a).abs\
    \ - (b.minus(a).abs - c.minus(a).abs) < c.minus(a).abs)\n        else\n      \
    \      (c.minus(a).abs - (c.minus(a).abs - b.minus(a).abs) < b.minus(a).abs)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpabedv_rd.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (c.minus(a).abs < b.minus(a).abs)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ minus is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpabedv_rd.scala:15:15\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            (b.minus(a).abs\
    \ - (b.minus(a).abs - c.minus(a).abs) < c.minus(a).abs)\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m             value minus is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpabedv_rd.scala:17:15\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            (c.minus(a).abs\
    \ - (c.minus(a).abs - b.minus(a).abs) < b.minus(a).abs)\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m             value minus is not a member\
    \ of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659979455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        def check(x :Long) :Long = {\n            if(x>0 && x<a) x\n  \
    \          else check(x-a)\n        }\n\n        def check(y :Long) :Long = {\n\
    \            if(y>0 && y<b) y\n            else check(y-b)\n        }\n\n    \
    \    def check(z :Long) :Long = {\n            if(z>0 && z<c) z\n            else\
    \ check(z-c)\n        }\n\n        check(check(check(check(b-a)))) \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjuelokxx.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mdef\e[0m \e[36mcheck\e[0m(\e[36my\e[0m\
    \ :\e[35mLong\e[0m) :\e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\
    \e[31m   |\e[0mcheck is already defined as \e[33mmethod\e[0m \e[35mcheck\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m20 |\e[0m            \e[33mif\e\
    [0m(y>\e[31m0\e[0m && y<b) y\n\e[31m21 |\e[0m            \e[33melse\e[0m check(y-b)\n\
    \e[31m22 |\e[0m        }\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjuelokxx.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mdef\e[0m\
    \ \e[36mcheck\e[0m(\e[36mz\e[0m :\e[35mLong\e[0m) :\e[35mLong\e[0m = {\n\e[31m\e\
    [31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mcheck is already defined as \e[33mmethod\e\
    [0m \e[35mcheck\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m25 |\e\
    [0m            \e[33mif\e[0m(z>\e[31m0\e[0m && z<c) z\n\e[31m26 |\e[0m       \
    \     \e[33melse\e[0m check(z-c)\n\e[31m27 |\e[0m        }\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjuelokxx.scala:29:13 --------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m        check(check(check(check(b-a)))) \n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Long\n\e[31m   |\e[0m        Required: Boolean\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Write your code here.\n        val a = a - b\n        val b\
    \ = b - c\n        val c = c - a\n        val xc = Math.sqrt(a * a + b * b)\n\
    \        val yc = Math.sqrt(a * a + c * c)\n        val zc = Math.sqrt(b * b +\
    \ c * c)\n        val u = (yc / (xc * yc)) * (xc / (xc * xc))\n        val v =\
    \ (xc / (xc * xc)) * (yc / (yc * yc))\n        val ux = Math.cos(a) * v\n    \
    \    val uy = Math.sin(a) * v\n        val vx = Math.cos(b) * u\n        val vy\
    \ = Math.sin(b) * u\n        val vz = Math.cos(c) * v\n        ((ux == 1) && (uy\
    \ == 1) && (vz == 1))\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkpkmvwjy.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = a - b\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpkpkmvwjy.scala:16:16 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = b - c\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpkpkmvwjy.scala:17:16 ---------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = c - a\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val length = math.sqrt(a * a+b * b+c * c)\n        val angle1 =\
    \ math.asin(a / length)\n        val angle2 = math.asin(c / length)\n        val\
    \ angle3 = math.asin(c / b)\n        math.abs(angle2 - angle3) < 0.001 \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpef6gourf.scala:21)\n\tat Problem.main(tmpef6gourf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n      if(a > b && a > c){\n        if(b > c){\n          return true\n\
    \        }\n      }\n      else{\n        if(b > c){\n          return false\n\
    \        }\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp67juw1g4.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m(b > c){\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e\
    [31m   |\e[0m        Required: Boolean\n\e[31m   |\e[0m        Maybe you are missing\
    \ an else part for the conditional?\n\e[31m16 |\e[0m          \e[33mreturn\e[0m\
    \ \e[31mtrue\e[0m\n\e[31m17 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp67juw1g4.scala:20:8 ---------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(b > c){\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m      \
    \  Required: Boolean\n\e[31m   |\e[0m        Maybe you are missing an else part\
    \ for the conditional?\n\e[31m21 |\e[0m          \e[33mreturn\e[0m \e[31mfalse\e\
    [0m\n\e[31m22 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Solve for triangles sides\n        // A = (c+b)/2\n        //\
    \ B = (c-b)/2\n        // C = (a-b)/2\n        // Then calculate the hypotenuse\
    \ of the triangle:\n        // hypotenuse = Math.sqrt(Math.pow(A, 2) + Math.pow(B,\
    \ 2)) / Math.sqrt(Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2))\n        val\
    \ A = (c + b) / 2\n        val B = (c - b) / 2\n        val C = (a - b) / 2\n\
    \        // Now find the hypotenuse\n        val hypotenuse = Math.sqrt(Math.pow(A,\
    \ 2) + Math.pow(B, 2)) / Math.sqrt(Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C,\
    \ 2))\n        // Now check if the hypotenuse is greater than or equal to the\
    \ length of the sides\n        val hypotenuseIsGreaterThanOrEqualToLengthOfSides\
    \ = hypotenuse >= Math.sqrt(Math.pow(A, 2) + Math.pow(B, 2))\n        return hypotenuseIsGreaterThanOrEqualToLengthOfSides\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx9qv0zae.scala:30)\n\tat Problem.main(tmpx9qv0zae.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (b > a && c > b) {\n            var x :Int = (a+b)/2\n     \
    \       var y :Int = (a+c)/2\n            var x1 :Int = (a+b+c)/3\n          \
    \  var y1 :Int = (a+b+c+a)/3\n            var x2 :Int = (a+b+c-a)/3\n        \
    \    var y2 :Int = (a+b+c-b)/3\n            if (x1==x2 && x1==y2) {\n        \
    \        val dx = ((b*b) - (4*a*c))/2.0\n                val dy = ((b*b) - (4*a*a))/2.0\n\
    \                val rad =Math.sqrt(dx*dx + dy*dy)\n                val x =a*Math.cos(rad)\
    \ + b*Math.sin(rad)\n                val y =a*Math.sin(rad) - b*Math.cos(rad)\n\
    \                true\n            } else\n                false\n        } else\n\
    \            false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpydl3t2y2.scala:15:25\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mvar\e[0m \e\
    [36mx\e[0m :\e[35mInt\e[0m = (a+b)/\e[31m2\e[0m\n\e[31m\e[31m   |\e[0m       \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    Long\n\e[31m   |\e[0m                         Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpydl3t2y2.scala:16:25 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mvar\e[0m \e[36my\e[0m :\e[35mInt\e\
    [0m = (a+c)/\e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Long\n\e[31m   |\e[0m \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpydl3t2y2.scala:17:26 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mvar\e[0m \e[36mx1\e[0m :\e[35mInt\e[0m =\
    \ (a+b+c)/\e[31m3\e[0m\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Long\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpydl3t2y2.scala:18:26 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mvar\e[0m \e[36my1\e[0m :\e[35mInt\e[0m =\
    \ (a+b+c+a)/\e[31m3\e[0m\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Long\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpydl3t2y2.scala:19:26 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            \e[33mvar\e[0m \e[36mx2\e[0m :\e[35mInt\e[0m =\
    \ (a+b+c-a)/\e[31m3\e[0m\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Long\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659979461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if(a*a + b*b == c*c){\n            var ans = false\n          \
    \  val list = List(a, b, c);\n            list.foreach(ans = a <= b+c && b <=\
    \ a+c && c <= b+a);\n            ans\n        } else {\n            false\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_tr5f2uq.scala:17:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            list.foreach(ans = a <= b+c && b <= a+c &&\
    \ c <= b+a);\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m\e[33mmethod\e[0m \e[35mforeach\e[0m in \e[33mclass\e[0m \e\
    [35mList\e[0m: (f: Long => U): Unit does not have a parameter ans\n1 error found\n"
  stdout: ''
  timestamp: 1659979458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var ab = a.toLong\n        var bc = b.toLong\n        var cd =\
    \ c.toLong\n        if (ab eq bc && bc eq cd) true\n        else { \n        \
    \    var d = ab - bc\n            ab = bc - cd\n            bc = ab + d\n    \
    \        ab = bc - cd\n        }\n        if (ab eq bc && bc eq cd) true\n   \
    \     else false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz_naa81o.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m (ab eq bc && bc eq cd) \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \            value && is not a member of Long\n\e[31m\e[31m-- Error: /tmp/tmpz_naa81o.scala:17:30\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mif\e[0m (ab eq bc && bc eq cd) \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m\
    \                              ^^\e[0m\n\e[31m   |\e[0m  the result of an implicit\
    \ conversion must be more specific than Object\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpz_naa81o.scala:24:21 ------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mif\e[0m (ab eq bc && bc eq cd) \e[31mtrue\e[0m\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ && is not a member of Long\n\e[31m\e[31m-- Error: /tmp/tmpz_naa81o.scala:24:30\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ \e[33mif\e[0m (ab eq bc && bc eq cd) \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m\
    \                              ^^\e[0m\n\e[31m   |\e[0m  the result of an implicit\
    \ conversion must be more specific than Object\n4 errors found\n"
  stdout: ''
  timestamp: 1659979462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val s1 = math.sqrt(a * b * c / 2.0).toDouble\n        val s2 =\
    \ math.sqrt(a * c * b / 2.0).toDouble\n        val s3 = math.sqrt(b * c * a) /\
    \ 2.0\n        return (a * s2 - b * s3 == 0.0) && (a * s3 + b * s1 == 0.0)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9iy7vv7d.scala:20)\n\tat Problem.main(tmp9iy7vv7d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979463
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if(a<b+c || b<a+c || c<a+b) false\n        else if(Math.abs(a-b)<=Math.toRadians(90)\
    \ && Math.abs(b-c)<=Math.toRadians(90) && Math.abs(c-a)<=Math.toRadians(90)) true\n\
    \        else false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk8010rhv.scala:19)\n\tat Problem.main(tmpk8010rhv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        math.abs(a-b) < math.abs(a-c) && math.abs(a-b) < math.abs(a-c)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph6wizz9x.scala:18)\n\tat Problem.main(tmph6wizz9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var _a : Long = _\n        var _b : Long = _\n        var _c :\
    \ Long = _\n        var a : Long = _\n        var b : Long = _\n        var c\
    \ : Long = _\n        var _result : Boolean = _\n\n        if (a * b * c == 0)\
    \ {\n            return true\n        }\n        \n        a = (a / b) * c\n \
    \       b = (b / a) * c\n        c = (c / a) * b\n        \n        _a = a\n \
    \       _b = b\n        _result = false\n        \n        for(a = _a; a <= c;\
    \ a += 1) {\n            for(b = _b; b <= c; b += 1) {\n                for(c\
    \ = _c; c <= c; c += 1) {\n                    if(a == b + c) {\n            \
    \            if(a == _a + _b) {\n                            if(a == _a + _c +\
    \ _b) {\n                                if(a == _c + _a + _b) {\n           \
    \                         if(a == _c + _c + _b) {\n                          \
    \              if(a == _c + _c + _a + _b) {\n                                \
    \            if(a == _c + _c + _a + _c + _b) {\n                             \
    \                   _result = true\n                                         \
    \   }\n                                        }\n                           \
    \         }\n                                }\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        \n        _result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw7msbot2.scala:34:14 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mfor\e[0m(a = _a; a <= c; a += \e[31m1\e\
    [0m) {\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m           \
    \   ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw7msbot2.scala:34:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mfor\e[0m(a\
    \ = _a; a <= c; a += \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                  \
    \        ^\e[0m\n\e[31m   |\e[0m                          '<-' expected, but ';'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw7msbot2.scala:34:34 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mfor\e[0m(a = _a; a <= c; a += \e[31m1\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  '<-' expected, but ')' found\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpw7msbot2.scala:34:18 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mfor\e[0m(a = _a; a <= c; a += \e[31m1\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0mvalue foreach\
    \ is not a member of Null, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e\
    [0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.list asScalaBuffer\n\e[31m  \
    \ |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659979464
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        math.sqrt(a.toDouble * a.toDouble + b.toDouble * b.toDouble + c.toDouble\
    \ * c.toDouble)\n            .toDouble / Math.sqrt(a.toDouble * a.toDouble + b.toDouble\
    \ * b.toDouble + c.toDouble * c.toDouble)\n            .toDouble == 1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt_s1hst3.scala:20)\n\tat Problem.main(tmpt_s1hst3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979463
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // To determine the length of side a\n        val sideA = sqrt(a.toDouble\
    \ * a.toDouble + b.toDouble * b.toDouble + c.toDouble * c.toDouble)\n\n      \
    \  // To determine the length of side b\n        val sideB = sqrt(b.toDouble *\
    \ b.toDouble + a.toDouble * a.toDouble + c.toDouble * c.toDouble)\n\n        //\
    \ To determine the length of side c\n        val sideC = sqrt(c.toDouble * c.toDouble\
    \ + a.toDouble * a.toDouble + b.toDouble * b.toDouble)\n\n        // To determine\
    \ the angle\n        val angle = (sideA - sideB).toDouble / sqrt(sideA * sideA\
    \ + sideB * sideB + sideC * sideC)\n\n        // To determine whether the angle\
    \ is right angle or 90 degree\n        (Math.abs(angle - 90) < 0.00001)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp76z9ad6l.scala:30)\n\tat Problem.main(tmp76z9ad6l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        //Write your code here\n        val left = 0l\n        val right\
    \ = 0l\n        val x = ((b * c) - (a * b))\n        val y = ((b * d) - (a * c))\n\
    \        val z = ((b * e) - (a * d))\n        if(x > 0l && y > 0l && z > 0l) {\n\
    \            left := x\n            right := y\n            true\n        } else\
    \ if(x < 0l && y > 0l && z > 0l) {\n            left := -y\n            right\
    \ := y\n            true\n        } else if(x < 0l && y < 0l && z > 0l) {\n  \
    \          left := -y\n            right := -x\n            true\n        } else\
    \ if(x < 0l && y < 0l && z < 0l) {\n            left := -x\n            right\
    \ := -x\n            true\n        } else if(x > 0l && y < 0l && z < 0l) {\n \
    \           left := x\n            right := -x\n            true\n        } else\
    \ if(x > 0l && y < 0l && z > 0l) {\n            left := -x\n            right\
    \ := z\n            true\n        } else if(x < 0l && y > 0l && z < 0l) {\n  \
    \          left := -y\n            right := z\n            true\n        } else\
    \ if(x < 0l && y > 0l && z > 0l) {\n            left := -x\n            right\
    \ := z\n            true\n        } else if(x > 0l && y > 0l && z < 0l) {\n  \
    \          left := x\n            right := z\n            true\n        } else\
    \ if(x < 0l && y > 0l && z > 0l) {\n            left := -x\n            right\
    \ := -z\n            true\n        } else {\n            false\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpykgqe64p.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36my\e[0m = ((b * d) - (a *\
    \ c))\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m    \
    \                  Not found: d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpykgqe64p.scala:19:22 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mz\e[0m = ((b * e) - (a * d))\n\e[31m\e[31m   |\e\
    [0m                      ^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ e\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpykgqe64p.scala:21:17\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            left := x\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ := is not a member of Long - did you mean left.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpykgqe64p.scala:22:18 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m            right := y\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value := is not a member of Long - did you mean\
    \ right.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpykgqe64p.scala:25:17\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            left := -y\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ := is not a member of Long - did you mean left.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpykgqe64p.scala:26:18 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m            right := y\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value := is not a member of Long - did you mean\
    \ right.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpykgqe64p.scala:29:17\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            left := -y\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ := is not a member of Long - did you mean left.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpykgqe64p."
  stdout: ''
  timestamp: 1659979464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Find the length of each side\n        val aLength : Long = math.sqrt(a\
    \ * a)\n        val bLength : Long = math.sqrt(b * b)\n        val cLength : Long\
    \ = math.sqrt(c * c)\n\n        // Find the hypotenuse for each side\n       \
    \ val aHypotenuse : Long = aLength * b\n        val bHypotenuse : Long = bLength\
    \ * a\n        val cHypotenuse : Long = cLength * b\n\n        // Find the area\
    \ of the triangle by using the hypotenuse\n        val areaTriangle : Double =\
    \ aHypotenuse * bHypotenuse * cHypotenuse\n\n        // The area of the triangle\
    \ must be greater than zero.\n        if(areaTriangle < 0.0) \n            return\
    \ false\n\n        // Return the result based on the triangle sides\n        if(a\
    \ = b) \n            return c == a\n\n        if(b = c)\n            return a\
    \ == c\n\n        if(c = b)\n            return a == b\n\n        // If it reaches\
    \ here, the triangle is not right-angled.\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz5rs7le0.scala:15:38\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36maLength\e\
    [0m : \e[35mLong\e[0m = math.sqrt(a * a)\n\e[31m\e[31m   |\e[0m              \
    \               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \      Found:    Double\n\e[31m   |\e[0m                             Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz5rs7le0.scala:16:38\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbLength\e\
    [0m : \e[35mLong\e[0m = math.sqrt(b * b)\n\e[31m\e[31m   |\e[0m              \
    \               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \      Found:    Double\n\e[31m   |\e[0m                             Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz5rs7le0.scala:17:38\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcLength\e\
    [0m : \e[35mLong\e[0m = math.sqrt(c * c)\n\e[31m\e[31m   |\e[0m              \
    \               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \      Found:    Double\n\e[31m   |\e[0m                             Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpz5rs7le0.scala:32:13\
    \ -----------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mif\e[0m(a\
    \ = b) \n\e[31m\e[31m   |\e[0m           ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \  Reassignment to val a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpz5rs7le0.scala:35:13 -----------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mif\e[0m(b = c)\n\e[31m\e[31m   |\e[0m           ^^^^^\e\
    [0m\n\e[31m   |\e[0m           Reassignment to val b\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpz5rs7le0.sca"
  stdout: ''
  timestamp: 1659979463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val x1: Int = Math.min(a, b, c);\n        val x2: Int = Math.max(a,\
    \ b, c);\n        val y1: Int = Math.min(b, c, a);\n        val y2: Int = Math.max(b,\
    \ c, a);\n        val l1: Int = Math.min(x2, y2);\n        val l2: Int = Math.max(x2,\
    \ y2);\n        val a1: Int = Math.min(x1, y1);\n        val a2: Int = Math.max(x1,\
    \ y1);\n        l1 == l2 && a1 == a2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpl5ipvhm0.scala:14:27 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mx1\e[0m: \e[35mInt\e[0m\
    \ = Math.min(a, b, c);\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmin\e[0m in \e[33mobject\e[0m \e[35mMath\e[0m with types\n\e[31m   |\e[0m\
    \ (x$0: Double, x$1: Double): Double\n\e[31m   |\e[0m (x$0: Float, x$1: Float):\
    \ Float\n\e[31m   |\e[0m (x$0: Long, x$1: Long): Long\n\e[31m   |\e[0m (x$0: Int,\
    \ x$1: Int): Int\n\e[31m   |\e[0mmatch arguments ((a : Long), (b : Long), (c :\
    \ Long))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpl5ipvhm0.scala:15:27 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mx2\e[0m: \e[35mInt\e[0m\
    \ = Math.max(a, b, c);\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mobject\e[0m \e[35mMath\e[0m with types\n\e[31m   |\e[0m\
    \ (x$0: Double, x$1: Double): Double\n\e[31m   |\e[0m (x$0: Float, x$1: Float):\
    \ Float\n\e[31m   |\e[0m (x$0: Long, x$1: Long): Long\n\e[31m   |\e[0m (x$0: Int,\
    \ x$1: Int): Int\n\e[31m   |\e[0mmatch arguments ((a : Long), (b : Long), (c :\
    \ Long))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpl5ipvhm0.scala:16:27 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36my1\e[0m: \e[35mInt\e[0m\
    \ = Math.min(b, c, a);\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmin\e[0m in \e[33mobject\e[0m \e[35mMath\e[0m with types\n\e[31m   |\e[0m\
    \ (x$0: Double, x$1: Double): Double\n\e[31m   |\e[0m (x$0: Float, x$1: Float):\
    \ Float\n\e[31m   |\e[0m (x$0: Long, x$1: Long): Long\n\e[31m   |\e[0m (x$0: Int,\
    \ x$1: Int): Int\n\e[31m   |\e[0mmatch arguments ((b : Long), (c : Long), (a :\
    \ Long))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpl5ipvhm0.scala:17:27 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36my2\e[0m: \e[35mInt\e[0m\
    \ = Math.max(b, c, a);\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e\
    [0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659979461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n      val rad = math.atan2( b * 0.5 - c * 0.5, a * 0.5 - c * 0.5 )\n  \
    \    rad > math.pi/2 || rad < -math.pi/2 \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyr75dycy.scala:15:17 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      rad > math.pi/\e[31m2\e[0m || rad < -math.pi/\e\
    [31m2\e[0m \n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \          value pi is not a member of math\n1 error found\n"
  stdout: ''
  timestamp: 1659979463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n      val a = a.toDouble\n      val b = b.toDouble\n      val c = c.toDouble\n\
    \      val ab = math.pow(b, 2)\n      val ac = math.pow(c, 2)\n      val ad =\
    \ math.pow(a, 2)\n      ab == ac && ab == ad && ac == ad\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3u0lkkix.scala:14:14 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m      \e[33mval\e[0m \e[36ma\e[0m = a.toDouble\n\e[31m\e\
    [31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m              Recursive \e[33mvalue\e\
    [0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp3u0lkkix.scala:15:14 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m      \e[33mval\e[0m \e[36mb\e[0m = b.toDouble\n\e[31m\e[31m   |\e[0m\
    \              ^\e[0m\n\e[31m   |\e[0m              Recursive \e[33mvalue\e[0m\
    \ \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp3u0lkkix.scala:16:14 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m      \e[33mval\e[0m \e[36mc\e[0m = c.toDouble\n\e[31m\e[31m   |\e[0m\
    \              ^\e[0m\n\e[31m   |\e[0m              Recursive \e[33mvalue\e[0m\
    \ \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n      val d1 = (b*b) - (4*a*c)\n      val d2 = (a*a) - (4*b*c)\n      val\
    \ d3 = (b*b) - (4*a*c)\n      val d4 = (a*a) - (4*b*c)\n      if (d1 == 0) \n\
    \        if (d2 == 0)\n          if (d3 == 0) true\n            else false\n \
    \       else false\n      else if (d2 == 0) \n        if (d3 == 0) true\n    \
    \      else false\n        else false\n      else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_psymd6l.scala:27:6 ------------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m      \e[33melse\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m      ^^^^\e[0m\n\e[31m   |\e[0m      end of statement expected but\
    \ 'else' found\n1 error found\n"
  stdout: ''
  timestamp: 1659979460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // use scala.math to calculate angle\n        // use scala.collection.mutable\
    \ to store length\n        val a = math.radians(a)\n        val b = math.radians(b)\n\
    \        val c = math.radians(c)\n        // calculate hypotenuse length\n   \
    \     val hypotenuse = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n        //\
    \ calculate cosine of angle\n        val cosine = math.acos(b / hypotenuse)\n\
    \        // calculate sine of angle\n        val sine = math.asin(b / hypotenuse)\n\
    \        // check cosine\n        if (cosine > 1.0) cosine = 1.0\n        if (cosine\
    \ < -1.0) cosine = -1.0\n        // check sine\n        if (sine > 1.0) sine =\
    \ 1.0\n        if (sine < -1.0) sine = -1.0\n        // check hypotenuse\n   \
    \     if (hypotenuse < 0.0) hypotenuse = 0.0\n        // check cosine is between\
    \ -1.0 and 1.0\n        if (cosine < -1.0) cosine = -1.0\n        if (cosine >\
    \ 1.0) cosine = 1.0\n        // check sine is between -1.0 and 1.0\n        if\
    \ (sine < -1.0) sine = -1.0\n        if (sine > 1.0) sine = 1.0\n        // check\
    \ hypotenuse is between 0.0 and hypotenuse\n        if (hypotenuse < 0.0) hypotenuse\
    \ = 0.0\n        // check cosine is between 0.0 and 1.0\n        if (cosine <\
    \ 0.0) cosine = 0.0\n        if (cosine > 1.0) cosine = 1.0\n        // check\
    \ sine is between 0.0 and 1.0\n        if (sine < 0.0) sine = 0.0\n        if\
    \ (sine > 1.0) sine = 1.0\n        // return result\n        if (cosine * sine\
    \ < 0.0) false else true\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkeu48vxq.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.radians(a)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          value radians is not a member of math\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpkeu48vxq.scala:16:29 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.radians(a)\n\e[31m\e[31m\
    \   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m               \
    \              Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkeu48vxq.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.radians(b)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          value radians is not a member of math\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpkeu48vxq.scala:17:29 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.radians(b)\n\e[31m\e[31m\
    \   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m               \
    \              Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkeu48vxq.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.radians(c)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          value radians is not a member of math\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpkeu48vxq.scala:18:29 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.radians(c)\n\e[31m\e[31m\
    \   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m               \
    \              Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: "
  stdout: ''
  timestamp: 1659979465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val triangleSides = a to b toList to c toList\n        val triangleArea\
    \ = triangleSides reduce ((a,b) => a + b) toDouble * 0.5\n        val isRight\
    \ = triangleArea < 0.0 && triangleArea > triangleSides.last / 2\n        triangleSides\
    \ foreach println\n        isRight\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxzlioig1.scala:15:76 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mtriangleArea\e[0m = triangleSides\
    \ reduce ((\e[36ma\e[0m,\e[36mb\e[0m) => a + b) toDouble * \e[31m0.5\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                  ^\e[0m\n\e[31m   |\e[0m                      end of statement\
    \ expected but number literal found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxzlioig1.scala:14:42\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mtriangleSides\e[0m = a to b toList to c toList\n\e[31m\e[31m   |\e[0m    \
    \                                      ^^\e[0m\n\e[31m   |\e[0m              \
    \                            Not found: to\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpxzlioig1.scala:14:47 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mtriangleSides\e[0m = a to b toList\
    \ to c toList\n\e[31m\e[31m   |\e[0m                                         \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \     Not found: toList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if( a>b && a>c )\n            false\n        else\n           \
    \ if( b>a && b>c )\n                false\n            else\n                if(\
    \ c>a && c>b )\n                    false\n                else\n            \
    \        true\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8xqmmqpe.scala:26)\n\tat Problem.main(tmp8xqmmqpe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ab = math.sqrt((a * a) + (b * b))\n        val ac = math.sqrt((a\
    \ * a) + (c * c))\n        val bc = math.sqrt((b * b) + (c * c))\n        ab <\
    \ ac && ab < bc\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1tccsk9g.scala:21)\n\tat Problem.main(tmp1tccsk9g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val abs = math.sqrt(b.toDouble * a.toDouble)\n        val ac =\
    \ math.sqrt(a.toDouble * c.toDouble)\n        val bc = math.sqrt(b.toDouble *\
    \ c.toDouble)\n\n        val denom = abs * bc\n        val a1 = abs / (a * b)\n\
    \        val b1 = bc / (b * c)\n        val a2 = abs / (a * c)\n        val b2\
    \ = bc / (b * a)\n\n        val d1 = a1 * b2 - a2 * b1\n        val d2 = b1 *\
    \ a2 - b2 * a1\n\n        if (denom == 0) {\n            false\n        } else\
    \ {\n            if (d1 > 0) {\n                d1.toDouble > 0\n            }\
    \ else {\n                d2.toDouble > 0\n            }\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl24hd5mt.scala:39)\n\tat Problem.main(tmpl24hd5mt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var sum = 0l\n        val x = Math.abs(a) + Math.abs(b) + Math.abs(c)\n\
    \        x match {\n            case x if x >= 1l =>\n                sum += a\n\
    \            case x if x >= 2l =>\n                sum += b\n            case\
    \ x if x >= 3l =>\n                sum += c\n            case x if x == 1l ||\
    \ x == 2l || x == 3l =>\n                if (Math.abs(Math.sin(a) * Math.sin(b)\
    \ * Math.sin(c)) < Math.sqrt(Math.abs(a * b * c))) return true\n            case\
    \ _ =>\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsrx_ykm8.scala:30)\n\tat Problem.main(tmpsrx_ykm8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n      val l = Math.sqrt(a*a + b*b + c*c)\n      val d = (a*a + b*b - c*c)/(l*l)\n\
    \      d < 1.0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgrw34_88.scala:20)\n\tat Problem.main(tmpgrw34_88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ab = b - a\n        val ac = c - a\n        val bc = c - b\n\
    \        val abc = ab * bc\n        abc < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi8c6307u.scala:21)\n\tat Problem.main(tmpi8c6307u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979470
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n  \
    \      val bc = math.abs(b - c)\n\n        ab < ac && ab < bc\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphnmc_d2w.scala:21)\n\tat Problem.main(tmphnmc_d2w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val a1 = scala.math.sqrt(a * a + b * b)\n        val a2 = scala.math.sqrt(a\
    \ * a + c * c)\n        val b2 = scala.math.sqrt(b * b + c * c)\n        (a1 *\
    \ a2 + a2 * b2 == b1 * a2) || (a1 * a2 + a2 * b2 == c * a2) || (a1 * a2 + a2 *\
    \ b2 == a1 * b2) || (b1 * a2 + b2 * b2 == c1 * a2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm28g63h1.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        (a1 * a2 + a2 * b2 == b1 * a2) || (a1 * a2 +\
    \ a2 * b2 == c * a2) || (a1 * a2 + a2 * b2 == a1 * b2) || (b1 * a2 + b2 * b2 ==\
    \ c1 * a2)\n\e[31m\e[31m   |\e[0m                              ^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: b1\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979468
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c && b > c && a != 0 && b != 0 && c != 0) \n \
    \       {\n            val tri = math.sqrt(a * a + b * b + c * c)\n          \
    \  if (tri % 1 != 0) {\n                return false\n            }\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpajebwb7b.scala:25)\n\tat Problem.main(tmpajebwb7b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979471
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a == 0) false else if (b == 0) false else a != b\n        &&\
    \ ((Math.atan2((b - a), (c - a)) < Math.toDegrees(90)) == true)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpftkcj1mi.scala:19)\n\tat Problem.main(tmpftkcj1mi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979472
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val leftSide  = math.sqrt( (pow(a,2)) + (pow(b,2)) + (pow(c,2))\
    \ ) \n        val rightSide = math.sqrt( (pow(a,2)) - (pow(b,2)) - (pow(c,2))\
    \ ) \n        val aIsRight = Math.abs( Math.asin ( leftSide ) ) == 90 \n     \
    \   val bIsRight = Math.abs( Math.asin ( rightSide ) ) == 90 \n        val cIsRight\
    \ = Math.abs( Math.asin ( rightSide ) ) == 90 \n        if (aIsRight && bIsRight\
    \ && cIsRight)\n            true \n        else \n            false \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm9qiurt4.scala:25)\n\tat Problem.main(tmpm9qiurt4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979471
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ad = a/2\n        val bd = b/2\n        val cd = c/2\n    \
    \    var ad2 = ad*ad\n        var bd2 = bd*bd\n        var cd2 = cd*cd\n     \
    \   var adb2 = ad2*bd\n        var adc2 = ad2*cd\n        var bdc2 = bd2*cd\n\
    \        val discriminant = adb2 + bdc2 - adc2\n        discriminant > 0\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph8m7w1am.scala:28)\n\tat Problem.main(tmph8m7w1am.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979471
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val l1 = (a * b * c).toInt\n        val l2 = (b * a * c).toInt\n\
    \        val l3 = (a * b * c).toInt\n        l1 > l2 && (l1 > l3 || l2 > l3)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5t38k_dk.scala:20)\n\tat Problem.main(tmp5t38k_dk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979471
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ab = math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))\n        val\
    \ ac = math.sqrt(Math.pow(a, 2) + Math.pow(c, 2))\n        val bc = math.sqrt(Math.pow(b,\
    \ 2) + Math.pow(c, 2))\n        ((ab + ac > bc) && (ab - ac > bc))\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9rozpez9.scala:20)\n\tat Problem.main(tmp9rozpez9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Define a function\n        def getAngle(point : Long) : Double\
    \ = {\n            Math.atan2(point, b) - Math.atan2(point, a)\n        }\n  \
    \      \n        // Check if it is an angle\n        if(getAngle(a) == getAngle(b)\
    \ == getAngle(c)) {\n            return true\n        }\n        \n        //\
    \ The 3 angles\n        var a1 = getAngle(a)\n        var b1 = getAngle(b)\n \
    \       var c1 = getAngle(c)\n        \n        // Check if one of them is 90\
    \ degree\n        if(a1 == Math.PI && b1 == Math.PI && c1 == Math.PI) {\n    \
    \        return true\n        }\n        \n        // If any of the angles are\
    \ not 90 degree\n        if(a1 != Math.PI && b1 != Math.PI && c1 != Math.PI) {\n\
    \            // Return the other side\n            val b2 = getAngle(b)\n    \
    \        val c2 = getAngle(c)\n            \n            if(a1 == b2 && b1 ==\
    \ c2 && c1 == a1) {\n                return true\n            }\n            \n\
    \            // Otherwise, try other side\n            if(a1 == b2 && b1 != c2\
    \ && c1 != a1) {\n                return true\n            }\n            \n \
    \           // Otherwise, try other side\n            if(a1 != b2 && b1 == c2\
    \ && c1 != a1) {\n                return true\n            }\n        }\n    \
    \    \n        return false\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4pih_sl2.scala:20:11 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(getAngle(a) == getAngle(b) == getAngle(c))\
    \ {\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     Values of types Boolean and Double cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659979472
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var x = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n        var\
    \ y = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n        var z = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\n        if ((x >= y && x >= z) || (y >= x && y >= z))\
    \ {\n            return true\n        } else {\n            return false\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4z8wa4qb.scala:25)\n\tat Problem.main(tmp4z8wa4qb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979473
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // The third side will be equal to the other two. \n        //\
    \ The third side is b + c\n        val b2 = b + c\n        // The third side will\
    \ be equal to the other two. \n        // The third side is b - c\n        val\
    \ c2 = b - c\n        // The third side will be equal to the other two. \n   \
    \     // The third side is b2 - c2\n        val a2 = b2 - c2\n        // The third\
    \ side will be equal to the other two. \n        // The third side is b2 + c2\n\
    \        val b2 = b2 + c2\n        // If b2 + c2 > a2, the third side is b + c.\n\
    \        // If b2 - c2 > a2, the third side is b - c.\n        // If b2 + c2 >\
    \ a2, the third side is b2 - c2.\n        // If b2 - c2 > a2, the third side is\
    \ b2 + c2.\n        (b2 + c2 > a2) || ((b2 - c2 > a2) || (b2 + c2 > a2) || (b2\
    \ - c2 > a2))\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoy33i9pu.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb2\e[0m = b2 + c2\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mb2 is already defined\
    \ as \e[33mvalue\e[0m \e[35mb2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979470
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n      val AB = math.sqrt((a*a)+(4*b*c)); \n      val AC = math.sqrt((a*a)+(2*b*c));\
    \ \n      val BC = math.sqrt((2*b*c)+(a*a));\n      val A = (b*b) - ((3*b*c)+(a*a));\
    \ \n      val B = (3*b*c) - ((5*a*b) + (2*b*c));\n      val C = (5*a*b) - ((7*a*b)\
    \ + (3*b*c));\n      if(AC == 0){\n        true\n      }else if(AB*BC == 0){\n\
    \        true\n      }else{\n        math.atan((B*B+C*C)/(2*AB*BC)) == math.atan((B*B-A*A)/(2*AB*BC))\n\
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5vu6e66u.scala:29)\n\tat Problem.main(tmp5vu6e66u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979473
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a == 0 && b == 0 && c == 0) true else false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfey0j1vb.scala:17)\n\tat Problem.main(tmpfey0j1vb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979472
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > 0 && b > 0 && c > 0){\n            var result = true\n\
    \            if (b > a){\n                if (c > b){\n                    result\
    \ = false\n                }else{\n                    result = true\n       \
    \         }\n            }else{\n                if (c > a){\n               \
    \     result = false\n                }else{\n                    result = true\n\
    \                }\n            }\n            result\n        }else{\n      \
    \      false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpawbp85ew.scala:35)\n\tat Problem.main(tmpawbp85ew.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979472
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var angleA = a.toDouble / 2\n        var angleB = b.toDouble /\
    \ 2\n        var angleC = c.toDouble / 2\n        if (Math.sqrt(Math.pow(angleA,\
    \ 2) + Math.pow(angleB, 2) + Math.pow(angleC, 2)) <= 1)\n        {\n         \
    \   return true\n        }\n        var x1 = (angleA * angleB - angleC) / (Math.sqrt(Math.pow(angleA,\
    \ 2) + Math.pow(angleC, 2)))\n        var y1 = (angleC * angleB - angleA) / (Math.sqrt(Math.pow(angleA,\
    \ 2) + Math.pow(angleC, 2)))\n        var x2 = (angleA * angleC - angleB) / (Math.sqrt(Math.pow(angleA,\
    \ 2) + Math.pow(angleC, 2)))\n        var y2 = (angleB * angleC - angleA) / (Math.sqrt(Math.pow(angleA,\
    \ 2) + Math.pow(angleC, 2)))\n        if (x1 == y2 && x1 == y1 && x2 == y1)\n\
    \        {\n            return true\n        }\n        if (x1 <= x2 && x2 <=\
    \ y1)\n        {\n            return true\n        }\n        if (x1 >= x2 &&\
    \ x2 >= y1)\n        {\n            return true\n        }\n        if (x1 >=\
    \ x2 && x1 <= y2 && y2 <= x1)\n        {\n            return true\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt5cdagpm.scala:45)\n\tat Problem.main(tmpt5cdagpm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979473
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        def isAngle(a : Long, b : Long, c : Long) : Boolean = {\n     \
    \       if (a == b || a == c || b == c) return true\n            else return false\n\
    \        }\n        def isRightAngle(a : Long, b : Long, c : Long) : Boolean =\
    \ {\n            if (a == b || a == c || b == c) return true\n            else\
    \ return false\n        }\n        if (isAngle(a, b, c) && isAngle(a, c, b)) {\n\
    \            if (isRightAngle(a, b, c)) return true\n            else return false\n\
    \        }\n        val ab = abs(b - c)\n        val ac = abs(a - c)\n       \
    \ val bc = abs(b - c)\n        if (ab != ac && ab != bc) return false\n      \
    \  if (ac > bc && ab != bc) return true\n        if (bc > ac && ab != bc) return\
    \ true\n        if (ac < bc && ab != bc) return true\n        return false\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo73j331g.scala:36)\n\tat Problem.main(tmpo73j331g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979473
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if((b - c) * (b + c) > a * a) {\n            false\n        } else\
    \ {\n            var bsq = a * a\n            var csq = b * b\n            var\
    \ det = bsq * c - a * c\n            if(det >= 0.0) {\n                var s =\
    \ (-b + Math.sqrt(det)) / (2.0 * a)\n                if(s == 0.0) {\n        \
    \            true\n                } else {\n                    var isRight =\
    \ s >= 0.0\n                    if(isRight) {\n                        val q =\
    \ (-b - Math.sqrt(det)) / (2.0 * a)\n                        if(q == 0.0) {\n\
    \                            true\n                        }\n               \
    \     }\n                }\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf80h7_wo.scala:20:12\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(det\
    \ >= \e[31m0.0\e[0m) {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e\
    [0m            Found:    Unit\n\e[31m   |\e[0m            Required: Boolean\n\e\
    [31m   |\e[0m            Maybe you are missing an else part for the conditional?\n\
    \e[31m21 |\e[0m                \e[33mvar\e[0m \e[36ms\e[0m = (-b + Math.sqrt(det))\
    \ / (\e[31m2.0\e[0m * a)\n\e[31m22 |\e[0m                \e[33mif\e[0m(s == \e\
    [31m0.0\e[0m) {\n\e[31m23 |\e[0m                    \e[31mtrue\e[0m\n\e[31m24\
    \ |\e[0m                } \e[33melse\e[0m {\n\e[31m25 |\e[0m                 \
    \   \e[33mvar\e[0m \e[36misRight\e[0m = s >= \e[31m0.0\e[0m\n\e[31m26 |\e[0m \
    \                   \e[33mif\e[0m(isRight) {\n\e[31m27 |\e[0m                \
    \        \e[33mval\e[0m \e[36mq\e[0m = (-b - Math.sqrt(det)) / (\e[31m2.0\e[0m\
    \ * a)\n\e[31m28 |\e[0m                        \e[33mif\e[0m(q == \e[31m0.0\e\
    [0m) {\n\e[31m29 |\e[0m                            \e[31mtrue\e[0m\n\e[31m30 |\e\
    [0m                        }\n\e[31m31 |\e[0m                    }\n\e[31m32 |\e\
    [0m                }\n\e[31m33 |\e[0m            }\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Check if either side is zero\n        if((a < 0L) || (b < 0L)\
    \ || (c < 0L))\n            return false\n        // Check if a is less than b,\
    \ c\n        else if(a < b) \n        { \n            // check if b is less than\
    \ c\n            else if(b < c) \n            { \n                // check if\
    \ c is less than a\n                else if(c < a) \n                { \n    \
    \                // return true\n                    true\n                }\n\
    \                // else return false\n                else\n                {\
    \ \n                    // else return false\n                    false\n    \
    \            }\n            }\n            // else return false\n            else\n\
    \            {\n                // else return false\n                false\n\
    \            }\n        }\n        // else return false\n        else\n      \
    \  {\n            // else return false\n            false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpyw320q9u.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(b < c) \n\e\
    [31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            Illegal start\
    \ of statement\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpyw320q9u.scala:24:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33melse\e\
    [0m \e[33mif\e[0m(c < a) \n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e\
    [31m   |\e[0m                Illegal start of statement\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpyw320q9u.scala:30:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                \e[33melse\e[0m\n\e[31m\e[31m   |\e[0m\
    \                ^^^^\e[0m\n\e[31m   |\e[0m                end of statement expected\
    \ but 'else' found\n\e[31m\e[31m-- Error: /tmp/tmpyw320q9u.scala:37:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            \e[33melse\e[0m\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^\e[0m\n\e[31m   |\e[0m            end of statement expected but\
    \ 'else' found\n4 errors found\n"
  stdout: ''
  timestamp: 1659979472
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (c > a && c > b) false\n        else if (c < a && c < b) false\n\
    \        else if (c < a && c > b) true\n        else if (c > a && c < b) true\n\
    \        else false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa4jfe3hx.scala:21)\n\tat Problem.main(tmpa4jfe3hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979474
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val a1 = math.sqrt(a * a + b * b)\n        val c1 = math.sqrt(c\
    \ * c + a * a)\n        val b1 = math.sqrt(b * b + c * c)\n        return (a1\
    \ < b1 && a1 < c1 && b1 < c1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6w_ujc5p.scala:20)\n\tat Problem.main(tmp6w_ujc5p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val a = abs(a)\n        val b = abs(b)\n        val c = abs(c)\n\
    \        \n        val discriminant = b * b - 4 * a * c\n        \n        if\
    \ (discriminant < 0) \n            throw new RuntimeException(\"a < 0\")\n   \
    \     \n        // discriminant > 0\n        if (discriminant >= 0) {\n      \
    \      val root1 = (-b + sqrt(discriminant)) / (2 * a)\n            val root2\
    \ = (-b - sqrt(discriminant)) / (2 * a)\n            if (root1 <= 0 && root2 <=\
    \ 0)\n                true\n            else\n                false\n        }\n\
    \        else \n            false\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpr5web0a9.scala:14:20 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = abs(a)\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpr5web0a9.scala:15:20 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = abs(b)\n\e[31m\e[31m\
    \   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Recursive\
    \ \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpr5web0a9.scala:16:20 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = abs(c)\n\e[31m\e[31m\
    \   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Recursive\
    \ \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979474
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val d1 = b - a\n        val d2 = c - a\n        val d3 = b - c\n\
    \        d1 < 0 && d2 < 0 && d3 < 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbnj1vo4g.scala:20)\n\tat Problem.main(tmpbnj1vo4g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val x1 = (b - a) / (2l)\n        val x2 = (c - b) / (2l)\n    \
    \    val x3 = x1 +x2\n        val y1 = (a + c) / (2l)\n        val y2 = (y1 -\
    \ c) / (2l)\n        val y3 = (y1 - b) / (2l)\n        (x2 == 0 && y1 == 0 &&\
    \ y3 == 0) || (x1 == 0 && y2 == 0 && y3 == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_g_vi83x.scala:24)\n\tat Problem.main(tmp_g_vi83x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n      if(a == 0 && b == 0 && c == 0) true\n      else {\n        if(math.abs(a-b)\
    \ == math.abs(a-c) && math.abs(b-b) == math.abs(c-c)) true\n        else false\n\
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2d0xeqc0.scala:21)\n\tat Problem.main(tmp2d0xeqc0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a < 0 || b < 0 || c < 0) \n            return false\n\n   \
    \     var sum : Long = 0\n        var d : Long = Math.sqrt(Math.pow(a - b, 2)\
    \ + Math.pow(c - b, 2))\n        var t : Long = Math.abs(b - c)\n        if (d\
    \ > t || d + t < d)\n            return false\n\n        for (i <- 1 to d) {\n\
    \            sum += d * Math.pow((a + b) / 2, 2)\n        }\n\n        if (sum\
    \ == 0)\n            return false\n\n        // if sum value is equal to a + b\
    \ + c, then a + b is greater than c\n        return a + b == sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbrs5jgl8.scala:18:32\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36md\e\
    [0m : \e[35mLong\e[0m = Math.sqrt(Math.pow(a - b, \e[31m2\e[0m) + Math.pow(c -\
    \ b, \e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    Double\n\e[31m   |\e[0m \
    \                      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbrs5jgl8.scala:23:23 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to d) {\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     Found:    (d : Long)\n\e[31m   |\e[0m                       Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbrs5jgl8.scala:24:16\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            sum += d * Math.pow((a\
    \ + b) / \e[31m2\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Long - did you mean\
    \ Long.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (b - a < c && c - b < a && c - b > -a) {\n            true\n\
    \        } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ys1dz_l.scala:24)\n\tat Problem.main(tmp4ys1dz_l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (Math.sqrt(a*a + b*b + c*c) != 0l) {\n            val triangleSide1x\
    \ = a\n            val triangleSide1y = b\n            val triangleSide2x = c\n\
    \            val triangleSide2y = a\n            val triangleSide3x = c\n    \
    \        val triangleSide3y = b\n\n            // To check if a triangle is a\
    \ right angled one\n            // We have to calculate the area of triangle using\
    \ Heron's formula\n            // http://en.wikipedia.org/wiki/Heron%27s_formula\n\
    \            val triangleArea = Math.sqrt(triangleSide1x*triangleSide1x + triangleSide1y*triangleSide1y)\n\
    \            val rightAngleTriangleArea = triangleArea * (triangleSide2x + triangleSide3x)\
    \ / 2\n            val upTriangleArea = triangleArea * (triangleSide1x + triangleSide3x)\n\
    \            val downTriangleArea = triangleArea * (triangleSide1y + triangleSide3y)\n\
    \            // If area is same then triangle is a right angled one\n        \
    \    if (triangleArea == rightAngleTriangleArea) {\n                return true\n\
    \            } else if (triangleArea == upTriangleArea) {\n                return\
    \ true\n            } else if (triangleArea == downTriangleArea) {\n         \
    \       return true\n            } else {\n                return false\n    \
    \        }\n        } else {\n            return false\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1920k4ev.scala:44)\n\tat Problem.main(tmp1920k4ev.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Write your code here\n        def isRightAngle(a: Long, angle:\
    \ Long, length: Long): Boolean = {\n            val xs = List(a, b)\n        \
    \    val ys = List(c, c)\n            val xLen = math.sqrt((a * a) + ((b * b)\
    \ - (a * c)))\n            val yLen = math.sqrt((a * a) + ((b * b) - (a * b)))\n\
    \            val r = math.sqrt((xLen * xLen) - ((yLen * yLen) - (xLen * yLen)))\n\
    \            val xa = xs.map( x => (x/r)%1)\n            val ya = ys.map( y =>\
    \ (y/r)%1)\n            val d = ((xa * ya) - (ya * xa)).toDouble\n           \
    \ if (math.abs(d) < 1.0) true else false\n        }\n        def isRightAngle2(a:\
    \ Long, angle: Long, length: Long): Boolean = {\n            val xs = List(a,\
    \ b)\n            val ys = List(c, c)\n            val xLen = math.sqrt((a * a)\
    \ + ((b * b) - (a * c)))\n            val yLen = math.sqrt((a * a) + ((b * b)\
    \ - (a * b)))\n            val r = math.sqrt((xLen * xLen) - ((yLen * yLen) -\
    \ (xLen * yLen)))\n            val xa = xs.map( x => (x/r)%1)\n            val\
    \ ya = ys.map( y => (y/r)%1)\n            val d = ((xa * ya) - (ya * xa)).toDouble\n\
    \            if (math.abs(d) < 1.0) true else false\n        }\n        def isRightAngle3(a:\
    \ Long, angle: Long, length: Long): Boolean = {\n            val xs = List(a,\
    \ b)\n            val ys = List(c, c)\n            val xLen = math.sqrt((a * a)\
    \ + ((b * b) - (a * c)))\n            val yLen = math.sqrt((a * a) + ((b * b)\
    \ - (a * b)))\n            val r = math.sqrt((xLen * xLen) - ((yLen * yLen) -\
    \ (xLen * yLen)))\n            val xa = xs.map( x => (x/r)%1)\n            val\
    \ ya = ys.map( y => (y/r)%1)\n            val d = ((xa * ya) - (ya * xa)).toDouble\n\
    \            if (math.abs(d) < 1.0) true else false\n        }\n        def isRightAngle4(a:\
    \ Long, angle: Long, length: Long): Boolean = {\n            val xs = List(a,\
    \ b)\n            val ys = List(c, c)\n            val xLen = math.sqrt((a\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpckzo3vso.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpckzo3vso.scala:68:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpckzo3vso.scala:23:25 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m            \e[33mval\e[0m \e[36md\e[0m = ((xa * ya) - (ya * xa)).toDouble\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0mvalue * is\
    \ not a member of List[Double], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpckzo3vso.scala:34:25 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e[0m \e[36md\e[0m = ((xa * ya)\
    \ - (ya * xa)).toDouble\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\
    \e[31m   |\e[0mvalue * is not a member of List[Double], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpckzo3vso.scala:45:25 ------------------------\e[0m\e\
    [0m\n\e[31m45 |\e[0m            \e[33mval\e[0m \e[36md\e[0m = ((xa * ya) - (ya\
    \ * xa)).toDouble\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue * is not a member of List[Double], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659979483
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val l = a to b\n        val r = c to l\n        val u = a to c\n\
    \        val v = b to u\n        if (u.product() < v.product()) {\n          \
    \  val u = c to b\n            val v = a to u\n            val w = c to v\n  \
    \          val a = u.product()\n            val b = v.product()\n            val\
    \ c = w.product()\n            val s = (a + b + c) / 2\n            return if\
    \ (s > (a + b + c)) {\n                true\n            } else {\n          \
    \      false\n            }\n        } else {\n            val u = a to c\n  \
    \          val v = c to b\n            val w = b to u\n            val a = u.product()\n\
    \            val b = v.product()\n            val c = w.product()\n          \
    \  val s = (a + b + c) / 2\n            return if (s > (a + b + c)) {\n      \
    \          true\n            } else {\n                false\n            }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpui118q2x.scala:15:21\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mr\e\
    [0m = c to l\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m\
    \ Found:    (l : scala.collection.immutable.NumericRange.Inclusive[Long])\n\e\
    [31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpui118q2x.scala:17:21 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mv\e[0m = b to u\n\e[31m\e[31m   |\e[0m  \
    \                   ^\e[0m\n\e[31m   |\e[0m Found:    (u : scala.collection.immutable.NumericRange.Inclusive[Long])\n\
    \e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpui118q2x.scala:18:21\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \ \e[33mif\e[0m (u.product() < v.product()) {\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter num of \e\
    [33mmethod\e[0m \e[35mproduct\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m: (\e[33mimplicit \e[0mnum: Numeric[B]): B\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpui118q2x.scala:21:20 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m            \e[33mval\e[0m \e[36mw\e[0m = c to v\n\e[31m\e[31m   |\e[0m\
    \                    ^\e[0m\n\e[31m   |\e[0m                    Recursive \e[33mvalue\e\
    [0m \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpui118q2x.scala:35:20 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m            \e[33mval\e[0m \e[36ma\e[0m = u.product()\n\e[31m\e[31m  \
    \ |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Recursive\
    \ \e[33mvalue\e[0m \e[35mu\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpui118q2x.scala:36:20 ---------------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m            \e[33"
  stdout: ''
  timestamp: 1659979481
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sqrt1 = math.sqrt(a.toDouble * a.toDouble + b.toDouble * b.toDouble\
    \ + c.toDouble * c.toDouble - 2 * a.toDouble * b.toDouble + 2 * a.toDouble * c.toDouble\
    \ - 2 * b.toDouble * c.toDouble + a.toDouble * b.toDouble + a.toDouble * c.toDouble\
    \ - b.toDouble * a.toDouble - b.toDouble * c.toDouble - c.toDouble * a.toDouble\
    \ - c.toDouble * b.toDouble)\n        val sqrt2 = math.sqrt(a.toDouble * a.toDouble\
    \ + b.toDouble * b.toDouble + c.toDouble * c.toDouble - 2 * a.toDouble * b.toDouble\
    \ + 2 * a.toDouble * c.toDouble - 2 * b.toDouble * c.toDouble + a.toDouble * b.toDouble\
    \ + a.toDouble * c.toDouble - b.toDouble * a.toDouble - b.toDouble * c.toDouble\
    \ - c.toDouble * a.toDouble - c.toDouble * b.toDouble)\n        sqrt1 / sqrt2\
    \ > 1\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplv7ul74b.scala:19)\n\tat Problem.main(tmplv7ul74b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sum\n        val roots = List(1/a, 1/b,\
    \ 1/c).product\n        (sides == roots) || (sides * sides == roots * roots)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6wo0rupb.scala:19)\n\tat Problem.main(tmp6wo0rupb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979483
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Write your code here\n        val side1 = a + (b / 2)\n    \
    \    val side2 = c + (c / 2)\n        val side3 = a + c\n\n        return (side1\
    \ == side2 || side2 == side3 || side1 == side3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbcvq7rwj.scala:22)\n\tat Problem.main(tmpbcvq7rwj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var d= (b*b) - (4 * a * c)\n        if (d < 0) {\n            d\
    \ = -d;\n        }\n        val e = (b * b) - (4 * a * c);\n        if (e < 0)\
    \ {\n            e = -e;\n        }\n        if (d == 0 || e == 0) {\n       \
    \     return false\n        }\n        val discriminant = b * b - 4 * a * c;\n\
    \        val root1 = (-b + Math.sqrt(discriminant)) / (2 * a);\n        val root2\
    \ = (-b - Math.sqrt(discriminant)) / (2 * a);\n        val root3 = (-b + Math.sqrt(discriminant))\
    \ / (2 * a);\n        val root4 = (-b - Math.sqrt(discriminant)) / (2 * a);\n\
    \        val roots = List(root1, root2, root3, root4);\n        val isRight =\
    \ (roots contains root1 || roots contains root2 || roots contains root3 || roots\
    \ contains root4);\n        return isRight\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpd65sc3h4.scala:20:14 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            e = -e;\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val e\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd65sc3h4.scala:31:44 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36misRight\e[0m = (roots contains\
    \ root1 || roots contains root2 || roots contains root3 || roots contains root4);\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      value || is not a member of Double\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd65sc3h4.scala:31:68 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36misRight\e[0m = (roots contains\
    \ root1 || roots contains root2 || roots contains root3 || roots contains root4);\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                      value\
    \ || is not a member of Double\n3 errors found\n"
  stdout: ''
  timestamp: 1659979482
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        Math.abs(a - b) > (Math.abs(b - a) + Math.abs(c - b))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfmor08r7.scala:17)\n\tat Problem.main(tmpfmor08r7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var x1 = (a / 2l)\n        var y1 = (b / 2l)\n        var z1 =\
    \ (c / 2l)\n        var x2 = (a / 2l)\n        var y2 = (b / 2l)\n        var\
    \ z2 = (c / 2l)\n        var x3 = (a / 2l)\n        var y3 = (b / 2l)\n      \
    \  var z3 = (c / 2l)\n        var x4 = (a / 2l)\n        var y4 = (b / 2l)\n \
    \       var z4 = (c / 2l)\n        var x5 = (a / 2l)\n        var y5 = (b / 2l)\n\
    \        var z5 = (c / 2l)\n        x1 = Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1)\n\
    \        x2 = Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2)\n        x3 = Math.sqrt(x3\
    \ * x3 + y3 * y3 + z3 * z3)\n        x4 = Math.sqrt(x4 * x4 + y4 * y4 + z4 * z4)\n\
    \        x5 = Math.sqrt(x5 * x5 + y5 * y5 + z5 * z5)\n        if (a > b && a >\
    \ c && a > x1 && a > y1 && a > z1 && b > x2 && b > y2 && b > z2 && c > x3 && c\
    \ > y3 && c > z3 && x4 > x5 && x4 > y5 && x4 > z5 && y4 > x5 && y4 > y5 && y4\
    \ > z5) {\n            true\n        } else {\n            false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp84w6p6v8.scala:29:22\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        x1 = Math.sqrt(x1 * x1\
    \ + y1 * y1 + z1 * z1)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Double\n\e[31m   |\e[0m           \
    \  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp84w6p6v8.scala:30:22\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        x2 = Math.sqrt(x2 * x2\
    \ + y2 * y2 + z2 * z2)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Double\n\e[31m   |\e[0m           \
    \  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp84w6p6v8.scala:31:22\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m        x3 = Math.sqrt(x3 * x3\
    \ + y3 * y3 + z3 * z3)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Double\n\e[31m   |\e[0m           \
    \  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp84w6p6v8.scala:32:22\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m        x4 = Math.sqrt(x4 * x4\
    \ + y4 * y4 + z4 * z4)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Double\n\e[31m   |\e[0m           \
    \  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp84w6p6v8.scala:33:22\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m        x5 = Math.sqrt(x5 * x5\
    \ + y5 * y5 + z5 * z5)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Double\n\e[31m   |\e[0m           \
    \  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain"
  stdout: ''
  timestamp: 1659979483
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val d = (b - a) * (c - b)\n        if (d == 0.0) return true\n\
    \        if (d > 0.0) {\n            val bc = d / (b + c)\n            val ca\
    \ = -bc / (a + c)\n            val a2 = a - a / 2.0\n            val b2 = b -\
    \ b / 2.0\n            val c2 = c - c / 2.0\n            val ans = ((a2 * (c2\
    \ + b2 - ca)) * c) + (b2 * (c2 + a2 - ca)) * b\n            val bn = ((a2 * (c2\
    \ + b2 - ca)) * a) + (b2 * (c2 + a2 - ca)) * c\n            val cn = (a2 * (c2\
    \ + b2 - ca)) * b\n            val ans = (ans * ans) - (bn * bn) * (cn - ans)\n\
    \            return ans <= 0.0 && ans >= -1.0\n        }\n        val bd = d /\
    \ (b + d)\n        val ad = -(bd) / (a + d)\n        val a2 = a - a / 2.0\n  \
    \      val b2 = b - b / 2.0\n        val c2 = c - c / 2.0\n        val ans = ((a2\
    \ * (b2 + c2 - ad)) * b) + (b2 * (a2 + c2 - ad)) * a\n        val bn = ((a2 *\
    \ (b2 + c2 - ad)) * c) + (b2 * (a2 + c2 - ad)) * a\n        val cn = ((a2 * (b2\
    \ + c2 - ad)) * a) + (b2 * (a2 + c2 - ad)) * b\n        val ans = (ans * ans)\
    \ - (bn * bn) * (cn - ans)\n        return ans <= 0.0 && ans >= -1.0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzlwkimlk.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mans\e[0m = (ans * ans) -\
    \ (bn * bn) * (cn - ans)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mans is already defined as \e[33mvalue\e[0m \e[35mans\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzlwkimlk.scala:25:16 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m            \e[33mval\e[0m \e[36mans\e[0m = (ans * ans) - (bn * bn) *\
    \ (cn - ans)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mans is already defined as \e[33mvalue\e[0m \e[35mans\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659979479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ab = math.sqrt((a * a) + (b * b))\n        val ac = math.sqrt((a\
    \ * a) + (c * c))\n        val bc = math.sqrt((b * b) + (c * c))\n        (ab\
    \ == ac) && (bc == ab)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_5871odg.scala:20)\n\tat Problem.main(tmp_5871odg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979483
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val AB = math.pow(a,2) - math.pow(b,2);\n        val BC = math.pow(b,2)\
    \ - math.pow(c,2);\n        val AC = math.pow(a,2) - math.pow(c,2);\n        math.abs(math.abs(AC\
    \ - BC) + math.abs(AB + BC)) < math.pow(a,0.5)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdj1rmab4.scala:20)\n\tat Problem.main(tmpdj1rmab4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979483
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ab = a - b\n        val ac = a - c\n        val bc = b - c\n\
    \        ab.abs <= ac.abs && bc.abs <= ab.abs\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdyr7w9cd.scala:21)\n\tat Problem.main(tmpdyr7w9cd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979483
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ab = math.sqrt((b * b)- (a * a))\n        val bc = math.sqrt((b\
    \ * c)- (b * b))\n        val ac = math.sqrt((c * c)- (a * a))\n        bc > ab\
    \ && ac > ab\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxyku_z0b.scala:20)\n\tat Problem.main(tmpxyku_z0b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979483
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val d = b - a\n        val e = c - a\n        d != 0 && (e == 0\
    \ || (d - e) == 180 * Math.sqrt(d / e))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt6v8p3t3.scala:19)\n\tat Problem.main(tmpt6v8p3t3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979483
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if ((b - a) * (c - b) == (c - a) * (b - a)) {\n            true\n\
    \        } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3lo9u4x7.scala:21)\n\tat Problem.main(tmp3lo9u4x7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979483
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a == 0 || b == 0 || c == 0) return false\n        val angleA\
    \ = ((b * b) - (4 * a * c)).toFloat / 2\n        val angleB = ((a * a) - (4 *\
    \ a * b)).toFloat / 2\n        val angleC = ((a * a) - (4 * a * c)).toFloat /\
    \ 2\n        if (math.abs(angleB) > math.abs(angleA) && math.abs(angleC) > math.abs(angleA))\
    \ {\n            true\n        } else {\n            false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpriniwdpx.scala:25)\n\tat Problem.main(tmpriniwdpx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        var a = Math.abs(a)\n        var b = Math.abs(b)\n        var c\
    \ = Math.abs(c)\n        \n        if((a*a+b*b)==0)\n        {\n          if((a*a+c*c)==0)\n\
    \          {\n            if((a*a+b*b)==0)\n              return true\n      \
    \      else\n              return false\n          }\n          else return false\n\
    \        }\n        else\n        {\n          var d = ((a*a + c*c) - (b*b))\n\
    \          if(d<0) return false\n          \n          var e = ((b*b + c*c) -\
    \ (a*a))\n          if(e<0) return false\n          \n          if((d+e)>0) return\
    \ false\n          else return true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgiltrj2n.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36ma\e[0m = Math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvariable\e[0m \e[35ma\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgiltrj2n.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mb\e[0m = Math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvariable\e[0m \e[35mb\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgiltrj2n.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mc\e[0m = Math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvariable\e[0m \e[35mc\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979482
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val one = sqrt(pow(a, b) + pow(c, 2))\n        val two = sqrt(pow(a,\
    \ 2) + pow(c, 2))\n        val three = sqrt(pow(a, 3) + pow(c, 2))\n        one\
    \ < two && two < three\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnotw0zk7.scala:20)\n\tat Problem.main(tmpnotw0zk7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979488
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        def gcd(a: Long, b: Long): Long = if (b == 0) a else gcd(b, a%b)\n\
    \        def lcm(a: Long, b: Long): Long = (a * b)/gcd(a, b)\n        lcm(a, b)\
    \ == a && lcm(a, b) == b && lcm(a, c) == c && lcm(c, a) == c\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeayhk_lz.scala:19)\n\tat Problem.main(tmpeayhk_lz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val a2 = a * a\n        val b2 = b * b\n        val c2 = c * c\n\
    \        val ab2 = a2 + b2\n        val ac2 = a2 + c2\n        val bc2 = b2 +\
    \ c2\n        val ad2 = a2 + b2\n        val bcd = b2 + c2\n        val cd2 =\
    \ c2 + d2\n        val bc3 = bc + c3\n        val cd3 = c2 + d3\n        val bc5\
    \ = bc + c5\n        val cd5 = c2 + d5\n        val bc7 = bc + c7\n        val\
    \ cd7 = c2 + d7\n        val bc9 = bc + c9\n        val cd9 = c2 + d9\n      \
    \  val ac3 = ac + c3\n        val bc1 = bc + c1\n        val cd1 = c2 + d1\n \
    \       val ad3 = ac + d3\n        val bd1 = bc + d1\n        val cd9 = c2 + d9\n\
    \        val ac5 = ac + c5\n        val bd9 = bc + d9\n        val cd1 = c2 +\
    \ d1\n        val ad5 = ac + d5\n        val bd5 = bc + d5\n        val cd7 =\
    \ c2 + d7\n        val ac7 = ac + c7\n        val bd7 = bc + d7\n        val cd9\
    \ = c2 + d9\n        val ac9 = bc + c9\n        val bd9 = bc + d9\n        val\
    \ ad1 = ac + d1\n        val bd1 = bc + d1\n        val ac1 = ac + c1\n      \
    \  val bd1 = bc + d1\n        val c11 = c * c\n        val d11 = d * d\n     \
    \   val c12 = c * c\n        val d12 = d * d\n        val d13 = d * d\n      \
    \  val c13 = c * c\n        val c21 = c * c\n        val d11 = d * d\n       \
    \ val d12 = d * d\n        val d13 = d * d\n        val c23 = c * c\n        val\
    \ d21 = d * d\n        val d22 = d2 * d\n        val d23 = d2 * d\n        val\
    \ c33 = c * c\n        val d31 = d * d\n        val d32 = d3 * d\n        val\
    \ d33 = d3 * d\n        val c13 = c * c\n        val c21 = c * c\n        val\
    \ d31 = d * d\n        val d32 = d3 * d\n        val d33 = d3 * d\n        val\
    \ c43 = c * c\n        val d11 = d * d\n        val d12 = d2 * d\n        val\
    \ d13 = d\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4mk8gjfc.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mcd9\e[0m = c2 + d9\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcd9 is already defined\
    \ as \e[33mvalue\e[0m \e[35mcd9\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4mk8gjfc.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mcd1\e[0m = c2 + d1\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcd1 is already defined\
    \ as \e[33mvalue\e[0m \e[35mcd1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4mk8gjfc.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mcd7\e[0m = c2 + d7\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcd7 is already defined\
    \ as \e[33mvalue\e[0m \e[35mcd7\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4mk8gjfc.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mcd9\e[0m = c2 + d9\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcd9 is already defined\
    \ as \e[33mvalue\e[0m \e[35mcd9\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4mk8gjfc.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mbd9\e[0m = bc + d9\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbd9 is already defined\
    \ as \e[33mvalue\e[0m \e[35mbd9\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4mk8gjfc.scala:49:12 ---------------------------\e\
    [0m\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659979490
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        def rightAngle(a:Long, degree:Int) : Long = {\n            val\
    \ n = a.abs * (a.abs % 180 - degree) / (180 - degree)\n            if (n < 0)\
    \ (n + 180) else n\n        }\n        def checkIfRight(a:Long, b:Long, c:Long)\
    \ : Boolean = {\n            val cd = rightAngle(c, 90) - rightAngle(a, 90)\n\
    \            if (cd < 0) return false\n            if (cd >= 180*2) return true\n\
    \            val bd = rightAngle(b, 90) - rightAngle(b, 180)\n            if (bd\
    \ >= 180*2) return false\n            val ad = rightAngle(a, 90) - rightAngle(a,\
    \ 180)\n            if (ad >= 180*2) return false\n            return true\n \
    \       }\n        checkIfRight(a, b, c) || checkIfRight(b, a, c) || checkIfRight(b,\
    \ c, a) || checkIfRight(c, a, b)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.rightAngle$1(tmp4e5weq66.scala:15)\n\
    \tat Problem$.checkIfRight$1(tmp4e5weq66.scala:22)\n\tat Problem$.rightAngleTriangle(tmp4e5weq66.scala:28)\n\
    \tat Problem$.main(tmp4e5weq66.scala:31)\n\tat Problem.main(tmp4e5weq66.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979490
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ab = b - a\n        val ac = c - a\n        val ad = ab - ac\n\
    \        val bc = b - c\n        val bd = bc - ab\n        ab == ac && ab == ad\
    \ && (ab == bc || bd == 0)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9j5bu6pc.scala:22)\n\tat Problem.main(tmp9j5bu6pc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979490
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (Math.abs(b - c) > Math.abs(a - b)) {\n            if (Math.abs(c\
    \ - b) > Math.abs(a - c)) {\n                if (Math.abs(a - c) > Math.abs(b\
    \ - a)) {\n                    true\n                } else {\n              \
    \      false\n                }\n            } else {\n                true\n\
    \            }\n        } else {\n            false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_abmlazo.scala:29)\n\tat Problem.main(tmp_abmlazo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Write your logic here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ksn1902.scala:13:69\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mrightAngleTriangle\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m, \e[36mb\e[0m : \e[35mLong\e[0m, \e[36mc\e\
    [0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                       Found:    Unit\n\
    \e[31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m14 |\e[0m        \e[34m// Write your logic here\e[0m\n\e[31m15\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (math.abs(a) == math.abs(b) && math.abs(a) == math.abs(c)) {\n\
    \            true\n        } else if (math.abs(a) == math.abs(b)) {\n        \
    \    false\n        } else if (math.abs(a) == math.abs(c)) {\n            false\n\
    \        } else {\n            val a1 = a - b\n            val a2 = c - b\n  \
    \          val b1 = b - a\n            val b2 = c - a\n            val c1 = c\
    \ - a\n            // return (b1 * b2) - (a1 * c2) = 0\n            (a1 * b2)\
    \ - (a1 * c2) != 0\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8m35np6n.scala:27:30 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            (a1 * b2) - (a1 * c2) != \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m                              ^^\e[0m\n\e[31m   |\e[0m    \
    \                          Not found: c2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979487
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if((a>0) && (b>0) && (c>0)){\n            if((a>=b) && (b>=c))\n\
    \            {\n                return true\n            }\n            else if((a<=b)\
    \ && (c>b) && (c>=a))\n            {\n                return true\n          \
    \  }\n            else if((a>b) && (c>a) && (c<=b))\n            {\n         \
    \       return true\n            }\n        }\n        else if((a<=0) && (b<=0)\
    \ && (c<=0))\n        {\n            return false\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph596p0zd.scala:36)\n\tat Problem.main(tmph596p0zd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a < b) \n            (a-b)*(Math.sign(b-c)) >= 0\n        else\n\
    \            (b-a)*(Math.sign(a-c)) >= 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9m8ovcga.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            (a-b)*(Math.sign(b-c)) >= \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sign\
    \ is not a member of object Math, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9m8ovcga.scala:17:24\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            (b-a)*(Math.sign(a-c))\
    \ >= \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue sign is not a member of object Math, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659979492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // If any of these is negative, it is not an angle. \n        //\
    \ Else if the sum of the lengths is zero, return false. \n        // Else return\
    \ true.\n        if ((a < 0) || (b < 0) || (c < 0)) \n            false \n   \
    \     else \n            ((a + b + c) == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpemuw9q0f.scala:23)\n\tat Problem.main(tmpemuw9q0f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Given a triangle, a side, and a length of a side, return true\
    \ if the side \n        // is on the right of the triangle and is equal to the\
    \ specified length, \n        // false otherwise.\n        // Example:\n     \
    \   // >>> rightAngleTriangle((1l), (2l), (1l))\n        // (true)\n        //\
    \ >>> rightAngleTriangle((1l), (1l), (1l))\n        // (true)\n        // >>>\
    \ rightAngleTriangle((3l), (3l), (1l))\n        // (false)\n        (a < c ||\
    \ a == c) && (a < b || a == b) && (a == c || b < c)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprnx80mlr.scala:28)\n\tat Problem.main(tmprnx80mlr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val longSideA = math.abs(a)\n        val longSideB = math.abs(b)\n\
    \        val longSideC = math.abs(c)\n\n        // check if a==b or b==c\n   \
    \     if(longSideA == longSideB) \n            return longSideA == longSideC\n\
    \        else\n            return longSideB == longSideC\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo_nj6wa5.scala:25)\n\tat Problem.main(tmpo_nj6wa5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // a b and c are positive long integer literals\n        // a and\
    \ c are equal\n        val isRight = (a + b == c) || (a == c)\n        // a and\
    \ c are NOT equal\n        val isNotRight = (a * b != c) || (a * b == c)\n   \
    \     return isRight && isNotRight\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbrxlramv.scala:22)\n\tat Problem.main(tmpbrxlramv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n      // Use formula to calculate sides\n      var leftSide : Long = a\n\
    \      var rightSide : Long = b\n      var topSide : Long = c\n      leftSide\
    \ = (leftSide / a) * b\n      rightSide = (rightSide / b) * c\n      topSide =\
    \ (topSide / c) * a\n      // check if sides are equal\n      if (leftSide ==\
    \ rightSide && leftSide == topSide) {\n        true\n      } else {\n        false\n\
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz0rjn1bx.scala:29)\n\tat Problem.main(tmpz0rjn1bx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ab = a - b\n        val bc = b - c\n        val ac = a - c\n\
    \n        (ab*bc*ac > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigky64eq.scala:21)\n\tat Problem.main(tmpigky64eq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code goes here\n        var d : Long = 0\n        if(a>b\
    \ && b>c) d=a-b\n        if(a>b && b<c) d=a-c\n        if(a<b && b>c) d=b-c\n\
    \        if(a<b && b<c) d=b-a\n        val ans = (d*d)/(4*a * b * c)\n       \
    \ return ans==(a * a + b * b + c * c)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi0qbn6wq.scala:24)\n\tat Problem.main(tmpi0qbn6wq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979493
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if((a*a + b*b + c*c) < 0)\n            return false\n        else{\n\
    \            val u = b*b - 4*a*c\n            val v2 = a*a - b*b\n           \
    \ val w1 = 2*b\n            val w2 = a*a - c*c\n            val w3 = b*b + c*c\n\
    \n            if((u > 0) && (v2 < 0) && (w2 < 0) && (w1 < w3))\n             \
    \   return true\n            else\n                return false\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9112c4lk.scala:30)\n\tat Problem.main(tmp9112c4lk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ab = math.pow((b - a), 2)\n        val bc = math.pow((c - b),\
    \ 2)\n        val ac = math.pow((a - c), 2)\n        (ab + bc == ac)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiuism3yz.scala:20)\n\tat Problem.main(tmpiuism3yz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979493
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val a1 = Math.sqrt(a * a)\n        val b1 = Math.sqrt(b * b)\n\
    \        val c1 = Math.sqrt(c * c)\n        return (a * b * c == a1 * b1 * c1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfl2muqk8.scala:21)\n\tat Problem.main(tmpfl2muqk8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979493
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        return a > 0 && b > 0 && c > 0 && (c > a || a > c || b > a || b\
    \ > c)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy9qpfcir.scala:18)\n\tat Problem.main(tmpy9qpfcir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979493
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        (a * b * c) / (a * a + b * b + c * c) == (a * b + c * c) / 2.0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptiabav8m.scala:17)\n\tat Problem.main(tmptiabav8m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979493
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Write your code here\n        var flag = false\n        if((Math.sqrt((b*b)\
    \ - 4*a*c) >= 0)){\n            flag = true\n        }\n        flag\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ngahi59.scala:22)\n\tat Problem.main(tmp4ngahi59.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if((a < b) \n            && (b < c) \n            && (c > a) \n\
    \            && ((a+b+c) > 0))\n        {\n            // Triangle is valid, check\
    \ angles\n            val dab = a.toDouble - b\n            val dac = a.toDouble\
    \ - c\n            val daa = a.toDouble - a\n            val dac = c.toDouble\
    \ - c\n            val daa = a.toDouble - a\n            val dcd = b.toDouble\
    \ - dab\n            val dab = b.toDouble - dac\n            val daa = a.toDouble\
    \ - a\n            val dca = c.toDouble - dac\n            val dbb = c.toDouble\
    \ - dab\n            val dbd = b.toDouble - dac\n            val dbd = b.toDouble\
    \ - dbb\n            val dab = b.toDouble - dac\n            val dbb = c.toDouble\
    \ - dbd\n            val dbd = b.toDouble - dbb\n            val dab = b.toDouble\
    \ - dac\n            val ddb = dab.toDouble - dbd\n            val dca = dac.toDouble\
    \ - dbd\n            val dab = dab.toDouble - dca\n            val dab = dab.toDouble\
    \ - ddb\n            // Make sure dab does not equal 180\n            dab != 180\n\
    \        }\n        else{\n            // Triangle is invalid\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsz22cz88.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mdac\e[0m = c.toDouble\
    \ - c\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdac is already defined as \e[33mvalue\e[0m \e[35mdac\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsz22cz88.scala:24:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e\
    [0m \e[36mdaa\e[0m = a.toDouble - a\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaa is already defined as \e[33mvalue\e[0m \e[35mdaa\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsz22cz88.scala:26:16 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            \e[33mval\e[0m \e[36mdab\e[0m = b.toDouble - dac\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdab is\
    \ already defined as \e[33mvalue\e[0m \e[35mdab\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsz22cz88.scala:27:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e\
    [0m \e[36mdaa\e[0m = a.toDouble - a\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaa is already defined as \e[33mvalue\e[0m \e[35mdaa\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsz22cz88.scala:31:16 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m            \e[33mval\e[0m \e[36mdbd\e[0m = b.toDouble - dbb\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdbd is\
    \ already defined as \e[33mvalue\e[0m \e[35mdbd\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplev"
  stdout: ''
  timestamp: 1659979494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val ab = math.sqrt((b * b) - ((a * a) * (c - b)))\n        val\
    \ ac = math.sqrt((b * b) - ((a * a) * (b - a)))\n        val bc = math.sqrt((a\
    \ * a) - ((b * b) * (c - a)))\n        ab ~= ac && ac ~= bc && bc ~= c\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt048p2yy.scala:17:11 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        ab ~= ac && ac ~= bc && bc ~= c\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        value ~= is not a member\
    \ of Double - did you mean ab.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt048p2yy.scala:17:17\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        ab ~= ac && ac ~=\
    \ bc && bc ~= c\n\e[31m\e[31m   |\e[0m              ^^^^^\e[0m\n\e[31m   |\e[0m\
    \              value && is not a member of Double\n2 errors found\n"
  stdout: ''
  timestamp: 1659979496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        math.sqrt(a * b * c) % 1 == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3rmwyl0n.scala:17)\n\tat Problem.main(tmp3rmwyl0n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        Math.abs(a * a + b * b - c * c) < 0.00001\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvnnf9s6i.scala:19)\n\tat Problem.main(tmpvnnf9s6i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val isRight = ( (a + b) > c || (b + c) > a || (c + a) > b )\n \
    \       isRight\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuje7f56_.scala:19)\n\tat Problem.main(tmpuje7f56_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979497
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        //Using sqrt method of Double class\n        //Calculating length\
    \ using Math class\n        val a = math.sqrt(a * a)\n        val b = math.sqrt(b\
    \ * b)\n        val c = math.sqrt(c * c)\n        val area = (a * b + c * a)\n\
    \        (area < a)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm159e_dt.scala:16:26 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.sqrt(a * a)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm159e_dt.scala:17:26 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.sqrt(b * b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm159e_dt.scala:18:26 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.sqrt(c * c)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val d = b * b - 4 * a * c\n        if(d<0) return false\n     \
    \   val det = if (b != 0) -a / b else 0\n        if(det==0) return false\n   \
    \     val f = det * d\n        if(f<0) return false\n        val g = -2 * f *\
    \ Math.sqrt(f)\n        val delta = a / det\n        if(g>delta) return false\n\
    \        true\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptkfwsjg5.scala:26)\n\tat Problem.main(tmptkfwsjg5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a + b > c) false\n        else c < a && c < b && c < a + b\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvho2osu8.scala:18)\n\tat Problem.main(tmpvho2osu8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val A = (a + b)/2.0\n        val B = (b + c)/2.0\n        val C\
    \ = (c + a)/2.0\n        val AB = (B*B - A*C)\n        val AC = (A*C - C*A)\n\
    \        AB*AB + AC*AC <= 0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyc8xkjne.scala:22)\n\tat Problem.main(tmpyc8xkjne.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val dx = a.toDouble - b.toDouble\n        val dy = c.toDouble -\
    \ b.toDouble\n        val dz = b.toDouble - a.toDouble\n        val denom = dz\
    \ * dz - dx * dx\n        denom > 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa4hz1kp0.scala:21)\n\tat Problem.main(tmpa4hz1kp0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val a1 = ((b - a) * (b - a) + (c - a) * (c - a)).abs \n       \
    \ val b1 = ((b - a) * (b - a) - (c - a) * (c - a)).abs \n        val c1 = ((a\
    \ - b) * (a - b) + (c - b) * (c - b)).abs \n        a1 < b1 && b1 < c1 || (a1\
    \ == b1 && c1 == b1)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7yq8oe5x.scala:20)\n\tat Problem.main(tmp7yq8oe5x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val aDiv = a.toDouble / 2\n        val bDiv = b.toDouble / 2\n\
    \        val cDiv = c.toDouble / 2\n        var result = (bDiv - aDiv) * (c-aDiv)\
    \ - (aDiv - bDiv) * (c-bDiv)\n        // Check if two sides are equal\n      \
    \  if (result == 0) {\n            return true\n        }\n        return result.toInt\
    \ == 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt_pn406_.scala:25)\n\tat Problem.main(tmpt_pn406_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979497
