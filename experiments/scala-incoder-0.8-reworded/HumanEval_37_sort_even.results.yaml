language: scala
name: HumanEval_37_sort_even
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ odd = l.filter(_ % 2 != 0)\n        val even = l.filter(_ % 2 == 0)\n      \
    \  val evenSorted = even.sortWith(_ < _)\n        odd.zip(evenSorted).map { case\
    \ (x, y) => x }\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe_5yv411.scala:18)\n\tat Problem.main(tmpe_5yv411.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // TODO:\
    \ Write Code Here\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcm775qjg.scala:11:48\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36msortEven\e\
    [0m(\e[36ml\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mList\e[0m[\e[35mLong\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \  ^\e[0m\n\e[31m   |\e[0m                                                Found:\
    \    Unit\n\e[31m   |\e[0m                                                Required:\
    \ List[Long]\n\e[31m12 |\e[0m        \e[34m// TODO: Write Code Here\e[0m\n\e[31m13\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l1 = l.toList\n        val l2 = new Array[Long](l1.length)\n        val even\
    \ = l1.zipWithIndex.filter(_._2%2==0).map(_._1).toList\n        val odd = l1.zipWithIndex.filter(_._2%2==1).map(_._1).toList\n\
    \        val even1 = even.zip(odd).map(l2.update(_,_))\n        l2 ++= even1\n\
    \        l2\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpohmmw44j.scala:16:48\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36meven1\e\
    [0m = even.zip(odd).map(l2.update(_,_))\n\e[31m\e[31m   |\e[0m               \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                            Found:    Long\n\e[31m   |\e[0m                 \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpohmmw44j.scala:17:11 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        l2 ++= even1\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value ++= is not a member of Array[Long]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpohmmw44j.scala:18:8 ---------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        l2\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e\
    [31m   |\e[0m        Found:    (l2 : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // sort\
    \ the list\n        l.sortWith(x => if (x % 2 == 0) -1 else 1)\n        // return\
    \ it\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmppukyczfb.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        l.sortWith(\e[36mx\e[0m => \e[33mif\e[0m (x %\
    \ \e[31m2\e[0m == \e[31m0\e[0m) -\e[31m1\e[0m \e[33melse\e[0m \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Wrong number of parameters, expected: 2\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ index = new mutable.LinkedList[Long]\n        l.foreach {\n            x =>\n\
    \            if (x.toInt % 2 == 0) {\n                index.add(x.toInt)\n   \
    \         }\n        }\n        val evenIndices = index.filter(_ % 2 == 0)\n \
    \       evenIndices.map(_/2).sorted ::: l.filter(_ % 2 == 0).sorted :: Nil\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7p87i9nf.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mindex\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m               \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7p87i9nf.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        evenIndices.map(_/\e\
    [31m2\e[0m).sorted ::: l.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).sorted :: Nil\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mList\e[0m\e[1m\e[31m[\e\
    [0mLong\e[1m\e[31m]\e[0m]\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evens = l.filter(_ % 2 == 0)\n        val evenIndex = evens.indexWhere(_ > l.head)\n\
    \        evens sortBy {_.toLong} zip (evens drop evenIndex) foreach {x => x._1}\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6fx5ukok.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        evens sortBy {_.toLong}\
    \ zip (evens drop evenIndex) foreach {\e[36mx\e[0m => x._1}\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        def\
    \ swap(i : Int, j : Int) : Unit = l swap i j\n        val r : List[Long] = new\
    \ ListBuffer[Long]()\n        for (i <- 0 until l.length) {\n            if (i%2==0)\
    \ r.+=(l(i))\n            else r.+=(l(i))\n        }\n        val len : Int =\
    \ r.length\n        for (i <- 0 until len) {\n            val m = i/2\n      \
    \      if (r(i)%2==0) r.update(i, r(m))\n            else r.update(i, r(m))\n\
    \        }\n        r.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpti3wc09z.scala:12:54 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mdef\e[0m \e[36mswap\e[0m(\e[36mi\e[0m :\
    \ \e[35mInt\e[0m, \e[36mj\e[0m : \e[35mInt\e[0m) : \e[35mUnit\e[0m = l swap i\
    \ j\n\e[31m\e[31m   |\e[0m                                                   \
    \   ^\e[0m\n\e[31m   |\e[0m                          expression expected but \e\
    [31mend of statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpti3wc09z.scala:12:46 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mdef\e[0m \e[36mswap\e[0m(\e[36mi\e[0m : \e[35mInt\e[0m, \e[36mj\e\
    [0m : \e[35mInt\e[0m) : \e[35mUnit\e[0m = l swap i j\n\e[31m\e[31m   |\e[0m  \
    \                                          ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \    value swap is not a member of List[Long] - did you mean l.map?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpti3wc09z.scala:13:29 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m                     Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpti3wc09z.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i%\e[31m2\e[0m==\e[31m0\e\
    [0m) r.+=(l(i))\n\e[31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e[31m\
    \   |\e[0m             value += is not a member of List[Long] - did you mean r.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpti3wc09z.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m r.+=(l(i))\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m             value += is\
    \ not a member of List[Long] - did you mean r.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpti3"
  stdout: ''
  timestamp: 1660013655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ n = l.length\n        val l1 = l.toStream\n        val l2 = l1.zip(l1)\n   \
    \     val l3 = l2.filter(_._1.toLong % 2 == 0L)\n        l3.map(_._2.toLong).sorted.zipped.flatMap(l\
    \ => l.toStream).toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8crnauji.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        l3.map(_._2.toLong).sorted.zipped.flatMap(\e\
    [36ml\e[0m => l.toStream).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue zipped is not a member of Stream[Long] - did you mean\
    \ Stream[Long].append?\n1 error found\n"
  stdout: ''
  timestamp: 1660013655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // Set\
    \ up an empty list to hold the sorted even indexed values\n        var l2 = new\
    \ List[Long](l.size)\n        // Iterate over the list, copying the even indexed\
    \ elements to the new list\n        for (i <- 0 until l.size) {\n            l2(i\
    \ % 2) = l(i)\n        }\n        // Return the new list\n        l2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpur3w35xi.scala:13:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36ml2\e[0m = \e[33mnew\e[0m\
    \ \e[35mList\e[0m[\e[35mLong\e[0m](l.size)\n\e[31m\e[31m   |\e[0m            \
    \                    ^^^^^^\e[0m\n\e[31m   |\e[0m   too many arguments for \e\
    [33mconstructor\e[0m \e[35mList\e[0m in \e[33mclass\e[0m \e[35mList\e[0m: ():\
    \ List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1660013650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evens = l.filter(_ % 2 == 0).toList\n        val odds = l.filter(_ % 2 == 1).toList\n\
    \        val evensAndOdds = evens.zip(odds)\n        evensAndOdds.sortWith((a,\
    \ b) => a.compareTo(b))\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbwtz9hng.scala:15:42 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        evensAndOdds.sortWith((\e[36ma\e[0m, \e[36mb\e\
    [0m) => a.compareTo(b))\n\e[31m\e[31m   |\e[0m                               \
    \         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue compareTo is not a member of\
    \ (Long, Long), but could be made available as an extension method.\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e\
    [0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l1 = l.zipWithIndex.filter(_._2 % 2 == 1)\n        val l2 = l.zipWithIndex.filter(_._2\
    \ % 2 == 0)\n        l1.map(_._1) ++ l2.map(_._1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpahoix6z1.scala:17)\n\tat Problem.main(tmpahoix6z1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l2 = l.filter{i => i % 2 ==0}\n        val l3 = l2.filter{i => i % 2 == 1}\n\
    \        val l4 = (l3 union l2).distinct\n        l4.sortBy(x => x)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppavt63u0.scala:18)\n\tat Problem.main(tmppavt63u0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ l = l\n        var n = l.length\n        while(n > 1) {\n            if((l match\
    \ { case Nil => true; case _ => l.head % 2 == 0 }) == true) {\n              \
    \  val temp = l.head\n                l.head = l.tail\n                l.tail\
    \ = temp\n                n -= 1\n            }\n            else {\n        \
    \        val temp = l.head\n                l.head = l.tail\n                l.tail\
    \ = temp\n                n -= 1\n            }\n        }\n        l\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptm814koi.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36ml\e[0m = l\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ l1 = l.toList\n        for( i <- 0 until l1.length/2 ) {\n            l1(i)\
    \ =< l1(i+1) swap\n        }\n        l1.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqnq6xyz6.scala:14:33 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            l1(i) =< l1(i+\e[31m1\e[0m) swap\n\e[31m\e\
    [31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m        \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnq6xyz6.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            l1(i) =< l1(i+\e[31m1\e[0m) swap\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value =< is\
    \ not a member of Long - did you mean Long.<<?\n2 errors found\n"
  stdout: ''
  timestamp: 1660013654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ index = 0\n        var evenLst : List[Long] = Nil\n        var evenLst2 : List[Long]\
    \ = Nil\n        var evenLst3 : List[Long] = Nil\n\n        for (i <- 0 until\
    \ l.size) {\n            index = i\n            if (index % 2 == 0){\n       \
    \         evenLst = l filter (_ % 2 == 0) sort\n                evenLst2 = evenLst.take(l.size\
    \ - evenLst.size)\n                evenLst3 = evenLst2.zipWithIndex.map {\n  \
    \                  case (item, index) => if (index > 0) item else l.head\n   \
    \             }\n            }\n            else {\n                evenLst2 =\
    \ l filter (_ % 2 == 0) sort\n                evenLst3 = evenLst2.zipWithIndex.map\
    \ {\n                    case (item, index) => if (index > 0) item else l.head\n\
    \                }\n            }\n        }\n        evenLst\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong,\
    \ 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong,\
    \ -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong,\
    \ -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6ozs0aog.scala:21:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                evenLst2 = evenLst.take(l.size - evenLst.size)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 end of statement expected but '=' found\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp6ozs0aog.scala:28:25 -----------------------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                evenLst3 = evenLst2.zipWithIndex.map {\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               end of statement expected but '=' found\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp6ozs0aog.scala:20:48 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                evenLst = l filter (_ % \e[31m2\e[0m == \e\
    [31m0\e[0m) sort\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sort is not a member of List[Long] - did you mean List[Long].sortBy?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6ozs0aog.scala:27:49 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                evenLst2 = l filter (_ % \e[31m2\e[0m\
    \ == \e[31m0\e[0m) sort\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sort is not a member of List[Long], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import collection.convert.ImplicitConversions.seq AsJavaList\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\e[31m\
    \   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660013655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ newList = mutable.ListBuffer(l.head)\n        l.tail.zip(l.tail.tail).filter(_._2\
    \ % 2 == 0).foreach {\n            x => {\n                if (x._1 % 2 != 0)\
    \ {\n                    newList += x._2\n                }\n            }\n \
    \       }\n        newList.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8r7rrtux.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer(l.head)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenIndex = l.zipWithIndex.filter(x => x._2 % 2 == 0).toList\n        evenIndex.sortBy(x\
    \ => x._1)\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppe4rorru.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        evenIndex.sortBy(\e\
    [36mx\e[0m => x._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e[0m\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m   \
    \     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013653
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ ll = l.toList\n        ll.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd9376axl.scala:17)\n\tat Problem.main(tmpd9376axl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ evenIndex = 0\n        var evenValue = 0\n        val evens = mutable.ArrayBuffer(0)\n\
    \        l.foreach { e =>\n            if (e % 2 == 0) {\n                evens\
    \ += e\n                evenIndex += 1\n            } else {\n               \
    \ evenValue = e\n            }\n        }\n        if (evenIndex % 2 != 0) {\n\
    \            evens += evenIndex\n            evenIndex += 1\n        }\n     \
    \   evens.sort()\n        evens.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0dlmp6vj.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp0dlmp6vj.scala:20:28 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                evenValue = e\n\e[31m\e[31m   |\e[0m     \
    \                       ^\e[0m\n\e[31m   |\e[0m                            Found:\
    \    (e : Long)\n\e[31m   |\e[0m                            Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013653
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l2 = l.map(x => x.toLong)\n        val even = l2.filter(x => x % 2 == 0)\n \
    \       val odd = l2.filter(x => x % 2 != 0)\n        val result = (even ++ odd).sortWith((x,\
    \ y) => x < y)\n        result.map( x => x.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoietal2s.scala:20)\n\tat Problem.main(tmpoietal2s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.takeRight(l.length/2).toList\n        val odd = l.drop(l.length/2).toList\n\
    \        val evenSortedOdd = even.sortBy(math.Ordering[Long].reverse)\n      \
    \  evenSortedOdd.map(x => odd(x.toInt))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa8lox4or.scala:14:60\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenSortedOdd\e\
    [0m = even.sortBy(math.Ordering[\e[35mLong\e[0m].reverse)\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                        Found:    Ordering[Long]\n\
    \e[31m   |\e[0m                                        Required: Long => Any\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpa8lox4or.scala:14:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenSortedOdd\e[0m = even.sortBy(math.Ordering[\e\
    [35mLong\e[0m].reverse)\n\e[31m\e[31m   |\e[0m                               \
    \                                     ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660013654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l = l.sortWith(_ < _)\n        val evenIndex = l.zipWithIndex.filter(_._1 %\
    \ 2 == 0).map(_._2).reverse.drop(1).reverse\n        val even = l.zip(evenIndex).toList\n\
    \        val odd = l.zipWithIndex.filter(_._1 % 2 != 0).map(_._1).reverse.drop(1).reverse\n\
    \        even ::: odd\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmperx1fn5i.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortWith(_ <\
    \ _)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ ll = new Array[Long](l.length)\n        var j = 0\n        while(j < l.length){\n\
    \            ll(j)  = l(j)\n            j += 1\n        }\n        ll.takeWhile{_\
    \ % 2 == 0}.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpljmvfof5.scala:21)\n\tat Problem.main(tmpljmvfof5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        l.zipWithIndex\
    \ map { case (n, idx) => (idx % 2l).asInstanceOf[Long] -> n }.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpv1wc7zly.scala:12:29 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        l.zipWithIndex map { \e[33mcase\e[0m (n, idx)\
    \ => (idx % \e[31m2l\e[0m).asInstanceOf[\e[35mLong\e[0m] -> n }.toList\n\e[31m\e\
    [31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ x$1 of expanded function:\n\e[31m   |\e[0m   x$1 => \n\e[31m   |\e[0m     x$1\e\
    [33m match \e[0m\n\e[31m   |\e[0m       {\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0m(n, idx) => \n\e[31m   |\e[0m           (idx % \e[31m2L\e[0m).asInstanceOf[\e\
    [35mLong\e[0m] -> n\n\e[31m   |\e[0m       }.\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpv1wc7zly.scala:12:47 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        l.zipWithIndex map { \e[33mcase\e[0m (n, idx) => (idx % \e[31m2l\e\
    [0m).asInstanceOf[\e[35mLong\e[0m] -> n }.toList\n\e[31m\e[31m   |\e[0m      \
    \                                         ^^^\e[0m\n\e[31m   |\e[0m          \
    \                                     Not found: idx\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        def\
    \ swap(i: Int, j: Int) : List[Long] = (i.toLong -> ((i.toLong swap j.toLong).toLong))\n\
    \        def evenSwap(l : List[Long], i: Int): List[Long] = (i.toLong swap ((i.toLong\
    \ + 2).toLong))\n        def evenSwap2(l : List[Long], i: Int): List[Long] = (i.toLong\
    \ swap ((i.toLong + 3).toLong))\n        def swap2(l : List[Long], i: Int) : List[Long]\
    \ = (i.toLong -> ((i.toLong + 2).toLong))\n        def swap3(l : List[Long], i:\
    \ Int) : List[Long] = (i.toLong -> ((i.toLong + 3).toLong))\n        def sort3(l\
    \ : List[Long], i: Int) : List[Long] = {\n            val newL = l.map(((x: Long)\
    \ => (((x: Long) swap2 ((i.toLong + 2).toLong)).toLong))).toList\n           \
    \ newL\n        }\n        def sort4(l : List[Long], i: Int) : List[Long] = {\n\
    \            val newL = l.map(((x: Long) => (((x: Long) swap3 ((i.toLong + 3).toLong)).toLong))).toList\n\
    \            newL\n        }\n        def sort5(l : List[Long], i: Int) : List[Long]\
    \ = {\n            val newL = l.map(((x: Long) => (((x: Long) evenSwap ((i.toLong\
    \ + 2).toLong)).toLong))).toList\n            newL\n        }\n        def sort6(l\
    \ : List[Long], i: Int) : List[Long] = {\n            val newL = l.map(((x: Long)\
    \ => (((x: Long) evenSwap2 ((i.toLong + 3).toLong)).toLong))).toList\n       \
    \     newL\n        }\n        val newL = l.map(((x: Long) => (((x: Long) evenSwap\
    \ ((i.toLong + 2).toLong)).toLong))).toList\n        newL\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv8xuz7hz.scala:12:72 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mdef\e[0m \e[36mswap\e[0m(\e[36mi\e[0m:\
    \ \e[35mInt\e[0m, \e[36mj\e[0m: \e[35mInt\e[0m) : \e[35mList\e[0m[\e[35mLong\e\
    [0m] = (i.toLong -> ((i.toLong swap j.toLong).toLong))\n\e[31m\e[31m   |\e[0m\
    \                                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value swap is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv8xuz7hz.scala:13:69\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mdef\e[0m \e\
    [36mevenSwap\e[0m(\e[36ml\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mi\e[0m:\
    \ \e[35mInt\e[0m): \e[35mList\e[0m[\e[35mLong\e[0m] = (i.toLong swap ((i.toLong\
    \ + \e[31m2\e[0m).toLong))\n\e[31m\e[31m   |\e[0m                            \
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                             value swap is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpv8xuz7hz.scala:14:70 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mdef\e[0m \e[36mevenSwap2\e[0m(\e[36ml\e\
    [0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mi\e[0m: \e[35mInt\e[0m): \e[35mList\e\
    [0m[\e[35mLong\e[0m] = (i.toLong swap ((i.toLong + \e[31m3\e[0m).toLong))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                      value\
    \ swap is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv8xuz7hz.scala:15:58\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mdef\e[0m \e[36mswap2\e\
    [0m(\e[36ml\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mi\e[0m: \e[35mInt\e\
    [0m) : \e[35mList\e[0m[\e[35mLong\e[0m] = (i.toLong -> ((i.toLong + \e[31m2\e\
    [0m).toLong))\n\e[31m\e[31m   |\e[0m                                         \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                               Found:    (Long, Long)\n\e[31m\
    \   |\e[0m                                                  Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longe"
  stdout: ''
  timestamp: 1660013664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l = l\n        val l2 = l.map(_ => l.indexOf(_))\n        l2.zipWithIndex.map\
    \ { case (v, index) =>\n            if (index.isEven)\n                v\n   \
    \         else\n                l(index)\n        }.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5ga0du9s.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013657
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        l.zipWithIndex.map\
    \ { case(l, index) => (index.toLong % 2 == 0, l) }.sortBy(_._1).map(l => l._2).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmputpuz63k.scala:15)\n\tat Problem.main(tmputpuz63k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013664
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        def\
    \ oddOrEven(l: List[Long], evenIndex : Int) : List[Long] = {\n            l.zip(l.tail)\n\
    \                .map { case (x, y) => if (evenIndex % 2 == 0) y else x }\n  \
    \              .toList\n        }\n        oddOrEven(l, l.length / 2)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7tpck1jx.scala:20)\n\tat Problem.main(tmp7tpck1jx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l1 = l.map(_ % 2)\n        val even = l1.filter(_ == 0)\n        even.map((x\
    \ => x + l.indexOf(x)))\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbm0qos2f.scala:17)\n\tat Problem.main(tmpbm0qos2f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ l : List[Long] = l.toList\n        var l : List[Long] = l.toList\n        l\
    \ :=  l.sortWith(_ < _)\n        l\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2mw9wo2r.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36ml\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = l.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ml is already defined as \e[33mvariable\e[0m \e[35ml\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2mw9wo2r.scala:14:10 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        l :=  l.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\e\
    [31m   |\e[0m    value := is not a member of List[Long] - did you mean List[Long].!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // Initialize\
    \ an iterator on l\n        var iter : Iterator[Long] = l.iterator\n        val\
    \ iter2 : (Long, Long, Long) = (null, null, null)\n        // Iterate over l,\
    \ sorting by even position, and adding to\n        // the sorted list\n      \
    \  while(iter.hasNext) {\n            iter2 = iter\n            iter2.next = iter.next\n\
    \            if(iter2.isEven) {\n                iter2.value = iter2.next\n  \
    \              iter2.next += 1\n            }\n        }\n        iter\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxnodfaxs.scala:14:42\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36miter2\e\
    [0m : (\e[35mLong\e[0m, \e[35mLong\e[0m, \e[35mLong\e[0m) = (\e[31mnull\e[0m,\
    \ \e[31mnull\e[0m, \e[31mnull\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \               Found:    Null\n\e[31m   |\e[0m                              \
    \            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxnodfaxs.scala:14:48 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36miter2\e[0m : (\e[35mLong\e[0m, \e[35mLong\e\
    [0m, \e[35mLong\e[0m) = (\e[31mnull\e[0m, \e[31mnull\e[0m, \e[31mnull\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                                ^^^^\e[0m\n\
    \e[31m   |\e[0m                                                Found:    Null\n\
    \e[31m   |\e[0m                                                Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxnodfaxs.scala:14:54\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36miter2\e\
    [0m : (\e[35mLong\e[0m, \e[35mLong\e[0m, \e[35mLong\e[0m) = (\e[31mnull\e[0m,\
    \ \e[31mnull\e[0m, \e[31mnull\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \                                   ^^^^\e[0m\n\e[31m   |\e[0m               \
    \                                       Found:    Null\n\e[31m   |\e[0m      \
    \                                                Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxnodfaxs.scala:18:20 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            iter2 = iter\n\e[31m\e[31m   |\e[0m     \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                    Found:    (iter\
    \ : Iterator[Long])\n\e[31m   |\e[0m                    Required: (Long, Long,\
    \ Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available w"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evensSorted = l.zipWithIndex.map { case (value, index) => value % 2 == 0 }\n\
    \        val evenSorted = evensSorted.toList\n        val evenValuesSorted = evenSorted.zipWithIndex.map\
    \ { case (value, index) => value.toLong }\n        val sortedEven = evenSorted.sortWith(_\
    \ < _)\n        val evensSorted = sortedEven.zipWithIndex.map { case (value, index)\
    \ => value % 2 == 0 }\n        evensSorted.zip(evenValuesSorted).map{ case (true,\
    \ value) => (value.toLong, true) }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi09l7ta9.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = sortedEven.zipWithIndex.map\
    \ { \e[33mcase\e[0m (value, index) => value % \e[31m2\e[0m == \e[31m0\e[0m }\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpi09l7ta9.scala:14:90 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenValuesSorted\e[0m = evenSorted.zipWithIndex.map\
    \ { \e[33mcase\e[0m (value, index) => value.toLong }\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of Boolean,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpi09l7ta9.scala:17:76 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        evensSorted.zip(evenValuesSorted).map{ \e[33mcase\e\
    [0m (\e[31mtrue\e[0m, value) => (value.toLong, \e[31mtrue\e[0m) }\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of Nothing,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ l2 = l.sortBy(_ % 2)\n        for (i<- 0 to l2.length-2) l2(i) = l2(l2.length-1-i)\n\
    \        l2\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9t749zop.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i<- \e[31m0\e[0m to l2.length-\e\
    [31m2\e[0m) l2(i) = l2(l2.length-\e[31m1\e[0m-i)\n\e[31m\e[31m   |\e[0m      \
    \                             ^^\e[0m\n\e[31m   |\e[0mvalue update is not a member\
    \ of List[Long] - did you mean List[Long].updated?\n1 error found\n"
  stdout: ''
  timestamp: 1660013665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // Sort\
    \ the odd indicies of l\n        val evenIndices = l.indices.filter(_ % 2 == 0)\n\
    \        val evenList = l.indices.filter(_ % 2 == 0).map( _ / 2 ).toList\n   \
    \     evenIndices.map(l => l.toLong).zip(l.take(evenList.size)).sortBy(_._1).map(x\
    \ => x._2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplnuofvcu.scala:18)\n\tat Problem.main(tmplnuofvcu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ sorted = l.sortBy(_ % 2 == 0)\n        val newLst = new mutable.MutableList[Long]()\n\
    \        for ((x, _) <- sorted) {\n            if (x % 2 == 0) {\n           \
    \     newLst += x\n            } else {\n                newLst += sorted\n  \
    \          }\n        }\n        newLst\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcxv8vkx.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnewLst\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvcxv8vkx.scala:15:18\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m\
    \ (x % \e[31m2\e[0m == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^\e\
    [0m\n\e[31m   |\e[0mvalue % is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ newL = (l zip l.tail).sortBy(_._1).reverse\n        newL :+ l.head\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyr10yt5n.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        newL :+ l.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[Matchable]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenLst = l.filter(i => i % 2 == 0)\n        val evenLstSorted = evenLst.sorted\n\
    \        val oddLst = l.filter(i => i % 2 != 0)\n        val oddLstSorted = oddLst.sorted\n\
    \        val evenLstMapped = evenLstSorted.map(e => e -> e).toMap\n        val\
    \ oddLstMapped = oddLstSorted.map(e => e -> e).toMap\n        oddLstMapped.++(evenLstMapped).map(p\
    \ => p._1 -> p._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2r_cuir7.scala:18:42\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        oddLstMapped.++(evenLstMapped).map(\e\
    [36mp\e[0m => p._1 -> p._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[Long, Long]\n\e[31m   |\e[0m       \
    \ Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // Find\
    \ the indices where l's odd indicies are found\n        val oddIndices = l.zipWithIndex.filter(_._2\
    \ % 2 == 1).map(_._1)\n        // Find the indices where l's even indicies are\
    \ found\n        val evenIndices = l.zipWithIndex.filter(_._2 % 2 == 0).map(_._1)\n\
    \        // Make a list with two elements for each odd indicies\n        // The\
    \ first element is l's odd indicies\n        // The second element is the corresponding\
    \ even indicies of l\n        val oddListWithEvenIndices = oddIndices.map { odd\
    \ =>\n            List(odd, evenIndices(odd))\n        }\n        // The zipped\
    \ list of oddListWithEvenIndices now contains the even indicies of each odd indicies\n\
    \        // Sort them\n        oddListWithEvenIndices.sortBy(a => a(0))\n    \
    \    // Return the odd indicies of the sorted list\n        oddListWithEvenIndices.map(a\
    \ => a(0))\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvglz4eat.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            List(odd, evenIndices(odd))\n\
    \e[31m\e[31m   |\e[0m                                  ^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    (odd : Long)\n\e[31m   |\e[0m \
    \                                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        l.toList.grouped(2).toList.map(\
    \ l =>\n                l.sortWith( _ < _ )\n            ).map( _.reverse ).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkjzh0nt3.scala:14:31\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        l.toList.grouped(\e[31m2\e\
    [0m).toList.map( \e[36ml\e[0m =>\n\e[31m13 |\e[0m                l.sortWith( _\
    \ < _ )\n\e[31m14 |\e[0m            ).map( _.reverse ).toList\n\e[31m\e[31m  \
    \ |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mList\e\
    [0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m]\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenLst = l.zipWithIndex.filter(_._2%2 == 1).map(_._1).toList\n        val evenLst2\
    \ = evenLst.sortBy(_)\n        evenLst2.reverse.zipWithIndex.filter(_._2 == evenLst2.length).map(_._1).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1vcct2rp.scala:13:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenLst2\e[0m = evenLst.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0mNo implicit Ordering defined for Any..\n\e[31m   |\e[0mI found:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e[35mAny\e\
    [0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\e\
    [31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[Any].\n1 error found\n"
  stdout: ''
  timestamp: 1660013668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evens = l.filter(x => x % 2 == 0)\n        val odd = l.filter(x => x % 2 ==\
    \ 1)\n        odd.map { x => x % 2 == 0 ? (x % 2 == 0 ? (evens.head, x) : ((evens.tail).take(evens.size\
    \ - 1).last, x)) : x }\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqtu9vom7.scala:14:81 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        odd.map { \e[36mx\e[0m => x % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m ? (x % \e[31m2\e[0m == \e[31m0\e[0m ? (evens.head, x) : ((evens.tail).take(evens.size\
    \ - \e[31m1\e[0m).last, x)) : x }\n\e[31m\e[31m   |\e[0m                     \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                             ')' expected, but '.' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqtu9vom7.scala:14:111 --------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        odd.map { \e[36mx\e[0m => x % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m ? (x % \e[31m2\e[0m == \e[31m0\e[0m ? (evens.head, x) : ((evens.tail).take(evens.size\
    \ - \e[31m1\e[0m).last, x)) : x }\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \      '}' expected, but ')' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqtu9vom7.scala:14:34\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        odd.map { \e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m ? (x % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ (evens.head, x) : ((evens.tail).take(evens.size - \e[31m1\e[0m).last, x)) :\
    \ x }\n\e[31m\e[31m   |\e[0m                                ^^^\e[0m\n\e[31m \
    \  |\e[0m                                value ? is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpqtu9vom7.scala:14:76 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        odd.map { \e[36mx\e[0m => x % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m ? (x % \e[31m2\e[0m == \e[31m0\e[0m ? (evens.head, x) : ((evens.tail).take(evens.size\
    \ - \e[31m1\e[0m).last, x)) : x }\n\e[31m\e[31m   |\e[0m                     \
    \                                                 ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 type tail is not a member of List[Long]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpqtu9vom7.scala:14:48 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        odd.map { \e[36mx\e[0m => x % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m "
  stdout: ''
  timestamp: 1660013668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ even = l.filter(_ % 2 == 0).sorted\n        even.map(x => x % 2 == 0 ? x : even(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqq2vgsfr.scala:13:43 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        even.map(\e[36mx\e[0m => x % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m ? x : \e[35meven\e[0m(x))\n\e[31m\e[31m   |\e[0m              \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                   ')' expected, but '(' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpqq2vgsfr.scala:13:33 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        even.map(\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m ? x\
    \ : \e[35meven\e[0m(x))\n\e[31m\e[31m   |\e[0m                               ^^^\e\
    [0m\n\e[31m   |\e[0m                               value ? is not a member of\
    \ Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // Initialize\
    \ the new list \n        val l2 = new mutable.ListBuffer[Long]()\n\n        //\
    \ Iterate over the original list\n        for (i <- 0 until l.length) {\n    \
    \        // If its an even index, add it to list l2'\n            if (i % 2 ==\
    \ 0) {\n                l2 += l(i)\n            }\n            // If the index\
    \ is odd, compare its value to all the other values in l2'\n            else {\n\
    \                val otherValues = l2.toList\n                l2.clear()\n   \
    \             l2.addAll(l2.indices.filter(_ % 2 != 0).toSeq)\n               \
    \ l2 ++= otherValues.filter(_.toLong == l(i))\n            }\n        }\n    \
    \    // Return the list with the odd indicies in l2, and the even indicies in\
    \ l\n        l2.toList ++ l\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6b139fmv.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml2\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013663
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // Create\
    \ two empty Lists to store the result\n        val even: List[Long] = l.filter(_%2\
    \ == 0).toList\n        val odd: List[Long] = l.filter(_%2 == 1).toList\n\n  \
    \      // Iterate through the even indicies of the list, while adding the odd\
    \ indicies to the even lists\n        for(i <- 0 until even.size) {\n        \
    \    even(i) += odd(i)\n        }\n        // Return the even list\n        even\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkk15geis.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            even(i) += odd(i)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Long - did you mean Long.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660013668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ l2 = l.sort\n        var i = 0\n        while (i<l2.length/2) {\n          \
    \  var temp = l2(i)\n            var j = 1\n            while (j<l2.length-1 &&\
    \ temp < l2(j)) {\n                l2(j) = l2(j)\n                j=j+1\n    \
    \        }\n            l2(i) = temp\n            i=i+1\n        }\n        l2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppy00kxsz.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36ml2\e[0m = l.sort\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0m       value sort is\
    \ not a member of List[Long] - did you mean l.sortBy?\n1 error found\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // Iterate\
    \ over each element of l, find the index of the even element\n        // and replace\
    \ that element with that of the even element,\n        // while maintaining sort\
    \ order.\n        l.foldLeft(List[Long]()){\n            // Create an empty list\
    \ to which we'll append the even elements\n            (x:List[Long], index:Int)\
    \ =>\n                if(index%2 == 0){\n                    // If the element\
    \ at index 2 is even, append it to our empty list\n                    x :+ l.get(index)\n\
    \                }else{\n                    // If the element at index 2 is odd,\
    \ append it to our empty list\n                    // but replace it with the\
    \ even element at index 2\n                    x :+ (l.get(index)/2)\n       \
    \         }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp18og_8bp.scala:20:27 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    x :+ l.get(index)\n\e[31m\e[31m \
    \  |\e[0m                         ^^^^^\e[0m\n\e[31m   |\e[0m           value\
    \ get is not a member of List[Long] - did you mean l.seq?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp18og_8bp.scala:24:28 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                    x :+ (l.get(index)/\e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^\e[0m\n\e[31m   |\e[0mvalue get is\
    \ not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660013669
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.filter(_ % 2 == 0).sorted \n        val odd = l.filter(_ % 2 == 1).sorted\
    \ \n        odd.zip(even).map(x => x._1 -> x._2).sortBy(x => x._1).map(x => x._1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv5q00aqa.scala:17)\n\tat Problem.main(tmpv5q00aqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ m = l.length / 2\n        val evenList = l.slice(1, m)\n        val oddList\
    \ = l.slice(0, m)\n        val even = evenList.sort\n        val odd = oddList.sort\n\
    \        evenList.zip(oddList).map( x => x(0) ).zip(even).map( x => x(0) ) ::\
    \ odd\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl7de16pb.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = evenList.sort\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ sort is not a member of List[Long] - did you mean evenList.sortBy?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpl7de16pb.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = oddList.sort\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ sort is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenIndexes = l.grouped(2).filter(_._2 % 2 == 0).map(x => x._1).toList\n   \
    \     val evenSorted = evenIndexes.map(l(_))\n        evenSorted.sortWith(_ <\
    \ _)\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2j_3xdrs.scala:12:48 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenIndexes\e[0m = l.grouped(\e\
    [31m2\e[0m).filter(_._2 % \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mx\e[0m => x._1).toList\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value _2 is not a member of List[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2j_3xdrs.scala:12:72 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenIndexes\e[0m = l.grouped(\e\
    [31m2\e[0m).filter(_._2 % \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mx\e[0m => x._1).toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                                  value\
    \ _1 is not a member of List[Long]\n2 errors found\n"
  stdout: ''
  timestamp: 1660013676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evens = l.filter(_ % 2 == 0).sortBy(identity)\n        val odd = l.filter(_\
    \ % 2 != 0).sortBy(identity)\n        evens ++ odd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpup30s4ik.scala:17)\n\tat Problem.main(tmpup30s4ik.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        l.zipWithIndex.sortBy(_._1).map(_._2).map(_._1).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_gr7h4jh.scala:12:52 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        l.zipWithIndex.sortBy(_._1).map(_._2).map(_._1).toList\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                         value _1 is not a\
    \ member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660013675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l2 = mutable.ArrayBuffer(l.head, l.tail.head)\n        val l3 = mutable.ArrayBuffer(l.tail.head,l.tail.tail.head)\n\
    \        val l4 = new Array[Long](l.length)\n        var j = 0\n        var k\
    \ = 0\n        while(j<l2.length){\n            l3(k) = l2(i)\n            j+=1\n\
    \            i+=1\n            k+=1\n        }\n        while(j<l3.length){\n\
    \            if((l3(j)/2).toInt == 0){\n                l2(j) = l2(j) + l4(j)\n\
    \                j+=1\n            }\n            k+=1\n        }\n        l2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxzwd_78y.scala:12:17 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml2\e[0m = mutable.ArrayBuffer(l.head,\
    \ l.tail.head)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpxzwd_78y.scala:13:17 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml3\e[0m = mutable.ArrayBuffer(l.tail.head,l.tail.tail.head)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxzwd_78y.scala:20:12 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            i+=\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m\
    \   |\e[0m            Not found: i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ even = l\n        var odd  = l\n        var evenSorted  = even\n        var\
    \ oddSorted   = odd\n        var index = 0\n        while (index < even.size)\
    \ {\n            // Insert all even elements into oddSorted\n            oddSorted.copyFrom(evenSorted)\n\
    \            if (even(index) % 2 == 0) {\n                // Sort odd elements\
    \ into evenSorted\n                evenSorted.sortWith(_ < _)\n            }\n\
    \            else {\n                // Sort odd elements into oddSorted\n   \
    \             oddSorted.sortWith(_ > _)\n            }\n            // Swap the\
    \ two lists\n            evenSorted.copyFrom(oddSorted)\n            index +=\
    \ 1\n        }\n        evenSorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4r7h5kme.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            oddSorted.copyFrom(evenSorted)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ copyFrom is not a member of List[Long]\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp4r7h5kme.scala:29:23 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m            evenSorted.copyFrom(oddSorted)\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value copyFrom is not\
    \ a member of List[Long]\n2 errors found\n"
  stdout: ''
  timestamp: 1660013677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // Create\
    \ an empty list to hold the even indicies\n        var evenList = []\n\n     \
    \   // Loop through the list\n        for (i <- 0 until l.length()) {\n      \
    \      // If the index is even, add the value to the list\n            if (i %\
    \ 2 == 0) {\n                evenList += l(i)\n            }\n        }\n    \
    \    // Return the list\n        evenList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7c66a3pb.scala:13:24 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mevenList\e[0m = []\n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       an identifier expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp7c66a3pb.scala:16:0 ----------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until l.length()) {\n\e[31m\e\
    [31m   |\e[0m^^^\e[0m\n\e[31m   |\e[0m'=>' expected, but 'end of statement' found\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmp7c66a3pb.scala:16:28 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until l.length())\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    \e[33mmethod\e[0m \e[35mlength\e[0m in \e[33mclass\e[0m\
    \ \e[35mList\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7c66a3pb.scala:19:25 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                evenList += l(i)\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Null - did you mean Null.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660013675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l2 = l.reverse\n        var l3 = l2.zipWithIndex.filter(_._2 % 2 == 0).map(_._1)\n\
    \        var l4 = 0\n        var l5 = 0\n        var l6 = 0\n        var l7 =\
    \ 0\n        while ( ((l3 contains 0) && (l4 < l2.length)) && (l3 contains l4))\
    \ {\n            l3 -= 1\n            l4 = l4 + 1\n        }\n        while (\
    \ ((l4 < l2.length) && (l5 < (l3.length /2))) && (l4 < l2.length) && (l5 < (l3.length\
    \ /2)) ) {\n            l4 += 1\n            l5 = l5 + 1\n        }\n        while\
    \ ( ((l5 < (l3.length /2)) && (l6 < l3.length)) ) {\n            l5 += 1\n   \
    \         l6 = l6 + 1\n        }\n        while ( ((l6 < l3.length) && (l7 < l3.length))\
    \ ) {\n            l6 += 1\n            l7 = l7 + 1\n        }\n        l3.zipWithIndex.filter(_._2\
    \ % 2 == 1).map(_._1)\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcz31lwzk.scala:19:15 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            l3 -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^\e[0m\n\e[31m   |\e[0m    value -= is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660013678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ (even, odd) =  partitionEven(l)\n        (even ++ odd.reverse)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong,\
    \ 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong,\
    \ -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong,\
    \ -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvat3fiso.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m (even, odd) =  partitionEven(l)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Not found: partitionEven\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpvat3fiso.scala:12:13 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m (even, odd) =  partitionEven(l)\n\
    \e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m             Recursive\
    \ \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpvat3fiso.scala:12:19 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m (even, odd) =  partitionEven(l)\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013674
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        l.zipWithIndex.sortBy(_._1).map(_._2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7c6ivi2w.scala:15)\n\tat Problem.main(tmp7c6ivi2w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013679
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.filter(_ % 2 == 0).sorted\n        val odd = l.filter(_ % 2 == 1).sorted\n\
    \        odd.zip(even).map { case (odd, even) => even }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmowptibu.scala:17)\n\tat Problem.main(tmpmowptibu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        if(l.length\
    \ < 2)\n            return l\n        var even = l.subList(0,l.length/2)\n   \
    \     var odd = l.subList(l.length/2,l.length)\n        var evenSorted : List[Long]\
    \ = even.sorted\n        var oddSorted : List[Long] = odd.sorted\n        var\
    \ lNew : List[Long] = evenSorted ++ oddSorted ++ evenSorted.map(l => l%2).toList\
    \ ++ odd.map(l => l%2).toList\n        return lNew\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0xajug_w.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36meven\e[0m = l.subList(\e\
    [31m0\e[0m,l.length/\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    value subList is not a member of List[Long] - did you\
    \ mean l.toList?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0xajug_w.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e\
    [36modd\e[0m = l.subList(l.length/\e[31m2\e[0m,l.length)\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue subList is not a member\
    \ of List[Long], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660013678
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evens = l.filter(_ % 2 == 0).sorted\n        val odds = l.filter(_ % 2 == 1).sorted\n\
    \        evens.reverse ::: odds\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg6i0t7ax.scala:17)\n\tat Problem.main(tmpg6i0t7ax.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013680
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenIndices = l.zipWithIndex.filter( _._2 % 2 == 0 )\n        val evens = evenIndices.map\
    \ { case (even, evenIdx) => even }.toList\n        val odds = l.zipWithIndex.filter(\
    \ _._2 % 2 == 1 ).map { case (odd, oddIdx) => odd }.toList\n        odds ++ evens\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzzbi2cj9.scala:18)\n\tat Problem.main(tmpzzbi2cj9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.filter(_ % 2 == 0)\n        val odd = l.filter(_ % 2 == 1)\n      \
    \  odd.zip(even).map { case (o,e) => (o % 2).toLong ->  e}.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdnu1c43u.scala:14:64\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        odd.zip(even).map { \e\
    [33mcase\e[0m (o,e) => (o % \e[31m2\e[0m).toLong ->  e}.toList\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31mLong\e[0m\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m  \
    \      Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenLst = l.toIndexedSeq.sortBy(_ % 2L)\n        val even = evenLst.toList\n\
    \        val odd = evenLst.toList.reverse.filter(_.toLong % 2L != 0L).reverse\n\
    \        odd.zip(even).flatMap(x => (x, even.indexOf(x._1.toLong)).map(_ + x._2))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpvxzm20r4.scala:15:70 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        odd.zip(even).flatMap(\e[36mx\e[0m => (x, even.indexOf(x._1.toLong)).map(_\
    \ + x._2))\n\e[31m\e[31m   |\e[0m                                            \
    \                          ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$3\
    \ of expanded function:\n\e[31m   |\e[0m   _$3 => _$3 + x._2.\n1 error found\n"
  stdout: ''
  timestamp: 1660013677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        def\
    \ swap(i1 : Int, i2 : Int) : Unit = {\n            var temp : Long = l(i1)\n \
    \           l(i1) = l(i2)\n            l(i2) = temp\n        }\n        var i\
    \ = 0\n        while (i < l.length) {\n            while (i < l.length && !(i\
    \ % 2)) {\n                i += 1\n            }\n            swap(i, i)\n   \
    \         i += 1\n        }\n        l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpynolnvsx.scala:14:12 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            l(i1) = l(i2)\n\e[31m\e[31m   |\e[0m    \
    \        ^\e[0m\n\e[31m   |\e[0m    value update is not a member of List[Long]\
    \ - did you mean l.updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpynolnvsx.scala:15:12\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            l(i2) = temp\n\
    \e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m    value update is not\
    \ a member of List[Long] - did you mean l.updated?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpynolnvsx.scala:19:35 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m            \e[33mwhile\e[0m (i < l.length && !(i % \e[31m2\e[0m))\
    \ {\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        value unary_! is not a member of Int - did you mean Int.unary_+?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenL = new collection.mutable.ListBuffer[Long]()\n        val evenR = new collection.mutable.ListBuffer[Long]()\n\
    \        for (x <- l) {\n            val index = x%2\n            if (index <=\
    \ l.length/2) {\n                evenL += x\n            } else {\n          \
    \      evenR += x\n            }\n        }\n        evenL ++ evenR\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi_80clsx.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        evenL ++ evenR\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // (l\
    \ zip l.tail) groups the lists in pairs, and then reorders them by their odd indicies\
    \ while retaining the even indicies\n        // ((l,v) zip l) groups the lists\
    \ in pairs, and then reorders them by their odd indicies while retaining the even\
    \ indicies\n        // (l.zip(l.tail)) groups the lists in pairs, and then reorders\
    \ them by their odd indicies while retaining the even indicies\n        // (l.toIterable.zipWithIndex)\
    \ groups the lists in pairs, and then reorders them by their odd indicies while\
    \ retaining the even indicies\n        // (l.toIterator) groups the lists in pairs,\
    \ and then reorders them by their odd indicies while retaining the even indicies\n\
    \        // (l.toList.zipWithIndex) groups the lists in pairs, and then reorders\
    \ them by their odd indicies while retaining the even indicies\n        // (l.toList.zipWithIndex.sortWith(_.swap))\
    \ groups the lists in pairs, and then reorders them by their odd indicies while\
    \ retaining the even indicies\n        // (l.toList.zipWithIndex.sortWith(_._2\
    \ < _._2) && (_.swap)) groups the lists in pairs, and then reorders them by their\
    \ odd indicies while retaining the even indicies\n        // (l.toList.zipWithIndex.sortWith(_.swap)))\
    \ groups the lists in pairs, and then reorders them by their odd indicies while\
    \ retaining the even indicies\n        // (l.toList.zipWithIndex.sortWith(_.swap)))\
    \ groups the lists in pairs, and then reorders them by their odd indicies while\
    \ retaining the even indicies\n        l.toList.zipWithIndex.sortWith(_.swap)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpkisgsprz.scala:22:39 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        l.toList.zipWithIndex.sortWith(_.swap)\n\e[31m\e\
    [31m   |\e[0m                                       ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 2\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ result: List[Long] = Nil\n        for (i <- 0 until l.length) {\n          \
    \  if (i%2 == 0) {\n                result ::= l(i)\n            } else {\n  \
    \              val temp = l(i)\n                while (l(i+1) < temp) {\n    \
    \                i +=1\n                }\n                result += l(i).toLong\n\
    \                l(i) = temp\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy4vf0_ov.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i +=\e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpy4vf0_ov.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                result += l(i).toLong\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy4vf0_ov.scala:22:16\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                l(i) = temp\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m    value update is\
    \ not a member of List[Long] - did you mean l.updated?\n3 errors found\n"
  stdout: ''
  timestamp: 1660013680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ even = l.toSet\n        var even2 = l.toSet\n        even.filterNot(even2).foreach\
    \ { x => even2.remove(x.toInt) }\n        even2.foreach { x => even.add(x.toInt)\
    \ }\n        even2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8eqriqbe.scala:14:51 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        even.filterNot(even2).foreach { \e[36mx\e[0m\
    \ => even2.remove(x.toInt) }\n\e[31m\e[31m   |\e[0m                          \
    \                   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a member\
    \ of Set[Long] - did you mean Set[Long].reduce?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp8eqriqbe.scala:15:34 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        even2.foreach { \e[36mx\e[0m => even.add(x.toInt) }\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ add is not a member of Set[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ AsJavaSet\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.set\
    \ AsJavaSet\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660013680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        l.map((_\
    \ % 2) == 0).sortBy(_._1).reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmplmosnq6n.scala:12:15 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        l.map((_ % \e[31m2\e[0m) == \e[31m0\e[0m).sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => _$1 % 2.\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmplmosnq6n.scala:12:37 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        l.map((_ % \e[31m2\e[0m) == \e[31m0\e[0m).sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\e[31m   |\e\
    [0m                                   value _1 is not a member of Nothing\n\e\
    [31m\e[31m-- Error: /tmp/tmplmosnq6n.scala:12:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        l.map((_ % \e[31m2\e[0m) == \e[31m0\e[0m).sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e\
    [33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e\
    [33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of\
    \ \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013680
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenIndexed = l.zipWithIndex.filter(x => x._1 % 2 == 0).map(x => (x._2, x._1))\n\
    \        val evenSorted = evenIndexed.sortBy(_._1)\n        evenSorted.map(x =>\
    \ x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpccvmxam8.scala:17)\n\tat Problem.main(tmpccvmxam8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l1 = l.filter(_ % 2 == 0)\n        val l2 = l.filter(_ % 2 != 0)\n        l1.zip(l2).sortBy(_._1).reverse.map(_._2).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp33wz9_ex.scala:17)\n\tat Problem.main(tmp33wz9_ex.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenList = new mutable.ListBuffer[Long]()\n        val evenIndex = l.indexWhere(x\
    \ => x % 2 == 0)\n        for (i <- 0 until l.size) {\n            if (i % 2 ==\
    \ 0) {\n                evenList += l(i)\n            }\n        }\n        for\
    \ (i <- 0 until evenIndex) {\n            if (l(i) != l(i + evenIndex)) {\n  \
    \              evenList += l(i)\n            }\n        }\n        return evenList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24pr7g8x.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        def\
    \ isEven(i: Int) = (i % 2) == 0\n        val even = l.filter(isEven)\n       \
    \ val odd = l.filterNot(isEven)\n        odd.map(_ + even(0)).toList ++ even.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzc9awh7l.scala:13:28\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e\
    [0m = l.filter(isEven)\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\
    \e[31m   |\e[0m                            Found:    (i : Long)\n\e[31m   |\e\
    [0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzc9awh7l.scala:14:30 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = l.filterNot(isEven)\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           Found:    (i : Long)\n\e[31m   |\e[0m            \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l1 = l.filter((_ % 2 == 0)).sortWith(_ < _)\n        val l2 = l.filter((_ %\
    \ 2 == 1)).sortWith(_ < _)\n        l1 ++ l2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_pxjf395.scala:17)\n\tat Problem.main(tmp_pxjf395.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.filter { _ % 2 == 0 }\n        val odd = l.filter { _ % 2 == 1 }\n\
    \        val nEven = even.zipWithIndex.toList.sortBy(-_._1)\n        val nOdd\
    \ = odd.zipWithIndex.toList.sortBy(-_._1)\n        even.zip(nEven.map(n => nOdd(n._2))).map(n\
    \ => nOdd(n._1))\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp70di8g12.scala:16:61\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        even.zip(nEven.map(\e\
    [36mn\e[0m => nOdd(n._2))).map(\e[36mn\e[0m => nOdd(n._1))\n\e[31m\e[31m   |\e\
    [0m                                                           ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                          Found:   \
    \ Long\n\e[31m   |\e[0m                                                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ lastEvenIndex = 0\n        var evenIndex = 0\n        var evenList = new mutable.ArrayBuffer[Long]()\n\
    \        l.foreach{\n            if (evenIndex % 2 == 0) {\n                evenList+=\
    \ _\n            }\n        }\n        l.foreach{\n            if (evenIndex %\
    \ 2 == 1) {\n                evenList+= _\n            }\n        }\n        l.foreach{\n\
    \            evenList+= _\n        }\n        l.foreach{\n            evenList+=\
    \ _\n        }\n        lastEvenIndex = evenList.length\n        l.foreach{\n\
    \            evenIndex+=1\n        }\n        evenList.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong,\
    \ 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong,\
    \ -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong,\
    \ -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptg6425dv.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mevenList\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmptg6425dv.scala:17:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                evenList+=\
    \ _\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m \
    \  Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   _$1 =>\
    \ evenList += _$1.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmptg6425dv.scala:22:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                evenList+=\
    \ _\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m \
    \  Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 =>\
    \ evenList += _$2.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptg6425dv.scala:33:12\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m            evenIndex+=\e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       Found:    Unit\n\e[31m   |\e[0m            Required: Long => Any\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660013686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ evenList = l\n        evenList.sortWith(_.compare(_.toLong) < 0)\n        evenList.zip(evenList.drop(1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpirh9_5sq.scala:13:26 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        evenList.sortWith(_.compare(_.toLong) < \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Wrong number of parameters, expected:\
    \ 2\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpirh9_5sq.scala:14:20 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        evenList.zip(evenList.drop(\e[31m1\e[0m))\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    List[\e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e\
    [1m\e[31mLong\e[0m\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013687
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evens = l.zipWithIndex.filter( _._2 % 2 == 0).toList\n        val odds = l.zipWithIndex.filter(\
    \ _._2 % 2 == 1).toList\n        val sortedEvens = evens.sortBy( _._1 ).map( x\
    \ => x._1 )\n        sortedEvens.concat( odds.map { x => x._1 } ) ++ evens.map\
    \ { x => x._1 }\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp399ls1h1.scala:18)\n\tat Problem.main(tmp399ls1h1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013690
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        l.sortWith((x:\
    \ Long, y: Long) => x.toLong % 2 == y.toLong % 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp8qcs7zi.scala:16)\n\tat Problem.main(tmpp8qcs7zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.filter(_%2 == 0).sortWith(_<=>_)\n        val odd  = l.filter(_%2 ==\
    \ 1).sortWith(_<=>_)\n        even ++ List(odd.take(even.length))\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjdvd2k9m.scala:12:48 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = l.filter(_%\e\
    [31m2\e[0m == \e[31m0\e[0m).sortWith(_<=>_)\n\e[31m\e[31m   |\e[0m           \
    \                                    ^^^^\e[0m\n\e[31m   |\e[0m              \
    \  value <=> is not a member of Long - did you mean _$2.<=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpjdvd2k9m.scala:13:48 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m  = l.filter(_%\e[31m2\e\
    [0m == \e[31m1\e[0m).sortWith(_<=>_)\n\e[31m\e[31m   |\e[0m                  \
    \                             ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ <=> is not a member of Long - did you mean _$5.<=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpjdvd2k9m.scala:14:29 --------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        even ++ List(odd.take(even.length))\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \           Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e\
    [0m\n\e[31m   |\e[0m                     Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ l1 : List[Long] = l.toList\n        val odd = new mutable.ListBuffer[Long]\n\
    \        val even = new mutable.ListBuffer[Long]\n        for ( i <- 0 until l1.size)\
    \ {\n            if(i %2 ==0) {\n                even+=l1(i)\n            }else\
    \ {\n                odd += l1(i)\n            }\n        }\n        l1 = odd.toList\
    \ ++ even.toList\n        l1\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5x2necgy.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                 \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5x2necgy.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        if (l.isEmpty)\
    \ Nil\n        else {\n            val evens = l.zipWithIndex.filter(_._2 % 2\
    \ == 0).map(_._1)\n            val odds = l.zipWithIndex.filter(_._2 % 2 != 0).map(_._1)\n\
    \            evens.sorted.zip(odds).map(t => t._1 + t._2)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ryh0dh_.scala:20)\n\tat Problem.main(tmp_ryh0dh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ a = l.toSet\n        val b = a.toList.sortBy(-_)\n        var i = 0\n      \
    \  while (i<b.length) a(i % 2L) = b(i)\n        l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7_ls3usv.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mwhile\e[0m (i<b.length) a(i % \e[31m2L\e\
    [0m) = b(i)\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m  \
    \ |\e[0m                           value update is not a member of Set[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ evens = mutable.ListBuffer.empty[Long]\n        for (i <- l.indices) {\n   \
    \         if (i % 2 == 0) {\n                evens += l(i )\n            }\n \
    \       }\n        evens.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmf7uwqn7.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n      val evenList\
    \ = List(l.head, l.tail)\n      val odd = evenList.filter(_ % 2 == 0)\n      odd.map((_\
    \ - l.head) % 2).sorted.zip(evenList).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd2zisxcx.scala:13:34 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      \e[33mval\e[0m \e[36modd\e[0m = evenList.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of Matchable, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might make progress towards fixing the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpd2zisxcx.scala:14:15\
    \ -----------------------------\e[0m\e[0m\n\e[31m14 |\e[0m      odd.map((_ - l.head)\
    \ % \e[31m2\e[0m).sorted.zip(evenList).reverse\n\e[31m\e[31m   |\e[0m        \
    \       ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   _$2 => _$2 - l.head.\n\e[31m\e[31m-- Error: /tmp/tmpd2zisxcx.scala:14:38\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m      odd.map((_\
    \ - l.head) % \e[31m2\e[0m).sorted.zip(evenList).reverse\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0mambiguous given\
    \ instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mShort\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msorted\e\
    [0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660013691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ l2 = l.sortWith(_ < _)\n        val even = l.filter(_ % 2 == 0)\n        val\
    \ odd = l.filter(_ % 2 != 0)\n        val evenSorted = even.sortWith(_ < _)\n\
    \        evenSorted.zip(odd).map(_._1).map(x => l2.update(x, x))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong,\
    \ 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong,\
    \ -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong,\
    \ -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt0vu0qka.scala:16:50 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        evenSorted.zip(odd).map(_._1).map(\e[36mx\e[0m\
    \ => l2.update(x, x))\n\e[31m\e[31m   |\e[0m                                 \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of\
    \ List[Long] - did you mean List[Long].updated?\n1 error found\n"
  stdout: ''
  timestamp: 1660013690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // We\
    \ use an ArrayBuffer to avoid mutating our input list\n        val buffer = ArrayBuffer[Long](l.head)\n\
    \        for (i <- l.tail) {\n            if (i % 2 == 0) {\n                buffer\
    \ += i\n            } else {\n                // Use a Set to avoid duplicate\
    \ values\n                val evens = Set[Long]()\n                evens.put(buffer.toSet)\n\
    \                buffer += i\n            }\n        }\n        buffer\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppzv8rhtq.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                evens.put(buffer.toSet)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue put is not a member\
    \ of scala.collection.mutable.Set[Long] - did you mean evens.sum?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmppzv8rhtq.scala:24:8 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        buffer\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (buffer : scala.collection.mutable.ArrayBuffer[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ sorted = l.sortWith(_ < _)\n        val even = sorted.takeRight(l.length / 2).toList\n\
    \        sorted.takeRight(l.length).zipWithIndex.flatMap(x => x match {\n    \
    \        case (l, i) => (0 until i).map(_ => l.toLong)\n        }).zip(even).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpggctng5o.scala:16:21\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        sorted.takeRight(l.length).zipWithIndex.flatMap(\e\
    [36mx\e[0m => x \e[33mmatch\e[0m {\n\e[31m15 |\e[0m            \e[33mcase\e[0m\
    \ (l, i) => (\e[31m0\e[0m until i).map(_ => l.toLong)\n\e[31m16 |\e[0m       \
    \ }).zip(even).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    List[\e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e\
    [1m\e[31mLong\e[0m\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l1 = l.zipWithIndex.toList\n        l1.sortWith(_.first == _.second).map {x\
    \ => x._2}\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv0okszdl.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        l1.sortWith(_.first == _.second).map {\e[36mx\e\
    [0m => x._2}\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m     value first is not a member of (Long, Int) - did you mean _$1.init?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenIndex = l.filter(_ % 2 == 0)\n        val oddIndex = l.filter(_ % 2 != 0)\n\
    \        val even = evenIndex.map(i => l(i)).toList\n        val odd = oddIndex.map(i\
    \ => l(i)).toList\n        val evenSorted = even.sortBy(_)\n        val oddSorted\
    \ = odd.sortBy(_)\n        evenSorted ++ oddSorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpysocvhde.scala:14:40\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36meven\e\
    [0m = evenIndex.map(\e[36mi\e[0m => l(i)).toList\n\e[31m\e[31m   |\e[0m      \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                     Found:    (i : Long)\n\e[31m   |\e[0m                  \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpysocvhde.scala:15:38 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = oddIndex.map(\e[36mi\e\
    [0m => l(i)).toList\n\e[31m\e[31m   |\e[0m                                   \
    \   ^\e[0m\n\e[31m   |\e[0m                                      Found:    (i\
    \ : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpysocvhde.scala:16:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevenSorted\e[0m = even.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0mNo implicit Ordering defined for Any..\n\e[31m   |\e[0mI found:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e[35mAny\e[0m](\n\
    \e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\e[31m  \
    \ |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were found\
    \ that match type java.util.Comparator[Any].\n\e[31m\e[31m-- Error: /tmp/tmpysocvhde.scala:17:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36moddSorted\e[0m = odd.sortBy(_)\n\e[31m\e[31m   |\e[0m \
    \                                    ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering\
    \ defined for Any..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \    scala.math.Ordering.comparatorToOrdering[\e[35mAny\e[0m](\n\e[31m   |\e[0m\
    \      /* missing */summon[java.util.Comparator[Any]]\n\e[31m   |\e[0m    )\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mBut n"
  stdout: ''
  timestamp: 1660013692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l2 = l.zipWithIndex.sortBy(-_._2).map(_._1)\n        l2.zip(l).filter(_._1 ==\
    \ _._2).map(_._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm_c7pke8.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        l2.zip(l).filter(_._1 == _._2).map(_._2)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^\e[0m\n\e[31m   |\e[0m       \
    \                  value _1 is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660013691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ i = 0\n        var evenIndex = 0\n        while(i < l.length) {\n          \
    \  if(even(l, i, evenIndex)) {\n                i += (evenIndex + 1) // 2\n  \
    \              evenIndex = 0\n            } else {\n                i += 1\n \
    \               evenIndex += 1\n            }\n        }\n        l\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf1x3rde4.scala:15:15 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(even(l, i, evenIndex)) {\n\e\
    [31m\e[31m   |\e[0m               ^^^^\e[0m\n\e[31m   |\e[0m               Not\
    \ found: even\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l1 = l.toList\n        val even = l.filter(_ % 2 == 0)\n        val odd = l.filter(_\
    \ % 2 != 0)\n        even.zip(odd).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjg0osfq1.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        even.zip(odd).sorted\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \  Found:    List[\e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e\
    [31mLong\e[0m\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013692
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l2 = l.map(x=> x % 2l).toList\n        l2.map(x => if (x%2 == 0) x  else x.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdymnz4gi.scala:16)\n\tat Problem.main(tmpdymnz4gi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.filter(_ % 2 == 0)\n        val odd = l.filter(_ % 2 == 1)\n      \
    \  val evenSorted = even.sortWith(_ < _)\n        val oddSorted = odd.sortWith(_\
    \ < _)\n        evenSorted ::: oddSorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf2gv2eog.scala:19)\n\tat Problem.main(tmpf2gv2eog.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ evenIndices : List[Int] = Nil\n        var evenValues : List[Long] = Nil\n \
    \       var l2 : List[Long] = Nil\n        var evenLargerList : List[Long] = Nil\n\
    \        l foreach { elem =>\n            evenIndices :+ l2.length\n         \
    \   evenValues :+ elem\n            l2 :+ elem\n            if (l2.length >= l.length)\
    \ evenLargerList :+= l2\n        }\n        evenIndices.reverse.foreach { i =>\n\
    \            evenLargerList :+= l2.slice(i * 2, (i + 1) * 2).sortBy(_)\n     \
    \   }\n        l2 :+ evenLargerList.sortBy(_)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp00sdd0ii.scala:20:54 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (l2.length >= l.length) evenLargerList\
    \ :+= l2\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m   value :+= is not a member of List[Long] - did you mean\
    \ List[Long].:+?\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp00sdd0ii.scala:23:67\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            evenLargerList\
    \ :+= l2.slice(i * \e[31m2\e[0m, (i + \e[31m1\e[0m) * \e[31m2\e[0m).sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m   I could not infer the type of the parameter _$1 of expanded\
    \ function:\n\e[31m   |\e[0m   _$1 => evenLargerList :+= l2.slice(i * 2, (i +\
    \ 1) * 2).sortBy(_$1).\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp00sdd0ii.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            evenLargerList\
    \ :+= l2.slice(i * \e[31m2\e[0m, (i + \e[31m1\e[0m) * \e[31m2\e[0m).sortBy(_)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value\
    \ :+= is not a member of List[Long] - did you mean List[Long].:+?\n\e[31m\e[31m--\
    \ Error: /tmp/tmp00sdd0ii.scala:23:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            evenLargerList :+= l2.slice(i * \e[31m2\e\
    [0m, (i + \e[31m1\e[0m) * \e[31m2\e[0m).sortBy(_)\n\e[31m\e[31m   |\e[0m     \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigInt\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp00sdd0ii.scala:25:36 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        l2 :+ evenLargerList.sortBy(_)\n\e[31m\e[31m\
    \   |\e[0m                                    ^\e[0m\n\e[31m   |\e[0m   Missin"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        def\
    \ partition(l : List[Long], index : Int) : List[Long] = {\n            if(index\
    \ < l.length)\n                l.remove(index)\n            else\n           \
    \     l.insert(index, l.take(index).max)\n            (l.take(index) :: partition(l,\
    \ index + 1))\n        }\n        partition(l, 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaptse9gd.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                l.remove(index)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0m     value remove is not a member\
    \ of List[Long] - did you mean l.reduce?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpaptse9gd.scala:16:18 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m                l.insert(index, l.take(index).max)\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0m       value insert is not a member\
    \ of List[Long] - did you mean l.init?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpaptse9gd.scala:17:19 --------------------\e[0m\e[0m\n\e[31m17 |\e[0m\
    \            (l.take(index) :: partition(l, index + \e[31m1\e[0m))\n\e[31m\e[31m\
    \   |\e[0m             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m\n\e[31m   |\e\
    [0m             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n      val l2\
    \ = l.toList.sortWith((x, y) => x < y) // sort list l\n      val l3 = l2.zipWithIndex.filter\
    \ { case (x, y) => x % 2 == 0 } // filter list l2 by even\n      val l4 = l3.map\
    \ { case (x, y) => (y, x) } // map l3 to list of pairs [even, odd]\n      l4.toList\
    \ // return the list\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcxwk63y3.scala:15:9\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m      l4.toList \e[34m// return\
    \ the list\e[0m\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \    Found:    List[\e[1m\e[31m(\e[0m\e[1m\e[31mInt\e[0m\e[1m\e[31m,\e[0m\e[1m\e\
    [31m \e[0mLong\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m      Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.view.zipWithIndex.filter(_._2 == 0).map(_._1).sortWith(_ < _).map(_._1).toList\n\
    \        val odd = l.view.zipWithIndex.filter(_._2 == 1).map(_._1).sortWith(_\
    \ < _).map(_._1).toList\n        even.zip(odd).sortWith(_ < _).map(_._1)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdxege0xb.scala:12:67 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = l.view.zipWithIndex.filter(_._2\
    \ == \e[31m0\e[0m).map(_._1).sortWith(_ < _).map(_._1).toList\n\e[31m\e[31m  \
    \ |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value sortWith is not a member of scala.collection.View[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdxege0xb.scala:13:66 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = l.view.zipWithIndex.filter(_._2\
    \ == \e[31m1\e[0m).map(_._1).sortWith(_ < _).map(_._1).toList\n\e[31m\e[31m  \
    \ |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value sortWith is not a member of scala.collection.View[Long]\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ sorted = l.toSet\n        sorted.remove(0)\n        var evenList = l\n     \
    \   var evenList = evenList.reverse.takeRight(l.length).reverse.sort\n       \
    \ sorted.insert(evenList.indexOf(0)+1, evenList(0))\n        return sorted\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeq3pen4k.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mevenList\e[0m = evenList.reverse.takeRight(l.length).reverse.sort\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenList is already defined as \e[33mvariable\e[0m \e[35mevenList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpeq3pen4k.scala:13:15 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        sorted.remove(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a member of Set[Long]\
    \ - did you mean Set[Long].reduce?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeq3pen4k.scala:16:15\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        sorted.insert(evenList.indexOf(\e\
    [31m0\e[0m)+\e[31m1\e[0m, evenList(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue insert is not a member of Set[Long]\
    \ - did you mean Set[Long].init?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeq3pen4k.scala:17:15\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mreturn\e[0m sorted\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \  Found:    (sorted : Set[Long])\n\e[31m   |\e[0m               Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenList = l.filter(x => x % 2 == 0).sorted\n        val oddList = l.filter(x\
    \ => x % 2 == 1).sorted\n        evenList ++ oddList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ygdq3q1.scala:17)\n\tat Problem.main(tmp5ygdq3q1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ listToSort = l.toList.sortBy(_ % 2 == 0).sortWith(_ > _)\n        listToSort.drop(l.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvkatxcjp.scala:16)\n\tat Problem.main(tmpvkatxcjp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l1 = l.sortBy(_ % 2 == 0)\n        val l2 = l.map(x => (x % 2, x))\n       \
    \ val l3 = l1.zip(l2).filter(_._1)\n        l3.map(_._2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7cs9baa0.scala:14:37\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml3\e\
    [0m = l1.zip(l2).filter(_._1)\n\e[31m\e[31m   |\e[0m                         \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    Long\n\e[31m   |\e[0m                                   Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7cs9baa0.scala:15:17\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        l3.map(_._2)\n\e[31m\e\
    [31m   |\e[0m               ^^^^\e[0m\n\e[31m   |\e[0m               Found:  \
    \  (Long, Long)\n\e[31m   |\e[0m               Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // Create\
    \ a list l with evens first\n        val evens = l.filter(_ % 2 == 0)\n\n    \
    \    // Create a new list containing all the even numbers from evens\n       \
    \ val evensWithValues = evens.map { x => x -> l.takeWhile(_.toLong == x).toList.sortWith(_\
    \ < _) }.toMap\n\n        // Create a new list with the odd numbers from evens\n\
    \        val odds = l.filter(_ % 2 == 1)\n        // Create a new list containing\
    \ all the odd numbers from evens\n        val oddsWithValues = odds.map { x =>\
    \ x -> l.takeWhile(_.toLong == x).toList.sortWith(_ < _) }.toMap\n\n        //\
    \ Create an empty list to hold all the odd numbers from evens\n        val result:\
    \ List[Long] = List[Long]()\n\n        // Add the even numbers from evensWithValues\
    \ to the result list\n        result.+=(evensWithValues.values.toList)\n\n   \
    \     // Add the odd numbers from oddsWithValues to the result list\n        result.+=(oddsWithValues.values.toList)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg3c7385p.scala:27:15 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        result.+=(evensWithValues.values.toList)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is\
    \ not a member of List[Long] - did you mean result.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpg3c7385p.scala:30:15 ------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m        result.+=(oddsWithValues.values.toList)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not a\
    \ member of List[Long] - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ l1 = l.toList\n        val l2 = l1.filter(_ % 2 == 0)\n        var l3 = l2.sortWith(_\
    \ < _)\n        val l4 = l3.zipWithIndex.filter(_._2 % 2 == 0).map(t => (t._1,\
    \ t._2))\n        l4.map(_._1).foldLeft(l1)((t1, e) => e._1 :: t1)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0zd9uwqw.scala:16:47 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        l4.map(_._1).foldLeft(l1)((\e[36mt1\e[0m, \e\
    [36me\e[0m) => e._1 :: t1)\n\e[31m\e[31m   |\e[0m                            \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \       value _1 is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n      l.zipWithIndex.map\
    \ { case (num, index) => \n        if (index%2 == 0) num else l.toLong(index)\
    \ + l.toLong(index+1)\n      }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkw_deoby.scala:13:37 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (index%\e[31m2\e[0m == \e[31m0\e\
    [0m) num \e[33melse\e[0m l.toLong(index) + l.toLong(index+\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toLong is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ a = 0\n        var b = 0\n        var res = l\n\n        while (a < l.length)\
    \ {\n            if (b < l.length) {\n                if (l(a) < l(b)) {\n   \
    \                 a += 1\n                    b += 1\n                    res\
    \ = res.dropRight(a)\n                } else {\n                    res(a) = res(b)\n\
    \                    a += 1\n                    b += 1\n                }\n \
    \           } else if (a == 0 && b < l.length) {\n                res(a) = res(b)\n\
    \                a += 1\n                b += 1\n            }\n        }\n  \
    \      res.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp00_egkiz.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    res(a) = res(b)\n\e[31m\e[31m   |\e\
    [0m                    ^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of\
    \ List[Long] - did you mean List[Long].updated?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp00_egkiz.scala:28:16 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                res(a) = res(b)\n\e[31m\e[31m   |\e[0m               \
    \ ^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of List[Long] - did you\
    \ mean List[Long].updated?\n2 errors found\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.filter(_%2 == 0).toList\n        val odd = l.filter(_%2 == 1).toList\n\
    \        odd.sortWith((x, y) => x < y)\n        even.zip(odd).map(_._1).distinct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfz04thql.scala:18)\n\tat Problem.main(tmpfz04thql.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n      val even\
    \ = l.filter(_ % 2 == 0).sortBy(_).reverse\n      val odd = l.filter(_ % 2 ==\
    \ 1).sortBy(_)\n      odd.zip(even).map{ case (o,e) => o }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp78lk62rj.scala:12:45 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m      \e[33mval\e[0m \e[36meven\e[0m = l.filter(_ % \e\
    [31m2\e[0m == \e[31m0\e[0m).sortBy(_).reverse\n\e[31m\e[31m   |\e[0m         \
    \                                    ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => l.filter(_$1 => _$1 % 2\
    \ == 0).sortBy(_$2).reverse.\n\e[31m\e[31m-- Error: /tmp/tmp78lk62rj.scala:12:47\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m12 |\e[0m      \e\
    [33mval\e[0m \e[36meven\e[0m = l.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).sortBy(_).reverse\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mShort\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n\e[31m\e[31m-- Error: /tmp/tmp78lk62rj.scala:13:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      \e[33mval\e[0m \e[36modd\e[0m = l.filter(_ % \e\
    [31m2\e[0m == \e[31m1\e[0m).sortBy(_)\n\e[31m\e[31m   |\e[0m                 \
    \                             ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined\
    \ for Any..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.ordered[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type scala.math.Ordering.AsComparable[Any].\n3 errors found\n"
  stdout: ''
  timestamp: 1660013704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ l1 = l.slice\n        var l2 = 0\n        while(!l1.isEmpty) {\n           \
    \ var idx = l1.indexOf(0l)\n            if (idx % 2 == 0) l2 += l1(idx).toLong\n\
    \            idx += 1\n            l1(idx) = l1(idx).toLong\n            l1 -=\
    \ (idx until idx).map(idx => l1(idx))\n        }\n        l2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph2gago94.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mwhile\e[0m(!l1.isEmpty) {\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value\
    \ isEmpty is not a member of (Int, Int) => List[Long]\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmph2gago94.scala:15:25 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m            \e[33mvar\e[0m \e[36midx\e[0m = l1.indexOf(\e[31m0l\e\
    [0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value indexOf is not a member of (Int, Int) => List[Long]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmph2gago94.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (idx % \e[31m2\e[0m == \e[31m0\e\
    [0m) l2 += l1(idx).toLong\n\e[31m\e[31m   |\e[0m                             \
    \ ^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member of Int\
    \ - did you mean Int.!=?\n\e[31m\e[31m-- Error: /tmp/tmph2gago94.scala:16:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (idx % \e[31m2\e[0m == \e[31m0\e\
    [0m) l2 += l1(idx).toLong\n\e[31m\e[31m   |\e[0m                             \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter v2 of \e[33mmethod\e\
    [0m \e[35mapply\e[0m in \e[33mtrait\e[0m \e[35mFunction2\e[0m: (v1: Int, v2: Int):\
    \ List[Long]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph2gago94.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            l1(idx) = l1(idx).toLong\n\
    \e[31m\e[31m   |\e[0m            ^^\e[0m\n\e[31m   |\e[0m            value update\
    \ is not a member of (Int, Int) => List[Long]\n\e[31m\e[31m-- Error: /tmp/tmph2gago94.scala:18:24\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \     l1(idx) = l1(idx).toLong\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter v2 of \e[33mmethod\e[0m \e\
    [35mapply\e[0m in \e[33mtrait\e[0m \e[35mFunction2\e[0m: (v1: Int, v2: Int): List[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph2gago94.scala:19:15 ----------------------"
  stdout: ''
  timestamp: 1660013705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ newList = l.clone\n        newList.sortWith(_ < _)\n        // newList\n   \
    \     // newList.reverse\n        // newList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpznx9bays.scala:12:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = l.clone\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m\e[33mmethod\e\
    [0m \e[35mclone\e[0m in \e[33mclass\e[0m \e[35mObject\e[0m cannot be accessed\
    \ as a member of (l : List[Long]) from module class Problem$.\n\e[31m   |\e[0m\
    \ Access to protected \e[33mmethod\e[0m \e[35mclone\e[0m not permitted because\
    \ prefix type List[Long]\n\e[31m   |\e[0m does not conform to \e[33mobject\e[0m\
    \ \e[35mProblem\e[0m where the access takes place\n1 error found\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        def\
    \ swap(i1 : Int, i2 : Int) : Unit = {\n            var temp : Long = l(i1)\n \
    \           l(i1) = l(i2)\n            l(i2) = temp\n        }\n\n        var\
    \ result : List[Long] = Nil\n        if (l.length%2 == 0)\n            l.foreach(l\
    \ => {\n                result ::= l\n            })\n        else\n         \
    \   l.foreach(l => {\n                result ::= l\n                swap(l.length-1,\
    \ l.length)\n            })\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptdtilql1.scala:14:12 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            l(i1) = l(i2)\n\e[31m\e[31m   |\e[0m    \
    \        ^\e[0m\n\e[31m   |\e[0m    value update is not a member of List[Long]\
    \ - did you mean l.updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptdtilql1.scala:15:12\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            l(i2) = temp\n\
    \e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m    value update is not\
    \ a member of List[Long] - did you mean l.updated?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmptdtilql1.scala:26:23 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m                swap(l.length-\e[31m1\e[0m, l.length)\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \        value length is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmptdtilql1.scala:26:35 ------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                swap(l.length-\e[31m1\e[0m, l.length)\n\e[31m\e[31m  \
    \ |\e[0m                                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                           value length is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660013705
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ list : List[Long] = l.toList\n        list = list.map(x => (x % 2).toLong)\n\
    \        list = list.sortWith(_ < _) // sortWith is a method on List, takes a\
    \ lambda which takes and returns boolean\n        list.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong,\
    \ 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong,\
    \ -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong,\
    \ -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprs6u_9qw.scala:18)\n\tat Problem.main(tmprs6u_9qw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenVals = l.toList filter { _ % 2 == 0 }\n        val evenSorted = evenVals.sort\n\
    \        val evenSorting = evenSorted.zipWithIndex.toList map { case (value, index)\
    \ =>\n            if (index.isEven) {\n                value\n            } else\
    \ {\n                evenSorted\n            }\n        }\n        evenSorting.reduceLeft((x,\
    \ y) => x ++ y)\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3t4gx545.scala:13:34 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenSorted\e[0m = evenVals.sort\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue sort is not a member of List[Long] - did you mean evenVals.sortBy?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        if (l.length\
    \ <= 1) {\n            l\n        } else {\n            var i : Int = 0\n    \
    \        var l : List[Long] = l\n            var evens : List[Long] = List[Long]()\n\
    \            while (i < l.length) {\n                evens ::= l(i)\n        \
    \        i += 1\n            }\n            var odds : List[Long] = List[Long]()\n\
    \            for (i = l.length - 1; i >= 0; i -= 2) {\n                odds ::=\
    \ l(i - 1)\n            }\n            l ::= odds ::= evens\n            l\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2jpa7vmm.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m (i = l.length - \e[31m1\e\
    [0m; i >= \e[31m0\e[0m; i -= \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   ')' expected, but '=' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2jpa7vmm.scala:23:41 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m (i = l.length - \e[31m1\e\
    [0m; i >= \e[31m0\e[0m; i -= \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m          \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                   '<-' expected, but ';' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmp2jpa7vmm.scala:23:49 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mfor\e[0m (i = l.length - \e[31m1\e[0m; i >= \e\
    [31m0\e[0m; i -= \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                      \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                  '<-' expected, but ')' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp2jpa7vmm.scala:23:33 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            \e[33mfor\e[0m (i = l.length - \e[31m1\e[0m; i >= \e[31m0\e\
    [0m; i -= \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                             \
    \    ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null, but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import "
  stdout: ''
  timestamp: 1660013704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ ll = l.length\n        val ll2 = ll - 1\n        var ll3 = ll - 2\n        var\
    \ ll4 = ll - 3\n\n        val ll4 = ll - 4\n        val ll3 = ll - 3\n\n     \
    \   val ll2 = ll - 1\n        var ll1 = ll - 1\n        var ll0 = 0\n\n      \
    \  //print(ll, ll2)\n        if (ll == 0) return l\n\n        var evenIndicies\
    \ = 0\n        var evenValues    = 0\n\n        var evenIndices : List[Long] =\
    \ Nil\n\n        for(i <- 0 until ll) {\n            evenIndices ::= i\n     \
    \       evenValues   ::= l(i).toLong\n        }\n\n        //print(evenIndices)\n\
    \        evenIndices.sortWith(_ < _)\n\n        val evenIndicesLength = evenIndices.length\n\
    \n        //print(\"evenIndicesLength: \", evenIndicesLength)\n\n        for(i\
    \ <- 0 until evenIndicesLength) {\n            if (evenIndices(i) % 2 == 0) {\n\
    \                //print(\"even indices: \", i, \" value:\", evenValues(i))\n\
    \                evenIndices(i) = evenIndices(i).toLong + evenValues(i)\n    \
    \            evenValues    = evenValues.dropRight(1)\n                evenIndices\
    \  ::= evenIndices.dropRight(1)\n            }\n        }\n\n        if (evenIndicesLength\
    \ > 0) {\n            val evenIndicesLength = evenIndices.length\n\n         \
    \   for(i <- 0 until evenIndicesLength) {\n                if (evenIndices(i)\
    \ % 2 == 0) {\n                    //print(\"even indices: \", i, \" value:\"\
    , evenValues(i))\n                    evenIndices(i) = evenIndices(i).toLong +\
    \ evenValues(i)\n                    evenValues    = evenValues.dropRight(1)\n\
    \                    evenIndices  ::= evenIndices.dropRight(1)\n             \
    \   }\n            }\n        }\n\n        //print(evenIndices)\n        evenIndices.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7c3_7qgg.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mll4\e[0m = ll - \e[31m4\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mll4 is\
    \ already defined as \e[33mvariable\e[0m \e[35mll4\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7c3_7qgg.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mll3\e[0m = ll - \e[31m3\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mll3 is already defined as \e[33mvariable\e[0m \e[35mll3\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7c3_7qgg.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mll2\e[0m = ll - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mll2 is already defined\
    \ as \e[33mvalue\e[0m \e[35mll2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7c3_7qgg.scala:34:25 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            evenValues   ::= l(i).toLong\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ ::= is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7c3_7qgg.scala:47:16\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m                evenIndices(i)\
    \ = evenIndices(i).toLong + evenValues(i)\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of List[Long]\
    \ - did you mean List[Long].updated?\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp7c3_7qgg.scala:47:57\
    \ -----------------------------\e[0m\e[0m\n\e[31m47 |\e[0m                evenIndices(i)\
    \ = evenIndices(i).toLong + evenValues(i)\n\e[31m\e[31m   |\e[0m             \
    \                                            ^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l = l.toList\n        val l' = l.zipWithIndex.filter(_._2%2==0).map(_._1)\n\
    \        val even = l.zipWithIndex.filter(_._2%2==1).map(_._1)\n        val odd\
    \ = l.zipWithIndex.filter(_._2%2==0).map(_._1)\n        odd.zip(even).flatMap{\
    \ case (l, l2) => List(l,l2) }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph7ahfk7b.scala:13:13 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m' = l.zipWithIndex.filter(_._2%\e\
    [31m2\e[0m==\e[31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\
    \e[31m   |\e[0m             '=' expected, but ' found\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmph7ahfk7b.scala:12:16 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e\
    [0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.filter(_ % 2 == 0)\n        val odd = l.filter(_ % 2 == 1)\n      \
    \  val evenAndOdd = even.zip(odd)\n        val sortedEven = evenAndOdd.sortBy(_._1)\n\
    \        val sortedOdd = evenAndOdd.sortBy(_._2)\n        sortedEven.flatMap(sortedOdd\
    \ map { case (evenValue, oddValue) => (evenValue, oddValue) })\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong,\
    \ 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong,\
    \ -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong,\
    \ -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfyv873sw.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        sortedEven.flatMap(sortedOdd\
    \ map { \e[33mcase\e[0m (evenValue, oddValue) => (evenValue, oddValue) })\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    List[(Long, Long)]\n\e\
    [31m   |\e[0m                          Required: ((Long, Long)) => IterableOnce[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        def\
    \ isEven(i: Int): Boolean = i % 2 == 0\n        def swapIt(i: Int, j: Int) : Unit\
    \ = {\n            val t = l(i)\n            l(i) = l(j)\n            l(j) = t\n\
    \        }\n        if(l.isEmpty) l.toList\n        else {\n            val len\
    \ = l.length\n            val evenIndices = mutable.ListBuffer[Int]()\n      \
    \      val oddIndices = mutable.ListBuffer[Int]()\n            var evenI = 0\n\
    \            var oddI = 0\n            for(i <- 0 until len) {\n             \
    \   if(i%2 == 0)\n                    evenIndices += i\n                else oddIndices\
    \ += i\n            }\n            for(i <- 0 until evenIndices.size - 1 by 2)\
    \ {\n                swapIt(evenIndices(evenI), evenIndices(evenI + 1))\n    \
    \            evenI += 1\n            }\n            for(i <- evenIndices.reverse.toSeq\
    \ reverse) {\n                swapIt(i, i + 1)\n            }\n            l ++\
    \ oddIndices.toList\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqc6rcbln.scala:34:54 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mfor\e[0m(i <- evenIndices.reverse.toSeq\
    \ reverse) {\n\e[31m\e[31m   |\e[0m                                          \
    \            ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpqc6rcbln.scala:15:12 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m            l(i) = l(j)\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m  \
    \ |\e[0m    value update is not a member of List[Long] - did you mean l.updated?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqc6rcbln.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            l(j) = t\n\e[31m\e[31m   |\e[0m         \
    \   ^\e[0m\n\e[31m   |\e[0m    value update is not a member of List[Long] - did\
    \ you mean l.updated?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqc6rcbln.scala:21:30\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenIndices\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpqc6rcbln.scala:22:29 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36moddIndices\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ tempList: List[Long] = Nil\n        for(i <- 0 until l.size){\n            if(i\
    \ % 2 == 0){\n                tempList += l.apply(i)\n            } else {\n \
    \               tempList += l.apply(i)\n            }\n        }\n        for(j\
    \ <- 0 until tempList.length){\n            for(k <- 0 until tempList.length){\n\
    \                if(j != k){\n                    if(tempList.apply(j) == tempList.apply(k)){\n\
    \                        tempList += tempList.apply(j)\n                     \
    \   tempList -= tempList.apply(k)\n                        tempList += tempList.apply(j)\n\
    \                        break\n                    }\n                }\n   \
    \         }\n        }\n        tempList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfrf8470w.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                tempList += l.apply(i)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not\
    \ a member of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpfrf8470w.scala:17:25 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m                tempList += l.apply(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member\
    \ of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpfrf8470w.scala:24:33 ------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                        tempList += tempList.apply(j)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value +=\
    \ is not a member of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpfrf8470w.scala:25:33 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                        tempList -= tempList.apply(k)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \    value -= is not a member of List[Long] - did you mean List[Long].!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpfrf8470w.scala:26:33 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                        tempList += tempList.apply(j)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \    value += is not a member of List[Long] - did you mean List[Long].!=?\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfrf8470w.scala:27:24 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660013713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.filter(_ % 2 == 0).sortBy(_ % 2)\n        val odd = l.filter(_ % 2\
    \ == 1).sortBy(_ % 2)\n        (even ++: odd).sortBy(_._1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7vhqst5.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        (even ++: odd).sortBy(_._1)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^\e[0m\n\e[31m   |\e[0m                  \
    \            value _1 is not a member of Long\n\e[31m\e[31m-- Error: /tmp/tmpx7vhqst5.scala:14:35\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ (even ++: odd).sortBy(_._1)\n\e[31m\e[31m   |\e[0m                         \
    \          ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m\
    \ \e[35mSeqOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660013711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ l2 = l.sortWith(math.Ordering.Long.reverse)\n        val even_odd = new mutable.ListBuffer[Long]\n\
    \        var i = 0\n        for (i <- 0 until l2.length) {\n            if (i\
    \ mod 2 == 0) {\n                even_odd += l2(i)\n            } else {\n   \
    \             l2(i) = even_odd(0)\n                i += 1\n            }\n   \
    \     }\n        l2.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2bew1f0k.scala:12:47\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36ml2\e\
    [0m = l.sortWith(math.Ordering.Long.reverse)\n\e[31m\e[31m   |\e[0m          \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                  Found:    Ordering[Long]\n\e[31m   |\e[0m                 \
    \           Required: (Long, Long) => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2bew1f0k.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven_odd\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m               \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2bew1f0k.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m\
    \ (i mod \e[31m2\e[0m == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \  ^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a member of Int, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following\
    \ import might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.int2bigInt\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2bew1f0k.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                l2(i) = even_odd(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                ^^\e[0m\n\e[31m   |\e[0mvalue\
    \ update is not a member of List[Long] - did you mean List[Long].updated?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2bew1f0k.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                i += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean i.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1660013714
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenInd = l.zipWithIndex.filter(x => x._2 % 2 == 0).map(_._1)\n        val evenList\
    \ = l.filterNot(x => evenInd.contains(x.toLong))\n        val oddList = l.filterNot(x\
    \ => evenInd.contains(x.toLong)).sorted\n        evenList ++ oddList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp12qr1u4h.scala:18)\n\tat Problem.main(tmp12qr1u4h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        //sort\
    \ odd indicies of l\n        var newL = new ListBuffer[Long]\n        var newL2\
    \ : List[Long] = new ListBuffer[Long]\n\n        // loop through list and add\
    \ odd indicies to newL\n        for(i <- 0 until l.length){\n            if(i%2\
    \ == 0){\n                newL2 += l(i)\n                newL += l(i)\n      \
    \      }\n        }\n\n        // sort newL using sortBy\n        newL.sortBy(i\
    \ => newL2.indexOf(i))\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeqomii5v.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mnewL2\e\
    [0m : \e[35mList\e[0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m                     Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpeqomii5v.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                newL2 += l(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of\
    \ List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpeqomii5v.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        newL.sortBy(\e[36mi\e[0m => newL2.indexOf(i))\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   Found:    scala.collection.mutable.ListBuffer[Long]\n\e[31m   |\e[0m     \
    \   Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenIndices = l.zipWithIndex.filter(_._1 % 2 == 0).map(_._1)\n        val evenSorted\
    \ = evenIndices.toSeq.sortBy(_._1)\n        val odd = l.zipWithIndex.filter(_._1\
    \ % 2 == 1).map(_._1)\n        val result: List[Long] = even ::: odd\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpim_p3he3.scala:13:52 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenSorted\e[0m = evenIndices.toSeq.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value _1 is not a\
    \ member of Long\n\e[31m\e[31m-- Error: /tmp/tmpim_p3he3.scala:13:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenSorted\e[0m = evenIndices.toSeq.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                       ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mBigDecimal\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpim_p3he3.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = even ::: odd\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: even\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n      val evenIndexes\
    \ = l filter (_ % 2 == 0)\n      val oddIndexes = l filter (_ % 2 == 1)\n    \
    \  evenIndexes.map(x => (x.toLong, x.toLong))\n        ::: oddIndexes.map(x =>\
    \ (x.toLong, x.toLong))\n        .sortWith((x: Long, y: Long) => x.toLong < y.toLong)\n\
    \        .map(x => (x._1, x._2))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6jpdlldk.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        .sortWith((x: Long, y:\
    \ Long) => x.toLong < y.toLong)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    (Long, Long) => Boolean\n\e[31m\
    \   |\e[0m                  Required: (\e[1m\e[32m(\e[0mLong, Long)\e[1m\e[32m,\e\
    [0m \e[1m\e[32m(\e[0m\e[1m\e[32mLong\e[0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0m\e\
    [1m\e[32mLong\e[0m\e[1m\e[32m)\e[0m\e[1m\e[32m)\e[0m\e[1m\e[32m \e[0m=> Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l = l.sorted\n        val l = l.zip(l.tail).map(_._2)\n        l.zipWithIndex.map(_._1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_fpg157j.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.zip(l.tail).map(_._2)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_fpg157j.scala:12:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.sorted\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l1 = l.tail\n        val l2 = l.init\n        l1.zip(l2).map(x => x._1 + x._2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp65mwlr35.scala:17)\n\tat Problem.main(tmp65mwlr35.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ evenIndices = l.zipWithIndex.filter( _._2 % 2 == 0).toList\n        var oddIndices\
    \ = l.zipWithIndex.filter( _._2 % 2 == 1).toList\n        oddIndices.sortBy( x\
    \ => x(0) )\n        evenIndices.sortBy( x => x(0) )\n        var evenValues =\
    \ evenIndices.map( x => x(1).toLong )\n        var oddValues = oddIndices.map(\
    \ x => x(1).toLong )\n        oddValues.zipWithIndex.flatMap( x => evenValues.map\
    \ { y => (x(1), y) } ) ++\n            evenValues.zipWithIndex.flatMap( x => evenValues.map\
    \ { y => (x(1), y) } )\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp2w57lid.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        oddValues.zipWithIndex.flatMap(\
    \ \e[36mx\e[0m => evenValues.map { \e[36my\e[0m => (x(\e[31m1\e[0m), y) } ) ++\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31m(\e[0m\e[1m\e[31mInt\e[0m\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0mLong\e[1m\e\
    [31m)\e[0m]\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m19 |\e[0m    \
    \        evenValues.zipWithIndex.flatMap( \e[36mx\e[0m => evenValues.map { \e\
    [36my\e[0m => (x(\e[31m1\e[0m), y) } )\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenList = l.zipWithIndex.filter(_._2%2==0)\n        val oddList = l.zipWithIndex.filter(_._2%2==1).sortWith(_<_)\n\
    \        evenList ++ oddList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyeju8qpg.scala:13:65 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moddList\e[0m = l.zipWithIndex.filter(_._2%\e\
    [31m2\e[0m==\e[31m1\e[0m).sortWith(_<_)\n\e[31m\e[31m   |\e[0m               \
    \                                                 ^^\e[0m\n\e[31m   |\e[0mvalue\
    \ < is not a member of (Long, Int), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyeju8qpg.scala:14:8 ---------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        evenList ++ oddList\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e\
    [31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e[0m\e[1m\e[31m)\e\
    [0m]\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        if (l.length\
    \ < 2) return l\n        val evenList = l.filter(_ % 2 == 0)\n        val evenListSortedOdds\
    \ = evenList.sortWith(_ < _)\n        evenListSortedOdds.take(l.length div 2).foreach((x\
    \ => l.insert(l.lastIndexOf(x), x)).toList)\n        l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo75hicio.scala:15:41 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        evenListSortedOdds.take(l.length div \e[31m2\e\
    [0m).foreach((\e[36mx\e[0m => l.insert(l.lastIndexOf(x), x)).toList)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                value div is not a member of Int\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpo75hicio.scala:15:57 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        evenListSortedOdds.take(l.length div \e[31m2\e\
    [0m).foreach((\e[36mx\e[0m => l.insert(l.lastIndexOf(x), x)).toList)\n\e[31m\e\
    [31m   |\e[0m                                                         ^\e[0m\n\
    \e[31m   |\e[0m                          Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                          I could not infer the type of the\
    \ parameter x.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo75hicio.scala:15:64\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        evenListSortedOdds.take(l.length\
    \ div \e[31m2\e[0m).foreach((\e[36mx\e[0m => l.insert(l.lastIndexOf(x), x)).toList)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^^^^^^^^\e[0m\n\e[31m   |\e[0m       value insert is not a member of List[Long]\
    \ - did you mean l.init?\n3 errors found\n"
  stdout: ''
  timestamp: 1660013717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evens = l filter (_ % 2 == 0)\n        val odds  = l filter (_ % 2 != 0)\n \
    \       var even = 0\n        var odd  = 0\n        evens foreach { ev =>\n  \
    \          odd = even\n            even = ev\n            while (even < evens.size\
    \ && even < odd.size && even < even.size && even < odd.size) {\n             \
    \   if (evens(even) == evens(evens.size - 1)) {\n                    odds(odd.size\
    \ - 1) = evens(even)\n                    even = 0\n                    odd =\
    \ 1\n                }\n                else {\n                    odds(odd.size\
    \ - 1) = evens(even)\n                    even = 0\n                    odd +=\
    \ 1\n                }\n            }\n        }\n        odds ::: evens\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptkil1a20.scala:18:19\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            even = ev\n\e[31m\e\
    [31m   |\e[0m                   ^^\e[0m\n\e[31m   |\e[0m                   Found:\
    \    (ev : Long)\n\e[31m   |\e[0m                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptkil1a20.scala:19:51 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mwhile\e[0m (even < evens.size && even\
    \ < odd.size && even < even.size && even < odd.size) {\n\e[31m\e[31m   |\e[0m\
    \                                               ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                       value size is not a member of Int\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmptkil1a20.scala:19:71 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mwhile\e[0m (even < evens.size && even\
    \ < odd.size && even < even.size && even < odd.size) {\n\e[31m\e[31m   |\e[0m\
    \                                                                  ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       value size is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptkil1a20.scala:19:90\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mwhile\e\
    [0m (even < evens.size && even < odd.size && even < even.size && even < odd.size)\
    \ {\n\e[31m\e[31m   |\e[0m                                                   \
    \                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                            value size is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmptkil1a20.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    odds(odd.size - \e[31m1\e[0m) = evens(even)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m value update\
    \ is not a member of List[Long] - did you mean odds.updated?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmptkil1a20.scala:21:29 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                    odds(odd.size - \e[31m1\e[0m) = evens"
  stdout: ''
  timestamp: 1660013717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l1 = l.map(x => (x, x))\n        val l2 = l.map(x => (x, x))\n        val l3\
    \ = l.map(x => (x, x))\n        val l4 = l.map(x => (x, x))\n        val l5 =\
    \ l.map(x => (x, x))\n        val l6 = l.map(x => (x, x))\n        val l7 = l.map(x\
    \ => (x, x))\n        val l8 = l.map(x => (x, x))\n        val l9 = l.map(x =>\
    \ (x, x))\n        val l10 = l.map(x => (x, x))\n        val l11 = l.map(x =>\
    \ (x, x))\n        val l12 = l.map(x => (x, x))\n        val l13 = l.map(x =>\
    \ (x, x))\n        val l14 = l.map(x => (x, x))\n        val l15 = l.map(x =>\
    \ (x, x))\n        val l16 = l.map(x => (x, x))\n        val l17 = l.map(x =>\
    \ (x, x))\n        val l18 = l.map(x => (x, x))\n        val l19 = l.map(x =>\
    \ (x, x))\n        val l20 = l.map(x => (x, x))\n        val l21 = l.map(x =>\
    \ (x, x))\n        val l22 = l.map(x => (x, x))\n        val l23 = l.map(x =>\
    \ (x, x))\n        val l24 = l.map(x => (x, x))\n        val l25 = l.map(x =>\
    \ (x, x))\n        val l26 = l.map(x => (x, x))\n        val l27 = l.map(x =>\
    \ (x, x))\n        val l28 = l.map(x => (x, x))\n        val l29 = l.map(x =>\
    \ (x, x))\n        val l30 = l.map(x => (x, x))\n        val l31 = l.map(x =>\
    \ (x, x))\n        val l32 = l.map(x => (x, x))\n        val l33 = l.map(x =>\
    \ (x, x))\n        val l34 = l.map(x => (x, x))\n        val l35 = l.map(x =>\
    \ (x, x))\n        val l36 = l.map(x => (x, x))\n        val l37 = l.map(x =>\
    \ (x, x))\n        val l38 = l.map(x => (x, x))\n        val l39 = l.map(x =>\
    \ (x, x))\n        val l40 = l.map(x => (x, x))\n        val l41 = l.map(x =>\
    \ (x, x))\n        val l42 = l.map(x => (x, x))\n        val l43 = l.map(x =>\
    \ (x, x))\n        val l44 = l.map(x => (\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppqcfey33.scala:55:30 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36ml44\e[0m = l.map(\e[36mx\e\
    [0m => (\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m  \
    \ |\e[0m                              expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppqcfey33.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // Initialize\
    \ result list\n        val r = new Array[Long](l.length)\n        // Loop over\
    \ the original list\n        for(i <- 0 until l.length){\n            // Keep\
    \ the original list intact\n            val rlist = r ++ l(i)\n            //\
    \ Sort the list for the even values\n            rlist.sortWith(_ < _)\n     \
    \       // If the original list is even, put the even values into the result list\
    \ for sorting and remove the original value\n            if(i % 2 == 0){\n   \
    \             r(i) <- rlist.sortWith(_ < _)\n                rlist.remove(r(i))\n\
    \            }\n        }\n        // Return result\n        r\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong,\
    \ 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong,\
    \ -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong,\
    \ -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkqkj2jam.scala:22:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                r(i) <- rlist.sortWith(_ < _)\n\e[31m\e\
    [31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m                   \
    \  end of statement expected but '<-' found\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmpkqkj2jam.scala:17:26 -----------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            \e[33mval\e[0m \e[36mrlist\e[0m = r ++ l(i)\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m++\e[0m in \e[33mclass\e[0m \e[35mArrayOps\e\
    [0m with types\n\e[31m   |\e[0m [B >: Long]\n\e[31m   |\e[0m  (xs: Array[? <:\
    \ B])(\e[33mimplicit \e[0mevidence$25: scala.reflect.ClassTag[B]): Array[B]\n\e\
    [31m   |\e[0m [B >: Long]\n\e[31m   |\e[0m  (xs: IterableOnce[B])\n\e[31m   |\e\
    [0m    (\e[33mimplicit \e[0mevidence$24: scala.reflect.ClassTag[B]): Array[B]\n\
    \e[31m   |\e[0mmatch arguments (Long)\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkqkj2jam.scala:27:8 ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \        r\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (r : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013717
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.filter(_ % 2 == 0)\n        val odd = l.filter(_ % 2 != 0)\n      \
    \  val evenSorted = even.sortWith(_ < _)\n        odd.zip(evenSorted).map { case\
    \ (o, e) => o }\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps57bg3en.scala:18)\n\tat Problem.main(tmps57bg3en.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenIndexes = l.zipWithIndex.filter(_._2 % 2 == 0).map(_._1)\n        val oddIndexes\
    \ = l.zipWithIndex.filter(_._2 % 2 == 1).map(_._1)\n        evenIndexes.map(l(_))\
    \ ++ l.zipWithIndex.filter(x => !evenIndexes.contains(x._1)).map(_._1) ++ oddIndexes.map(l(_))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ltpml3w.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        evenIndexes.map(l(_))\
    \ ++ l.zipWithIndex.filter(\e[36mx\e[0m => !evenIndexes.contains(x._1)).map(_._1)\
    \ ++ oddIndexes.map(l(_))\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (_$5 : Long)\n\e[31m \
    \  |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1ltpml3w.scala:14:119 -------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        evenIndexes.map(l(_)) ++ l.zipWithIndex.filter(\e\
    [36mx\e[0m => !evenIndexes.contains(x._1)).map(_._1) ++ oddIndexes.map(l(_))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                                  Found:    (_$7 : Long)\n\
    \e[31m   |\e[0m                                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ listCopy = l.clone\n        var evenIndex = l.length\n        var oddIndex =\
    \ 0\n        while (evenIndex < listCopy.length) {\n            val currentEven\
    \ = listCopy(evenIndex)\n            if (currentEven % 2 == 0) {\n           \
    \     listCopy(evenIndex) = 0\n                evenIndex += 1\n            } else\
    \ {\n                listCopy(evenIndex) = currentEven\n                evenIndex\
    \ += 1\n            }\n        }\n        listCopy.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6uzhf2i3.scala:12:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlistCopy\e[0m = l.clone\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m\e[33mmethod\e\
    [0m \e[35mclone\e[0m in \e[33mclass\e[0m \e[35mObject\e[0m cannot be accessed\
    \ as a member of (l : List[Long]) from module class Problem$.\n\e[31m   |\e[0m\
    \ Access to protected \e[33mmethod\e[0m \e[35mclone\e[0m not permitted because\
    \ prefix type List[Long]\n\e[31m   |\e[0m does not conform to \e[33mobject\e[0m\
    \ \e[35mProblem\e[0m where the access takes place\n1 error found\n"
  stdout: ''
  timestamp: 1660013715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ (l1, l2) = (l.take(l.length / 2), l.drop(l.length / 2))\n        val l3 : mutable.ListBuffer[Long]\
    \ = mutable.ListBuffer(l2.head, l2(0))\n        l1.zipWithIndex.foreach { case\
    \ (x, i) =>\n            l3 += x if (i % 2 == 0)\n        }\n        l3\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpx85v6ejw.scala:15:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            l3 += x \e[33mif\e[0m (i % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^\e[0m\n\e[31m   |\e\
    [0m                    end of statement expected but 'if' found\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpx85v6ejw.scala:13:17 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml3\e[0m : mutable.ListBuffer[\e\
    [35mLong\e[0m] = mutable.ListBuffer(l2.head, l2(\e[31m0\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx85v6ejw.scala:13:44\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36ml3\e[0m : mutable.ListBuffer[\e[35mLong\e[0m] = mutable.ListBuffer(l2.head,\
    \ l2(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                                   \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // Sort\
    \ the list so that we always compare the even and odd indicies\n        // by\
    \ taking the even index value and multiplying it by 2.\n        val lSortedOdd\
    \ = l.sortWith((x, y) => x.toLong % 2 == y.toLong % 2)\n        // Create a list\
    \ of values from lSortedOdd so that we can compare\n        // them with the even\
    \ indicies in lSortedOdd, and add them to our new list\n        val lNew = lSortedOdd.map\
    \ { x => x * 2 }\n        // Find the indices where lNew and lSortedOdd differ,\
    \ and return a new list with the values\n        // at the indices of lNew and\
    \ lSortedOdd\n        val iDiff = lNew.zip(lSortedOdd).map { case (x, y) => x\
    \ }\n        lNew ++ lSortedOdd.map(_ - iDiff)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3c1ejrbs.scala:21:33 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        lNew ++ lSortedOdd.map(_ - iDiff)\n\e[31m\e[31m\
    \   |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m\
    \ \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e\
    [0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int):\
    \ Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e\
    [31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((iDiff : List[Long]))\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ even = l.toSet\n        var odd = even.toSeq.sorted\n        for (i <- 0 until\
    \ even.length-1)\n            odd =  odd.drop(1).zip(even.take(even.length-i-1)).map{case\
    \ (a, b) => a}\n        odd.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppnyy8jk0.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until even.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          value length is not a member of Set[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppnyy8jk0.scala:15:50 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            odd =  odd.drop(\e[31m1\e[0m).zip(even.take(even.length-i-\e\
    [31m1\e[0m)).map{\e[33mcase\e[0m (a, b) => a}\n\e[31m\e[31m   |\e[0m         \
    \                                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                        value length is not a member of Set[Long]\n2 errors found\n"
  stdout: ''
  timestamp: 1660013719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l = l.toList\n        val sorted = (0 until l.length).map(i => (i , l.apply(i)))\n\
    \        sorted.sortBy(t => t._1).map(t => t._2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv9_gt_4_.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpv9_gt_4_.scala:14:36 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        sorted.sortBy(\e[36mt\e[0m => t._1).map(\e[36mt\e\
    [0m => t._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Nothing]\n\e[31m   |\e[0m   \
    \     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even  = l.filter(_ % 2 == 0).toList\n        val odd   = l.filter(_ % 2 != 0).toList\n\
    \        val evenSorted  = even.sortBy(_).toList\n        val oddSorted = odd.sortBy(_).toList\n\
    \        evenSorted ::: oddSorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpi41meolq.scala:14:38 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenSorted\e[0m  = even.sortBy(_).toList\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$3 of expanded function:\n\e[31m   |\e[0m   _$3 =>\
    \ even.sortBy(_$3).toList.\n\e[31m\e[31m-- Error: /tmp/tmpi41meolq.scala:14:40\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ \e[33mval\e[0m \e[36mevenSorted\e[0m  = even.sortBy(_).toList\n\e[31m\e[31m\
    \   |\e[0m                                        ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mShort\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmpi41meolq.scala:15:35 -----------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddSorted\e[0m = odd.sortBy(_).toList\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$4 of expanded function:\n\e[31m   |\e[0m   _$4 =>\
    \ odd.sortBy(_$4).toList.\n\e[31m\e[31m-- Error: /tmp/tmpi41meolq.scala:15:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \ \e[33mval\e[0m \e[36moddSorted\e[0m = odd.sortBy(_).toList\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0mambiguous given\
    \ instances: both \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mShort\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ i = 0\n        var j = 0\n        while(i < l.length) {\n            while (j\
    \ < l.length && l(i) == l(j)) {\n                j += 1\n            }\n     \
    \       val temp = l(j)\n            l(i) = l(j)\n            l(j) = temp\n  \
    \          i += 1\n            j += 1\n        }\n        l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1ywhbal6.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            l(i) = l(j)\n\e[31m\e[31m   |\e[0m      \
    \      ^\e[0m\n\e[31m   |\e[0m    value update is not a member of List[Long] -\
    \ did you mean l.updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1ywhbal6.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            l(j) = temp\n\
    \e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m    value update is not\
    \ a member of List[Long] - did you mean l.updated?\n2 errors found\n"
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        if (l.isEmpty)\
    \ Nil\n        else l match {\n            case List() => Nil\n            case\
    \ _ => l.zipWithIndex match {\n                case (x :: xs', y) => if (y % 2\
    \ == 0) x :: sortEven(xs) else sortEven(xs)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwnym6wei.scala:16:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m (x :: xs', y) => \e[33mif\e\
    [0m (y % \e[31m2\e[0m == \e[31m0\e[0m) x :: sortEven(xs) \e[33melse\e[0m sortEven(xs)\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         unclosed character literal\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpwnym6wei.scala:16:42 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m                \e[33mcase\e[0m (x :: xs', y) => \e[33mif\e[0m\
    \ (y % \e[31m2\e[0m == \e[31m0\e[0m) x :: sortEven(xs) \e[33melse\e[0m sortEven(xs)\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0m                                          Not found: y\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwnym6wei.scala:16:68 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m (x :: xs', y) => \e[33mif\e\
    [0m (y % \e[31m2\e[0m == \e[31m0\e[0m) x :: sortEven(xs) \e[33melse\e[0m sortEven(xs)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^\e[0m\n\e[31m   |\e[0m                                      Found:\
    \    \e[1m\e[31m(\e[0m\e[1m\e[31mxs\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e\
    [31m \e[0mList[\e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e\
    [31mInt\e[0m\e[1m\e[31m)\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m             \
    \                         Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwnym6wei.scala:16:54 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m (x :: xs', y) => \e[33mif\e\
    [0m (y % \e[31m2\e[0m == \e[31m0\e[0m) x :: sortEven(xs) \e[33melse\e[0m sortEven(xs)\n\
    \e[31m\e[31m   |\e[0m                                                      ^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (x\
    \ : (Long, Int))\n\e[31m   |\e[0m                                            \
    \ Required: Lo"
  stdout: ''
  timestamp: 1660013724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l = l.map((_ + 1).toLong)\n        val l2 = l.map((_ + 2).toLong)\n        val\
    \ l3 = l.map((_ + 3).toLong)\n        val l4 = l.map((_ + 4).toLong)\n       \
    \ if (l.forall(_.isEven)) {\n            l4\n        } else {\n            l2.zip(l3).zip(l4).sortBy(_._2).reverse.map(_._1)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyqwvu9ut.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.map((_ + \e[31m1\e\
    [0m).toLong)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m   \
    \             Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        def\
    \ oddAndEven(evenList: List[Long], oddList: List[Long], evenCount: List[Int],\
    \ oddCount: List[Int]) : List[Long] = {\n            if (evenList.length < oddList.length)\
    \ oddAndEven(evenList.toList.takeRight(evenList.length), oddList.toList, evenCount.takeRight(evenList.length),\
    \ oddCount.toList)\n            else {\n                val evenSortedList = evenList.toList.sortBy(x\
    \ => x)\n                val oddSortedList = oddList.toList.sortBy(x => x)\n \
    \               oddAndEven(evenSortedList.takeRight(evenList.length), oddSortedList,\
    \ evenCount.takeRight(evenList.length).reverse, oddCount.toList)\n           \
    \ }\n        }\n        val evenCount = l.grouped(2).toList.length\n        val\
    \ oddCount = l.length\n        oddAndEven(l, l, evenCount.reverse, oddCount)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfn5ymsz_.scala:22:35 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        oddAndEven(l, l, evenCount.reverse, oddCount)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         value reverse is not a member of Int\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpfn5ymsz_.scala:22:44 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        oddAndEven(l, l, evenCount.reverse, oddCount)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                            Found:    (oddCount\
    \ : Int)\n\e[31m   |\e[0m                                            Required:\
    \ List[Int]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        if (l.isEmpty)\n\
    \            Nil\n        else\n            l.foldLeft((Nil, l.head))(\n     \
    \           ((acc, value) => {\n                    if (value.toInt % 2 == 1)\n\
    \                        (value :: acc, value)\n                    else\n   \
    \                     (acc, value)\n                }\n                )\n   \
    \         )\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpigqj0uss.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                        (value :: acc, value)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ :: is not a member of (scala.collection.immutable.Nil.type, Long) - did you\
    \ mean acc.*:?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpigqj0uss.scala:20:25\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                        (acc,\
    \ value)\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e[31m   |\e\
    [0m           Found:    \e[1m\e[31m(\e[0m\e[1m\e[31macc\e[0m\e[1m\e[31m \e[0m\e\
    [1m\e[31m:\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m(\e[0mscala.collection.immutable.Nil.type\e\
    [1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mLong\e[0m\e[1m\e[31m)\e[0m\e[1m\e[31m)\e\
    [0m\n\e[31m   |\e[0m           Required: scala.collection.immutable.Nil.type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        l.foreach{x => if (x%2==0) even.append(x) else {odd.append(x)}}\n   \
    \     val merged = even.toList.sorted ++ odd.toList\n        merged\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkt_oyusu.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpkt_oyusu.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // Create\
    \ 2 lists of equal size\n        val even = l.toList.filter(_ % 2 == 0)\n    \
    \    val odd = l.toList.filter(_ % 2 == 1)\n\n        // Sort them\n        odd.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprznr14zp.scala:20)\n\tat Problem.main(tmprznr14zp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ ll = l.sortBy(_.toLong)\n        val evens = ll.zipWithIndex.filter(_._2%2==0)\n\
    \        val odd = ll.zipWithIndex.filter(_._2%2!=0)\n        evens ++ odd.map(x\
    \ => x._1+x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgqihx0i_.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        evens ++ odd.map(\e\
    [36mx\e[0m => x._1+x._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[Matchable]\n\e[31m   |\e[0m       \
    \ Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // Your\
    \ code here\n        val even = l.filter(_ % 2 == 0).toList\n        val odd =\
    \ l.filter(_ % 2 != 0).toList\n        val evenSorted = even.sortBy(_)\n     \
    \   val oddSorted = odd.sortBy(x => x)\n        evenSorted ++ oddSorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkmjj2me5.scala:15:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenSorted\e[0m = even.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0mNo implicit Ordering defined for Any..\n\e[31m   |\e[0mI found:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m    scala.math.Ordering.ordered[\e[35mAny\e[0m](\n\e[31m \
    \  |\e[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\e\
    [31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type scala.math.Ordering.AsComparable[Any].\n1 error found\n"
  stdout: ''
  timestamp: 1660013727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.filter(_ % 2 == 0)\n        val odd = l.filter(_ % 2 == 1)\n      \
    \  val evenSort = even.sortWith((x, y) => x < y)\n        even.zip(evenSort)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvix0ocfc.scala:15:16\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        even.zip(evenSort)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    List[\e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mLong\e\
    [0m\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evens = l.filter(x => x % 2 == 0).toList\n        val odds = l.filter(x => x\
    \ % 2 == 1).toList\n        val evenList = evens.map { x => x.toLong }\n     \
    \   val oddList = odds.map(x => x.toLong)\n        val evenListSorted: mutable.Buffer[Long]\
    \ = new mutable.Buffer[Long]()\n        evenList.foreach(x => evenListSorted +=\
    \ x)\n        val oddListSorted: mutable.Buffer[Long] = new mutable.Buffer[Long]()\n\
    \        oddList.foreach(x => oddListSorted += x)\n        val sortedOddList =\
    \ oddListSorted.toList\n        val sortedEvenList = evenListSorted.toList\n \
    \       val sortedList = sortedEvenList ++ sortedOddList\n        sortedList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxnu7u9yd.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevenListSorted\e[0m: mutable.Buffer[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.Buffer[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpxnu7u9yd.scala:16:55 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevenListSorted\e[0m: mutable.Buffer[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.Buffer[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxnu7u9yd.scala:18:27\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36moddListSorted\e[0m: mutable.Buffer[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.Buffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxnu7u9yd.scala:18:54 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36moddListSorted\e[0m: mutable.Buffer[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.Buffer[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenIndexes = l.indices.filter(i => i % 2 == 0)\n        val newL = l.zip(evenIndexes.map(l(_))).toList\n\
    \        newL.sortWith(_._2 < _._2).map(_._1).map(_ + _._2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp9qpyzyvx.scala:14:49 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        newL.sortWith(_._2 < _._2).map(_._1).map(_ +\
    \ _._2)\n\e[31m\e[31m   |\e[0m                                               \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong number\
    \ of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660013724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        if (l.size\
    \ % 2 != 0)\n            throw new IllegalArgumentException(\"l must have an even\
    \ number of elements\")\n        val even = l.tail\n        val odd = l.init\n\
    \        val evenSorted = even.sortWith((o1,o2) => (o1 < (o2)) ? -1 : (o1 > (o2))\
    \ ? 1 : 0)\n        val oddSorted = odd.sortWith((o1,o2) => (o1 < (o2)) ? -1 :\
    \ (o1 > (o2)) ? 1 : 0)\n        evenSorted ++ (List.fill(evenSorted.size)(0l)\
    \ ++ (oddSorted ++ (List.fill(oddSorted.size)(0l))))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5zysqqyk.scala:16:85 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevenSorted\e[0m = even.sortWith((\e\
    [36mo1\e[0m,\e[36mo2\e[0m) => (o1 < (o2)) ? -\e[31m1\e[0m : (\e[35mo1\e[0m \e\
    [35m>\e[0m (\e[35mo2\e[0m)) \e[35m?\e[0m \e[31m1\e[0m : \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \             ')' expected, but ':' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp5zysqqyk.scala:17:83 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36moddSorted\e[0m = odd.sortWith((\e[36mo1\e\
    [0m,\e[36mo2\e[0m) => (o1 < (o2)) ? -\e[31m1\e[0m : (\e[35mo1\e[0m \e[35m>\e[0m\
    \ (\e[35mo2\e[0m)) \e[35m?\e[0m \e[31m1\e[0m : \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \ ')' expected, but ':' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5zysqqyk.scala:16:81\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mevenSorted\e[0m = even.sortWith((\e[36mo1\e[0m,\e[36mo2\e[0m) => (o1 < (o2))\
    \ ? -\e[31m1\e[0m : (\e[35mo1\e[0m \e[35m>\e[0m (\e[35mo2\e[0m)) \e[35m?\e[0m\
    \ \e[31m1\e[0m : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                                       Not found: type ?\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5zysqqyk.scala:16:62\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mevenSorted\e[0m = even.sortWith((\e[36mo1\e[0m,\e[36mo2\e[0m) => (o1 < (o2))\
    \ ? -\e[31m1\e[0m : (\e[35mo1\e[0m \e[35m>\e[0m (\e[35mo2\e[0m)) \e[35m?\e[0m\
    \ \e[31m1\e[0m : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                       value ? is not a member of Boolean\n\e[31m\e["
  stdout: ''
  timestamp: 1660013728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // Write\
    \ your code here\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj7lqiayr.scala:11:48\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36msortEven\e\
    [0m(\e[36ml\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mList\e[0m[\e[35mLong\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \  ^\e[0m\n\e[31m   |\e[0m                                                Found:\
    \    Unit\n\e[31m   |\e[0m                                                Required:\
    \ List[Long]\n\e[31m12 |\e[0m        \e[34m// Write your code here\e[0m\n\e[31m13\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        def\
    \ mergeSortedList(l1 : List[Long], l2 : List[Long]) : List[Long] = l1 match {\n\
    \            case Nil => l2\n            case _ :: Nil => l1\n            case\
    \ _ :: _ :: t => if (l1.head < l2.head) t :: l1 else l2 :: t\n        }\n    \
    \    val evenList = l.filter(_ % 2 == 0)\n        val oddList = l.filter(_ % 2\
    \ == 1)\n        evenList match {\n            case Nil => oddList\n         \
    \   case x :: Nil => x :: mergeSortedList(List(), oddList)\n            case _\
    \ :: t => if (evenList.head < t.head) t :: mergeSortedList(evenList, List(t.head))\
    \ else mergeSortedList(List(t.head), evenList)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe7bfgwqg.scala:15:55\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m _\
    \ :: _ :: t => \e[33mif\e[0m (l1.head < l2.head) t :: l1 \e[33melse\e[0m l2 ::\
    \ t\n\e[31m\e[31m   |\e[0m                                                   \
    \    ^\e[0m\n\e[31m   |\e[0m                                              Found:\
    \    (t : List[Long])\n\e[31m   |\e[0m                                       \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe7bfgwqg.scala:15:68\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m _\
    \ :: _ :: t => \e[33mif\e[0m (l1.head < l2.head) t :: l1 \e[33melse\e[0m l2 ::\
    \ t\n\e[31m\e[31m   |\e[0m                                                   \
    \                 ^^\e[0m\n\e[31m   |\e[0m                                   \
    \          Found:    (l2 : List[Long])\n\e[31m   |\e[0m                      \
    \                       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpe7bfgwqg.scala:22:55 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m _ :: t => \e[33mif\e[0m (evenList.head\
    \ < t.head) t :: mergeSortedList(evenList, List(t.head)) \e[33melse\e[0m mergeSortedList(List(t.head),\
    \ evenList)\n\e[31m\e[31m   |\e[0m                                           \
    \            ^\e[0m\n\e[31m   |\e[0m                                         \
    \     Found:    (t : List[Long])\n\e[31m   |\e[0m                            \
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.zipWithIndex.filter(_._2 % 2 == 0).toList\n        even.sortWith(_\
    \ < _)\n        even.map(_._1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_2eqoqvl.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        even.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m \
    \                     ^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of (Long,\
    \ Int), but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m \
    \ import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evens = l.filter(i => i % 2 == 0)\n        val odd = l.filter(i => i % 2 ==\
    \ 1)\n        evens.zip(odd).sortBy(_._1).zipWithIndex.flatMap( i => if(i < evens.length)\
    \ i else i -> odd.take(i._2)).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm2m2ta6h.scala:14:68 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        evens.zip(odd).sortBy(_._1).zipWithIndex.flatMap(\
    \ \e[36mi\e[0m => \e[33mif\e[0m(i < evens.length) i \e[33melse\e[0m i -> odd.take(i._2)).toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of ((Long, Long) @uncheckedVariance,\
    \ Int), but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m \
    \ import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpm2m2ta6h.scala:14:84 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        evens.zip(odd).sortBy(_._1).zipWithIndex.flatMap(\
    \ \e[36mi\e[0m => \e[33mif\e[0m(i < evens.length) i \e[33melse\e[0m i -> odd.take(i._2)).toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                            ^\e[0m\n\e[31m   |\e[0m                  Found: \
    \   (i : ((Long, Long) @uncheckedVariance, Int))\n\e[31m   |\e[0m            \
    \      Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpm2m2ta6h.scala:14:91 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        evens.zip(odd).sortBy(_._1).zipWithIndex.flatMap( \e[36mi\e[0m\
    \ => \e[33mif\e[0m(i < evens.length) i \e[33melse\e[0m i -> odd.take(i._2)).toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                   ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \          Found:    (((Long, Long) @uncheckedVariance, Int), List[Long])\n\e\
    [31m   |\e[0m          Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.zipWithIndex.filter(_._2 % 2 == 0).map(_._1)\n        val odd = l.zipWithIndex.filter(_._2\
    \ % 2 == 1).map(_._1)\n        val result = mutable.ListBuffer[Long]()\n     \
    \   for (ev in even) {\n            for (od in odd) {\n                if (ev\
    \ > od) {\n                    result += od\n                }\n             \
    \   result += ev\n            }\n        }\n        result.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2r99piml.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (ev in even) {\n\e[31m\e[31m \
    \  |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                    \
    \     '<-' expected, but '{' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2r99piml.scala:24:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '<-' expected, but '}' found\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2r99piml.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp2r99piml.scala:22:9 -------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0mvalue withFilter is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660013730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ n = 0\n        var n2 = l.length\n        var even = true\n        while(n <\
    \ n2) {\n            n += 1\n            if(n % 2 == 0 && even) {\n          \
    \      even = false\n            } else {\n                even = true\n     \
    \       }\n        }\n        l.sortWith( (x,y) => x % 2 == y % 2 ? 0 : ((x <\
    \ y) ? 1 : -1))\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk_5s0vwt.scala:23:63 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        l.sortWith( (\e[36mx\e[0m,\e[36my\e[0m) => x\
    \ % \e[31m2\e[0m == y % \e[31m2\e[0m ? \e[31m0\e[0m : ((\e[35mx\e[0m \e[35m<\e\
    [0m \e[35my\e[0m) \e[35m?\e[0m \e[31m1\e[0m : -\e[31m1\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                               ^\e[0m\n\
    \e[31m   |\e[0m                                             ')' expected, but\
    \ ':' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_5s0vwt.scala:23:59\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        l.sortWith( (\e[36mx\e\
    [0m,\e[36my\e[0m) => x % \e[31m2\e[0m == y % \e[31m2\e[0m ? \e[31m0\e[0m : ((\e\
    [35mx\e[0m \e[35m<\e[0m \e[35my\e[0m) \e[35m?\e[0m \e[31m1\e[0m : -\e[31m1\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \     Not found: type ?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk_5s0vwt.scala:23:44\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        l.sortWith( (\e[36mx\e\
    [0m,\e[36my\e[0m) => x % \e[31m2\e[0m == y % \e[31m2\e[0m ? \e[31m0\e[0m : ((\e\
    [35mx\e[0m \e[35m<\e[0m \e[35my\e[0m) \e[35m?\e[0m \e[31m1\e[0m : -\e[31m1\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^\e[0m\n\e[31m\
    \   |\e[0m                                          value ? is not a member of\
    \ Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660013729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.filter(_ % 2 == 0)\n        val odd = l.filter(_ % 2 != 0)\n      \
    \  even.zip(odd).sortBy(_._1).reverse.flatMap(x => x)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsdn104n0.scala:14:56\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        even.zip(odd).sortBy(_._1).reverse.flatMap(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \         Found:    (x : (Long, Long))\n\e[31m   |\e[0m                      \
    \                      Required: IterableOnce[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ j = 0;\n        var even = l.toSeq.filter(x => x % 2 == 0)\n        even.foreach\
    \ {\n            _ => j++;\n        }\n        val l2 = new Array[Long](j);\n\
    \        var j2 = 0;\n        even.foreach {\n            x => {\n           \
    \     l2(j2) = x;\n                j2++;\n            }\n        }\n        val\
    \ l3 = new Array[Long](j2);\n        even.foreach {\n            x => {\n    \
    \            var i = j2;\n                while ((j2 < j) && (l3(i) < x))\n  \
    \                  j2++\n                l3(i) = x;\n            }\n        }\n\
    \        l2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjqqliv2u.scala:15:20 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            _ => j++;\n\e[31m\e[31m   |\e[0m        \
    \            ^\e[0m\n\e[31m   |\e[0m                    expression expected but\
    \ \e[31m';'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjqqliv2u.scala:22:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                j2++;\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       expression expected but \e[31m';'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmpjqqliv2u.scala:30:24 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    j2++\n\e[31m\e[31m   |\e[0m     \
    \                   ^\e[0m\n\e[31m   |\e[0m                        expression\
    \ expected but \e[31munindent\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // Create\
    \ an empty list to hold our sorted results\n        var ans = List[Long]()\n \
    \       // Add each element of l to our ans list\n        ans :+= l foreach {\
    \ x => ans :+= x }\n        // Iterate over ans, comparing each element to its\
    \ next element\n        var i = 0\n        while (i < ans.length - 1) {\n    \
    \        var next = i + 1\n            // If the next element is even, add that\
    \ element to the list with the even indices\n            if (ans(next) % 2 ==\
    \ 0) {\n                ans(i) += 1\n                // Remove the next element\
    \ from the even indices\n                ans -= next\n            }\n        \
    \    // If the next element is odd, add that element to the list with the odd\
    \ indices\n            else {\n                ans(i) -= 1\n                ans(next)\
    \ += 1\n            }\n            i += 1\n        }\n        return ans\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8tlnkxet.scala:15:12 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        ans :+= l foreach { \e[36mx\e[0m => ans :+= x\
    \ }\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m   value :+= is\
    \ not a member of List[Long] - did you mean List[Long].:+?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp8tlnkxet.scala:22:23 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                ans(i) += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is\
    \ not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp8tlnkxet.scala:24:20 ------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                ans -= next\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m    value -= is not a member of List[Long] - did you mean\
    \ List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8tlnkxet.scala:28:23\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                ans(i) -=\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                value -= is not a member of Long - did you mean Long.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8tlnkxet.scala:29:26 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                ans(next) += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Long - did you mean Long.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        l.zipWithIndex.map{\n\
    \        case (x, i) => if(i % 2 == 0) x else math.min(x.toLong, x.toLong + 1)\n\
    \        }.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpomo43zqg.scala:18)\n\tat Problem.main(tmpomo43zqg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenLst = l.takeWhile(x => x % 2 == 0).sortBy(-x)\n        evenLst.take(l.length\
    \ / 2).concat(evenLst.drop(l.length / 2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_giv6e7j.scala:12:59 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenLst\e[0m = l.takeWhile(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sortBy(-x)\n\e[31m\e[31m   |\e\
    [0m                                                           ^\e[0m\n\e[31m \
    \  |\e[0m                                                           Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp_giv6e7j.scala:12:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenLst\e[0m = l.takeWhile(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sortBy(-x)\n\e[31m\e[31m   |\e\
    [0m                                                             ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mDeprecatedFloatOrdering\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660013730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evens = l.filter(_ % 2 == 0).toList\n        val evenPairs = evens.zipWithIndex.map(x\
    \ => x._2, x._1)\n        val odds = l.filter(_ % 2 == 1).toList\n        val\
    \ oddPairs = odds.zipWithIndex.map(x => x._2, x._1)\n        val pairs = evenPairs\
    \ ++ oddPairs\n        val reverseOrder = pairs.reverse\n        val sortedOdds\
    \ = pairs.map(x => l(x)) \n        val sortedEvens = pairs.map(x => l(x)) ++ sortedOdds\n\
    \        val sortedListOfPairs = sortedEvens ++ sortedOdds\n        val reversedSortedListOfPairs\
    \ = sortedListOfPairs.map(x => l(x)) ++ reverseOrder\n        reversedSortedListOfPairs\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm1vjeiak.scala:13:58 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenPairs\e[0m = evens.zipWithIndex.map(\e\
    [36mx\e[0m => x._2, x._1)\n\e[31m\e[31m   |\e[0m                             \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                                  Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpm1vjeiak.scala:13:47 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenPairs\e[0m = evens.zipWithIndex.map(\e\
    [36mx\e[0m => x._2, x._1)\n\e[31m\e[31m   |\e[0m                             \
    \                  ^\e[0m\n\e[31m   |\e[0m                          Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          I could not\
    \ infer the type of the parameter x.\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm1vjeiak.scala:15:56\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36moddPairs\e[0m = odds.zipWithIndex.map(\e[36mx\e[0m => x._2, x._1)\n\e[31m\e\
    [31m   |\e[0m                                                        ^\e[0m\n\e\
    [31m   |\e[0m                                                        Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpm1vjeiak.scala:15:45\
    \ -----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e\
    [0m \e[36moddPairs\e[0m = odds.zipWithIndex.map(\e[36mx\e[0m => x._2, x._1)\n\e\
    [31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                          Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m                          I could not infer the type of the parameter\
    \ x.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm1vjeiak.scala:21:69\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mreversedSortedListOfPairs\e\
    [0m = sortedListOfPairs.map(\e[36mx\e[0m => l(x)) ++ reverseOrder\n\e[31m\e[31m\
    \   |\e[0m                          "
  stdout: ''
  timestamp: 1660013733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l = l.sortBy(_ % 2)\n        var l2 = l\n        for (i<- l.length to (l.length-1))\
    \ {\n            l2 = List(l2(i))\n        }\n        l = l2.sortBy(_ % 2)\n \
    \       l\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzafhlq2a.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortBy(_ % \e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m    \
    \            Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpzafhlq2a.scala:17:10 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        l = l2.sortBy(_ % \e[31m2\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment\
    \ to val l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        //\n\
    \        // Write your code here\n        //\n        val evenIndices = l.zipWithIndex.filter(\
    \ _._2.toInt % 2 == 0 ).map( _._1 )\n        val evenList = l.filter( _._2 % 2\
    \ == 0 ).map( _._1 )\n\n        evenIndices.map( _ + evenList.size )\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprpxweexy.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevenList\e[0m = l.filter(\
    \ _._2 % \e[31m2\e[0m == \e[31m0\e[0m ).map( _._1 )\n\e[31m\e[31m   |\e[0m   \
    \                              ^^^^\e[0m\n\e[31m   |\e[0m                    \
    \             value _2 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmprpxweexy.scala:16:56 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mevenList\e[0m = l.filter( _._2 % \e[31m2\e\
    [0m == \e[31m0\e[0m ).map( _._1 )\n\e[31m\e[31m   |\e[0m                     \
    \                                 ^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                       value _1 is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660013737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.filter { x => x % 2 == 0 }\n        val odd = l.filter { x => x % 2\
    \ != 0 }\n        even.map { x => odd(x).toLong }.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1bd34s69.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        even.map { \e[36mx\e\
    [0m => odd(x).toLong }.toList\n\e[31m\e[31m   |\e[0m                         \
    \   ^\e[0m\n\e[31m   |\e[0m                            Found:    (x : Long)\n\e\
    [31m   |\e[0m                            Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenList = mutable.ListBuffer[Long]()\n        val oddList = mutable.ListBuffer[Long]()\n\
    \        l.foreach{el =>\n            if (el.toInt%2 == 0) evenList += el\n  \
    \          else oddList += el\n        }\n        evenList.sortWith(x => x - evenList(0))\n\
    \        oddList.sortWith(x => x - evenList(1))\n        oddList ++ evenList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3bb82nee.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp3bb82nee.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moddList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // First,\
    \ sort the even indicies\n        var even = l.view.zipWithIndex.filter(_._2 %\
    \ 2 == 0).map(_._1)\n        // Now, sort the odd indicies in reverse order\n\
    \        var odd = l.view.zipWithIndex.filter(_._2 % 2 != 0).map(_._1)\n     \
    \   odd.sortWith(_ < _)\n        even.sortWith(_ < _)\n        // Combine the\
    \ two lists and return it\n        odd.zip(even)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_59_be3f.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        odd.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value sortWith is not a member\
    \ of scala.collection.View[Long]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_59_be3f.scala:17:13\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        even.sortWith(_ <\
    \ _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ value sortWith is not a member of scala.collection.View[Long]\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_59_be3f.scala:19:15 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        odd.zip(even)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.View[(Long, Long)]\n\e\
    [31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ n = l.length\n        val even = l.inits.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n\
    \        val odd = l.inits.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n        (even.take(n)\
    \ diff odd) diff even\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb9dwitwu.scala:13:36 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = l.inits.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).sortBy(_ % \e[31m2\e[0m).reverse\n\e[31m\e[31m\
    \   |\e[0m                                  ^^^\e[0m\n\e[31m   |\e[0mvalue % is\
    \ not a member of List[Long @uncheckedVariance], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpb9dwitwu.scala:14:35 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = l.inits.filter(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).sortBy(_ % \e[31m2\e[0m).reverse\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^\e[0m\n\e[31m   |\e[0mvalue % is\
    \ not a member of List[Long @uncheckedVariance], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ newList = new Array[Long](l.length)\n        var newL = new Array[Long](l.length)\n\
    \        var i = 0\n        var j = 0\n        while(i < l.length) {\n       \
    \     newList(i) = l(i)\n            newL(i) = l(i)\n            i += 2\n    \
    \    }\n        while(j < newL.length) {\n            if(newL(j) > newL(j+1))\
    \ {\n                j += 2\n                newList(i) = newL(j)\n          \
    \      newL(i) = newL(j+1)\n            } else {\n                j += 1\n   \
    \         }\n            i += 1\n        }\n        return newList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl70t6b2f.scala:31:15\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mreturn\e[0m newList\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \   Found:    (newList : Array[Long])\n\e[31m   |\e[0m               Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // Create\
    \ two lists of even indicies, and fill them with -1\n        val even = l.filter(_\
    \ % 2 == 0).toList\n        val odd = l.filter(_ % 2 == 1).toList\n        val\
    \ evenOdd = even.zip(odd)\n\n        // For each pair, compare the values, then\
    \ append the even values to the odd values\n        // If the even values match,\
    \ append the even values to the even values\n        evenOdd.foreach {\n     \
    \       case (ev, od) => if (ev == od) even else even.append(od)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbr5s2jzh.scala:20:58 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m (ev, od) => \e[33mif\e[0m\
    \ (ev == od) even \e[33melse\e[0m even.append(od)\n\e[31m\e[31m   |\e[0m     \
    \                                                ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue append is not a member of List[Long] - did you mean even.appended?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenIndexes = l.map((_ % 2).toInt)\n        val evenIndexesCopy = evenIndexes.toArray\n\
    \        evenIndexes.toList.sortWith(evenIndexesCopy.diff(_)) { (a, b) => evenIndexesCopy(b)\
    \ - evenIndexesCopy(a) }\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpfyx4zbio.scala:12:33 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenIndexes\e[0m = l.map((_\
    \ % \e[31m2\e[0m).toInt)\n\e[31m\e[31m   |\e[0m                              \
    \   ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$1 of expanded function:\n\
    \e[31m   |\e[0m   _$1 => _$1 % 2.\n\e[31m\e[31m-- Error: /tmp/tmpfyx4zbio.scala:13:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mevenIndexesCopy\e[0m = evenIndexes.toArray\n\e[31m\e[31m\
    \   |\e[0m                                                 ^\e[0m\n\e[31m   |\e\
    [0m                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpfyx4zbio.scala:14:36\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        evenIndexes.toList.sortWith(evenIndexesCopy.diff(_))\
    \ { (\e[36ma\e[0m, \e[36mb\e[0m) => evenIndexesCopy(b) - evenIndexesCopy(a) }\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpfyx4zbio.scala:14:64\
    \ -----------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        evenIndexes.toList.sortWith(evenIndexesCopy.diff(_))\
    \ { (\e[36ma\e[0m, \e[36mb\e[0m) => evenIndexesCopy(b) - evenIndexesCopy(a) }\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^\e[0m\n\e[31m   |\e[0m                          Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m                          I could not infer the\
    \ type of the parameter a.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpfyx4zbio.scala:14:67\
    \ -----------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        evenIndexes.toList.sortWith(evenIndexesCopy.diff(_))\
    \ { (\e[36ma\e[0m, \e[36mb\e[0m) => evenIndexesCopy(b) - evenIndexesCopy(a) }\n\
    \e[31m\e[31m   |\e[0m                           "
  stdout: ''
  timestamp: 1660013740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ sorted = l.sorted\n        sorted.foreach {\n            n => if (n % 2 == 0)\
    \ sorted = sorted :+ n\n        }\n        sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4jok76os.scala:19)\n\tat Problem.main(tmp4jok76os.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013741
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evens = l.filter(_ % 2 == 0)\n        val evenSorted = evens.sortWith(_.compareTo(_)\
    \ < 0).reverse\n        val evenList: List[Long] = evenSorted.map(l => l % 2l).toList\n\
    \        evenSorted.reverse.zip(evenList).map { case (e, l) => e }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxiyeg9iu.scala:18)\n\tat Problem.main(tmpxiyeg9iu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ odd = l.filter(x => x % 2 == 0).toList\n        val even = l.filter(x => x %\
    \ 2 == 1).toList\n        (odd zip even).sortBy(x => x._1).map(x => x._2).flatten\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpd3aj8ayi.scala:14:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        (odd zip even).sortBy(\e[36mx\e[0m => x._1).map(\e\
    [36mx\e[0m => x._2).flatten\n\e[31m\e[31m   |\e[0m                           \
    \                                    ^\e[0m\n\e[31m   |\e[0mno given instance\
    \ of type Long => IterableOnce[B] was found for parameter toIterableOnce of \e\
    [33mmethod\e[0m \e[35mflatten\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedIterableOps\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:    B is a type variable with constraint\
    \ <: Long\n1 error found\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even: List[Long] = l.filter(_ % 2 == 0).sorted\n        val odd: List[Long]\
    \ = l.filter(_ % 2 != 0).sorted\n        even.zip(odd).map{ case (ev, od) => od.take(ev).head\
    \ + ev }\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8kcbyy68.scala:14:47 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        even.zip(odd).map{ \e[33mcase\e[0m (ev, od) =>\
    \ od.take(ev).head + ev }\n\e[31m\e[31m   |\e[0m                             \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \      value take is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660013741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenIndex = l.map(i => i % 2).toList\n        val evenList = l.filter(_ % 2\
    \ == 0)\n        val evenList = evenList.map(i => i * 2).toList\n        evenList\
    \ ++ (evenIndex.map(i => i * 2).toList)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8mhiav5i.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevenList\e[0m = evenList.map(\e\
    [36mi\e[0m => i * \e[31m2\e[0m).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenList is already defined as \e[33mvalue\e[0m \e[35mevenList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660013737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        l.foldLeft(List[Long]())\
    \ { (s, i) =>\n            if ((i%2) == 0) {\n                s.insert(i, s(i))\n\
    \            }\n            else\n                s\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong,\
    \ 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong,\
    \ -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong,\
    \ -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk13qb6n9.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                s.insert(i, s(i))\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m       value insert is not a\
    \ member of List[Long] - did you mean s.init?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpk13qb6n9.scala:14:30 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m                s.insert(i, s(i))\n\e[31m\e[31m   |\e[0m             \
    \                 ^\e[0m\n\e[31m   |\e[0m                              Found:\
    \    (i : Long)\n\e[31m   |\e[0m                              Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013742
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ result = new collection.mutable.ListBuffer[Long]\n        for (i <- 0 until\
    \ l.length) {\n            if (i%2==1)\n                result += l(i)\n     \
    \   }\n        sortEven(result.toList)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660013747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n      val even\
    \ = l.filter(_%2==0)\n      val odd = l.filter(_%2!=0)\n      odd.zip(even).sortBy(_._1).map(x\
    \ => x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9bcxrwyv.scala:17)\n\tat Problem.main(tmp9bcxrwyv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.takeRight(l.size / 2)\n        val odd = l.drop(l.size / 2)\n     \
    \   odd.zip(even).sortBy(_._1).zipWithIndex.map {\n            case (i, j) =>\
    \ (i + j) * (j + 1)\n        }.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpudwdn42y.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m (i, j) => (i + j) * (j +\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of (Long, Long), but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l1 = l.tail\n        val l2 = l.init\n        val r = new mutable.LinkedHashMap[Long,\
    \ Long]()\n        l1 foreach { x => r += x -> x }\n        l2 foreach { x =>\
    \ r += x -> (r.get x + 1) }\n        r.toList ++ l1 ++ l2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4pjzt7a.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = \e[33mnew\e[0m\
    \ mutable.LinkedHashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        l.zip(l.drop(1)).sortBy(_._1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0impjwv5.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        l.zip(l.drop(\e[31m1\e\
    [0m)).sortBy(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31mLong\e[0m\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m  \
    \      Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ j = 0\n        var even = l.filter(_ % 2 == 0)\n        even.sortWith(_.compareTo(_)\
    \ < 0)\n        even.zip(even).filter(_._1).map(_._2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ly4hs4l.scala:15:32\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        even.zip(even).filter(_._1).map(_._2)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m\
    \                              Found:    Long\n\e[31m   |\e[0m               \
    \               Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evens = l.filter(_%2==0)\n        evens.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0w3vabs_.scala:16)\n\tat Problem.main(tmp0w3vabs_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        var\
    \ i = 0\n        var temp : Long\n        while (i < l.length) {\n           \
    \ while (i < l.length && l(i) % 2 == 0) {\n                temp = l(i)\n     \
    \           l(i) = l(i + 1)\n                l(i + 1) = temp\n               \
    \ i = i + 1\n            }\n            i = i + 1\n        }\n        l\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E067] Syntax Error: /tmp/tmp8vo68uib.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mtemp\e[0m : \e[35mLong\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0mDeclaration of \e\
    [33mvariable\e[0m \e[35mtemp\e[0m not allowed here: only classes can have declared\
    \ but undefined members\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8vo68uib.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                l(i) = l(i\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m\
    \    value update is not a member of List[Long] - did you mean l.updated?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp8vo68uib.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                l(i + \e[31m1\e[0m) = temp\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m    value update is not a\
    \ member of List[Long] - did you mean l.updated?\n3 errors found\n"
  stdout: ''
  timestamp: 1660013744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.zipWithIndex.filter(_._2 % 2 == 0)\n        val odd = l.zipWithIndex.filter(_._2\
    \ % 2 == 1)\n        val oddEven = even.zip(odd)\n        oddEven.map {\n    \
    \        case (a: Long, b: Long) => (a, b)\n        }.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx891i34z.scala:17:10\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        oddEven.map {\n\e[31m16\
    \ |\e[0m            \e[33mcase\e[0m (a: \e[35mLong\e[0m, b: \e[35mLong\e[0m) =>\
    \ (a, b)\n\e[31m17 |\e[0m        }.toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\
    \e[31m   |\e[0m        Found:    List[((Long, Int) & Long, (Long, Int) & Long)]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.takeWhile(_ % 2 == 0).sorted\n        val odd = l.takeWhile(_ % 2 !=\
    \ 0).sorted\n        even ++ odd\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplailom0c.scala:17)\n\tat Problem.main(tmplailom0c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        if (l.isEmpty)\
    \ return l\n        val evenIndexes = l.zipWithIndex.filter{ case (a, b) => a\
    \ % 2 == 1 }\n        val odd = l.zipWithIndex.filter{ case (a, b) => a % 2 ==\
    \ 0 }\n        val even = evenIndexes.map { case (x, y) => (x + y._1, y + x._1)\
    \ }\n        evenIndexes ++ odd.map(_._2) ++ even.map(_._2).sortBy(_._1).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4tmrqvvw.scala:15:59 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = evenIndexes.map\
    \ { \e[33mcase\e[0m (x, y) => (x + y._1, y + x._1) }\n\e[31m\e[31m   |\e[0m  \
    \                                                       ^^^^\e[0m\n\e[31m   |\e\
    [0m                                         value _1 is not a member of Int\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4tmrqvvw.scala:15:69 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = evenIndexes.map\
    \ { \e[33mcase\e[0m (x, y) => (x + y._1, y + x._1) }\n\e[31m\e[31m   |\e[0m  \
    \                                                                 ^^^^\e[0m\n\e\
    [31m   |\e[0m                                        value _1 is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4tmrqvvw.scala:16:64\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evenIndexes ++ odd.map(_._2)\
    \ ++ even.map(_._2).sortBy(_._1).reverse\n\e[31m\e[31m   |\e[0m              \
    \                                                ^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ _1 is not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import concurrent.duration.durationToPair\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmp4tmrqvvw.scala:16:67 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        evenIndexes ++ odd.map(_._2) ++ even.map(_._2).sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m\
    \ \e[35mSeqOps\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660013746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenIndex = l.zipWithIndex.filter(x => x._1 % 2 == 0).map(_._2).toList\n   \
    \     val oddIndex = l.zipWithIndex.filter(x => x._1 % 2 != 0).map(_._2).toList\n\
    \        val result = oddIndex.map(l => l.toLong).sorted.zip(evenIndex.map(l =>\
    \ l.toLong)).map(x => x._1).zipWithIndex.filter(x => x._1 % 2 == 0).map(_._2).map\
    \ { n =>\n            val even = if (evenIndex.contains(n))\n                l(n).toLong\n\
    \            else\n                l.find(_ == n).map(l(n)).getOrElse(0)\n   \
    \         val odd = if (oddIndex.contains(n))\n                l(n - 1).toLong\n\
    \            else\n                l.find(_ == n).map(l(n - 1)).getOrElse(0)\n\
    \            (even, odd)\n        }\n        result.sortBy(x => x)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmkn3qmhb.scala:18:36\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                l.find(_ == n).map(l(n)).getOrElse(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    Long\n\e[31m   |\e\
    [0m                                   Required: Long => AnyVal\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmkn3qmhb.scala:22:36 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                l.find(_ == n).map(l(n - \e[31m1\e[0m)).getOrElse(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    Long\n\e[31m\
    \   |\e[0m                                   Required: Long => AnyVal\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpmkn3qmhb.scala:25:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        result.sortBy(\e[36mx\e[0m => x)\n\e[31m\e[31m\
    \   |\e[0m                             ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering\
    \ defined for (AnyVal, AnyVal)..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m    scala.math.Ordering.Tuple2[\e[35mAnyVal\e[0m, \e[35mAnyVal\e\
    [0m](\n\e[31m   |\e[0m      scala.math.Ordering.comparatorToOrdering[\e[35mAnyVal\e\
    [0m](\n\e[31m   |\e[0m        /* missing */summon[java.util.Comparator[AnyVal]]\n\
    \e[31m   |\e[0m      )\n\e[31m   |\e[0m    , ???)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenList = new mutable.ListBuffer[Long]()\n        val oddList = new mutable.ListBuffer[Long]()\n\
    \n        for (i <- 0 until l.length) {\n            if (i%2 == 0) {\n       \
    \         evenList += l(i)\n            } else {\n                oddList += l(i)\n\
    \            }\n        }\n        oddList ++= evenList\n        evenList ++=\
    \ oddList.toList\n        evenList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdgcnr11i.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mevenList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdgcnr11i.scala:13:26\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36moddList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        l.zipWithIndex\
    \ map { case (l, i) => if (i % 2 == 0) l else l.toLong }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl22r454u.scala:16)\n\tat Problem.main(tmpl22r454u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ l = l.sortBy(-_)\n        val l2 = l.zip(l).filter(_._1 % 2 == 0).map(_._2)\n\
    \        val l3 = l.zip(l).filter(_._1 % 2 == 1).map(_._2)\n        l.zip(l2).flatMap(e\
    \ => l3.map(_ => e._2))\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv_s07s0t.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortBy(-_)\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ even = l.view.zipWithIndex.filter{ case (a, index) => index%2 == 0L }.map{ case\
    \ (a, index) => a }.sortBy(a => a).toList\n        val odd = l.view.zipWithIndex.filter{\
    \ case (a, index) => index%2 == 1L }.map{ case (a, index) => a }.sortBy(a => a).toList\n\
    \        val evenOdd = even.zip(odd).map { case (a, b) => a }\n        evenOdd\
    \ ++ l.diff(evenOdd)\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpejww5t59.scala:12:110 -----------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = l.view.zipWithIndex.filter{\
    \ \e[33mcase\e[0m (a, index) => index%\e[31m2\e[0m == \e[31m0L\e[0m }.map{ \e\
    [33mcase\e[0m (a, index) => a }.sortBy(\e[36ma\e[0m => a).toList\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value sortBy is not a member of scala.collection.View[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpejww5t59.scala:13:109 -----------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = l.view.zipWithIndex.filter{\
    \ \e[33mcase\e[0m (a, index) => index%\e[31m2\e[0m == \e[31m1L\e[0m }.map{ \e\
    [33mcase\e[0m (a, index) => a }.sortBy(\e[36ma\e[0m => a).toList\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value sortBy is not a member of scala.collection.View[Long]\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val\
    \ evenIndexes = l.view.zipWithIndex.filter(_._2%2 == 0).map(_._1)\n        val\
    \ evenValues = evenIndexes.map(l(_)).toList\n        evenIndexes.map(_+2).map(_-evenIndexes).filter(_\
    \ < evenValues.size).sortBy(_).flatten\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong, 9l.toLong, 1l.toLong,\
    \ 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong, 8l.toLong, -12l.toLong,\
    \ 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong, 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong,\
    \ 8l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong,\
    \ 23l.toLong, -10l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyyg31poa.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenValues\e\
    [0m = evenIndexes.map(l(_)).toList\n\e[31m\e[31m   |\e[0m                    \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \             Found:    (_$3 : Long)\n\e[31m   |\e[0m                        \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmpyyg31poa.scala:14:83 -----------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        evenIndexes.map(_+\e[31m2\e[0m).map(_-evenIndexes).filter(_ <\
    \ evenValues.size).sortBy(_).flatten\n\e[31m\e[31m   |\e[0m                  \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0m Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m I could not\
    \ infer the type of the parameter _$7 of expanded function:\n\e[31m   |\e[0m _$7\
    \ => \n\e[31m   |\e[0m   evenIndexes.map(_$4 => _$4 + 2).map(_$5 => _$5 - evenIndexes).filter(\n\
    \e[31m   |\e[0m     _$6 => _$6 < evenValues.size\n\e[31m   |\e[0m   ).sortBy(_$7).flatten.\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpyyg31poa.scala:14:34 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        evenIndexes.map(_+\e[31m2\e[0m).map(_-evenIndexes).filter(_\
    \ < evenValues.size).sortBy(_).flatten\n\e[31m\e[31m   |\e[0m                \
    \                 ^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((evenIndexes : scala.collection.View[Long]))\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyyg31poa.scala:14:57 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        evenIndexes.map(_+\e[31m2\e[0m).map(_-evenIndexes).filter(_\
    \ < evenValues.size).sortBy(_).flatten\n\e[31m\e[3"
  stdout: ''
  timestamp: 1660013747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes a list l and returns a list l' such that\n   \
    \ // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n    // to the values of the even indicies of l, but sorted.\n   \
    \ // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong,\
    \ 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        // Odds\
    \ are easy here\n        if (l.length%2 == 0) {\n            l.sortWith(_ < _)\n\
    \        } else {\n            // Need to remember the even indices as we sort\
    \ it\n            // and swap them out before returning\n            val evenIndices\
    \ = l grouped 2 map { _._1 }\n            var evenList: List[Long] = List()\n\
    \            evenIndices.foreach { evenIndex =>\n                evenList = evenList\
    \ :+ l.apply(evenIndex).asInstanceOf[Long]\n            }\n            evenList.sortWith(_\
    \ < _)\n            evenIndices.foreach { evenIndex =>\n                l.apply(evenIndex)\
    \ = l.apply(evenIndex).asInstanceOf[Long]\n            }\n            l\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(sortEven((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(sortEven((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong))).equals((List[Long](-10l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 5l.toLong, 0l.toLong,\
    \ 9l.toLong, 1l.toLong, 123l.toLong))));\n    assert(sortEven((List[Long](5l.toLong,\
    \ 8l.toLong, -12l.toLong, 4l.toLong, 23l.toLong, 2l.toLong, 3l.toLong, 11l.toLong,\
    \ 12l.toLong, -10l.toLong))).equals((List[Long](-12l.toLong, 8l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 2l.toLong, 12l.toLong, 11l.toLong, 23l.toLong, -10l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3kend5u7.scala:18:50 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mevenIndices\e[0m = l\
    \ grouped \e[31m2\e[0m map { _._1 }\n\e[31m\e[31m   |\e[0m                   \
    \                             ^^^^\e[0m\n\e[31m   |\e[0m                     \
    \             value _1 is not a member of List[Long]\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp3kend5u7.scala:25:16 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m                l.apply(evenIndex) = l.apply(evenIndex).asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value update is not a member of Int => Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660013747
