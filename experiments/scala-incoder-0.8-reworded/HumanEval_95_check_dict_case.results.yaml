language: scala
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict foreach {\n            case(a,b)\
    \ => { if(a < 'A' && 'Z' <= a) println(a+\" is in lower case in dict\"); else\
    \ println(a+\" is in upper case in dict\"); }\n        }\n        true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa_shsek0.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m(a,b)\
    \ => { \e[33mif\e[0m(a < \e[31m'A'\e[0m && \e[31m'Z'\e[0m <= a) println(a+\e[31m\"\
    \ is in lower case in dict\"\e[0m); \e[33melse\e[0m println(a+\e[31m\" is in upper\
    \ case in dict\"\e[0m); }\n\e[31m\e[31m   |\e[0m                             \
    \     ^^^\e[0m\n\e[31m   |\e[0m                                  Found:    (\e\
    [31m'A'\e[0m : Char)\n\e[31m   |\e[0m                                  Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpa_shsek0.scala:20:45\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e\
    [0m(a,b) => { \e[33mif\e[0m(a < \e[31m'A'\e[0m && \e[31m'Z'\e[0m <= a) println(a+\e\
    [31m\" is in lower case in dict\"\e[0m); \e[33melse\e[0m println(a+\e[31m\" is\
    \ in upper case in dict\"\e[0m); }\n\e[31m\e[31m   |\e[0m                    \
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m<=\e[0m in \e[33mclass\e[0m \e[35mChar\e[0m with\
    \ types\n\e[31m   |\e[0m (x: Double): Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\
    \e[31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\e[31m\
    \   |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x: Short): Boolean\n\e[31m   |\e\
    [0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments ((a : String))\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keySet\n      \
    \  if (keys.length == 0) false\n        else keys.forall(_.isInstanceOf[String])\
    \ && (keys.forall(_.toLowerCase) == keys.forall(_.toUpperCase))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp55xp0bij.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value length is not a member of scala.collection.Set[String]\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp55xp0bij.scala:21:65 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m keys.forall(_.isInstanceOf[String])\
    \ && (keys.forall(_.toLowerCase) == keys.forall(_.toUpperCase))\n\e[31m\e[31m\
    \   |\e[0m                                                                 ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    String\n\e[31m   |\e[0m                                                 \
    \      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp55xp0bij.scala:21:95 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33melse\e[0m keys.forall(_.isInstanceOf[String]) && (keys.forall(_.toLowerCase)\
    \ == keys.forall(_.toUpperCase))\n\e[31m\e[31m   |\e[0m                      \
    \                                                                         ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    String\n\e[31m   |\e[0m                                                 \
    \      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010143
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        !dict.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr_i74akn.scala:23)\n\tat Problem.main(tmpr_i74akn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010143
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty)\n            return\
    \ false\n        val keySet = dict.keys\n        for(key<-keySet){\n         \
    \   if(!key.isInstanceOf[Int]){\n                return false\n            }\n\
    \        }\n        for(key<-keySet){\n            if(!key.isInstanceOf[Long]){\n\
    \                return false\n            }\n        }\n        for(key<-keySet){\n\
    \            if(!key.isInstanceOf[Float]){\n                return false\n   \
    \         }\n        }\n        for(key<-keySet){\n            if(!key.isInstanceOf[Double]){\n\
    \                return false\n            }\n        }\n        for(key<-keySet){\n\
    \            if(!key.isInstanceOf[String]){\n                return false\n  \
    \          }\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9jiahjah.scala:50)\n\tat Problem.main(tmp9jiahjah.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict == null)\n           \
    \ return false\n\n        def isStr(key: String, value: String) : Boolean = {\n\
    \            if (key.isUpperCase && value.isLowerCase || key.isLowerCase && value.isUpperCase)\n\
    \                true\n            else\n                false\n        }\n\n\
    \        if (dict.isEmpty)\n            return false\n\n        val strs = dict.keySet.toList\n\
    \n        for (x <- strs) {\n            if (!isStr(x, dict(x)))\n           \
    \     return false\n        }\n\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4we5qz2l.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (key.isUpperCase && value.isLowerCase\
    \ || key.isLowerCase && value.isUpperCase)\n\e[31m\e[31m   |\e[0m            \
    \    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue isUpperCase is not a member of\
    \ String - did you mean key.toUpperCase?\n1 error found\n"
  stdout: ''
  timestamp: 1660010143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val list = new mutable.ArrayBuffer[String]()\n\
    \        for(key <- dict.keys) {\n            if(key matches regex(\"^[a-z][A-Z]*$\"\
    ) || key matches regex(\"^[A-Z][a-z]*$\"))\n                list += key\n    \
    \    }\n        if(list.size == 0) \n            return true\n        false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsv65w7a1.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsv65w7a1.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(key\
    \ matches regex(\e[31m\"^[a-z][A-Z]*$\"\e[0m) || key matches regex(\e[31m\"^[A-Z][a-z]*$\"\
    \e[0m))\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                           Not found: regex\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsv65w7a1.scala:21:65 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(key matches regex(\e[31m\"\
    ^[a-z][A-Z]*$\"\e[0m) || key matches regex(\e[31m\"^[A-Z][a-z]*$\"\e[0m))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \       ^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \              Not found: regex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty) false\n      \
    \  else if(dict.values.forall(_.toString.isEmpty)) false\n        else if(dict.values.exists(_.toString().toLowerCase)\
    \ == \"true\") false\n        else if(dict.values.exists(_.toString().toUpperCase)\
    \ == \"true\") false\n        else true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3c_sa5q7.scala:21:35\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m(dict.values.exists(_.toString().toLowerCase) == \e[31m\"true\"\e[0m) \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    String\n\e[31m\
    \   |\e[0m                                   Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3c_sa5q7.scala:22:35 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(dict.values.exists(_.toString().toUpperCase)\
    \ == \e[31m\"true\"\e[0m) \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                            Found:    String\n\e[31m   |\e[0m               \
    \                    Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(!dict.isEmpty)\n        {\n\
    \            var flag : Boolean = false\n            for(key <- dict.keySet)\n\
    \            {\n                if(key.toString.toLowerCase == key.toString)\n\
    \                {\n                    flag = true\n                    break\n\
    \                }\n            }\n            return flag\n        }\n      \
    \  return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp794e81c.scala:27:20 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        var allUpper = true\n        val keys = dict.keySet\n        val keys\
    \ = keys.toList\n        keys.sortWith((x,y) => x < y)\n        keys.foreach {\
    \ key =>\n            if (!dict.get(key).isInstanceOf[String]) allUpper = false\n\
    \        }\n        allUpper\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouuc1kin.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mkeys\e[0m = keys.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mkeys\
    \ is already defined as \e[33mvalue\e[0m \e[35mkeys\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpouuc1kin.scala:23:13\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        keys.sortWith((\e\
    [36mx\e[0m,\e[36my\e[0m) => x < y)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value sortWith is not a member of scala.collection.Set[String]\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var result = true\n        for\
    \ ( (k, v) <- dict) {\n            if (k.asInstanceOf[String].equalsIgnoreCase(k))\
    \ {\n                result = false\n                break\n            }\n  \
    \      }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjiv5zpxt.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010140
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys.toList\n \
    \       if (keys.size == 0) {\n            return true\n        } else if (keys.forall(_.isInstanceOf[String]))\
    \ {\n            val upper = keys.map( _.toUpperCase)\n            val lower =\
    \ keys.map( _.toLowerCase)\n            lower.forall(str => upper.contains(str)\
    \ || upper.contains(str.toUpperCase))\n        } else {\n            false\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf31fnj4t.scala:32)\n\tat Problem.main(tmpf31fnj4t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   val a = dict.keys.toSet.toList\n        val b = a.map(_.toUpperCase)\n   \
    \     val c = a.map(_.toLowerCase)\n        (a==b) || (a==c)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxun8iatk.scala:28)\n\tat Problem.main(tmpxun8iatk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var isStringKey1 = false\n    \
    \    var isStringKey2 = false\n        for ((key, value) <- dict){\n         \
    \   if(key.isInstanceOf[String]){\n                isStringKey1 = true\n     \
    \       } else if(key.isInstanceOf[String]){\n                isStringKey2 = true\n\
    \            }\n        }\n        if(isStringKey1 == true && isStringKey2 ==\
    \ true){\n            return true\n        } else {\n            return false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp33rnyysi.scala:35)\n\tat Problem.main(tmp33rnyysi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty) false\n      \
    \  else checkAllKey(dict.toSet)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpij8vlq2i.scala:20:13 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m checkAllKey(dict.toSet)\n\e[31m\e\
    [31m   |\e[0m             ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             Not found:\
    \ checkAllKey\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.size == 0) return false\n\
    \        val strMap = new mutable.LinkedHashMap[String,String]()\n        for(key\
    \ <- dict.keySet) {\n            val value = dict.get(key)\n            if(key.equalsIgnoreCase(value))\
    \ strMap += key -> value\n        }\n        if(strMap.size == dict.size) true\n\
    \        else false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6k6mfe8x.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mstrMap\e[0m = \e[33mnew\e\
    [0m mutable.LinkedHashMap[\e[35mString\e[0m,\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6k6mfe8x.scala:23:36 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            \e[33mif\e[0m(key.equalsIgnoreCase(value)) strMap += key ->\
    \ value\n\e[31m\e[31m   |\e[0m                                    ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    Found:    (value : Option[String])\n\
    \e[31m   |\e[0m                                    Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        \n        if(dict.isEmpty) {\n\
    \            return false\n        }\n        val strMap = new mutable.HashMap[String,String]()\n\
    \        for(key <- dict.keys) {\n            val lowerKey = key.toLowerCase\n\
    \            val upperKey = key.toUpperCase\n            if(lowerKey.equals(upperKey))\
    \ {\n                strMap.put(key, dict.get(key))\n            } else {\n  \
    \              strMap.put(lowerKey, dict.get(key))\n                strMap.put(upperKey,\
    \ dict.get(key))\n            }\n        }\n        \n        strMap.toSeq.forall(key\
    \ => {\n            val lowerKey = key.toLowerCase\n            val upperKey =\
    \ key.toUpperCase\n            if(lowerKey.equals(upperKey)) {\n             \
    \   return false\n            }\n            true\n        })\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn4j6jpn_.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mstrMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      val keys = dict.keys.toSet\n    \
    \  val result = keys.size==(keys.filter(_.isLower).length+keys.filter(_.isUpper).length)\n\
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj4psobrc.scala:20:45 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36mresult\e[0m = keys.size==(keys.filter(_.isLower).length+keys.filter(_.isUpper).length)\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 value isLower is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1660010143
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.values.forall { case s : String\
    \ => s.isEmpty || s.toUpperCase == s }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn2rnhcf4.scala:22)\n\tat Problem.main(tmpn2rnhcf4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty) return true\n\
    \        val first = dict.head\n        val keys = dict.keySet\n        for(key:\
    \ String <- keys) {\n            if(!first.toString.equalsIgnoreCase(key)) return\
    \ false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv5ycx41i.scala:28)\n\tat Problem.main(tmpv5ycx41i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict match {\n            case\
    \ Map(xs @ _*) => xs.forall(_.isLowerCase || _.isUpperCase)\n            case\
    \ _ => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E127] Syntax Error: /tmp/tmptgpyt45x.scala:20:17 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m Map(xs @ _*) => xs.forall(_.isLowerCase\
    \ || _.isUpperCase)\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m  \
    \ |\e[0mcollection.mutable.Map cannot be used as an extractor in a pattern because\
    \ it lacks an unapply or unapplySeq method\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmptgpyt45x.scala:20:33 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m Map(xs @ _*) => xs.forall(_.isLowerCase\
    \ || _.isUpperCase)\n\e[31m\e[31m   |\e[0m                                 ^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: xs\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010140
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict == null || dict.isEmpty)\n\
    \            return false\n        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict ++ Map(lowerCaseKeys -> \"\")\n        val upperCaseDict\
    \ = dict ++ Map(upperCaseKeys -> \"\")\n        lowerCaseKeys.forall(dict.contains(_))\n\
    \        || upperCaseKeys.forall(dict.contains(_))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudf9ltiu.scala:32)\n\tat Problem.main(tmpudf9ltiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var result : Boolean = true\n \
    \       val lowerCaseMap : Map[String,String] = dict.toMap\n        val upperCaseMap\
    \ : Map[String,String] = dict.toMap.toUpperCase // convert all values to uppercase\n\
    \        val keySet = lowerCaseMap.keySet.union(upperCaseMap.keySet)\n       \
    \ if(keySet.isEmpty) result = false\n        else result = keySet.forall((key:\
    \ String) => {\n            val lowerCaseVal = lowerCaseMap.getOrElse(key, key)\n\
    \            val upperCaseVal = upperCaseMap.getOrElse(key, key)\n           \
    \ lowerCaseVal != upperCaseVal\n        })\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2xfp8rn1.scala:20:48\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseMap\e\
    [0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mString\e[0m] = dict.toMap\n\e[31m\e\
    [31m   |\e[0m                                                ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Found:    Map[String, String]\n\e[31m \
    \  |\e[0m                        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2xfp8rn1.scala:21:59 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mupperCaseMap\e[0m : \e[35mMap\e\
    [0m[\e[35mString\e[0m,\e[35mString\e[0m] = dict.toMap.toUpperCase \e[34m// convert\
    \ all values to uppercase\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \                        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        value toUpperCase is not a member of Map[String, String]\n2 errors found\n"
  stdout: ''
  timestamp: 1660010143
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(!dict.isEmpty)\n           \
    \ for(key <- dict.keys)\n                if(key != null && !key.toString.toLowerCase().equals(key.toString.toLowerCase()))\n\
    \                    return false;\n            return true;\n        else\n \
    \           return false;\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqop0wnux.scala:29)\n\tat Problem.main(tmpqop0wnux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var result = true\n        val\
    \ keys = dict.toList\n        keys.sortWith(_._1 < _._1).foreach {\n         \
    \   k =>\n            if (k != keys.get(0).toLowerCase() && k != keys.get(0).toUpperCase())\
    \ {\n                result = false\n                break\n            }\n  \
    \      }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2eg6m85x.scala:23:26 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (k != keys.get(\e[31m0\e[0m).toLowerCase()\
    \ && k != keys.get(\e[31m0\e[0m).toUpperCase()) {\n\e[31m\e[31m   |\e[0m     \
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue get is not a member of List[(String,\
    \ String)] - did you mean keys.seq?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2eg6m85x.scala:23:60\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (k != keys.get(\e[31m0\e[0m).toLowerCase() && k != keys.get(\e[31m0\e[0m).toUpperCase())\
    \ {\n\e[31m\e[31m   |\e[0m                                                   \
    \    ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue get is not a member of List[(String,\
    \ String)], but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2eg6m85x.scala:25:16\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys\n        if\
    \ (keys.length != 0) {\n            val allStringKeys = keys.toSeq.map(_.toString).filter(!_.isEmpty)\n\
    \            if (allStringKeys.forall(_.toLowerCase == _.toLowerCase))\n     \
    \           true\n            else if (allStringKeys.forall(_.toUpperCase == _.toUpperCase))\n\
    \                true\n            else\n                false\n        }\n  \
    \      else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkzckh55c.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length != \e[31m0\e[0m) {\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \ value length is not a member of Iterable[String]\n\e[31m\e[31m-- [E086] Syntax\
    \ Error: /tmp/tmpkzckh55c.scala:22:37 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m            \e[33mif\e[0m (allStringKeys.forall(_.toLowerCase ==\
    \ _.toLowerCase))\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpkzckh55c.scala:24:42\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (allStringKeys.forall(_.toUpperCase == _.toUpperCase))\n\e[31m\e\
    [31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n3 errors found\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var isDictValid : Boolean = true\n\
    \        for(k <- dict.keySet) {\n            val v = dict.get(k)\n          \
    \  if (v != null && k.equals(v) && k.isLower) isDictValid = false\n          \
    \  else if (v != null && k.equals(v) && k.isUpper) isDictValid = false\n     \
    \       else if (!k.equals(v)) isDictValid = false\n        }\n        isDictValid\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgu0ppk2m.scala:22:46 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (v != \e[31mnull\e[0m && k.equals(v)\
    \ && k.isLower) isDictValid = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        \
    \                                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                        value isLower is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpgu0ppk2m.scala:23:51 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (v != \e[31mnull\e\
    [0m && k.equals(v) && k.isUpper) isDictValid = \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                                 ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value isUpper is not a member of\
    \ String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict == null || dict.isEmpty)\n\
    \            return false\n        val keySet = dict.keySet\n        val valueSet\
    \ = dict.valueSet\n        if(keySet == null || keySet.isEmpty)\n            return\
    \ false\n        if(keySet.isEmpty)\n            return true\n        if(keySet.forall(_.isInstanceOf[String]))\n\
    \            return true\n        if(keySet.forall(_.isInstanceOf[String].toUpperCase))\n\
    \            return true\n        if(keySet.forall(_.isInstanceOf[String].toLowerCase))\n\
    \            return true\n        false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptbxwflks.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvalueSet\e[0m = dict.valueSet\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ valueSet is not a member of collection.mutable.Map[String, String] - did you\
    \ mean dict.values?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptbxwflks.scala:29:48\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m(keySet.forall(_.isInstanceOf[\e\
    [35mString\e[0m].toUpperCase))\n\e[31m\e[31m   |\e[0m                        \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \      value toUpperCase is not a member of Boolean\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmptbxwflks.scala:31:48 ------------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m        \e[33mif\e[0m(keySet.forall(_.isInstanceOf[\e[35mString\e\
    [0m].toLowerCase))\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value toLowerCase is not a member\
    \ of Boolean\n3 errors found\n"
  stdout: ''
  timestamp: 1660010152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val lower = dict filter (_._1.toLowerCase\
    \ == _._1) map (_._2)\n        val upper = dict filter (_._1.toUpperCase == _._1)\
    \ map (_._2)\n        lower.isEmpty = false || upper.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdnbvgc8p.scala:19:35 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlower\e[0m = dict filter\
    \ (_._1.toLowerCase == _._1) map (_._2)\n\e[31m\e[31m   |\e[0m               \
    \                  ^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ value _1 is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdnbvgc8p.scala:20:35\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mupper\e[0m = dict filter (_._1.toUpperCase == _._1) map (_._2)\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^\e[0m\n\e[31m   |\e[0m        \
    \                         value _1 is not a member of String\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpdnbvgc8p.scala:21:22 -----------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        lower.isEmpty = \e[31mfalse\e[0m || upper.isEmpty\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Reassignment to val isEmpty\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keySet = dict.keys\n      \
    \  val len = keySet.size\n        val mapKeysSet = keySet.filter( key => key <\
    \ 'A' || key > 'Z')\n        val mapKeysSetUpper = keySet.filter( key => key >\
    \ 'A' || key < 'Z')\n        val mapKeysSetBoth = keySet.filter( key => key >\
    \ 'A' && key < 'Z')\n        val mapKeysSetBothUpper = keySet.filter( key => key\
    \ < 'A' && key > 'Z')\n        val keys = dict.keys\n        val values = dict.values.toSeq\n\
    \        val mapKeys = keys.filter( key => key < 'A' || key > 'Z')\n        val\
    \ mapKeysUpper = keys.filter( key => key > 'A' || key < 'Z')\n        val mapKeysBoth\
    \ = keys.filter( key => key > 'A' && key < 'Z')\n        val mapKeysBothUpper\
    \ = keys.filter( key => key < 'A' && key > 'Z')\n        if (keySet.size == 0)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3h6u9489.scala:21:53\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmapKeysSet\e\
    [0m = keySet.filter( \e[36mkey\e[0m => key < \e[31m'A'\e[0m || key > \e[31m'Z'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \   ^^^\e[0m\n\e[31m   |\e[0m                                                \
    \  Found:    (\e[31m'A'\e[0m : Char)\n\e[31m   |\e[0m                        \
    \                          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3h6u9489.scala:21:66 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmapKeysSet\e[0m = keySet.filter(\
    \ \e[36mkey\e[0m => key < \e[31m'A'\e[0m || key > \e[31m'Z'\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                                  ^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   (\e[31m'Z'\e[0m : Char)\n\e[31m   |\e[0m                                 \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3h6u9489.scala:22:58 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mmapKeysSetUpper\e[0m = keySet.filter( \e\
    [36mkey\e[0m => key > \e[31m'A'\e[0m || key < \e[31m'Z'\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                                                          ^^^\e[0m\n\e\
    [31m   |\e[0m                                                  Found:    (\e[31m'A'\e\
    [0m : Char)\n\e[31m   |\e[0m                                                 \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3h6u9489.scala:22:71\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmapKeysSetUpper\e\
    [0m = keySet.filter( \e[36mkey\e[0m => key > \e[31m'A'\e[0m || key < \e[31m'Z'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \              "
  stdout: ''
  timestamp: 1660010154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (!dict.isEmpty) {\n        \
    \    // Use a sorted set to ensure the case order is preserved\n            var\
    \ keys = dict.keys.toSet.toSeq.sorted\n            keys.map{ k =>\n          \
    \      val lower = k.toLowerCase\n                val upper = k.toUpperCase\n\
    \                if (lower == upper)\n                    false\n            \
    \    else if (lower != upper)\n                    true\n                else\n\
    \                    false\n            }.forall{ b => b }\n        }\n      \
    \  else false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_k1uzk2e.scala:37)\n\tat Problem.main(tmp_k1uzk2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var result : Boolean = true \n\
    \        if(dict.isEmpty) {\n            return result \n        }\n        val\
    \ keys = dict.keys\n        for(key <- keys) {\n            if(key.isInstanceOf[String])\
    \ {\n                result = result && dict.get(key).toLowerCase == key.toLowerCase\
    \ \n            } else if(!key.isInstanceOf[String]) {\n                result\
    \ = result && dict.get(key) == key\n            }\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi3bglcri.scala:26:49 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                result = result && dict.get(key).toLowerCase\
    \ == key.toLowerCase \n\e[31m\e[31m   |\e[0m                                 \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value toLowerCase\
    \ is not a member of Option[String]\n\e[31m\e[31m-- Error: /tmp/tmpi3bglcri.scala:28:35\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \         result = result && dict.get(key) == key\n\e[31m\e[31m   |\e[0m     \
    \                              ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues\
    \ of types Option[String] and String cannot be compared with == or !=\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010155
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false else true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyamnwxx5.scala:23)\n\tat Problem.main(tmpyamnwxx5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict map { \n            case (k,\
    \ v) => (k.toLowerCase == v.toLowerCase) \n            case _ => false \n    \
    \    } reduce { (a, b) => a || b } \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpspvuqv1g.scala:25)\n\tat Problem.main(tmpspvuqv1g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict == null || dict.isEmpty)\
    \ \n            return false\n        else { \n            var result = true\n\
    \            for ((key,value) <- dict) {\n                val upperCase = (key.toString\
    \ == key.toUpperCase)\n                val lowerCase = (key.toString == key.toLowerCase)\n\
    \                if (upperCase || lowerCase) {\n                    if (upperCase\
    \ && lowerCase) {\n                        result = false\n                  \
    \  }\n                    else if (upperCase) {\n                        result\
    \ = false\n                    }\n                    else if (lowerCase) {\n\
    \                        result = false\n                    }\n             \
    \   }\n                else if (!(key.toString == key)) {\n                  \
    \  result = false\n                }\n            }\n            result\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp46h3g_h1.scala:45)\n\tat Problem.main(tmp46h3g_h1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        def isStringInCase(str : String)\
    \ = str match {\n            case s\"${str.toLowerCase}\" => true\n          \
    \  case s\"${str.toUpperCase}\" => true\n            case _ => false\n       \
    \ }\n        (dict == Map(dict.toSeq: _*)).forall(k => isStringInCase(k))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E135] Type Error: /tmp/tmpu4yvaigi.scala:20:25 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m \e[31ms\"\e[0m${str.toLowerCase}\e\
    [31m\"\e[0m => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Stable identifier required, but str.toLowerCase\
    \ found\n\e[31m\e[31m-- [E135] Type Error: /tmp/tmpu4yvaigi.scala:21:25 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m \e[31ms\"\e[0m${str.toUpperCase}\e\
    [31m\"\e[0m => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Stable identifier required, but str.toUpperCase\
    \ found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu4yvaigi.scala:24:38 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        (dict == Map(dict.toSeq: \e[35m_*\e[0m)).forall(\e\
    [36mk\e[0m => isStringInCase(k))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value forall is not a member of Boolean\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var res = true\n        val keys\
    \ = dict.keys\n        for (k <- keys) {\n          if (k.isInstanceOf[String])\
    \ {\n            if (!(k.asInstanceOf[String] == \"Name\" || k.asInstanceOf[String]\
    \ == \"Age\" || k.asInstanceOf[String] == \"City\" || k.asInstanceOf[String] ==\
    \ \"STATE\" || k.asInstanceOf[String] == \"ZIP\")) {\n              res = false\n\
    \              break\n            }\n          }\n        }\n        res\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcs3xskph.scala:25:14 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m              break\n\e[31m\e[31m   |\e[0m          \
    \    ^^^^^\e[0m\n\e[31m   |\e[0m              Not found: break\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var mapSize = dict.size\n     \
    \   var keyIsString = true\n        var keyIsUpper = true\n        val map = collection.mutable.Map[String,String]()\n\
    \        dict.foreach {\n          case (k,v) =>\n            if(keyIsString)\
    \ {\n              if(k.equals(v)) {\n                keyIsString = false\n  \
    \            }\n            } else if(keyIsUpper) {\n              if(k.equals(v.toString.toUpperCase))\
    \ {\n                keyIsUpper = false\n              }\n            } else {\n\
    \              if(k.equals(v.toString.toLowerCase)) {\n                keyIsUpper\
    \ = false\n              }\n            }\n            map += (k -> v)\n     \
    \   }\n        if(mapSize == map.size) {\n          return true\n        }\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp229bir5f.scala:47)\n\tat Problem.main(tmp229bir5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) \n          \
    \  return false\n        val lowercase = dict.toList.filter(_.isLower).toSet\n\
    \        val uppercase = dict.toList.filter(_.isUpper).toSet\n        val hasLowercase\
    \ = lowercase == Set(\"\")\n        val hasUppercase = uppercase == Set(\"\")\n\
    \        val allLowercaseOrUppercase = hasLowercase || hasUppercase\n        return\
    \ allLowercaseOrUppercase\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx4uny9z4.scala:21:45 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlowercase\e[0m = dict.toList.filter(_.isLower).toSet\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       value isLower is not a member of (String,\
    \ String)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx4uny9z4.scala:22:45\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36muppercase\e[0m = dict.toList.filter(_.isUpper).toSet\n\e[31m\e[31m   |\e[0m\
    \                                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                     value isUpper is not a member of (String, String)\n\e[31m\e\
    [31m-- Error: /tmp/tmpx4uny9z4.scala:23:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mhasLowercase\e[0m = lowercase\
    \ == Set(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Set[(String, String)] and scala.collection.mutable.Set[String]\
    \ cannot be compared with == or !=.\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m    CanEqual.canEqualSet[\e[35m(String, String)\e[0m, \e[35mU\e\
    [0m](\n\e[31m   |\e[0m      /* missing */summon[CanEqual[(String, String), U]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type CanEqual[(String, String), U].\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpx4uny9z4.scala:24:27 -----------------------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mhasUppercase\e[0m = uppercase\
    \ == Set(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Set[(String, String)] and scala.collection.mutable.Set[String]\
    \ cannot be compared with == or !=.\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m    CanEqual.canEqualSet[\e[35m(String, String)\e[0m, \e[35mU\e\
    [0m](\n\e[31m   |\e[0m      /* missing */summon[CanEqual[(String, String), U]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that "
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            for (key <- dict.keys) {\n                if (key.isLower)\
    \ true\n                else if (key.isUpper) true\n                else false\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuupecyi2.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e[0m (key.isLower) \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    value isLower is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpuupecyi2.scala:23:29 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (key.isUpper)\
    \ \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value isUpper is not a member of\
    \ String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keySet = dict.keys.toSet;\n\
    \        if (keySet.isEmpty) return true;\n        val map = keySet.toList;\n\
    \        if (map.forall(_.toLowerCase().contains('a')) && map.forall(_.toUpperCase().contains('A')))\
    \ return true;\n        if (map.forall(_.toLowerCase().contains('B')) && map.forall(_.toUpperCase().contains('B')))\
    \ return true;\n        return false;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp035a8qkt.scala:27)\n\tat Problem.main(tmp035a8qkt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false else {\
    \ \n            var firstKey = \"\"\n            var lastKey = \"\"\n        \
    \    var numKeys = 0 \n            // Iterate over each key-value pair in the\
    \ dictionary \n            // and count the number of keys. \n            dict.foreach\
    \ {\n            case (key,value) => {\n                numKeys+=1\n         \
    \       // If the key is the first key, set the first key \n                //\
    \ to the current key. \n                if (firstKey == \"\") {\n            \
    \        firstKey = key\n                }\n                // If we've encountered\
    \ another key that is \n                // different than the previous key, set\
    \ the last \n                // key to the current key \n                else\
    \ if (key != lastKey) {\n                    lastKey = key\n                }\n\
    \            }\n            }\n            if (numKeys == 0) return false \n \
    \           else { \n                // Iterate over each key in the dictionary\
    \ \n                // ignoring the first and last keys. \n                for\
    \ (key <- dict.keySet) {\n                    if ((firstKey == \"\") || (lastKey\
    \ == \"\")) {\n                        break\n                    }\n        \
    \            // If the current key is not equal to the first key \n          \
    \          // or the current key is not equal to the last key, \n            \
    \        // then we know we have an upper case letter. \n                    if\
    \ ((key != firstKey) && (key != lastKey)) {\n                        return false\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1m21ducg.scala:47:24 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) {\n         \
    \   false\n        } else {\n            val lowercase = dict.keys.toSet.toSeq.map(_.toLowerCase)\n\
    \            val uppercase = dict.keys.toSet.toSeq.map(_.toUpperCase)\n      \
    \      (lowercase union uppercase) == dict.keys\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfbgze708.scala:28)\n\tat Problem.main(tmpfbgze708.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n       val keysUpper = dict.toSeq.map(_.toUpperCase).filterNot(_\
    \ == \"\").toSeq\n       val keysLower = dict.toSeq.map(_.toLowerCase).filterNot(_\
    \ == \"\").toSeq\n       keysUpper.isEmpty || keysLower.isEmpty\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwxwsewm3.scala:19:40 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m       \e[33mval\e[0m \e[36mkeysUpper\e[0m = dict.toSeq.map(_.toUpperCase).filterNot(_\
    \ == \e[31m\"\"\e[0m).toSeq\n\e[31m\e[31m   |\e[0m                           \
    \           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value toUpperCase\
    \ is not a member of (String, String)\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpwxwsewm3.scala:20:40 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m       \e[33mval\e[0m \e[36mkeysLower\e[0m = dict.toSeq.map(_.toLowerCase).filterNot(_\
    \ == \e[31m\"\"\e[0m).toSeq\n\e[31m\e[31m   |\e[0m                           \
    \           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value toLowerCase\
    \ is not a member of (String, String)\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keySet = dict.keySet\n    \
    \    if (keySet.isEmpty) false else keySet.forall(_.isInstanceOf[String]) && keySet.forall(_.isInstanceOf[String])\
    \ && keySet.forall(_.toLowerCase == _.toLowerCase)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpu4483ht6.scala:20:135 --------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keySet.isEmpty) \e[31mfalse\e\
    [0m \e[33melse\e[0m keySet.forall(_.isInstanceOf[\e[35mString\e[0m]) && keySet.forall(_.isInstanceOf[\e\
    [35mString\e[0m]) && keySet.forall(_.toLowerCase == _.toLowerCase)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660010153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else checkDictCase(dict.values.toSeq.map (_.toLowerCase).filter(_.toString.length==1))\n\
    \            || checkDictCase(dict.values.toSeq.map (_.toString.toUpperCase).filter(_.toString.length==1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3q1fqh24.scala:20:71\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m checkDictCase(dict.values.toSeq.map\
    \ (_.toLowerCase).filter(_.toString.length==\e[31m1\e[0m))\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    Seq[String]\n\e[31m   |\e\
    [0m                        Required: collection.mutable.Map[String, String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3q1fqh24.scala:21:82\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            || checkDictCase(dict.values.toSeq.map\
    \ (_.toString.toUpperCase).filter(_.toString.length==\e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    Seq[String]\n\e[31m   |\e\
    [0m                        Required: collection.mutable.Map[String, String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010157
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys\n        keys.toSet.size\
    \ == keys.toSet.toList.size\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0stsyp99.scala:24)\n\tat Problem.main(tmp0stsyp99.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys\n        val\
    \ keySet = Set(keys: _*)\n        keySet.size === keys.size && keySet.forall(keySet.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5jjlwano.scala:20:25\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mkeySet\e\
    [0m = Set(keys: \e[35m_*\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \ ^^^^\e[0m\n\e[31m   |\e[0m                         Found:    (keys : Iterable[String])\n\
    \e[31m   |\e[0m                         Required: Seq[<?>] | Array[<?>]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5jjlwano.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        keySet.size === keys.size && keySet.forall(keySet.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ === is not a member of Int - did you mean Int.==?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys\n        if(keys.isEmpty)\
    \ return true\n        if(keys.forall(_.isUpper)) keys.map(_.toLower).forall(_.isUpper)\n\
    \        else keys.map(_.toUpper).forall(_.isUpper)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp35yhzvm7.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(keys.forall(_.isUpper)) keys.map(_.toLower).forall(_.isUpper)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                     value isUpper is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp35yhzvm7.scala:21:46 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(keys.forall(_.isUpper)) keys.map(_.toLower).forall(_.isUpper)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 value toLower is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp35yhzvm7.scala:21:64\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(keys.forall(_.isUpper))\
    \ keys.map(_.toLower).forall(_.isUpper)\n\e[31m\e[31m   |\e[0m               \
    \                                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                value isUpper is not a member of Nothing\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp35yhzvm7.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m keys.map(_.toUpper).forall(_.isUpper)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   value toUpper is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp35yhzvm7.scala:22:42 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33melse\e[0m keys.map(_.toUpper).forall(_.isUpper)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                value isUpper is not a member of\
    \ Nothing\n5 errors found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = mutable.Set[String]()\n\
    \        for( key <- dict.keys ){\n            if (key.isInstanceOf[String])\n\
    \                keys += key.toString\n        }\n        (keys.size == 0 || keys.size\
    \ == dict.length) && (keys.size == 0 || keys.size == dict.keys.size)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzjxsc1g3.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mkeys\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010160
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        val\
    \ lower = dict.map(_.toLowerCase)\n        val upper = dict.map(_.toUpperCase)\n\
    \        val both = lower ++ upper\n        val trues = both.filter( _._1.isEmpty)\n\
    \        val falses = both.filter( _._2.isEmpty)\n        (trues.size == falses.size)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7bic4v37.scala:20:31 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlower\e[0m = dict.map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   value toLowerCase is not a member of (String, String)\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7bic4v37.scala:21:31 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mupper\e[0m = dict.map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   value toUpperCase is not a member of (String, String)\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        def isString(x:Any) = x match {\n\
    \            case s:String => true\n            case _ => false\n        }\n \
    \       if (dict == null)\n            return false\n        if (dict.size ==\
    \ 0)\n            return true\n        val keys = dict.keys.toSet\n        val\
    \ keys = keys.filter(isString)\n        val values = dict.values.toSet\n     \
    \   val values = values.filter(isString)\n        if (keys.size == values.size)\n\
    \            return true\n        if (keys.size > values.size)\n            return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpabw5bntu.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mkeys\e[0m = keys.filter(isString)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mkeys is already defined as \e[33mvalue\e[0m \e[35mkeys\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpabw5bntu.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvalues\e[0m = values.filter(isString)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalues is already defined as \e[33mvalue\e[0m \e[35mvalues\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpabw5bntu.scala:33:8 ---------------------\e[0m\e[0m\n\
    \e[31m33 |\e[0m        \e[33mif\e[0m (keys.size > values.size)\n\e[31m\e[31m \
    \  |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m\
    \        Required: Boolean\n\e[31m   |\e[0m        Maybe you are missing an else\
    \ part for the conditional?\n\e[31m34 |\e[0m            \e[33mreturn\e[0m \e[31mfalse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty)\n            return\
    \ true\n\n        val mutableMap = mutable.Map[String,String]()\n        for(x\
    \ <- dict.keySet)\n            val key = x.toLowerCase()\n            val value\
    \ = dict.getOrElse(x, \"\")\n            if(key == value)\n            mutableMap\
    \ += key -> value\n\n        for(x <- dict.keySet)\n            val key = x.toUpperCase()\n\
    \            val value = dict.getOrElse(x, \"\")\n            if(key == value)\n\
    \            mutableMap += key -> value\n\n        return mutableMap.size == dict.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw5glkqwu.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmutableMap\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty)\n            return\
    \ true\n        val keys = dict.keySet\n        val lowerCaseKeys = keys.map(key\
    \ => key.toLowerCase)\n        val upperCaseKeys = keys.map(key => key.toUpperCase)\n\
    \        if(lowerCaseKeys.forall(key => dict.get(key).isInstanceOf[String]) ||\
    \ upperCaseKeys.forall(key => dict.get(key).isInstanceOf[String]))\n         \
    \   return true\n        else\n            return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpquv85fbk.scala:30)\n\tat Problem.main(tmpquv85fbk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val m = dict.toMap\n        if\
    \ (m.isEmpty) false\n        else if(m.values.map(_.toLower).distinct.size ==\
    \ 1) true\n        else if(m.values.map(_.toUpper).distinct.size == 1) false\n\
    \        else checkDictCase(dict - m.keys)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplhs9hyjd.scala:21:31 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(m.values.map(_.toLower).distinct.size\
    \ == \e[31m1\e[0m) \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             value toLower\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplhs9hyjd.scala:22:31\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m \e\
    [33mif\e[0m(m.values.map(_.toUpper).distinct.size == \e[31m1\e[0m) \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             value toUpper is not a member of String\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplhs9hyjd.scala:23:36 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m checkDictCase(dict - m.keys)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    \e[1m\e[31mIterable\e[0m\e[1m\e\
    [31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                           \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val stringDict =\n            dict.map{\
    \ case (k, v) => (k.toLowerCase + k.toUpperCase) -> v} \n        val stringDict1\
    \ = \n            dict.map{ case (k, v) => (k.toUpper + k.toLowerCase -> v)}\n\
    \        stringDict.toList == stringDict1.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu5a06rm2.scala:22:40 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            dict.map{ \e[33mcase\e[0m (k, v) => (k.toUpper\
    \ + k.toLowerCase -> v)}\n\e[31m\e[31m   |\e[0m                              \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value\
    \ toUpper is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660010165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.forall(_.isInstanceOf[String])\
    \ match {\n            case true => true\n            case _ => false\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsi9umr_i.scala:25)\n\tat Problem.main(tmpsi9umr_i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keySet\n      \
    \  val keysUp = keys.filter(_.isUpper)\n        val keysDown = keys.filter(_.isLower)\n\
    \        keys.forall(key => !keysUp.contains(key) && !keysDown.contains(key))\
    \ && keys.length == dict.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg2hdeggs.scala:20:35 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mkeysUp\e[0m = keys.filter(_.isUpper)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                 value isUpper is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg2hdeggs.scala:21:37 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mkeysDown\e[0m = keys.filter(_.isLower)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value isLower is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg2hdeggs.scala:22:85 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        keys.forall(\e[36mkey\e[0m => !keysUp.contains(key)\
    \ && !keysDown.contains(key)) && keys.length == dict.length\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value length is not a member\
    \ of scala.collection.Set[String]\n3 errors found\n"
  stdout: ''
  timestamp: 1660010166
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Write your solution here\n \
    \       if (dict.isEmpty) \n            return false \n        else \n       \
    \     if ( dict.exists(k => k._1.toLowerCase == k._1))\n                if ( dict.exists(k\
    \ => k._1.toUpperCase == k._1) ) \n                    return true \n        \
    \        else \n                    return false \n            else\n        \
    \        if ( dict.exists(k => k._1.toUpperCase == k._1) ) \n                \
    \    return true \n                else \n                    return false \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt6vzh6wn.scala:35)\n\tat Problem.main(tmpt6vzh6wn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) {\n         \
    \   return false\n        }\n        val keys = dict.keySet.toList\n        if\
    \ (keys.isEmpty) {\n            return false\n        }\n        keys.foreach(key\
    \ => {\n            if (!key.isLowerCase() && !key.isUpperCase()) {\n        \
    \        return false\n            }\n        })\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgq6f120t.scala:27:21 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (!key.isLowerCase() && !key.isUpperCase())\
    \ {\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue isLowerCase is not a member of String - did you mean key.toLowerCase?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        \n        val lowerKeySet = dict.keys.filter(_.toLowerCase.contains)\n\
    \        val upperKeySet = dict.keys.filter(_.toUpperCase.contains)\n        \n\
    \        if(lowerKeySet.isEmpty && upperKeySet.isEmpty)\n            return true\n\
    \        else if(lowerKeySet.isEmpty || upperKeySet.isEmpty)\n            return\
    \ false\n        else if(lowerKeySet.size != upperKeySet.size)\n            return\
    \ false\n        else\n            lowerKeySet.forall(key => upperKeySet.contains(key))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpis3a0iyg.scala:20:43\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlowerKeySet\e\
    [0m = dict.keys.filter(_.toLowerCase.contains)\n\e[31m\e[31m   |\e[0m        \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                       Found:    CharSequence => Boolean\n\e\
    [31m   |\e[0m                                       Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpis3a0iyg.scala:21:43 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mupperKeySet\e[0m = dict.keys.filter(_.toUpperCase.contains)\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    CharSequence\
    \ => Boolean\n\e[31m   |\e[0m                                       Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpis3a0iyg.scala:30:50\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m            lowerKeySet.forall(\e\
    [36mkey\e[0m => upperKeySet.contains(key))\n\e[31m\e[31m   |\e[0m            \
    \                          ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue contains\
    \ is not a member of Iterable[String], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else if (dict.keys.forall(x=> x==x.toLowerCase) || dict.keys.forall(x=> x==x.toUpperCase))\
    \ true\n        else false\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5d2c6r5c.scala:26)\n\tat Problem.main(tmp5d2c6r5c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Use a mutable map to store the\
    \ original case of the keys\n        val cased = mutable.Map[String,String]()\n\
    \        for(k <- dict.keys) \n            if(k.toLowerCase != k) cased.put(k.toLowerCase,\
    \ k); \n            else cased.put(k.toUpperCase, k)\n        return !cased.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0brbbz2x.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcased\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys\n        if\
    \ (keys.length == 0) true\n        else {\n            val lowerCase = keys.map(_.toLowerCase)\n\
    \            val upperCase = keys.map(_.toUpperCase)\n            (lowerCase.forall(_.isInstanceOf[String])\
    \ && upperCase.forall(_.isInstanceOf[String])) || checkDictCase(dict)\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvqbczpfx.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [31mtrue\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value length is not a member of Iterable[String]\n1 error found\n"
  stdout: ''
  timestamp: 1660010168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var ok = true\n        var seen\
    \ = mutable.Set[String]()\n        for (entry <- dict) {\n            val key\
    \ = entry._1\n            val value = entry._2\n            if (key < \"A\" ||\
    \ key > \"Z\") {\n                ok = false\n                println(\"Error:\
    \ \" + key + \" not in lower or upper case\")\n            } else if (seen.contains(key))\
    \ {\n                ok = false\n                println(\"Error: key \" + key\
    \ + \" used more than once\")\n            } else {\n                seen.add(key)\n\
    \            }\n        }\n        ok\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph0ps3gzf.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mseen\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Check if there are keys other\
    \ than strings in lower and upper case\n        val allKeysAreStringsInLowerCase\
    \ = dict.keySet.toSet.intersect(Set.apply(\"a\")).size == 0\n        val allKeysAreStringsInUpperCase\
    \ = dict.keySet.toSet.intersect(Set.apply(\"A\")).size == 0\n        val isDictionary\
    \ = allKeysAreStringsInLowerCase || allKeysAreStringsInUpperCase\n        if(isDictionary)\
    \ {\n            if(allKeysAreStringsInLowerCase) {\n                val lowerCaseDict\
    \ = dict.map(_.toLowerCase).filter(!_ == \"null\" || _ == \"undefined\")\n   \
    \             // Check if all the keys are in lower case\n                val\
    \ allKeysAreInLowerCase = lowerCaseDict.keySet.toSet.intersect(dict.keySet.toSet).size\
    \ == lowerCaseDict.size\n                if(allKeysAreInLowerCase) {\n       \
    \             true\n                } else {\n                    false\n    \
    \            }\n            } else if(allKeysAreStringsInUpperCase) {\n      \
    \          val upperCaseDict = dict.map(_.toUpperCase).filter(!_ == \"null\" ||\
    \ _ == \"undefined\")\n                // Check if all the keys are in upper case\n\
    \                val allKeysAreInUpperCase = upperCaseDict.keySet.toSet.intersect(dict.keySet.toSet).size\
    \ == upperCaseDict.size\n                if(allKeysAreInUpperCase) {\n       \
    \             true\n                } else {\n                    false\n    \
    \            }\n            } else {\n                true\n            }\n  \
    \      } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptgmbuc4t.scala:25:47 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e[0m \e[36mlowerCaseDict\e\
    [0m = dict.map(_.toLowerCase).filter(!_ == \e[31m\"null\"\e[0m || _ == \e[31m\"\
    undefined\"\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value toLowerCase\
    \ is not a member of (String, String)\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmptgmbuc4t.scala:34:47 ------------------------\e[0m\e[0m\n\e[31m34 |\e\
    [0m                \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.map(_.toUpperCase).filter(!_\
    \ == \e[31m\"null\"\e[0m || _ == \e[31m\"undefined\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   value toUpperCase is not a member of (String, String)\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010168
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty)\n            return\
    \ false\n        val lower = dict.keys.toList.flatMap(_.toLowerCase).distinct\n\
    \        val upper = dict.keys.toList.flatMap(_.toUpperCase).distinct\n      \
    \  lower == upper || lower.forall(str => upper.contains(str))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9y57sguz.scala:26)\n\tat Problem.main(tmp9y57sguz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keySet\n      \
    \  if(keys.length != 0) keys.forall(_.isLetter) \n        else keys.forall(_.isUpper)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpod6z5ftb.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(keys.length != \e[31m0\e[0m) keys.forall(_.isLetter)\
    \ \n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \   value length is not a member of scala.collection.Set[String]\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpod6z5ftb.scala:20:43 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(keys.length != \e[31m0\e[0m) keys.forall(_.isLetter)\
    \ \n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpod6z5ftb.scala:21:27\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m keys.forall(_.isUpper)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value isUpper is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val values = dict.values.toSet\n\
    \        val lowerCase = values.contains(value.toLowerCase)\n        val upperCase\
    \ = values.contains(value.toUpperCase)\n        (lowerCase && upperCase) || (!lowerCase\
    \ && !upperCase)\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiqvphc48.scala:20:40 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlowerCase\e[0m = values.contains(value.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Not found: value\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiqvphc48.scala:21:40 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mupperCase\e[0m = values.contains(value.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Not found: value\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Write your solution here\n \
    \       // return true\n        val lower = dict.keys.filter( x=> x.toLowerCase\
    \ == x)\n        val upper = dict.keys.filter( x=> x.toUpperCase == x)\n     \
    \   \n        return !(lower.isEmpty) || !(upper.isEmpty)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuon33egn.scala:28)\n\tat Problem.main(tmpuon33egn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val lcaseDict = dict.map(x => x.toLowerCase\
    \ -> x)\n        val ucaseDict = dict.map(x => x.toUpperCase -> x)\n        val\
    \ islcase = lcaseDict.forall(x => x._2.forall(x => x match {\n            case\
    \ s : String => s.equals(x._1)\n            case _ => false\n        }))\n   \
    \     val isucase = ucaseDict.forall(x => x._2.forall(x => x match {\n       \
    \     case s : String => s.equals(x._1)\n            case _ => false\n       \
    \ }))\n        !(islcase && isucase)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdbrzr40q.scala:19:40 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlcaseDict\e[0m = dict.map(\e\
    [36mx\e[0m => x.toLowerCase -> x)\n\e[31m\e[31m   |\e[0m                     \
    \                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value\
    \ toLowerCase is not a member of (String, String)\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpdbrzr40q.scala:20:40 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mucaseDict\e[0m = dict.map(\e[36mx\e[0m =>\
    \ x.toUpperCase -> x)\n\e[31m\e[31m   |\e[0m                                 \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value toUpperCase\
    \ is not a member of (String, String)\n2 errors found\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      dict match {\n        case Map()\
    \ => false\n        case Map(keys @ _*) => keys.forall(_.isInstanceOf[String])\n\
    \        case _ => false\n      }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E127] Syntax Error: /tmp/tmp_r9r3eh2.scala:20:13 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mcase\e[0m Map() => \e[31mfalse\e[0m\n\e\
    [31m\e[31m   |\e[0m             ^^^\e[0m\n\e[31m   |\e[0mcollection.mutable.Map\
    \ cannot be used as an extractor in a pattern because it lacks an unapply or unapplySeq\
    \ method\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E127] Syntax Error: /tmp/tmp_r9r3eh2.scala:21:13\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mcase\e[0m\
    \ Map(keys @ _*) => keys.forall(_.isInstanceOf[String])\n\e[31m\e[31m   |\e[0m\
    \             ^^^\e[0m\n\e[31m   |\e[0mcollection.mutable.Map cannot be used as\
    \ an extractor in a pattern because it lacks an unapply or unapplySeq method\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_r9r3eh2.scala:21:31\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mcase\e[0m Map(keys\
    \ @ _*) => keys.forall(_.isInstanceOf[String])\n\e[31m\e[31m   |\e[0m        \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: keys\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.size <= 0) {\n        \
    \    return false\n        }\n        var flag : Boolean = true\n        var lowerDict\
    \ : Map[String,String] = new mutable.HashMap[String,String]\n        var upperDict\
    \ : Map[String,String] = new mutable.HashMap[String,String]\n        for(key <-\
    \ dict.keySet()) {\n            val value = dict.get(key)\n            if(key.isLower)\
    \ {\n                lowerDict.put(key.decode, value.decode)\n            } else\
    \ {\n                upperDict.put(key.decode, value.decode)\n            }\n\
    \        }\n        for(key <- lowerDict.keySet()) {\n            if(!upperDict.contains(key))\
    \ {\n                flag = false\n                break\n            }\n    \
    \    }\n        for(key <- upperDict.keySet()) {\n            if(!lowerDict.contains(key))\
    \ {\n                flag = false\n                break\n            }\n    \
    \    }\n        return flag\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3a3kptgo.scala:23:49 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mlowerDict\e[0m : \e[35mMap\e\
    [0m[\e[35mString\e[0m,\e[35mString\e[0m] = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e\
    [0m,\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                                \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp3a3kptgo.scala:24:49 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mupperDict\e[0m : \e[35mMap\e\
    [0m[\e[35mString\e[0m,\e[35mString\e[0m] = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e\
    [0m,\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                                \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp3a3kptgo.scala:25:30 -----------------------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m(key <- dict.keySet()) {\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument\
    \ for parameter elem of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mtrait\e[0m\
    \ \e[35mSetOps\e[0m: (elem: String): Boolean\n\e[31m\e[31m-- Error: /tmp/tmp3a3kptgo.scala:33:35\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m33 |\e[0m       \
    \ \e[33mfor\e[0m(key <- lowerDict.keySet()) {\n\e[31m\e[31m   |\e[0m         \
    \          ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter\
    \ elem of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mtrait\e[0m \e[35mSetOps\e\
    [0m: (elem: String): Boolean\n\e[31m\e[31m-- Error: /tmp/tmp3a3kptgo.scala:39:35\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m39 |\e[0m       \
    \ \e[33mfor\e[0m(key <- upperDict.keySet()) {\n\e[31m\e[31m   |\e[0m         \
    \          ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter\
    \ elem of \e[33mmethod\e[0m \e[35mapply\e[0m i"
  stdout: ''
  timestamp: 1660010170
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys\n        if\
    \ (keys.isEmpty) return false\n        for (key <- keys) {\n            if (key.isEmpty\
    \ || key.toString.toLowerCase != key.toLowerCase) {\n                return false\n\
    \            }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpywmjzi03.scala:30)\n\tat Problem.main(tmpywmjzi03.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else (dict.keySet.toSeq.map(_.toLowerCase).exists(_ == _.toLowerCase) || dict.keySet.toSeq.map(_.toUpperCase).exists(_\
    \ == _.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp4mt77m7f.scala:20:58 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m (dict.keySet.toSeq.map(_.toLowerCase).exists(_\
    \ == _.toLowerCase) || dict.keySet.toSeq.map(_.toUpperCase).exists(_ == _.toUpperCase))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong\
    \ number of parameters, expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp4mt77m7f.scala:20:125\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m\
    \ (dict.keySet.toSeq.map(_.toLowerCase).exists(_ == _.toLowerCase) || dict.keySet.toSeq.map(_.toUpperCase).exists(_\
    \ == _.toUpperCase))\n\e[31m\e[31m   |\e[0m                                  \
    \                                                                            \
    \               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \            Wrong number of parameters, expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val mapSet = mutable.Map[String,String]();\n\
    \        var hasKey = false;\n        val mapKeys = dict.keys.toSet;\n       \
    \ val mapValues = dict.values.toSet;\n        mapKeys.foreach(k => {\n       \
    \     if(k.isLowerCase()) {\n                mapSet += (k.toLowerCase -> mapValues(k));\n\
    \                hasKey = true;\n            }\n            if(k.isUpperCase())\
    \ {\n                mapSet += (k.toUpperCase -> mapValues(k));\n            \
    \    hasKey = true;\n            }\n        })\n        if(mapSet.isEmpty) {\n\
    \            hasKey = false;\n        }\n        return hasKey;\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv_cn3w23.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmapSet\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mString\e[0m]();\n\e[31m\e[31m   |\e[0m                 \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv_cn3w23.scala:24:17\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(k.isLowerCase())\
    \ {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ isLowerCase is not a member of String - did you mean k.toLowerCase?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpv_cn3w23.scala:28:17 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mif\e[0m(k.isUpperCase()) {\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue isUpperCase\
    \ is not a member of String - did you mean k.toUpperCase?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) true\n      \
    \  else {\n            val lower = dict\n                .mapValues { x => x.toLowerCase\
    \ }\n            val upper = dict\n                .mapValues { x => x.toUpperCase\
    \ }\n            val keys1 = lower.keys.toSet\n            val keys2 = upper.keys.toSet\n\
    \            keys1 == keys2 || keys1 == keys2 || keys1 == keys2.toSet\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdh8jh71_.scala:32)\n\tat Problem.main(tmpdh8jh71_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.toSeq.exists( c => c._2.toLowerCase\
    \ == c._2.toUpperCase )\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxd1nsyzq.scala:22)\n\tat Problem.main(tmpxd1nsyzq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      def isString(x: Any) : Boolean =\
    \ x match {\n        case x: String => true\n        case _ => false\n      }\n\
    \n      def mapKeys(m : Map[String,String]): List[String] = {\n        val keys\
    \ = m.keys.toList\n        keys.map(x => x.toLowerCase).filter(isString)\n   \
    \   }\n\n      def mapValues(m : Map[String,String]): List[String] = {\n     \
    \   val keys = m.keys.toList\n        keys.map(x => x.toUpperCase).filter(isString)\n\
    \      }\n\n      if (dict.isEmpty) {\n        false\n      }\n      else {\n\
    \        mapKeys(dict).forall(mapValues)\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm1m3ubua.scala:38:29\
    \ --------------------\e[0m\e[0m\n\e[31m38 |\e[0m        mapKeys(dict).forall(mapValues)\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                    Found:    (m : String)\n\e[31m   |\e[0m                 \
    \       Required: collection.mutable.Map[String, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = mutable.Set[String]()\n\
    \        for(item <- dict){\n            if(item._1.isLowerCase || item._1.isUpperCase\
    \ || keys.contains(item._1)){\n                keys :+= item._1\n            }\n\
    \        }\n        keys.length == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3txnu7z9.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mkeys\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp3txnu7z9.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(item._1.isLowerCase || item._1.isUpperCase\
    \ || keys.contains(item._1)){\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue isLowerCase is not a member of String - did you mean\
    \ _1.toLowerCase?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty) {\n          \
    \  false\n        } else {\n            val lowerCase = dict.keySet.toSet.toList.map(x\
    \ => x.toLowerCase).toSet\n            val upperCase = dict.keySet.toSet.toList.map(x\
    \ => x.toUpperCase).toSet\n            val containsAll = lowerCase.intersect(upperCase).size\
    \ == dict.keySet.size\n            val containsAny = lowerCase.intersect(upperCase).nonEmpty\n\
    \            containsAll || containsAny\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkh1nx3ze.scala:30)\n\tat Problem.main(tmpkh1nx3ze.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false \n    \
    \    else (\n            dict map {x => x.toLowerCase} contains {x => x.toLowerCase}\
    \ ||\n            dict map {x => x.toUpperCase} contains {x => x.toUpperCase}\n\
    \        )\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_7by98s3.scala:21:29 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            dict map {\e[36mx\e[0m => x.toLowerCase}\
    \ contains {\e[36mx\e[0m => x.toLowerCase} ||\n\e[31m\e[31m   |\e[0m         \
    \                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value\
    \ toLowerCase is not a member of (String, String)\n1 error found\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.size == 0)\n          \
    \  return false\n        // get all keys\n        var keyList = dict.keySet\n\
    \        val keysUpper = keyList.filter(_.isUpperCase)\n        val keysLower\
    \ = keyList.filter(_.isLowerCase)\n        // check keys\n        if(keysLower.length\
    \ != keysUpper.length)\n            return false\n        if(keysLower.length\
    \ == 0)\n            return true\n        for(i <- keysLower.indices)\n      \
    \      if(!keysUpper(i).equals(keysLower(i)))\n                return false\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplqavkarm.scala:23:41 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mkeysUpper\e[0m = keyList.filter(_.isUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue isUpperCase is not a member of String - did you mean _$1.toUpperCase?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplqavkarm.scala:24:41 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mkeysLower\e[0m = keyList.filter(_.isLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue isLowerCase is not a member of String - did you mean _$2.toLowerCase?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplqavkarm.scala:26:21 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m(keysLower.length != keysUpper.length)\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \    value length is not a member of scala.collection.Set[String]\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmplqavkarm.scala:28:21 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m(keysLower.length == \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \    value length is not a member of scala.collection.Set[String]\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmplqavkarm.scala:30:27 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mfor\e[0m(i <- keysLower.indices)\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue indices\
    \ is not a member of scala.collection.Set[String] - did you mean keysLower.inits?\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660010179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var result = true\n        dict.forall\
    \ {\n            case (key: String, value: String) =>\n              if(key.toLowerCase\
    \ == key.toUpperCase && value.toLowerCase == value.toUpperCase && key.isAlpha\
    \ && value.isAlpha){\n                result = false\n                return false\n\
    \              }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2wj8x4i5.scala:22:101 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m              \e[33mif\e[0m(key.toLowerCase == key.toUpperCase\
    \ && value.toLowerCase == value.toUpperCase && key.isAlpha && value.isAlpha){\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               value isAlpha is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp2wj8x4i5.scala:22:118 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m              \e[33mif\e[0m(key.toLowerCase == key.toUpperCase\
    \ && value.toLowerCase == value.toUpperCase && key.isAlpha && value.isAlpha){\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                        ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value isAlpha is not a member of\
    \ String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        var tempKey = dict.head._1\n        var tempValue = dict.head._2\n  \
    \      for (key <- 1 to (dict.size - 1)) {\n            if (dict._2(key) != tempValue)\
    \ {\n                return false\n            } else if (dict._2(key) == tempValue\
    \ && dict._1(key) != tempKey) {\n                return false\n            }\n\
    \            tempKey = dict._1(key)\n            tempValue = dict._2(key)\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1zmby_8y.scala:23:21 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (dict._2(key) != tempValue)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m      value\
    \ _2 is not a member of collection.mutable.Map[String, String]\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp1zmby_8y.scala:25:28 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (dict._2(key)\
    \ == tempValue && dict._1(key) != tempKey) {\n\e[31m\e[31m   |\e[0m          \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m      value _2 is not a member of collection.mutable.Map[String,\
    \ String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1zmby_8y.scala:28:27\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            tempKey = dict._1(key)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \ value _1 is not a member of collection.mutable.Map[String, String]\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp1zmby_8y.scala:29:29 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            tempValue = dict._2(key)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m      value _2 is\
    \ not a member of collection.mutable.Map[String, String]\n4 errors found\n"
  stdout: ''
  timestamp: 1660010181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (!dict.isEmpty)\n        {\n\
    \            var firstKeyIsString: Boolean = false\n            var secondKeyIsString:\
    \ Boolean = false\n            var firstKeyUpper: Boolean = false\n          \
    \  var secondKeyUpper: Boolean = false\n            var firstKeyLower: Boolean\
    \ = false\n            var secondKeyLower: Boolean = false\n\n            val\
    \ keysIterator = dict.keySet().iterator\n            while ( keysIterator.hasNext\
    \ ) {\n                val key = keysIterator.next()\n                if ( key\
    \ < \"a\" || key > \"z\" )\n                    firstKeyIsString = false\n   \
    \             else if ( key < \"A\" || key > \"Z\" )\n                    secondKeyIsString\
    \ = false\n                else if ( key.startsWith(\"a\") )\n               \
    \     firstKeyUpper = true\n                else if ( key.startsWith(\"A\") )\n\
    \                    secondKeyUpper = true\n                else if ( key.startsWith(\"\
    b\") )\n                    firstKeyUpper = true\n                else if ( key.startsWith(\"\
    B\") )\n                    secondKeyUpper = true\n                else if ( key.startsWith(\"\
    c\") )\n                    firstKeyUpper = true\n                else if ( key.startsWith(\"\
    C\") )\n                    secondKeyUpper = true\n                else if ( key.startsWith(\"\
    d\") )\n                    firstKeyUpper = true\n                else if ( key.startsWith(\"\
    D\") )\n                    secondKeyUpper = true\n                else if ( key.startsWith(\"\
    e\") )\n                    firstKeyUpper = true\n                else if ( key.startsWith(\"\
    E\") )\n                    secondKeyUpper = true\n                else if ( key.startsWith(\"\
    f\") )\n                    firstKeyUpper = true\n                else if ( key.startsWith(\"\
    F\") )\n                    secondKeyUpper = true\n                else if ( key.startsWith(\"\
    g\") )\n                    firstKeyUpper = true\n                else if ( key.startsWith(\"\
    G\") )\n                    secondKeyUpper = true\n                else if ( key.startsWith(\"\
    h\") )\n                    firstKeyUpper = true\n                else if ( key.startsWith(\"\
    H\") )\n                    secondKeyUpper = true\n                else if ( key.startsWith(\"\
    i\") )\n                    firstKeyUpper = true\n                else if ( key.startsWith(\"\
    I\") )\n                    secondKeyUpper = true\n                else if ( key.startsWith(\"\
    j\") )\n                    firstKeyUpper = true\n                else if ( key.startsWith(\"\
    J\") )\n                    secondKeyUpper = true\n                else if ( key.startsWith(\"\
    k\") )\n                    firstKeyUpper = true\n                else if ( key.startsWith(\"\
    K\") )\n                    secondKeyUpper = true\n                else if ( key.startsWith(\"\
    l\") )\n                    \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuj237wgp.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuj237wgp.scala:93:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m93 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmpuj237wgp.scala:28:42\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \     \e[33mval\e[0m \e[36mkeysIterator\e[0m = dict.keySet().iterator\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter elem of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mtrait\e\
    [0m \e[35mSetOps\e[0m: (elem: String): Boolean\n\e[33m\e[33m-- Warning: /tmp/tmpuj237wgp.scala:82:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m82 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      if (dict.isEmpty) {\n        false\n\
    \      } else if ((dict.keySet.filter(_.toString.toLowerCase) == \"true\").length\
    \ == dict.keySet.size) {\n        true\n      } else {\n        false\n      }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2cjbmprh.scala:21:37\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m      } \e[33melse\e[0m \e[33mif\e\
    [0m ((dict.keySet.filter(_.toString.toLowerCase) == \e[31m\"true\"\e[0m).length\
    \ == dict.keySet.size) {\n\e[31m\e[31m   |\e[0m                              \
    \       ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \            Found:    String\n\e[31m   |\e[0m                               \
    \      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // write code here\n        for(key\
    \ <- dict.keySet)\n            if(key.toString.toLowerCase == key)\n         \
    \   for(value <- dict.get(key))\n                if(value.toString.toLowerCase\
    \ == value)\n                    false\n            else\n                true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd2yznxy9.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(key <-\
    \ dict.keySet)\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Boolean\n\e[31m21 |\e[0m         \
    \   \e[33mif\e[0m(key.toString.toLowerCase == key)\n\e[31m22 |\e[0m          \
    \  \e[33mfor\e[0m(value <- dict.get(key))\n\e[31m23 |\e[0m                \e[33mif\e\
    [0m(value.toString.toLowerCase == value)\n\e[31m24 |\e[0m                    \e\
    [31mfalse\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m\n\e[31m26 |\e[0m  \
    \              \e[31mtrue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      if(dict.isEmpty)\n        false\n\
    \      else if(dict.keys.toSet().size == 1)\n        dict.keys.toSet().toSeq.exists(_.isInstanceOf[String])\n\
    \      else\n        false\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp94_lohy0.scala:21:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33melse\e[0m \e[33mif\e[0m(dict.keys.toSet().size\
    \ == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmissing argument for parameter elem of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mtrait\e[0m \e[35mSetOps\e[0m: (elem: String): Boolean\n\e[31m\e[31m--\
    \ Error: /tmp/tmp94_lohy0.scala:22:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        dict.keys.toSet().toSeq.exists(_.isInstanceOf[\e\
    [35mString\e[0m])\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmissing argument for parameter elem of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mtrait\e[0m \e[35mSetOps\e[0m: (elem: String): Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1660010178
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty)\n            return\
    \ false\n        val keySet = dict.keySet\n        val upperCaseKeySet = keySet.filter(key\
    \ => key.toUpperCase.equals(key))\n        if(upperCaseKeySet.isEmpty)\n     \
    \       return false\n        val lowerCaseKeySet = keySet.filter(key => key.toLowerCase.equals(key))\n\
    \        if(lowerCaseKeySet.isEmpty)\n            return false\n        upperCaseKeySet.toSet.equals(lowerCaseKeySet.toSet)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp79gex7mk.scala:31)\n\tat Problem.main(tmp79gex7mk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        def isAllInLower(words : Seq[String])\
    \ : Boolean = {\n            words.forall(x => x.toLowerCase.toChar == x.toLowerCase.toChar)\n\
    \        }\n        def isAllInUpper(words : Seq[String]) : Boolean = {\n    \
    \        words.forall(x => x.toUpperCase.toChar == x.toUpperCase.toChar)\n   \
    \     }\n        !dict.isEmpty && isAllInUpper(dict.keys.toSeq) && isAllInLower(dict.keys.toSeq)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0sxuz72i.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            words.forall(\e[36mx\e[0m => x.toLowerCase.toChar\
    \ == x.toLowerCase.toChar)\n\e[31m\e[31m   |\e[0m                            \
    \  ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              value\
    \ toChar is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0sxuz72i.scala:23:44\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            words.forall(\e\
    [36mx\e[0m => x.toUpperCase.toChar == x.toUpperCase.toChar)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                            value toChar is not a member of String\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0sxuz72i.scala:25:48 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        !dict.isEmpty && isAllInUpper(dict.keys.toSeq)\
    \ && isAllInLower(dict.keys.toSeq)\n\e[31m\e[31m   |\e[0m                    \
    \                  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \           Found:    Seq[String]\n\e[31m   |\e[0m                           \
    \     Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mSeq[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0sxuz72i.scala:25:81 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        !dict.isEmpty && isAllInUpper(dict.keys.toSeq) && isAllInLower(dict.keys.toSeq)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \        Found:    Seq[String]\n\e[31m   |\e[0m                              \
    \  Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e[0m\e\
    [1m\e[32m.\e[0mSeq[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) {\n         \
    \   true\n        } else {\n            var allKeys : List[String] = List()\n\
    \            var foundKeys : List[String] = List()\n            val lowerDict\
    \ = dict.map { \n                case (k,v) => (k.toLowerCase,v) \n          \
    \  }.toMap\n            val upperDict = dict.map { \n                case (k,v)\
    \ => (k.toUpperCase,v) \n            }.toMap\n            allKeys = lowerDict.keys\
    \ ++ upperDict.keys\n            allKeys.foreach { key =>\n                if\
    \ (lowerDict.contains(key) || upperDict.contains(key)) {\n                   \
    \ foundKeys = lowerDict.keySet.toList ++ upperDict.keySet.toList\n           \
    \         foundKeys.contains(key) == true\n                }\n               \
    \ else {\n                    false\n                }\n            }\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptdsmpihd.scala:30:22\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            allKeys = lowerDict.keys\
    \ ++ upperDict.keys\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    \e[1m\e[31mIterable\e[0m[String]\n\
    \e[31m   |\e[0m                      Required: \e[1m\e[32mList\e[0m[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptdsmpihd.scala:31:28\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            allKeys.foreach {\
    \ \e[36mkey\e[0m =>\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m\
    \            Found:    Unit\n\e[31m   |\e[0m            Required: Boolean\n\e\
    [31m32 |\e[0m                \e[33mif\e[0m (lowerDict.contains(key) || upperDict.contains(key))\
    \ {\n\e[31m33 |\e[0m                    foundKeys = lowerDict.keySet.toList ++\
    \ upperDict.keySet.toList\n\e[31m34 |\e[0m                    foundKeys.contains(key)\
    \ == \e[31mtrue\e[0m\n\e[31m35 |\e[0m                }\n\e[31m36 |\e[0m      \
    \          \e[33melse\e[0m {\n\e[31m37 |\e[0m                    \e[31mfalse\e\
    [0m\n\e[31m38 |\e[0m                }\n\e[31m39 |\e[0m            }\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val lower = dict.toList.flatMap(_.toLowerCase).distinct\n\
    \        val upper = dict.toList.flatMap(_.toUpperCase).distinct\n        if (lower.length\
    \ == dict.toList.size && upper.length == dict.toList.size && lower.forall( _.isLetter)\
    \ && !upper.forall( _.isLetter)) {\n            return true\n        } else {\n\
    \            return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt3feyqtv.scala:19:42 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlower\e[0m = dict.toList.flatMap(_.toLowerCase).distinct\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   value toLowerCase is not a member of (String,\
    \ String)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt3feyqtv.scala:20:42\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mupper\e[0m = dict.toList.flatMap(_.toUpperCase).distinct\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   value toUpperCase is not a member of (String, String)\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpt3feyqtv.scala:21:100 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (lower.length == dict.toList.size\
    \ && upper.length == dict.toList.size && lower.forall( _.isLetter) && !upper.forall(\
    \ _.isLetter)) {\n\e[31m\e[31m   |\e[0m                                      \
    \                                                            ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value isLetter is not a member of\
    \ Nothing\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt3feyqtv.scala:21:130\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (lower.length\
    \ == dict.toList.size && upper.length == dict.toList.size && lower.forall( _.isLetter)\
    \ && !upper.forall( _.isLetter)) {\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                   value isLetter is not a member of Nothing\n4 errors found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict == null || dict.isEmpty)\n\
    \            return false\n\n        val keys = dict.keys.toArray\n        val\
    \ upper = keys.map(_.toUpperCase)\n        val lower = keys.map(_.toLowerCase)\n\
    \n        val result = keys.forall(upper contains _)\n        result |= keys.forall(lower\
    \ contains _)\n\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8qq_vw6d.scala:27:15 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        result |= keys.forall(lower contains _)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value |= is not a\
    \ member of Boolean - did you mean result.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val isString = (_.toString.toLowerCase\
    \ == _.toString.toUpperCase)\n        val containsString = (x => isString(dict.getOrElse(x,x)))\n\
    \        val areAllStrings = dict contains \"VALUE\"\n        areAllStrings ||\
    \ containsString(_.toLowerCase == _.toUpperCase)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp_q65t0uk.scala:19:24 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misString\e[0m = (_.toString.toLowerCase\
    \ == _.toString.toUpperCase)\n\e[31m\e[31m   |\e[0m                        ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$1 of expanded function:\n\e\
    [31m   |\e[0m   (_$1, _$2) => _$1.toString.toLowerCase == _$2.toString.toUpperCase.\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmp_q65t0uk.scala:19:50 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misString\e[0m = (_.toString.toLowerCase\
    \ == _.toString.toUpperCase)\n\e[31m\e[31m   |\e[0m                          \
    \                        ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m   |\e[0m   (_$1, _$2) => _$1.toString.toLowerCase\
    \ == _$2.toString.toUpperCase.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp_q65t0uk.scala:20:30\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mcontainsString\e[0m = (\e[36mx\e[0m => isString(dict.getOrElse(x,x)))\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                       Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                          I could not infer the type of the parameter x.\n\e\
    [31m\e[31m-- Error: /tmp/tmp_q65t0uk.scala:20:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcontainsString\e[0m = (\e\
    [36mx\e[0m => isString(dict.getOrElse(x,x)))\n\e[31m\e[31m   |\e[0m          \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \    missing argument for parameter v2 of \e[33mmethod\e[0m \e[35mapply\e[0m in\
    \ \e[33mtrait\e[0m \e[35mFunction2\e[0m\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp_q65t0uk.scala:22:40\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        areAllStrings\
    \ || containsString(_.toLowerCase == _.toUpperCase)\n\e[31m\e[31m   |\e[0m   \
    \                                "
  stdout: ''
  timestamp: 1660010180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(!dict.isEmpty)\n        {\n\
    \            val keys = dict.keys\n            for(z <- keys) \n            {\n\
    \                if(z >= 'A' && z <='Z') \n                    return true\n \
    \               if(z >= 'a' && z <='z') \n                    return true\n  \
    \          }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjvmq6uwg.scala:24:24\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m(z\
    \ >= \e[31m'A'\e[0m && z <=\e[31m'Z'\e[0m) \n\e[31m\e[31m   |\e[0m           \
    \             ^^^\e[0m\n\e[31m   |\e[0m                        Found:    (\e[31m'A'\e\
    [0m : Char)\n\e[31m   |\e[0m                        Required: String\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjvmq6uwg.scala:24:35 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m(z >= \e[31m'A'\e[0m &&\
    \ z <=\e[31m'Z'\e[0m) \n\e[31m\e[31m   |\e[0m                                \
    \   ^^^\e[0m\n\e[31m   |\e[0m                                   Found:    (\e\
    [31m'Z'\e[0m : Char)\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjvmq6uwg.scala:26:24\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e[0m(z\
    \ >= \e[31m'a'\e[0m && z <=\e[31m'z'\e[0m) \n\e[31m\e[31m   |\e[0m           \
    \             ^^^\e[0m\n\e[31m   |\e[0m                        Found:    (\e[31m'a'\e\
    [0m : Char)\n\e[31m   |\e[0m                        Required: String\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjvmq6uwg.scala:26:35 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e[0m(z >= \e[31m'a'\e[0m &&\
    \ z <=\e[31m'z'\e[0m) \n\e[31m\e[31m   |\e[0m                                \
    \   ^^^\e[0m\n\e[31m   |\e[0m                                   Found:    (\e\
    [31m'z'\e[0m : Char)\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010184
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.nonEmpty) {\n        \
    \    val keys = dict.keys\n            val l = keys.size\n            if (l ==\
    \ 0) {\n                return false\n            }\n            val low = keys.map(_.toLowerCase)\n\
    \            val up = keys.map(_.toUpperCase)\n            return ((low.toSet\
    \ & up.toSet).isEmpty)\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp11m72z7q.scala:33)\n\tat Problem.main(tmp11m72z7q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val upperMap : Map[String,String]\
    \ = dict.filter(_._1.toUpperCase != _._1)\n        val lowerMap : Map[String,String]\
    \ = dict.filter(_._1.toLowerCase != _._1)\n        upperMap.isEmpty || lowerMap.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwbtfww4y.scala:19:58 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mupperMap\e[0m : \e[35mMap\e\
    [0m[\e[35mString\e[0m,\e[35mString\e[0m] = dict.filter(_._1.toUpperCase != _._1)\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value _1 is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwbtfww4y.scala:20:58\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mlowerMap\e[0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mString\e[0m] = dict.filter(_._1.toLowerCase\
    \ != _._1)\n\e[31m\e[31m   |\e[0m                                            \
    \            ^^^^\e[0m\n\e[31m   |\e[0m                                      value\
    \ _1 is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.toList.forall(_._2.isInstanceOf[String])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7jkkf3us.scala:23)\n\tat Problem.main(tmp7jkkf3us.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010191
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys\n        val\
    \ lowerKeys = keys.filter(x => x.isInstanceOf[String] && x.asInstanceOf[String].toLowerCase\
    \ != x.asInstanceOf[String])\n        val upperKeys = keys.filter(x => x.isInstanceOf[String]\
    \ && x.asInstanceOf[String].toUpperCase != x.asInstanceOf[String])\n        if\
    \ (lowerKeys.isEmpty)\n            return true\n        else if (upperKeys.isEmpty)\n\
    \            return false\n        else\n            return false\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf6e90zqi.scala:32)\n\tat Problem.main(tmpf6e90zqi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010190
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty) return false\n\
    \        var allStrings = true\n        for((k,v) <- dict) if(k.toLowerCase !=\
    \ k) allStrings = false\n        for((k,v) <- dict) if(k.toUpperCase != k) allStrings\
    \ = false\n        allStrings\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ipfbn0n.scala:26)\n\tat Problem.main(tmp7ipfbn0n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010191
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val dictStrings = dict.keySet\n\
    \        val upper = dictStrings.toSet\n        val lower = dictStrings.toSet\n\
    \        lower.forall(lowerString => upper.contains(lowerString.toUpperCase))\n\
    \        || upper.forall(upperString => lower.contains(upperString.toLowerCase))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppkxpm79a.scala:28)\n\tat Problem.main(tmppkxpm79a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010190
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.toList.forall(x => x._1.isLowerOrEqual\
    \ && x._1.isUpperOrEqual)\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdkxr38ii.scala:19:37 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        dict.toList.forall(\e[36mx\e[0m => x._1.isLowerOrEqual\
    \ && x._1.isUpperOrEqual)\n\e[31m\e[31m   |\e[0m                             \
    \   ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value isLowerOrEqual\
    \ is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660010189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty)\n           \
    \ return false\n        var keySet : Set[String] = Set(dict.keys.toList)\n   \
    \     if (keySet.isEmpty)\n            return false\n        var lowCaseKeys :\
    \ Set[String] = Set(keySet.toList.filter(key => key.toLower.length == keySet.length))\n\
    \        if (lowCaseKeys.isEmpty)\n            return false\n        var upperCaseKeys\
    \ : Set[String] = Set(keySet.toList.filter(key => key.toUpperCase == keySet.length))\n\
    \        if (upperCaseKeys.isEmpty)\n            return false\n        if (lowCaseKeys.toList\
    \ == upperCaseKeys.toList)\n            return true\n        return false\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprs2_s_31.scala:21:49\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mkeySet\e\
    [0m : \e[35mSet\e[0m[\e[35mString\e[0m] = Set(dict.keys.toList)\n\e[31m\e[31m\
    \   |\e[0m                                       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Found:    \e[1m\e[31mList\e[0m\e\
    [1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                      \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmprs2_s_31.scala:24:76 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mvar\e[0m \e[36mlowCaseKeys\e[0m : \e[35mSet\e[0m[\e[35mString\e\
    [0m] = Set(keySet.toList.filter(\e[36mkey\e[0m => key.toLower.length == keySet.length))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      value toLower is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmprs2_s_31.scala:27:100 -----------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mvar\e[0m \e[36mupperCaseKeys\e[0m : \e[35mSet\e[0m[\e[35mString\e\
    [0m] = Set(keySet.toList.filter(\e[36mkey\e[0m => key.toUpperCase == keySet.length))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \      value length is not a member of collection.mutable.Set[String]\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010190
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.keys.toSet.toSet.size == dict.keys.toSet.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_3x5rwff.scala:23)\n\tat Problem.main(tmp_3x5rwff.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.toSet.toList.flatten.flatMap\
    \ { \n            _.toLowerCase \n        }.forall(_.isLetter) match {\n     \
    \   case true => true\n        case false => false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8acqbdhq.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        dict.toSet.toList.flatten.flatMap { \n\e[31m\e\
    [31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0mno given\
    \ instance of type ((String, String)) => IterableOnce[B] was found for parameter\
    \ toIterableOnce of \e[33mmethod\e[0m \e[35mflatten\e[0m in \e[33mtrait\e[0m \e\
    [35mStrictOptimizedIterableOps\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:  \
    \  B is a type variable\n1 error found\n"
  stdout: ''
  timestamp: 1660010190
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty)\n            return\
    \ false\n        val result = dict.foldLeft(true) {\n            (isLower: (Boolean,\
    \ String) => Boolean, keyStr: String, value: String) =>\n            if(isLower(false,\
    \ keyStr)) {\n                false\n            } else {\n                isLower(true,\
    \ value.toLowerCase())\n            }\n        }\n        result._1\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprhlajrao.scala:22:12\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            (\e[36misLower\e\
    [0m: (\e[35mBoolean\e[0m, \e[35mString\e[0m) => \e[35mBoolean\e[0m, \e[36mkeyStr\e\
    [0m: \e[35mString\e[0m, \e[36mvalue\e[0m: \e[35mString\e[0m) =>\n\e[31m\e[31m\
    \   |\e[0m            ^\e[0m\n\e[31m   |\e[0m     Found:    (\e[1m\e[31m(\e[0mBoolean,\
    \ String\e[1m\e[31m)\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m=\e[0m\e[1m\e[31m>\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31mBoolean\e[0m, String\e[1m\e[31m,\e[0m\e[1m\e[31m \e\
    [0m\e[1m\e[31mString\e[0m) => Boolean\n\e[31m   |\e[0m     Required: (Boolean,\
    \ \e[1m\e[32m(\e[0mString, String)\e[1m\e[32m)\e[0m => Boolean\n\e[31m23 |\e[0m\
    \            \e[33mif\e[0m(isLower(\e[31mfalse\e[0m, keyStr)) {\n\e[31m24 |\e\
    [0m                \e[31mfalse\e[0m\n\e[31m25 |\e[0m            } \e[33melse\e\
    [0m {\n\e[31m26 |\e[0m                isLower(\e[31mtrue\e[0m, value.toLowerCase())\n\
    \e[31m27 |\e[0m            }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmprhlajrao.scala:29:15 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m        result._1\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        value _1 is not a member of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1660010191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var isAllUpper = false\n      \
    \  var isAllLower = false\n\n        for(key <- dict.keys) {\n            if(!isAllUpper\
    \ && !isAllLower) {\n                isAllUpper = key.isUppercase\n          \
    \      isAllLower = key.isLowerCase\n            }\n\n            if(!isAllUpper\
    \ && key.isUppercase) {\n                return false\n            }\n\n     \
    \       if(isAllUpper && !key.isUppercase) {\n                return false\n \
    \           }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprt37iy8d.scala:24:33 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                isAllUpper = key.isUppercase\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ isUppercase is not a member of String - did you mean key.toUpperCase?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmprt37iy8d.scala:25:33 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                isAllLower = key.isLowerCase\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ isLowerCase is not a member of String - did you mean key.toLowerCase?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmprt37iy8d.scala:28:34 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mif\e[0m(!isAllUpper && key.isUppercase)\
    \ {\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue isUppercase is not a member of String - did you mean key.toUpperCase?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprt37iy8d.scala:32:34 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mif\e[0m(isAllUpper && !key.isUppercase)\
    \ {\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue isUppercase is not a member of String - did you mean key.toUpperCase?\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      def check(m : Map[String,String])\
    \ : Boolean = {\n        m match {\n          case scala.collection.mutable.Map[String,String]()\
    \ =>\n            true\n          case scala.collection.mutable.Map(key,value)\
    \ =>\n            key.forall(_.isLetter) || value.forall(_.isLetter)\n       \
    \   case _ =>\n            false\n        }\n      }\n      if (check(dict))\n\
    \        true\n      else\n        false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E127] Syntax Error: /tmp/tmpr117zonx.scala:21:15 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m          \e[33mcase\e[0m scala.collection.mutable.Map[String,String]()\
    \ =>\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mscala.collection.mutable.Map[\e[35mString\e[0m, \e[35mString\e\
    [0m] cannot be used as an extractor in a pattern because it lacks an unapply or\
    \ unapplySeq method\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E127] Syntax Error: /tmp/tmpr117zonx.scala:23:15\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m          \e[33mcase\e\
    [0m scala.collection.mutable.Map(key,value) =>\n\e[31m\e[31m   |\e[0m        \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mscala.collection.mutable.Map\
    \ cannot be used as an extractor in a pattern because it lacks an unapply or unapplySeq\
    \ method\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr117zonx.scala:24:12\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            key.forall(_.isLetter)\
    \ || value.forall(_.isLetter)\n\e[31m\e[31m   |\e[0m            ^^^\e[0m\n\e[31m\
    \   |\e[0m            Not found: key\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010190
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return true\n\
    \        val lower = dict.toList.map(x => x._1.toLowerCase).toList\n        val\
    \ upper = dict.toList.map(x => x._1.toUpperCase).toList\n        return (lower\
    \ == upper) || (lower == upper.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7qdoaoy0.scala:25)\n\tat Problem.main(tmp7qdoaoy0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010193
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.isEmpty || (dict.keys.toSet.toList.sorted\
    \ == dict.keys.toList.sorted)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm6_348fb.scala:23)\n\tat Problem.main(tmpm6_348fb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      val keys = dict.getKeys\n      if\
    \ (keys.length == 0) false\n      else {\n        for (k <- keys) {\n        \
    \  if (k.isInLowerCase) {\n            if (!k.isInUpperCase && !keySet(k.charAt(0)).contains(\"\
    _\"))\n              return false\n          }\n          else {\n           \
    \ if (!k.isInLowerCase && !keySet(k.charAt(0)).contains(\"_\"))\n            \
    \  return false\n          }\n        }\n      }\n      true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_w5byvme.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33mval\e[0m \e[36mkeys\e[0m = dict.getKeys\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m value\
    \ getKeys is not a member of collection.mutable.Map[String, String]\n1 error found\n"
  stdout: ''
  timestamp: 1660010192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val dict1 = dict.toSeq.toMap\n\
    \        val keys1 = dict.keySet.toSeq\n        val keys2 = keys1.map(x=>x.toLowerCase)\n\
    \        val keys3 = keys1.map(x=>x.toUpperCase)\n        val map1ToCheck = keys1.toMap\n\
    \        val map2ToCheck = keys2.toMap\n        val map3ToCheck = keys3.toMap\n\
    \        \n        if(map1ToCheck.size == keys1.size) {\n            map1ToCheck\
    \ == dict1\n        } else {\n            false\n        }\n        \n       \
    \ if(map2ToCheck.size == keys2.size) {\n            map2ToCheck == dict1\n   \
    \     } else {\n            false\n        }\n        \n        if(map3ToCheck.size\
    \ == keys3.size) {\n            map3ToCheck == dict1\n        } else {\n     \
    \       false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkjlvaqsj.scala:23:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmap1ToCheck\e[0m = keys1.toMap\n\
    \e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e\
    [0m                                     Cannot prove that String <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                     where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \       V is a type variable\n\e[31m   |\e[0m                                \
    \     .\n\e[31m\e[31m-- Error: /tmp/tmpkjlvaqsj.scala:24:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmap2ToCheck\e[0m = keys2.toMap\n\
    \e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e\
    [0m                                     Cannot prove that String <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                     where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \       V is a type variable\n\e[31m   |\e[0m                                \
    \     .\n\e[31m\e[31m-- Error: /tmp/tmpkjlvaqsj.scala:25:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmap3ToCheck\e[0m = keys3.toMap\n\
    \e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e\
    [0m                                     Cannot prove that String <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                     where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \       V is a type variable\n\e[31m   |\e[0m                                \
    \     .\n3 errors found\n"
  stdout: ''
  timestamp: 1660010194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.size == 0) return false\n\
    \        val lower = collection.mutable.Set[String]()\n        val upper = collection.mutable.Set[String]()\n\
    \        for(x <- dict.keySet) \n            if(x.isLower) lower += x\n      \
    \      else if(x.isUpper) upper += x\n        else return false\n        lower.size\
    \ == upper.size && lower.size == dict.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp25qs1rjr.scala:25:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33melse\e[0m \e[33mreturn\e[0m \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        end of statement\
    \ expected but 'else' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp25qs1rjr.scala:23:17\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(x.isLower)\
    \ lower += x\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value isLower is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp25qs1rjr.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(x.isUpper) upper\
    \ += x\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value isUpper is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660010194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) true\n      \
    \  else (for (k <- dict.keySet) yield {\n            ( (k.toUpperCase == k.toLowerCase\
    \ || k.startsWith(\"_\"))\n            && (dict.get(k) != null && (dict.get(k).getClass\
    \ == \"String\" \n                    || dict.get(k).getClass == \"java.lang.Long\"\
    )))})\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpuoyzbdqm.scala:22:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            && (dict.get(k) != \e[31mnull\e[0m && (dict.get(k).getClass\
    \ == \e[31m\"String\"\e[0m \n\e[31m\e[31m   |\e[0m                           \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of\
    \ types Class[? <: Option[String]] and String cannot be compared with == or !=\n\
    \e[31m\e[31m-- Error: /tmp/tmpuoyzbdqm.scala:23:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    || dict.get(k).getClass == \e[31m\"\
    java.lang.Long\"\e[0m)))})\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Class[? <: Option[String]] and String cannot\
    \ be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660010195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = (dict - \"Name\" - \"\
    Age\" - \"City\").map(_._1)\n        (keys.contains(\"name\") && (keys.contains(\"\
    age\") && (keys.contains(\"city\"))))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9n1d7oca.scala:20:14 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        (keys.contains(\e[31m\"name\"\e[0m) && (keys.contains(\e\
    [31m\"age\"\e[0m) && (keys.contains(\e[31m\"city\"\e[0m))))\n\e[31m\e[31m   |\e\
    [0m         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue contains is not a member\
    \ of scala.collection.mutable.Iterable[String]\n1 error found\n"
  stdout: ''
  timestamp: 1660010194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val lowerCase = mutable.Set(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val upperCase = mutable.Set(\"A\", \"B\", \"\
    C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"\
    N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"\
    Y\", \"Z\")\n        val keys = dict.keys\n        val keysLower = keys.map(_.toLowerCase)\n\
    \        val keysUpper = keys.map(_.toUpperCase)\n        return keysLower.forall(lowerCase)\
    \ && keysUpper.forall(upperCase)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6nkywzim.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlowerCase\e[0m = mutable.Set(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \e[31m\"k\"\e[0m, \e[31m\"l\"\e[0m, \e[31m\"m\"\e[0m, \e\
    [31m\"n\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"p\"\e[0m, \e[31m\"q\"\e[0m, \e[31m\"\
    r\"\e[0m, \e[31m\"s\"\e[0m, \e[31m\"t\"\e[0m, \e[31m\"u\"\e[0m, \e[31m\"v\"\e\
    [0m, \e[31m\"w\"\e[0m, \e[31m\"x\"\e[0m, \e[31m\"y\"\e[0m, \e[31m\"z\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6nkywzim.scala:20:24 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mupperCase\e[0m = mutable.Set(\e\
    [31m\"A\"\e[0m, \e[31m\"B\"\e[0m, \e[31m\"C\"\e[0m, \e[31m\"D\"\e[0m, \e[31m\"\
    E\"\e[0m, \e[31m\"F\"\e[0m, \e[31m\"G\"\e[0m, \e[31m\"H\"\e[0m, \e[31m\"I\"\e\
    [0m, \e[31m\"J\"\e[0m, \e[31m\"K\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"M\"\e[0m, \e\
    [31m\"N\"\e[0m, \e[31m\"O\"\e[0m, \e[31m\"P\"\e[0m, \e[31m\"Q\"\e[0m, \e[31m\"\
    R\"\e[0m, \e[31m\"S\"\e[0m, \e[31m\"T\"\e[0m, \e[31m\"U\"\e[0m, \e[31m\"V\"\e\
    [0m, \e[31m\"W\"\e[0m, \e[31m\"X\"\e[0m, \e[31m\"Y\"\e[0m, \e[31m\"Z\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val lower = dict.keys.toSet.toList.filter(_.toString.toLowerCase.equals(_))\n\
    \        val upper = dict.keys.toSet.toList.filter(_.toString.toUpperCase.equals(_))\n\
    \        lower.isEmpty || upper.isEmpty || lower.forall(_.toString.toLowerCase.equals(upper))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp1vb0r7jr.scala:19:50 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlower\e[0m = dict.keys.toSet.toList.filter(_.toString.toLowerCase.equals(_))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp1vb0r7jr.scala:20:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mupper\e[0m = dict.keys.toSet.toList.filter(_.toString.toUpperCase.equals(_))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660010192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var isUppercase = false\n     \
    \   var isLowercase = false\n        for (i <- 0 until dict.length){\n       \
    \     if (dict(i).asInstanceOf[String].toUpperCase == dict(i).asInstanceOf[String]){\n\
    \                isUppercase = true\n            } else if (dict(i).asInstanceOf[String].toLowerCase\
    \ == dict(i).asInstanceOf[String]){\n                isLowercase = true\n    \
    \        }\n        }\n        return !isUppercase && !isLowercase\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpve0yrpfz.scala:21:31 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until dict.length){\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m  value length is not a member of collection.mutable.Map[String, String]\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpve0yrpfz.scala:22:21 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (dict(i).asInstanceOf[\e[35mString\e\
    [0m].toUpperCase == dict(i).asInstanceOf[\e[35mString\e[0m]){\n\e[31m\e[31m  \
    \ |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                     Found:\
    \    (i : Int)\n\e[31m   |\e[0m                     Required: String\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpve0yrpfz.scala:22:65 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (dict(i).asInstanceOf[\e[35mString\e\
    [0m].toUpperCase == dict(i).asInstanceOf[\e[35mString\e[0m]){\n\e[31m\e[31m  \
    \ |\e[0m                                                                 ^\e[0m\n\
    \e[31m   |\e[0m                                                     Found:   \
    \ (i : Int)\n\e[31m   |\e[0m                                                 \
    \    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpve0yrpfz.scala:24:28\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            } \e[33melse\e[0m\
    \ \e[33mif\e[0m (dict(i).asInstanceOf[String].toLowerCase == dict(i).asInstanceOf[String]){\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Found:    (i : Int)\n\e[31m   |\e[0m                 \
    \           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpve0yrpfz.scala:24:72 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (dict(i).asInstanceOf[String].toLowerCase\
    \ == dict"
  stdout: ''
  timestamp: 1660010197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.values.exists(_.isInstanceOf[String])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkw2m2ivc.scala:23)\n\tat Problem.main(tmpkw2m2ivc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010201
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        for (s <- dict.keySet) {\n    \
    \        if ( s.toLowerCase() == s ) return true\n            if ( s.toUpperCase()\
    \ == s ) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzz7v6xbo.scala:27)\n\tat Problem.main(tmpzz7v6xbo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // If we have an empty map we return\
    \ false\n        if(dict.isEmpty)\n            return false\n        \n      \
    \  val mapVals = dict.values.toList\n        val keys = dict.keys.toList\n   \
    \     \n        val lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeys\
    \ = keys.filter(_.isUpper)\n        \n        val lowerCaseDict = mapVals.filter(_.toString.toLower.equals(mapVals.head.toString))\n\
    \        val upperCaseDict = mapVals.filter(_.toString.toUpper.equals(mapVals.head.toString))\n\
    \        \n        // If we have a lowercase dictionary we return true\n     \
    \   if(lowerCaseDict.nonEmpty)\n            return true\n        \n        //\
    \ If we have a uppercase dictionary we return false\n        if(upperCaseDict.nonEmpty)\n\
    \            return false\n        \n        // If all keys match we return true\n\
    \        if(lowerCaseKeys.size == keys.size)\n            return true\n      \
    \  \n        // If all keys do not match we return false\n        if(lowerCaseKeys.size\
    \ == 0)\n            return false\n        \n        // If we go through all the\
    \ keys without finding a match we return false\n        if(upperCaseKeys.size\
    \ == keys.size)\n            return false\n        \n        // If we go through\
    \ all the keys without finding a match we return false\n        if(lowerCaseKeys.size\
    \ == 0 && upperCaseKeys.size == 0)\n            return false\n        \n     \
    \   // If we do not get through all the keys in the map we return false\n    \
    \    return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp00ly5thy.scala:26:42 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseKeys\e[0m = keys.filter(_.isLower)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value isLower is not a member of\
    \ String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp00ly5thy.scala:27:42\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mupperCaseKeys\e[0m = keys.filter(_.isUpper)\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     value isUpper is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp00ly5thy.scala:29:54 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e[0m = mapVals.filter(_.toString.toLower.equals(mapVals.head.toString))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value toLower is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp00ly5thy.scala:30:54\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mupperCaseDict\e[0m = mapVals.filter(_.toString.toUpper.equals(mapVals.head.toString))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value toUpper is not a member\
    \ of String\n4 errors found\n"
  stdout: ''
  timestamp: 1660010200
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys.toSet\n  \
    \      var flag : Boolean = false\n        var isValid : Boolean = false\n   \
    \     val upper = keys.map(x => x.toUpperCase()).toSet\n        val lower = keys.map(x\
    \ => x.toLowerCase()).toSet\n        if (upper.size === keys.size && lower.size\
    \ === keys.size) {\n            flag = true\n        } else {\n            isValid\
    \ = true\n        }\n        return flag && isValid\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphoi7cai3.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mif\e[0m (upper.size === keys.size && lower.size\
    \ === keys.size) {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value === is not a member of Int - did you mean Int.==?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010200
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.getKeys\n     \
    \   if (!keys.isEmpty) {\n            val upper = keys.map(_.toUpperCase)\n  \
    \          val lower = keys.map(_.toLowerCase)\n            val isStrUpper = upper.forall(identity)\n\
    \            val isStrLower = lower.forall(identity)\n            if (isStrUpper\
    \ && isStrLower)\n                true\n            else\n                false\n\
    \        }\n        else\n            false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8bpeswfk.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mkeys\e[0m = dict.getKeys\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m value\
    \ getKeys is not a member of collection.mutable.Map[String, String]\n1 error found\n"
  stdout: ''
  timestamp: 1660010201
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val mapKeys = dict.keys\n     \
    \   val mapValues = dict.values.toList\n        if (!mapKeys.isEmpty && !mapKeys.forall(_.isInstanceOf[String])\
    \ && mapValues.forall(_.isInstanceOf[String])) {\n          true\n        } else\
    \ {\n          false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq8xeank5.scala:28)\n\tat Problem.main(tmpq8xeank5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var upperCase = True\n        var\
    \ lowerCase = True\n        var checking = True\n        val mapSize = dict.size\n\
    \        \n        for((key, value) <- dict){\n            if(!key.equals(value.trim())){\n\
    \                checking = False\n            }\n            if(!checking){\n\
    \                return false\n            }\n        }\n        \n        for((key,\
    \ value) <- dict){\n            if(!key.equals(value.trim())){\n             \
    \   upperCase = False\n            }\n            if(!checking){\n           \
    \     return false\n            }\n        }\n        \n        for((key, value)\
    \ <- dict){\n            if(!key.equals(value.trim())){\n                lowerCase\
    \ = False\n            }\n            if(!checking){\n                return false\n\
    \            }\n        }\n        \n        return lowerCase && upperCase\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqndn6h6b.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mupperCase\e[0m = True\n\e\
    [31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0m        \
    \                Not found: True\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqndn6h6b.scala:20:24 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mvar\e[0m \e[36mlowerCase\e[0m = True\n\e[31m\e[31m   |\e[0m \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: True\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqndn6h6b.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e\
    [36mchecking\e[0m = True\n\e[31m\e[31m   |\e[0m                       ^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: True\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqndn6h6b.scala:26:27 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                checking = False\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \       Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqndn6h6b.scala:35:28 ------------------------\e[0m\e[0m\n\e[31m35 |\e\
    [0m                upperCase = False\n\e[31m\e[31m   |\e[0m                  \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: False\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqndn6h6b.scala:44:28\
    \ ------------------------\e[0m\e[0m\n\e[31m44 |\e[0m                lowerCase\
    \ = False\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: False\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanatio"
  stdout: ''
  timestamp: 1660010199
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.forall { case (k, v) => k.isEmpty\
    \ || k.toLowerCase == k.toUpperCase } \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnrjgq_tg.scala:22)\n\tat Problem.main(tmpnrjgq_tg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict match {\n            case\
    \ Map() => false\n            case m => {\n                val keys = m.keySet()\n\
    \                keys match {\n                    case Set() => false\n     \
    \               case _ if keys.size == 2 => {\n                        val a =\
    \ 0\n                        val b = m.size\n                        a < b match\
    \ {\n                            case true => keys.toSet.intersect(Set(\"a\",\
    \ \"b\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\"\
    , \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\"\
    , \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")).size == 0\n              \
    \              case false => false\n                        }\n              \
    \      }\n                    case _ if keys.size == 1 => {\n                \
    \        val a = 0\n                        val b = m.size\n                 \
    \       a < b match {\n                            case true => keys.toSet.intersect(Set(\"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"\
    L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"\
    W\", \"X\", \"Y\", \"Z\")).size == 0\n                            case false =>\
    \ false\n                        }\n                    }\n                  \
    \  case _ if keys.size == 0 => {\n                        val a = 0\n        \
    \                val b = m.size\n                        a < b match {\n     \
    \                       case true => false\n                            case false\
    \ => true\n                        }\n                    }\n                \
    \    case _ => false\n                }\n            }\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E127] Syntax Error: /tmp/tmpgmbfmqjp.scala:20:17 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m Map() => \e[31mfalse\e[0m\n\
    \e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0mcollection.mutable.Map\
    \ cannot be used as an extractor in a pattern because it lacks an unapply or unapplySeq\
    \ method\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpgmbfmqjp.scala:22:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mkeys\e[0m = m.keySet()\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmissing argument for parameter elem of \e[33mmethod\e[0m \e[35mapply\e[0m in\
    \ \e[33mtrait\e[0m \e[35mSetOps\e[0m: (elem: String): Boolean\n\e[31m\e[31m--\
    \ [E127] Syntax Error: /tmp/tmpgmbfmqjp.scala:24:25 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    \e[33mcase\e[0m Set() => \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e[31m   |\e[0mcollection.mutable.Set\
    \ cannot be used as an extractor in a pattern because it lacks an unapply or unapplySeq\
    \ method\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys\n        if(keys.length\
    \ == 0) false\n        val first = keys(0)\n        val firstString = first.getOrElse(\"\
    \")\n        val firstStringUpper = firstString.toUpperCase\n        val firstStringLower\
    \ = firstString.toLowerCase\n        val rest = keys.tail\n        val restString\
    \ = rest.getOrElse(\"\")\n        val restStringUpper = restString.toUpperCase\n\
    \        val restStringLower = restString.toLowerCase\n        if(firstString\
    \ == firstStringUpper && restString.toLowerCase == restStringLower)\n        \
    \    checkDictCase(rest)\n        else if(firstString == firstStringLower && restString.toUpper\
    \ == restStringUpper)\n            checkDictCase(rest)\n        else\n       \
    \     false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplf1zv1_s.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(keys.length == \e[31m0\e[0m) \e\
    [31mfalse\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m           value length is not a member of Iterable[String]\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmplf1zv1_s.scala:21:20 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfirst\e[0m = keys(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m    \
    \                \e[33mvalue\e[0m \e[35mkeys\e[0m does not take parameters\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplf1zv1_s.scala:26:30\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mrestString\e[0m = rest.getOrElse(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \     value getOrElse is not a member of Iterable[String]\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmplf1zv1_s.scala:30:26 --------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m            checkDictCase(rest)\n\e[31m\e[31m   |\e[0m   \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                        Found:\
    \    (rest : Iterable[String])\n\e[31m   |\e[0m                        Required:\
    \ collection.mutable.Map[String, String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmplf1zv1_s.scala:32:26 --------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m            checkDictCase(rest)\n\e[31m\e[31m   |\e[0m   \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                        Found:\
    \    (rest : Iterable[String])\n\e[31m   |\e[0m                        Required:\
    \ collection.mutable.Map[String, String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- [E129]\
    \ Potential Issue Warning: /tmp/tmplf1zv1_s.scala:20:29 ----------------\e[0m\e\
    [0m\n\e[33m20 |\e[0m        \e[33mif\e[0m(keys.length == \e"
  stdout: ''
  timestamp: 1660010204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val lcaseKeys = dict.keySet.filter(_.toLowerCase\
    \ contains _)\n        val ucaseKeys = dict.keySet.filter(_.toUpperCase contains\
    \ _)\n        lcaseKeys.forall(_.length() > 0)\n            && ucaseKeys.forall(_.length()\
    \ > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpwotkl6i1.scala:19:43 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlcaseKeys\e[0m = dict.keySet.filter(_.toLowerCase\
    \ contains _)\n\e[31m\e[31m   |\e[0m                                         \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \     Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmpwotkl6i1.scala:20:43 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mucaseKeys\e[0m = dict.keySet.filter(_.toUpperCase\
    \ contains _)\n\e[31m\e[31m   |\e[0m                                         \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \     Wrong number of parameters, expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Use a Set, which will make all\
    \ keys unique, so we only have to check \n        // for membership once.\n  \
    \      val keys = dict.keys\n        val setKeys = keys.toSet\n        if (setKeys.size\
    \ == keys.size)\n            // all keys are strings\n            true\n     \
    \   else\n            // all keys are strings in lower case\n            setKeys.forall(_.toString.toLowerCase.equals(_))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmps83uj0en.scala:28:27 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            setKeys.forall(_.toString.toLowerCase.equals(_))\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Wrong number of parameters, expected:\
    \ 1\n1 error found\n"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var isAllLowercase = false, isAllUppercase\
    \ = false\n        dict.foreach {\n            case (k, v) =>\n              \
    \  if ((k.toString.toLowerCase).toLowerCase == k.toString) {\n               \
    \     isAllLowercase = true\n                }\n                else if ((k.toString.toUpperCase).toUpperCase\
    \ == k.toString) {\n                    isAllUppercase = true\n              \
    \  }\n        }\n        return isAllLowercase && isAllUppercase\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp29oblkml.scala:19:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36misAllLowercase\e[0m = \e\
    [31mfalse\e[0m, isAllUppercase = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m     \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \         end of statement expected but ',' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp29oblkml.scala:26:20 ------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                    isAllUppercase = \e[31mtrue\e[0m\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: isAllUppercase\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp29oblkml.scala:29:33 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m        \e[33mreturn\e[0m isAllLowercase && isAllUppercase\n\e[31m\e[31m  \
    \ |\e[0m                                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                 Not found: isAllUppercase\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010200
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var allUpper : Boolean = true\n\
    \        var allLower : Boolean = true\n        for (key <- dict.keys) {\n   \
    \         val value = dict.get(key)\n            if (value.equalsIgnoreCase(key.asInstanceOf[String]))\
    \ {\n                allUpper = false\n            } else {\n                allLower\
    \ = false\n            }\n        }\n        allLower && !allUpper\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe73rep3z.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (value.equalsIgnoreCase(key.asInstanceOf[\e\
    [35mString\e[0m])) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value equalsIgnoreCase is not a member of\
    \ Option[String]\n1 error found\n"
  stdout: ''
  timestamp: 1660010203
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   var lower = false\n        var upper = false\n        var isStringLowerCase\
    \ : Boolean = false\n        var isStringUpperCase : Boolean = false\n\n     \
    \   for ( (k, v) <- dict ) \n            if ((k.toString.toLowerCase == k.toString.toUpperCase)\n\
    \                && ((lower) || (upper))\n                && ((isStringLowerCase)\
    \ || (isStringUpperCase))) {\n                lower = upper\n                isStringLowerCase\
    \ = false\n                isStringUpperCase = false\n            }\n        \
    \    else {\n                if (k.toString.toLowerCase == k.toString) {\n   \
    \                 lower = true\n                    isStringLowerCase = true\n\
    \                }\n                if (k.toString.toUpperCase == k.toString)\
    \ {\n                    upper = true\n                    isStringUpperCase =\
    \ true\n                }\n            }\n\n        return ! ((lower && !isStringLowerCase)\n\
    \            || (upper && !isStringUpperCase)\n            || (lower && isStringLowerCase)\n\
    \            || (upper && isStringUpperCase))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6o8i91pp.scala:50)\n\tat Problem.main(tmp6o8i91pp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.values.toSet\n\
    \        val nokeys : Set[String] = Set(\"\")\n        if(keys.isEmpty) return\
    \ true\n        if(keys.isEmpty || keys.size == 1 || (keys.size > 1 && !keys.toSet.isEmpty\
    \ && keys.toSet == nokeys)) return true\n        for(x <- keys) if(!x.isUpper\
    \ && !x.isLower) false else true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpowys5hnd.scala:23:29 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m(x <- keys) \e[33mif\e[0m(!x.isUpper\
    \ && !x.isLower) \e[31mfalse\e[0m \e[33melse\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                  value isUpper is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660010203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var flag = false \n        if (dict.isEmpty)\
    \ {\n            return true \n        }\n        for (key <- dict.keys) {\n \
    \           val value = dict.get(key)\n            val low = key.toLowerCase()\n\
    \            val up = key.toUpperCase()\n            if (value == low || value\
    \ == up) {\n                flag = true\n                break\n            }\n\
    \        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpih0v42aa.scala:27:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (value == low || value == up)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues\
    \ of types Option[String] and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpih0v42aa.scala:27:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (value == low || value == up)\
    \ {\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mValues of types Option[String] and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpih0v42aa.scala:29:16\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys\n        val\
    \ isLowercase = keys.forall(_.isLowercase)\n        val isUppercase = keys.forall(_.isUppercase)\n\
    \        if (keys.length == 0 || !isLowercase && !isUppercase) return false\n\
    \        else return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9shffoba.scala:20:40 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLowercase\e[0m = keys.forall(_.isLowercase)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue isLowercase is not a member of String - did you mean _$1.toLowerCase?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9shffoba.scala:21:40 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misUppercase\e[0m = keys.forall(_.isUppercase)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue isUppercase is not a member of String - did you mean _$2.toUpperCase?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9shffoba.scala:22:17 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m ||\
    \ !isLowercase && !isUppercase) \e[33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value length\
    \ is not a member of Iterable[String]\n3 errors found\n"
  stdout: ''
  timestamp: 1660010206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.size == 0){\n         \
    \   return false\n        }\n        val lowerMap : Map[String,String] = dict.toSeq.map(tuple\
    \ => (tuple._1.toLowerCase -> tuple._2)).toMap\n        val upperMap : Map[String,String]\
    \ = dict.toSeq.map(tuple => (tuple._1.toUpperCase -> tuple._2)).toMap\n      \
    \  val diffMap : Map[String,String] = upperMap - lowerMap\n        val lowerKeys\
    \ = lowerMap.keys\n        val upperKeys = upperMap.keys\n        val diffKeys\
    \ = diffMap.keys\n        val sameKeys = lowerKeys.intersect(upperKeys)\n    \
    \    val differKeys = lowerKeys.diff(upperKeys)\n        val hasSameKeys = sameKeys.size\
    \ == lowerKeys.size\n        val hasDifferKeys = differKeys.size == lowerKeys.size\n\
    \        val isDict = diffMap.size == 0\n        val isNotDict = diffMap.size\
    \ > 0\n        if(hasSameKeys && hasDifferKeys && isDict && isNotDict){\n    \
    \        return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp32o1rfxj.scala:22:44\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlowerMap\e\
    [0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mString\e[0m] = dict.toSeq.map(\e\
    [36mtuple\e[0m => (tuple._1.toLowerCase -> tuple._2)).toMap\n\e[31m\e[31m   |\e\
    [0m                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    Map[String, String]\n\e\
    [31m   |\e[0m                        Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp32o1rfxj.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mupperMap\e[0m : \e[35mMap\e\
    [0m[\e[35mString\e[0m,\e[35mString\e[0m] = dict.toSeq.map(\e[36mtuple\e[0m =>\
    \ (tuple._1.toUpperCase -> tuple._2)).toMap\n\e[31m\e[31m   |\e[0m           \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    Map[String, String]\n\e\
    [31m   |\e[0m                        Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[String, String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp32o1rfxj.scala:24:54 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdiffMap\e[0m : \e[35mMap\e\
    [0m[\e[35mString\e[0m,\e[35mString\e[0m] = upperMap - lowerMap\n\e[31m\e[31m \
    \  |\e[0m                                                      ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m           Found:    (lowerMap : collection.mutable.Map[String,\
    \ String])\n\e[31m   |\e[0m           Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp32o1rfxj.scala:28:33 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mv"
  stdout: ''
  timestamp: 1660010206
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys.toSet\n  \
    \      val upperCase = keys.toSet.toList\n        val lowerCase = keys.toList.map(_.toLowerCase).toList\n\
    \        if (keys.size == 0)\n          true\n        else if (upperCase == lowerCase)\n\
    \          true\n        else\n          false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwri864u1.scala:32)\n\tat Problem.main(tmpwri864u1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict == Map.empty)\n       \
    \     return false\n        val keys = dict.keys\n        val len = keys.map(_.hashCode)\n\
    \        val upperCaseMap = new mutable.HashMap[String,String]()\n        for(key\
    \ <- keys)\n            if(key.toUpperCase() in dict.keys)\n                upperCaseMap\
    \ += key -> key.toUpperCase()\n        val lowerCaseMap = new mutable.HashMap[String,String]()\n\
    \        for(key <- keys)\n            if(key.toLowerCase() in dict.keys)\n  \
    \              lowerCaseMap += key -> key.toLowerCase()\n        if(lowerCaseMap.size\
    \ != upperCaseMap.size)\n            return false\n        for(key <- lowerCaseMap)\n\
    \            if(upperCaseMap.get(key) != key)\n                return false\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpplunvw2g.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mupperCaseMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpplunvw2g.scala:25:33 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            \e[33mif\e[0m(key.toUpperCase() in dict.keys)\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               value in is not a member of String\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpplunvw2g.scala:27:31 ------------------------\e[0m\e[0m\n\
    \e[31m27 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseMap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mString\e[0m,\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpplunvw2g.scala:29:33 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m            \e[33mif\e[0m(key.toLowerCase() in dict.keys)\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value\
    \ in is not a member of String\n4 errors found\n"
  stdout: ''
  timestamp: 1660010205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict match {\n            case\
    \ Map[String, String]() =>\n                return true\n            case Map[String,String](kv\
    \ :+ v) => \n                if(kv.forall(kv => kv.mkString().toLowerCase() ==\
    \ kv.mkString().toLowerCase()))\n                    return true\n           \
    \     else\n                    return false\n            case _ => return false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E127] Syntax Error: /tmp/tmp43fa1u9t.scala:20:17 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m Map[String, String]() =>\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcollection.mutable.Map[\e\
    [35mString\e[0m, \e[35mString\e[0m] cannot be used as an extractor in a pattern\
    \ because it lacks an unapply or unapplySeq method\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E127] Syntax Error: /tmp/tmp43fa1u9t.scala:22:17 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m Map[String,String](kv :+\
    \ v) => \n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcollection.mutable.Map[\e[35mString\e[0m, \e[35mString\e[0m] cannot\
    \ be used as an extractor in a pattern because it lacks an unapply or unapplySeq\
    \ method\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp43fa1u9t.scala:23:19\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e\
    [0m(kv.forall(\e[36mkv\e[0m => kv.mkString().toLowerCase() == kv.mkString().toLowerCase()))\n\
    \e[31m\e[31m   |\e[0m                   ^^\e[0m\n\e[31m   |\e[0m             \
    \      Not found: kv\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (!dict.isEmpty) {\n        \
    \    var flag = true;\n            val keys = dict.keys.toList;\n            var\
    \ key : String = keys.get(0);\n            var keyUp : String = keys.get(1);\n\
    \            val keyList = keyUp.toList;\n            keyUp.foreach(value => {\n\
    \                if (keyList.isEmpty || !keyList.contains(key)){\n           \
    \         flag = false;\n                }\n                else {\n         \
    \           key = key\n                    keyUp = value\n                }\n\
    \            })\n            return flag\n        }\n        return false\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpadhcd241.scala:22:36 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mvar\e[0m \e[36mkey\e[0m : \e[35mString\e\
    [0m = keys.get(\e[31m0\e[0m);\n\e[31m\e[31m   |\e[0m                         \
    \      ^^^^^^^^\e[0m\n\e[31m   |\e[0m      value get is not a member of List[String]\
    \ - did you mean keys.seq?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpadhcd241.scala:23:38\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mvar\e[0m\
    \ \e[36mkeyUp\e[0m : \e[35mString\e[0m = keys.get(\e[31m1\e[0m);\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ get is not a member of List[String], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpadhcd241.scala:31:28\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m                    keyUp = value\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (value : Char)\n\e[31m   |\e[0m        \
    \                    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict match {\n            case\
    \ Map()  => true\n            case m if m.keySet.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase).isEmpty  => true\n            case m if m.keySet.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase).isEmpty  => true\n            case _  => false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E127] Syntax Error: /tmp/tmpcl4zw8r1.scala:20:17 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m Map()  => \e[31mtrue\e[0m\n\
    \e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0mcollection.mutable.Map\
    \ cannot be used as an extractor in a pattern because it lacks an unapply or unapplySeq\
    \ method\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpcl4zw8r1.scala:21:38\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e\
    [0m m \e[33mif\e[0m m.keySet.filter(_.toString.toLowerCase == _.toString.toLowerCase).isEmpty\
    \  => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                                 \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmpcl4zw8r1.scala:22:38 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m m \e[33mif\e[0m m.keySet.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase).isEmpty  => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n3 errors found\n"
  stdout: ''
  timestamp: 1660010208
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var hasStringKey : Boolean = false\n\
    \        var hasStringKeyInUpperCase: Boolean = false\n        var hasStringKeyInLowerCase:\
    \ Boolean = false\n        for (key <- dict.keySet) {\n            val value =\
    \ dict.get(key)\n            if (key.toString.toLowerCase.equals(key.toString))\
    \ {\n                hasStringKey = true\n                hasStringKeyInLowerCase\
    \ = true\n            } else if (key.toString.toUpperCase.equals(key.toString))\
    \ {\n                hasStringKeyInUpperCase = true\n                hasStringKeyInLowerCase\
    \ = true\n            } else {\n                return false\n            }\n\
    \        }\n        return hasStringKey && hasStringKeyInUpperCase && hasStringKeyInLowerCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wg5pyk0.scala:37)\n\tat Problem.main(tmp0wg5pyk0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty)\n            return\
    \ true\n        else {\n            val keys = dict.values.toSet\n           \
    \ return keys.toSet == Set(keys.map(_.toLowerCase).map(_.toString), keys.map(_.toUpperCase).map(_.toString))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptz50s950.scala:23:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mreturn\e[0m keys.toSet == Set(keys.map(_.toLowerCase).map(_.toString),\
    \ keys.map(_.toUpperCase).map(_.toString))\n\e[31m\e[31m   |\e[0m            \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Set[String] and scala.collection.mutable.Set[Set[String]]\
    \ cannot be compared with == or !=.\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m    CanEqual.canEqualSet[\e[35mT\e[0m, \e[35mU\e[0m](/* missing\
    \ */summon[CanEqual[T, U]])\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values\
    \ were found that match type CanEqual[T, U].\n1 error found\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val sortedKeys = dict.keys.sorted\n\
    \        if (sortedKeys.isEmpty) {\n            false\n        } else {\n    \
    \        val lower = sortedKeys.map {x => x.toLowerCase}.forall(x => dict(x) !=\
    \ x.toLowerCase)\n            val upper = sortedKeys.map {x => x.toUpperCase}.forall(x\
    \ => dict(x) != x.toUpperCase)\n            lower && upper\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx93exb3b.scala:19:35 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msortedKeys\e[0m = dict.keys.sorted\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                        value sorted is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty) false \n     \
    \   else (dict.values.toSet.isEmpty && !dict.values.toSet.contains(\"\") && !dict.values.toSet.contains(\"\
    \ \") && (dict.keys.toSet.toSeq.map(_.toLowerCase).filter(_.isLetter).forall(_.isLowerOrEqualTo(\"\
    a\") && (dict.keys.toSet.toSeq.map(_.toLowerCase).filter(_.isLetter).forall(_.isUpperOrEqualTo(\"\
    A\"))))))\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmsemex6j.scala:20:165 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m (dict.values.toSet.isEmpty &&\
    \ !dict.values.toSet.contains(\e[31m\"\"\e[0m) && !dict.values.toSet.contains(\e\
    [31m\" \"\e[0m) && (dict.keys.toSet.toSeq.map(_.toLowerCase).filter(_.isLetter).forall(_.isLowerOrEqualTo(\e\
    [31m\"a\"\e[0m) && (dict.keys.toSet.toSeq.map(_.toLowerCase).filter(_.isLetter).forall(_.isUpperOrEqualTo(\e\
    [31m\"A\"\e[0m))))))\n\e[31m\e[31m   |\e[0m                                  \
    \                                                                            \
    \                                                     ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                value isLetter is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmsemex6j.scala:20:184 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m (dict.values.toSet.isEmpty &&\
    \ !dict.values.toSet.contains(\e[31m\"\"\e[0m) && !dict.values.toSet.contains(\e\
    [31m\" \"\e[0m) && (dict.keys.toSet.toSeq.map(_.toLowerCase).filter(_.isLetter).forall(_.isLowerOrEqualTo(\e\
    [31m\"a\"\e[0m) && (dict.keys.toSet.toSeq.map(_.toLowerCase).filter(_.isLetter).forall(_.isUpperOrEqualTo(\e\
    [31m\"A\"\e[0m))))))\n\e[31m\e[31m   |\e[0m                                  \
    \                                                                            \
    \                                                                        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value isLowerOrEqualTo is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val set = Set[String]()\n     \
    \   dict.foreach { case(k, v) => set += k; set += v; }\n        if (set.size ==\
    \ 0) return true\n        else (set.toSet == set.map(_.toLowerCase).orElse(set.map(_.toUpperCase)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpynozjibr.scala:22:50 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m (set.toSet == set.map(_.toLowerCase).orElse(set.map(_.toUpperCase)))\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    value orElse is not a member of scala.collection.mutable.Set[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // TODO: Implement me\n       \
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6858v_0t.scala:23)\n\tat Problem.main(tmp6858v_0t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val lowerCaseDict = mutable.Map[String,String]()\n\
    \        val upperCaseDict = mutable.Map[String,String]()\n\n        // For every\
    \ key in the map, check if the value is in lower case or not.\n        dict foreach\
    \ {\n        case (k,v) =>\n            if (v.equalsIgnoreCase(v.toLowerCase))\
    \ {\n                lowerCaseDict += k -> v\n            } else {\n         \
    \       upperCaseDict += k -> v\n            }\n        }\n\n        // If all\
    \ the values are in lower case, then return true.\n        if (lowerCaseDict.size\
    \ == dict.size) {\n            return true\n        }\n\n        // If all the\
    \ values are in upper case, then return false.\n        if (upperCaseDict.size\
    \ == dict.size) {\n            return false\n        }\n\n        // If all the\
    \ values are in neither case (lower or upper),\n        // then return false.\n\
    \        if (lowerCaseDict.size < dict.size || upperCaseDict.size < dict.size)\
    \ {\n            return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph64xyzcs.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e[0m = mutable.Map[\e\
    [35mString\e[0m,\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph64xyzcs.scala:20:28\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mupperCaseDict\e[0m = mutable.Map[\e[35mString\e[0m,\e[35mString\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmph64xyzcs.scala:44:8 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mif\e[0m (lowerCaseDict.size < dict.size\
    \ || upperCaseDict.size < dict.size) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e\
    [31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Boolean\n\
    \e[31m   |\e[0m        Maybe you are missing an else part for the conditional?\n\
    \e[31m45 |\e[0m            \e[33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m46 |\e[0m\
    \        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var result: Boolean = true\n  \
    \      var count = 0\n        val keySet = dict.keySet\n        if (keySet ==\
    \ null || keySet.isEmpty) \n            return false\n        for (key <- keySet)\
    \ {\n            val upperCase = key.toUpperCase \n            if (upperCase ==\
    \ key)\n                count++\n            else\n                result = false\n\
    \        }\n        if (count != keySet.size) \n            return false\n   \
    \     return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptrh7df61.scala:27:23 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                count++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31munindent\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val allStrings = dict.keySet\n\
    \        allStrings.toSet.intersect(allStrings.toSet).forall(str => str.isLower)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyl25p56_.scala:20:71 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        allStrings.toSet.intersect(allStrings.toSet).forall(\e\
    [36mstr\e[0m => str.isLower)\n\e[31m\e[31m   |\e[0m                          \
    \                                         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               value isLower is not a member of String\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keySet\n      \
    \  val sortedKeys = keys.toList\n        sortedKeys.sortWith(_ < _)\n        sortedKeys.forall(keys.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpekro6cpm.scala:26)\n\tat Problem.main(tmpekro6cpm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   val keys = dict.keys\n        if (keys.length != 2) false\n        val lowerCase\
    \ = keys.map(x => x.toLowerCase == x)\n        val upperCase = keys.map(x => x.toUpperCase\
    \ == x)\n        lowerCase.forall(identity) && upperCase.forall(identity)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo65ucy_j.scala:21:17 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (keys.length != \e[31m2\e[0m) \e\
    [31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value length is not a member of Iterable[String]\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpo65ucy_j.scala:19:26 ----------------\e\
    [0m\e[0m\n\e[33m19 |\e[0m        \e[33mif\e[0m (dict.isEmpty) \e[31mfalse\e[0m\n\
    \e[33m\e[33m   |\e[0m                          ^^^^^\e[0m\n\e[33m   |\e[0mA pure\
    \ expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpo65ucy_j.scala:21:30\
    \ ----------------\e[0m\e[0m\n\e[33m21 |\e[0m        \e[33mif\e[0m (keys.length\
    \ != \e[31m2\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                   \
    \           ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement\
    \ position; you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 warnings\
    \ found\n1 error found\n"
  stdout: ''
  timestamp: 1660010215
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else if (!dict.values.toList.toSeq.distinct.toList.filter(_.isInstanceOf[String]).isEmpty)\
    \ true\n        else false\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp21mdi3nb.scala:25)\n\tat Problem.main(tmp21mdi3nb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      def strToLower(str : String) : String\
    \ = {\n        str.head.toUpperCase + str.tail\n      }\n      def strToUpper(str\
    \ : String) : String = {\n        str.head.toLowerCase + str.tail\n      }\n \
    \     dict match {\n        case Nil => true\n        case _  => if (!dict.isEmpty)\
    \ {\n          dict.keySet foreach { key =>\n            val lowerCaseKey = strToLower(key)\n\
    \            val upperCaseKey = strToUpper(key)\n            if (!dict.get(lowerCaseKey).equals(dict.get(upperCaseKey)))\
    \ false\n          }\n        }\n        else false\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphknp_2ad.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        str.head.toUpperCase + str.tail\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value toUpperCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphknp_2ad.scala:23:17\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        str.head.toLowerCase\
    \ + str.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmphknp_2ad.scala:26:13 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mcase\e[0m Nil => \e[31mtrue\e[0m\n\e[31m\e[31m\
    \   |\e[0m             ^^^\e[0m\n\e[31m   |\e[0m        Found:    (Nil : => collection.immutable.Nil\xB2\
    .type)\n\e[31m   |\e[0m        Required: collection.mutable.Map[String, String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m        where:    Nil  is a getter in \e[33mpackage\
    \ object\e[0m \e[35mscala\e[0m\n\e[31m   |\e[0m                  Nil\xB2 is a\
    \ object in \e[33mpackage\e[0m \e[35mscala.collection.immutable\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m        pattern type is incompatible with expected type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphknp_2ad.scala:28:10\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m          dict.keySet foreach\
    \ { \e[36mkey\e[0m =>\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e[0m\
    \          Found:    Unit\n\e[31m   |\e[0m          Required: Boolean\n\e[31m29\
    \ |\e[0m            \e[33mval\e[0m \e[36mlowerCaseKey\e[0m = strToLower(key)\n\
    \e[31m30 |\e[0m            \e[33mval\e[0m \e[36mupperCaseKey\e[0m = strToUpper(key)\n\
    \e[31m31 |\e[0m            \e[33mif\e[0m (!dict.get(lowerCaseKey).equals(dict.get(upperCaseKey)))\
    \ \e[31mfalse\e[0m\n\e[31m32 |\e[0m          }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010217
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty) return false\n\
    \        for(x <- dict.values) {\n            if(x.isInstanceOf[String]) true\n\
    \            if(x.isInstanceOf[Long]) false\n        }\n        false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzwc90qgp.scala:27)\n\tat Problem.main(tmpzwc90qgp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010217
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty)\n            return\
    \ false\n        \n        val keysString = dict.keys.toList\n        val keysUpper\
    \ = keysString.filter(s => s.toUpperCase == s)\n        val keysLower = keysString.filter(s\
    \ => s.toLowerCase == s)\n        keysLower.toSet.size == keysString.length &&\
    \ keysUpper.toSet.size == keysString.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpazz5lyyv.scala:28)\n\tat Problem.main(tmpazz5lyyv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty) false\n      \
    \  val keys = dict.keys\n        val stringDict = keys.map { key => \n       \
    \     val lowerCase = key.toLowerCase \n            val upperCase = key.toUpperCase\
    \ \n            if(key === lowerCase) true \n            else if(key === upperCase)\
    \ true \n            else false\n        }\n        val stringMap = stringDict.toMap\n\
    \        return stringMap.isEmpty && keys.size == stringDict.size\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_j0hvl80.scala:24:19 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(key === lowerCase) \e[31mtrue\e\
    [0m \n\e[31m\e[31m   |\e[0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \        value === is not a member of String - did you mean key.==?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_j0hvl80.scala:25:24 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(key === upperCase)\
    \ \e[31mtrue\e[0m \n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m              value === is not a member of String - did you mean\
    \ key.==?\n\e[31m\e[31m-- Error: /tmp/tmp_j0hvl80.scala:28:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mstringMap\e[0m = stringDict.toMap\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                    Cannot prove that Boolean <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \           V is a type variable\n\e[31m   |\e[0m                            \
    \        .\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp_j0hvl80.scala:19:25\
    \ ----------------\e[0m\e[0m\n\e[33m19 |\e[0m        \e[33mif\e[0m(dict.isEmpty)\
    \ \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                         ^^^^^\e[0m\n\
    \e[33m   |\e[0mA pure expression does nothing in statement position; you may be\
    \ omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660010215
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val allKeys = dict.keySet\n   \
    \     val keySet = allKeys.toSet\n        if(keySet.size == 0) return false\n\
    \        val isLowerCamelKeys = allKeys.toSet.toSeq.forall(_.toString.toLowerCase\
    \ == \"name\")\n        val isUpperCamelKeys = allKeys.toSet.toSeq.forall(_.toString.toUpperCase\
    \ == \"name\")\n        isLowerCamelKeys && isUpperCamelKeys\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvyp5ufph.scala:27)\n\tat Problem.main(tmpvyp5ufph.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var flag : Boolean = false\n  \
    \      dict.toSet.subsetOf(Set(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\"\
    ,\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\"\
    ,\"V\",\"W\",\"X\",\"Y\",\"Z\")) match {\n            case true => flag = true\n\
    \            case false => flag = false\n        }\n        flag\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxhsg5h3i.scala:27)\n\tat Problem.main(tmpxhsg5h3i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val lowerCaseMap = dict.filter(_.toLowerCase\
    \ != dict)\n        val upperCaseMap = dict.filter(_.toUpperCase != dict)\n  \
    \      lowerCaseMap.isEmpty || upperCaseMap.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm7xxcme.scala:19:41 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseMap\e[0m = dict.filter(_.toLowerCase\
    \ != dict)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value toLowerCase is not a member of (String,\
    \ String)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm7xxcme.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mupperCaseMap\e[0m = dict.filter(_.toUpperCase != dict)\n\e[31m\e[31m   |\e\
    [0m                                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   value toUpperCase is not a member of (String, String)\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) {\n         \
    \   println(\"Map is empty\")\n            false\n        }\n        val mapArray\
    \ = dict.toArray\n        val keys = mapArray.map( _.keySet )\n        keys.forall(\
    \ k => k.forall( _.isInstanceOf[String] ) && k.forall( _.isInfixOf('Z') || _.isInfixOf('z')\
    \ ))\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphxyvgbkb.scala:24:35 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mkeys\e[0m = mapArray.map(\
    \ _.keySet )\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value keySet is not a member of (String,\
    \ String)\n\e[31m\e[31m-- Error: /tmp/tmphxyvgbkb.scala:24:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mkeys\e[0m = mapArray.map(\
    \ _.keySet )\n\e[31m\e[31m   |\e[0m                                          \
    \ ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n\e[33m\e[33m-- [E129] Potential\
    \ Issue Warning: /tmp/tmphxyvgbkb.scala:21:12 ----------------\e[0m\e[0m\n\e[33m21\
    \ |\e[0m            \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m            ^^^^^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        def allLowerCase(key: String, value:\
    \ String): Boolean = {\n            val lc = value.toLowerCase == value\n    \
    \        val uc = (value.toUpperCase == value)\n            (lc || uc)\n     \
    \   }\n        def allUpperCase(key: String, value: String): Boolean = {\n   \
    \         val lc = value.toLowerCase == value\n            val uc = (value.toUpperCase\
    \ == value)\n            (lc && uc)\n        }\n        if(!dict.keySet.contains(\"\
    \")) false else dict.keys.forall(allLowerCase) || dict.keys.forall(allUpperCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphe55fb1p.scala:29:66\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m(!dict.keySet.contains(\e\
    [31m\"\"\e[0m)) \e[31mfalse\e[0m \e[33melse\e[0m dict.keys.forall(allLowerCase)\
    \ || dict.keys.forall(allUpperCase)\n\e[31m\e[31m   |\e[0m                   \
    \                                               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   Found:    \e[1m\e[31m(\e[0mString\e[1m\e\
    [31m,\e[0m \e[1m\e[31mString\e[0m\e[1m\e[31m)\e[0m\e[1m\e[31m \e[0m=> Boolean\n\
    \e[31m   |\e[0m                                   Required: String => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphe55fb1p.scala:29:100\
    \ -------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m(!dict.keySet.contains(\e\
    [31m\"\"\e[0m)) \e[31mfalse\e[0m \e[33melse\e[0m dict.keys.forall(allLowerCase)\
    \ || dict.keys.forall(allUpperCase)\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    \e[1m\e[31m(\e[0mString\e[1m\e[31m,\e[0m \e[1m\e[31mString\e[0m\e[1m\e[31m)\e\
    [0m\e[1m\e[31m \e[0m=> Boolean\n\e[31m   |\e[0m                              \
    \     Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n       if (dict.isEmpty) false\n      \
    \ else {\n          val upper = dict.keySet.map(_.toUpperCase).toList\n      \
    \    val lower = dict.keySet.map(_.toLowerCase).toList\n          upper.isEmpty\
    \ && lower.isEmpty\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp60gr122.scala:27)\n\tat Problem.main(tmpp60gr122.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keySet\n      \
    \  if (keys == null || keys.isEmpty) return true\n        val keySet : Set[String]\
    \ = keys.toSet\n        val upperCaseKeys = keySet.filter(_.isUpper).toSet\n \
    \       val lowerCaseKeys = keySet.filter(_.isLower).toSet\n        // if every\
    \ key in upperCase is also uppercase\n        if (upperCaseKeys.forall(_.isUpper)\
    \ && upperCaseKeys.size == keySet.size && upperCaseKeys == lowerCaseKeys) return\
    \ true\n        // if every key in lowerCase is also lowercase\n        if (lowerCaseKeys.forall(_.isLower)\
    \ && lowerCaseKeys.size == keySet.size && lowerCaseKeys == upperCaseKeys) return\
    \ true\n        // if any key in upperCase is also lowercase\n        if (upperCaseKeys.forall(_.isUpper)\
    \ && upperCaseKeys.size == keySet.size && upperCaseKeys == lowerCaseKeys) return\
    \ true\n        // if any key in lowerCase is also uppercase\n        if (lowerCaseKeys.forall(_.isLower)\
    \ && lowerCaseKeys.size == keySet.size && lowerCaseKeys == upperCaseKeys) return\
    \ true\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4w9z4b5_.scala:21:35\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mkeySet\e\
    [0m : \e[35mSet\e[0m[\e[35mString\e[0m] = keys.toSet\n\e[31m\e[31m   |\e[0m  \
    \                                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     Found:    Set[String]\n\e[31m   |\e[0m                 \
    \               Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mSet[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp4w9z4b5_.scala:22:44 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mupperCaseKeys\e[0m = keySet.filter(_.isUpper).toSet\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 value isUpper is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4w9z4b5_.scala:23:44\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mlowerCaseKeys\e[0m = keySet.filter(_.isLower).toSet\n\e[31m\e[31m   |\e[0m\
    \                                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                              value isLower is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp4w9z4b5_.scala:25:35 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (upperCaseKeys.forall(_.isUpper)\
    \ && upperCaseKeys.size == keySet.size && upperCaseKeys == lowerCaseKeys) \e[33mreturn\e\
    [0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value isUpper is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4w9z4b5_.scala:27:35\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m (lowerCaseKeys.forall(_.isLower)\
    \ && lowerCaseKeys.size == keySet.size && lowerCaseKeys == upperCaseKeys) \e[33mreturn\e\
    [0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                "
  stdout: ''
  timestamp: 1660010223
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      if(dict.isEmpty) {\n        false\n\
    \      } else {\n        val lower = dict.keys.toList.map(_.toLowerCase)\n   \
    \     val upper = dict.keys.toList.map(_.toUpperCase)\n        val trues = lower\
    \ intersect upper\n        val falses = upper.intersect(lower) intersect lower\n\
    \        falses.isEmpty\n      }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv09wpjr6.scala:31)\n\tat Problem.main(tmpv09wpjr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010225
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys\n        val\
    \ lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val lowerStrings : List[String] = lower.toList\n        val upperStrings\
    \ : List[String] = upper.toList\n\n        if (lowerStrings.isEmpty && upperStrings.isEmpty)\
    \ {\n            false\n        } else {\n            val allStrings = lowerStrings.union(upperStrings)\n\
    \            val containsAll = allStrings.toSet.size == allStrings.size\n    \
    \        containsAll\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1gs_0kkd.scala:35)\n\tat Problem.main(tmp1gs_0kkd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val lower = dict.filter(x => x._1.toString.toLowerCase.equals(x._1.toLowerCase)).size\
    \ < dict.length\n        val upper = dict.filter(x => x._1.toString.toUpperCase.equals(x._1.toUpperCase)).size\
    \ < dict.length\n        return lower && upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj6qfm4t0.scala:19:101 -----------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlower\e[0m = dict.filter(\e\
    [36mx\e[0m => x._1.toString.toLowerCase.equals(x._1.toLowerCase)).size < dict.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value\
    \ length is not a member of collection.mutable.Map[String, String]\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpj6qfm4t0.scala:20:101 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mupper\e[0m = dict.filter(\e\
    [36mx\e[0m => x._1.toString.toUpperCase.equals(x._1.toUpperCase)).size < dict.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value\
    \ length is not a member of collection.mutable.Map[String, String]\n2 errors found\n"
  stdout: ''
  timestamp: 1660010224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var flag = false\n        for(key\
    \ <- dict.keySet){\n            if(key.toLowerCase().equals(key.upper())){\n \
    \               flag = true\n                break\n            }\n        }\n\
    \        flag\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmaqtmhwz.scala:21:44 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(key.toLowerCase().equals(key.upper())){\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m         value upper is not a member of String - did you mean key.coder?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmaqtmhwz.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys\n            if (keys.length == 1)\
    \ return keys.forall(x => checkCase(x))\n            else keys.forall(checkCase)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn0xoji20.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (keys.length == \e[31m1\e[0m)\
    \ \e[33mreturn\e[0m keys.forall(\e[36mx\e[0m => checkCase(x))\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ length is not a member of Iterable[String]\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpn0xoji20.scala:22:58 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            \e[33mif\e[0m (keys.length == \e[31m1\e[0m) \e[33mreturn\e\
    [0m keys.forall(\e[36mx\e[0m => checkCase(x))\n\e[31m\e[31m   |\e[0m         \
    \                                                 ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                    Not found: checkCase\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn0xoji20.scala:23:29\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e\
    [0m keys.forall(checkCase)\n\e[31m\e[31m   |\e[0m                            \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found: checkCase\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val map = mutable.HashMap.empty[String,String]\n\
    \        map.putAll(dict)\n        if (map.size == 0) return true\n        val\
    \ lower = map.toList.map(_.toLowerCase).filter(!_.isInstanceOf[String]).toList\n\
    \        val upper = map.toList.map(_.toUpperCase).filter(!_.isInstanceOf[String]).toList\n\
    \        return (lower == upper)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp613pekf0.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m,\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010221
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n       var allUpperCase = True\n      \
    \ var allLowerCase = True\n       for ((k,v) <- dict){\n           if (k == k.toLowerCase\
    \ || k == k.toUpperCase || k == k.swapcase){\n               allUpperCase = False\n\
    \               allLowerCase = False\n           }\n       }\n       return allUpper\
    \ && allLowerCase\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp960_u1cn.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m       \e[33mvar\e[0m \e[36mallUpperCase\e[0m = True\n\
    \e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      Not found: True\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp960_u1cn.scala:20:26 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m       \e[33mvar\e[0m \e[36mallLowerCase\e[0m = True\n\e[31m\e\
    [31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m            \
    \              Not found: True\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp960_u1cn.scala:22:66 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m           \e[33mif\e[0m (k == k.toLowerCase || k == k.toUpperCase || k ==\
    \ k.swapcase){\n\e[31m\e[31m   |\e[0m                                        \
    \                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \            value swapcase is not a member of String\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp960_u1cn.scala:23:30 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m               allUpperCase = False\n\e[31m\e[31m   |\e[0m    \
    \                          ^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \       Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp960_u1cn.scala:24:30 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m               allLowerCase = False\n\e[31m\e[31m   |\e[0m                \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp960_u1cn.scala:27:14\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \e[33mreturn\e[0m\
    \ allUpper && allLowerCase\n\e[31m\e[31m   |\e[0m              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m              Not found: al"
  stdout: ''
  timestamp: 1660010224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size <= 1) true\n    \
    \    val upperCase = dict.toSet.toSet.toSeq.filter(x => x.isUpper).toSeq\n   \
    \     val lowerCase = dict.toSet.toSet.toSeq.filter(x => x.isLower).toSeq\n  \
    \      val equals = lowerCase.sameElements(upperCase)\n        val hasAll = lowerCase.forall(x\
    \ => upperCase.contains(x))\n        val hasEquals = lowerCase.forall(x => upperCase.contains(x))\n\
    \        equals && hasAll && hasEquals\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxsis8fe3.scala:20:61 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mupperCase\e[0m = dict.toSet.toSet.toSeq.filter(\e\
    [36mx\e[0m => x.isUpper).toSeq\n\e[31m\e[31m   |\e[0m                        \
    \                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \             value isUpper is not a member of (String, String)\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpxsis8fe3.scala:21:61 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlowerCase\e[0m = dict.toSet.toSet.toSeq.filter(\e\
    [36mx\e[0m => x.isLower).toSeq\n\e[31m\e[31m   |\e[0m                        \
    \                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \             value isLower is not a member of (String, String)\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpxsis8fe3.scala:19:28 ----------------\e\
    [0m\e[0m\n\e[33m19 |\e[0m        \e[33mif\e[0m (dict.size <= \e[31m1\e[0m) \e\
    [31mtrue\e[0m\n\e[33m\e[33m   |\e[0m                            ^^^^\e[0m\n\e\
    [33m   |\e[0mA pure expression does nothing in statement position; you may be\
    \ omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1660010224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict == Map.empty) false \n\
    \        else if (dict.keys.toSeq contains 'A' || dict.keys.toSeq contains 'B')\
    \ false\n        else checkDictCase(dict._2.toUpperCase().map(_ -> 'a' - _).foldLeft(Map.empty[String,\
    \ String])(_ ++ _))\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqja55bcx.scala:20:46 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (dict.keys.toSeq\
    \ contains \e[31m'A'\e[0m || dict.keys.toSeq contains \e[31m'B'\e[0m) \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m                                          ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value || is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqja55bcx.scala:21:32\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m checkDictCase(dict._2.toUpperCase().map(_\
    \ -> \e[31m'a'\e[0m - _).foldLeft(Map.empty[String, String])(_ ++ _))\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m      value\
    \ _2 is not a member of collection.mutable.Map[String, String]\n2 errors found\n"
  stdout: ''
  timestamp: 1660010225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val setUp : Boolean = dict.isEmpty\n\
    \        if(!setUp) return false\n        val mapSet : Set[String] = dict.keys.toSet\n\
    \        val mapSetUpper : Set[String] = dict.keys.filter(_.isUpper).toSet\n \
    \       val mapSetLower : Set[String] = dict.keys.filter(_.isLower).toSet\n  \
    \      if(mapSetUpper.size == mapSet.size) return true\n        if(mapSetUpper.size\
    \ != mapSet.size) return false\n        if(mapSetLower.size == mapSet.size) return\
    \ true\n        if(mapSetLower.size != mapSet.size) return false\n        for(x\
    \ <- mapSet){\n            if(x.isUpper){\n                if(mapSetLower.contains(x))\n\
    \                    return true\n            }\n            else{\n         \
    \       if(mapSetLower.contains(x))\n                    return false\n      \
    \      }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbkqrvlod.scala:21:35\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmapSet\e\
    [0m : \e[35mSet\e[0m[\e[35mString\e[0m] = dict.keys.toSet\n\e[31m\e[31m   |\e\
    [0m                                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                              Found:    Set[String]\n\e[31m   |\e[0m        \
    \                        Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mSet[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbkqrvlod.scala:22:59 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmapSetUpper\e[0m : \e[35mSet\e\
    [0m[\e[35mString\e[0m] = dict.keys.filter(_.isUpper).toSet\n\e[31m\e[31m   |\e\
    [0m                                                         ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value isUpper is not a member of\
    \ String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbkqrvlod.scala:23:59\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmapSetLower\e[0m : \e[35mSet\e[0m[\e[35mString\e[0m] = dict.keys.filter(_.isLower).toSet\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value isLower\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbkqrvlod.scala:29:17\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m(x.isUpper){\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \     value isUpper is not a member of String\n4 errors found\n"
  stdout: ''
  timestamp: 1660010227
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) {\n         \
    \   return false\n        } else {\n            val low = dict.toSet.toMap.values.map(_.toLowerCase())\n\
    \            val up = dict.toSet.toMap.values.map(_.toUpperCase())\n         \
    \   val same = low == up\n            return !same\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqp6dg86n.scala:30)\n\tat Problem.main(tmpqp6dg86n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var flag = false\n        if (dict.isEmpty)\
    \ {\n            flag = true\n        }\n        else {\n            val keys\
    \ = dict.keySet.toList\n            val lowerCaseKeys = keys.filter(key => key.toString.toLowerCase\
    \ == \"name\")\n            val upperCaseKeys = keys.filter(key => key.toString.toUpperCase\
    \ == \"name\")\n            flag = lowerCaseKeys.isEmpty() && upperCaseKeys.isEmpty()\n\
    \        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmprh2lipu1.scala:27:33 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            flag = lowerCaseKeys.isEmpty() && upperCaseKeys.isEmpty()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   \e[33mmethod\e[0m \e[35misEmpty\e[0m in \e[33mclass\e[0m\
    \ \e[35mList\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty)\n           \
    \ return false\n        val keys = dict.keys\n        var flag = true\n      \
    \  for (key <- keys) {\n            if (key.isUpper)\n                return false\n\
    \        }\n        for (key <- keys) {\n            if (!key.isLower)\n     \
    \           return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgp11v8to.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (key.isUpper)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ isUpper is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgp11v8to.scala:28:21\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mif\e[0m\
    \ (!key.isLower)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                 value isLower is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty)\n            return\
    \ false\n        var inUpper = true\n        var inLower = true\n        for((key,value)\
    \ <- dict)\n        {\n            if(key.toString.toUpper != key.toString.toLowerCase)\n\
    \                inUpper = false\n            if(key.toString.toLower != key.toString.toUpper)\n\
    \                inLower = false\n        }\n        return (inUpper == inLower)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptc_fdbjo.scala:25:28 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m(key.toString.toUpper != key.toString.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               value toUpper is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmptc_fdbjo.scala:27:28 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            \e[33mif\e[0m(key.toString.toLower != key.toString.toUpper)\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               value toLower is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty) return false\n\
    \        val keysLower  = dict.keySet.toSet.filter(_.isLower).toList\n       \
    \ val keysUpper = dict.keySet.toSet.filter(_.isUpper).toList\n        if(keysLower.isEmpty){\n\
    \            if(!keysUpper.isEmpty) false\n            else true\n        } else\
    \ {\n            if(!keysUpper.isEmpty){\n                false\n            }\
    \ else {\n                true\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpebo1goum.scala:20:52 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mkeysLower\e[0m  = dict.keySet.toSet.filter(_.isLower).toList\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value isLower is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpebo1goum.scala:21:51\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mkeysUpper\e[0m = dict.keySet.toSet.filter(_.isUpper).toList\n\e[31m\e[31m\
    \   |\e[0m                                                 ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value isUpper is not a member of\
    \ String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict match {\n            case\
    \ Map[String,String](m) =>\n                if (m.isEmpty || m.keySet.contains(\"\
    NAME\") || m.keySet.contains(\"ZIP\")) true else false\n            case _ =>\
    \ false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E127] Syntax Error: /tmp/tmpb7tjqg4b.scala:20:17 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m Map[String,String](m) =>\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcollection.mutable.Map[\e\
    [35mString\e[0m, \e[35mString\e[0m] cannot be used as an extractor in a pattern\
    \ because it lacks an unapply or unapplySeq method\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpb7tjqg4b.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m (m.isEmpty || m.keySet.contains(\e\
    [31m\"NAME\"\e[0m) || m.keySet.contains(\e[31m\"ZIP\"\e[0m)) \e[31mtrue\e[0m \e\
    [33melse\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\
    \e[31m   |\e[0m                    Not found: m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010227
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var foundAllCase = false\n    \
    \    for((key, value) <- dict) {\n            val lowerCaseKey = key.toLowerCase\n\
    \            val upperCaseKey = key.toUpperCase\n            if(value.toLowerCase\
    \ == value) {\n                if(lowerCaseKey == upperCaseKey) {\n          \
    \          foundAllCase = true\n                }\n            }\n        }\n\
    \        foundAllCase\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwtn4c2ak.scala:32)\n\tat Problem.main(tmpwtn4c2ak.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.toSet.map(_.toLowerCase).toSeq\n\
    \        if (keys.length == 0)\n            return true\n        val keySet =\
    \ dict.keySet\n        keys.forall(key => !keySet.contains(key.toLowerCase))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr7_pc4_0.scala:19:36 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mkeys\e[0m = dict.toSet.map(_.toLowerCase).toSeq\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   value toLowerCase is not a member of (String,\
    \ String)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr7_pc4_0.scala:23:48\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        keys.forall(\e[36mkey\e\
    [0m => !keySet.contains(key.toLowerCase))\n\e[31m\e[31m   |\e[0m             \
    \                               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                    value toLowerCase is not a member of Nothing\n2 errors found\n"
  stdout: ''
  timestamp: 1660010231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val strs = dict.toList\n      \
    \  // If there is any string that is in upper case, return false\n        if (strs.exists(s\
    \ => s.toUpperCase.contains(s.toLowerCase))) false\n        // If there is any\
    \ string that is in lower case, return false\n        else strs.exists(s => s.toLowerCase.contains(s.toUpperCase))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpszciud5j.scala:21:31 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (strs.exists(\e[36ms\e[0m => s.toUpperCase.contains(s.toLowerCase)))\
    \ \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value toUpperCase is not a member of (String,\
    \ String)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpszciud5j.scala:23:32\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m strs.exists(s\
    \ => s.toLowerCase.contains(s.toUpperCase))\n\e[31m\e[31m   |\e[0m           \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value\
    \ toLowerCase is not a member of (String, String)\n2 errors found\n"
  stdout: ''
  timestamp: 1660010230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.nonEmpty) {\n         \
    \   val set = Set[String](dict.keys.toIterator.mkString(\"\").toLowerCase)\n \
    \           val set2 = Set[String](dict.keys.toIterator.mkString(\"\").toUpperCase)\n\
    \            val set3 = set.toSet ++ set2.toSet\n            if(set.size == set3.size)\n\
    \                return true\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu7kyiljy.scala:29)\n\tat Problem.main(tmpu7kyiljy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.nonEmpty) {\n        \
    \    val keys = dict.keys.toList\n            val lower = keys.map(_.toLowerCase).toSet\n\
    \            val upper = keys.map(_.toUpperCase).toSet\n            (lower.size\
    \ == keys.size) && lower.subsetOf(upper)\n        }\n        else {\n        \
    \    false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdusghbuh.scala:30)\n\tat Problem.main(tmpdusghbuh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010232
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict == null || dict.isEmpty)\n\
    \            return false\n        var lowerMap = new mutable.HashMap[String,String]\n\
    \        var upperMap = new mutable.HashMap[String,String]\n        var upper\
    \ = True\n        lowerMap.putAll(dict)\n        upperMap.putAll(dict)\n     \
    \   upper = upper && (lowerMap.keySet.forall(_.isInstanceOf[String]))\n      \
    \  upper = upper && (upperMap.keySet.forall(_.isInstanceOf[String]))\n       \
    \ upper = upper && (lowerMap.keySet.toSet.size == upperMap.keySet.toSet.size)\n\
    \        upper = upper && (lowerMap.keySet.forall(_.toLowerCase.equals(\"state\"\
    )))\n        upper = upper && (upperMap.keySet.forall(_.toLowerCase.equals(\"\
    state\")))\n        upper = upper && (lowerMap.keySet.forall(_.toUpperCase.equals(\"\
    state\")))\n        upper = upper && (upperMap.keySet.forall(_.toUpperCase.equals(\"\
    state\")))\n        upper = upper && (lowerMap.keySet.forall(_.equals(\"state\"\
    )))\n        upper = upper && (upperMap.keySet.forall(_.equals(\"state\")))\n\
    \        upper = upper && (lowerMap.keySet.forall(_.equals(\"zip\")))\n      \
    \  upper = upper && (upperMap.keySet.forall(_.equals(\"zip\")))\n        upper\
    \ = upper && (lowerMap.keySet.forall(_.equals(\"city\")))\n        upper = upper\
    \ && (upperMap.keySet.forall(_.equals(\"city\")))\n        upper = upper && (lowerMap.keySet.forall(_.equals(\"\
    name\")))\n        upper = upper && (upperMap.keySet.forall(_.equals(\"name\"\
    )))\n        upper = upper && (lowerMap.keySet.forall(_.equals(\"age\")))\n  \
    \      upper = upper && (upperMap.keySet.forall(_.equals(\"age\")))\n        upper\
    \ = upper && (lowerMap.keySet.forall(_.equals(\"a\")))\n        upper = upper\
    \ && (upperMap.keySet.forall(_.equals(\"a\")))\n        upper = upper && (lowerMap.keySet.forall(_.equals(\"\
    b\")))\n        upper = upper && (upperMap.keySet.forall(_.equals(\"b\")))\n \
    \       upper = upper && (lowerMap.keySet.forall(_.equals(\"8\")))\n        upper\
    \ = upper && (upperMap.keySet.forall(_.equals(\"8\")))\n        upper = upper\
    \ && (lowerMap.keySet.forall(_.equals(\"d\")))\n        upper = upper && (upperMap.keySet.forall(_.equals(\"\
    d\")))\n        upper = upper && (lowerMap.keySet.forall(_.equals(\"e\")))\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_yypfv77.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mlowerMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_yypfv77.scala:22:27 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mvar\e[0m \e[36mupperMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m,\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_yypfv77.scala:23:20\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e\
    [36mupper\e[0m = True\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: True\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_yypfv77.scala:51:14 --------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        upper = upper && (lowerMap.keySet.forall(_.equals(\e\
    [31m\"e\"\e[0m)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010232
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict == null) false else (for\
    \ (key <- dict.keys) yield {\n            val l = key.toLower\n            val\
    \ uc = key.toUpperCase\n            if (l == uc) true\n            else false\n\
    \        }).all(identity)\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdkalab8b.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36ml\e[0m = key.toLower\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                 value toLower is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) {\n         \
    \   return false\n        }\n        for (key <- dict.keySet) {\n            val\
    \ lower = key.toLowerCase\n            if (lower != key) {\n                return\
    \ false\n            }\n            val upper = key.toUpperCase\n            if\
    \ (upper != key) {\n                return false\n            }\n        }\n \
    \       true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4j9o8h_.scala:35)\n\tat Problem.main(tmpt4j9o8h_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var notAllStringsInLowercase :\
    \ Boolean = true\n        var notAllStringsInUppercase : Boolean = true\n    \
    \    dict.foreach { case(k,v) => {\n            if (k.toLowerCase() != k) {\n\
    \                notAllStringsInLowercase = false\n            }\n           \
    \ if (k.toUpperCase() != k) {\n                notAllStringsInUppercase = false\n\
    \            }\n        }}\n        return notAllStringsInLowercase && notAllStringsInUppercase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqk0tl9t4.scala:32)\n\tat Problem.main(tmpqk0tl9t4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.keys.toList.exists(_.isInstanceOf[Int]))\
    \ return false\n        if(dict.keys.toList.exists(_.isInstanceOf[Long])) return\
    \ false\n        if(dict.keys.toList.exists(_.isInstanceOf[Float])) return false\n\
    \        if(dict.keys.toList.exists(_.isInstanceOf[Double])) return false\n  \
    \      if(dict.keys.toList.exists(_.isInstanceOf[Boolean])) return false\n   \
    \     if(dict.keys.toList.exists(_.isInstanceOf[String])) return true\n      \
    \  if(dict.keys.toList.exists(_.isInstanceOf[Option[Int]])) return false\n   \
    \     if(dict.keys.toList.exists(_.isInstanceOf[Option[Long]])) return false\n\
    \        if(dict.keys.toList.exists(_.isInstanceOf[Option[Float]])) return false\n\
    \        if(dict.keys.toList.exists(_.isInstanceOf[Option[Double]])) return false\n\
    \        if(dict.keys.toList.exists(_.isInstanceOf[Option[Boolean]])) return false\n\
    \        if(dict.keys.toList.exists(_.isInstanceOf[Option[String]])) return true\n\
    \        if(dict.keys.toList.exists(_.isInstanceOf[Seq[_]])) return true\n   \
    \     false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiikz8e8e.scala:36)\n\tat Problem.main(tmpiikz8e8e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) {\n         \
    \   return false\n        } else {\n            var trueCase = false\n       \
    \     var falseCase = false\n            val keys = dict.keys\n            var\
    \ lowKeys = mutable.Set[String]()\n            var highKeys = mutable.Set[String]()\n\
    \            val keys = keys.toList\n            for( i <- 0 until keys.length\
    \ ) {\n                if (keys(i).isInstanceOf[String]) {\n                 \
    \   trueCase =trueCase || keys(i).equalsIgnoreCase(lower(keys(i)))\n         \
    \       } else {\n                    falseCase =falseCase || keys(i).equalsIgnoreCase(upper(keys(i)))\n\
    \                }\n                if(trueCase){\n                    lowKeys\
    \ += keys(i)\n                } else {\n                    highKeys += keys(i)\n\
    \                }\n            }\n            if(lowKeys.isEmpty)\n         \
    \       trueCase = trueCase\n            else\n                trueCase = false\n\
    \            if(highKeys.isEmpty)\n                falseCase = false\n       \
    \     else\n                falseCase = trueCase\n            return trueCase\
    \ || falseCase\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcb30132s.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mkeys\e[0m = keys.toList\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mkeys\
    \ is already defined as \e[33mvalue\e[0m \e[35mkeys\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcb30132s.scala:25:26\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mvar\e[0m\
    \ \e[36mlowKeys\e[0m = mutable.Set[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpcb30132s.scala:26:27 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m            \e[33mvar\e[0m \e[36mhighKeys\e[0m = mutable.Set[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpcb30132s.scala:28:35 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mfor\e[0m( i <- \e[31m0\e[0m until keys.length\
    \ ) {\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        value length is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpcb30132s.scala:29:20 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                \e[33mif\e[0m (keys(i).isInstanceOf[\e\
    [35mString\e[0m]) {\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m\
    \   |\e[0m                    \e[33mvalue\e[0m \e[35mkeys\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpcb30132s.scala:30:42 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                "
  stdout: ''
  timestamp: 1660010234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = mutable.HashSet[String]()\n\
    \        for (a <- dict) {\n            keys += a._1 // add key values to the\
    \ keySet \n        }\n        val allStringsInLowerCase = keys.size == keys.toSet.size\n\
    \        val allStringsInUpperCase = keys.size == keys.toSet.map( x => x.toUpperCase\
    \ ).size\n        allStringsInLowerCase || allStringsInUpperCase\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3_nf6k8b.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mkeys\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keySet.toSet\n\
    \        val allLowercase =  keys.filter(x => x.toString.toLowerCase().contains(\"\
    a\"))\n        val allUppercase =  keys.filter(x => x.toString.toUpperCase().contains(\"\
    A\"))\n        return (allLowercase.isEmpty && allUppercase.isEmpty)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3966fsf.scala:29)\n\tat Problem.main(tmpk3966fsf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010235
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val list = dict.keySet\n      \
    \  if(list.isEmpty) false\n        val lower = list.map(_.toLowerCase)\n     \
    \   val upper = list.map(_.toUpperCase)\n        val lowerIsLowerCase = lower\
    \ == upper\n        val upperIsLowerCase = upper == lower\n        return lowerIsLowerCase\
    \ || upperIsLowerCase\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx878u20p.scala:28)\n\tat Problem.main(tmpx878u20p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010235
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var isUpper = false\n        for\
    \ (s <- dict.keySet) {\n            val l = s.length\n            if (l != 0 &&\
    \ s.toUpperCase() != s) {\n                return false\n            }\n     \
    \       if (l != 0 && s.toLowerCase() != s) {\n                isUpper = true\n\
    \            }\n        }\n        return !isUpper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu4rti07c.scala:32)\n\tat Problem.main(tmpu4rti07c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty) false\n      \
    \  val keys = dict.toList.sortBy(_.toLowerCase).toList\n        val keyUpper =\
    \ keys.map(_.toUpperCase)\n        val keyLower = keys.map(_.toLowerCase)\n  \
    \      (keyLower == keyUpper || keyUpper == keyLower) && keyLower.isEmpty && keyUpper.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzewtyzzn.scala:20:40 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mkeys\e[0m = dict.toList.sortBy(_.toLowerCase).toList\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   value toLowerCase is not a member of (String,\
    \ String)\n\e[31m\e[31m-- Error: /tmp/tmpzewtyzzn.scala:20:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mkeys\e[0m = dict.toList.sortBy(_.toLowerCase).toList\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mDeprecatedDoubleOrdering\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mShort\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpzewtyzzn.scala:19:25\
    \ ----------------\e[0m\e[0m\n\e[33m19 |\e[0m        \e[33mif\e[0m(dict.isEmpty)\
    \ \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                         ^^^^^\e[0m\n\
    \e[33m   |\e[0mA pure expression does nothing in statement position; you may be\
    \ omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1660010234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val map = mutable.Map.empty[String,String]\n\
    \        if(!dict.isEmpty) {\n            for((key,value) <- dict) {\n       \
    \         if(key.isLower) map+=((key,value.toLowerCase))\n                else\
    \ {\n                    if(key.isUpper) map+=((key,value.toUpperCase))\n    \
    \                else return false\n                }\n            }\n       \
    \ }\n        if(map.isEmpty) true\n        else {\n            for(x <- map) {\n\
    \                for(y <- map) if(x != y) return false\n            }\n      \
    \  }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9katz98k.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m,\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp9katz98k.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e[0m(key.isLower) map+=((key,value.toLowerCase))\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \               value isLower is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp9katz98k.scala:24:27 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                    \e[33mif\e[0m(key.isUpper) map+=((key,value.toUpperCase))\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       value isUpper is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660010235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if(dict.isEmpty)\n          return\
    \ false\n        val lowerCaseMap : Map[String,String] = dict.map(m => m._1 ->\
    \ m._2.toLower)\n        val upperCaseMap : Map[String,String] = dict.map(m =>\
    \ m._1 -> m._2.toUpper)\n        val bothMap : Map[String,String] = dict.filter(m\
    \ => m._1.toLower == m._2.toLower || m._1.toUpper == m._2.toUpper)\n        return\
    \ lowerCaseMap.isEmpty && upperCaseMap.isEmpty && bothMap.isEmpty\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp37865p7.scala:21:75 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseMap\e[0m : \e[35mMap\e\
    [0m[\e[35mString\e[0m,\e[35mString\e[0m] = dict.map(\e[36mm\e[0m => m._1 -> m._2.toLower)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \     value toLower is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpp37865p7.scala:22:75 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mupperCaseMap\e[0m : \e[35mMap\e[0m[\e[35mString\e\
    [0m,\e[35mString\e[0m] = dict.map(\e[36mm\e[0m => m._1 -> m._2.toUpper)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value\
    \ toUpper is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp37865p7.scala:23:65\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mbothMap\e[0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mString\e[0m] = dict.filter(\e\
    [36mm\e[0m => m._1.toLower == m._2.toLower || m._1.toUpper == m._2.toUpper)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value toLower\
    \ is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660010235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        \n        if(dict.size == 0) return\
    \ false\n        \n        val keys = dict.values.toSet.toList\n        val keysSet\
    \ = keys.toSet\n        \n        val lower = keys.toList.map(_.toLowerCase)\n\
    \        val upper = keys.toList.map(_.toUpperCase)\n        \n        if(lower.forall(keysSet.size)\
    \ == true && upper.forall(keysSet.size) == true) return true\n        \n     \
    \   return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd2n3dhk4.scala:28:32\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m(lower.forall(keysSet.size)\
    \ == \e[31mtrue\e[0m && upper.forall(keysSet.size) == \e[31mtrue\e[0m) \e[33mreturn\e\
    [0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    Int\n\e[31m   |\e[0m   \
    \                     Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpd2n3dhk4.scala:28:70 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m(lower.forall(keysSet.size) == \e\
    [31mtrue\e[0m && upper.forall(keysSet.size) == \e[31mtrue\e[0m) \e[33mreturn\e\
    [0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                                   \
    \                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                              Found:    Int\n\e[31m   |\e[0m                \
    \                             Required: String => Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010235
