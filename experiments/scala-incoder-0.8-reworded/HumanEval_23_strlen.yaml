name: HumanEval_23_strlen
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return length of given string\n    // >>> stringLength((\"\"))\n    // (0l)\n\
  \    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string : String)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) ==\
  \ (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
  )) == (9l));\n    }\n\n}\n"
completions: ["        val a = mutable.StringBuilder(string)\n        a.reverse match\
    \ {\n            case Nil => 0\n            case _ => a.length\n        }", '        string.toList.size',
  "        var len = 0\n        for(i <- 0 until string.length){\n            if(string.charAt(i)\
    \ == ' '){\n                len += 1\n            }\n        }\n        len",
  "        val len = 0\n        for (i <- 0 until string.length) {\n            len\
    \ += string.charAt(i).length\n        }\n        len", "        require(string.length\
    \ > 0)\n        var counter = 1\n        var sum = 0\n        for (char <- string)\
    \ {\n            sum += counter\n            counter += 1\n        }\n       \
    \ sum", "        if(string.length == 0) 0\n        else string.length", "    \
    \    val array = string.toArray\n        val length = array.length\n        if\
    \ (length == 0) {\n            return 0\n        }\n        return length", " \
    \       var len = 0\n        for (i<-0 to string.length-1 step 1) {\n        \
    \    len +=  string(i)\n        }\n        len", "      var length = 0\n     \
    \ for(x <- string) length += x.length\n      return length", '        string.size',
  '        if (string.length > 0) (string length) else (0l)', "        val len : Long\
    \ = 0\n        for (cs <- string) {\n            if (cs == '\\'') {\n        \
    \        len += 1\n            } else if (cs == '\"') {\n                len +=\
    \ 1\n            } else if (cs == '\\\\') {\n                len += 1\n      \
    \      } else {\n                len += 1\n            }\n        }\n        len",
  "        string match {\n            case \"\" => 0\n            case _ => 1 +\n\
    \                string.count{i => i <= ' '}\n        }", "        var length\
    \ = 0\n        var i = 0\n        while (i<string.length) {\n          length\
    \ += (string.charAt(i)==='0')?1:0\n          i++\n        }\n        return length",
  "        var sum = 0L\n        for ( i <- 0 until string.length) {\n           \
    \ sum = sum + 1\n        }\n        return sum", "        val n = string.length\n\
    \        if (n == 0) 0 else 3", "        val l = new mutable.Array[Long](string.length)\n\
    \        var i = 0\n        while(i < string.length){\n            l(i) = string.charAt(i).toLong\n\
    \            i = i + 1\n        }\n        l.length", "        string match {\n\
    \            case Nil => 0\n            case _ => string.len\n        }", "  \
    \      var sum = 0\n        for (char <- string) {\n            sum += 1\n   \
    \     }\n        return sum", "        def loop(s : String) : Long = s match {\n\
    \            case null => 0L\n            case x if x.length() > 0 => x.length\
    \ + loop(s.substring(1))\n            case x => 1L\n        }\n        loop(string.substring(0,string.length-1))",
  "        val stringLength = string.length\n        return (stringLength).toLong",
  "      var count = 0\n      for (i <- 0 until string.length) {\n          count\
    \ += string.charAt(i).toChar.length - string.charAt(i).toChar.codePointAt(0)\n\
    \      }\n      count", '        (string length) / 2', "        var len = 0\n\
    \        for (c:Char <- string) {\n            len += 1\n        }\n        return\
    \ len", "        require(string.nonEmpty)\n        string.toString.toLong", " \
    \     var length = 0\n      string split \"\".toList foreach { e => length = length\
    \ + e.length }\n      length", '        string :: Nil.length', "        val result\
    \ = new StringBuilder(string.length)\n        for (i<- 0 to string.length){\n\
    \            result.append(string.charAt(i))\n        }\n        return result.length",
  "        val arr = string.toArray\n        arr.length", "       string match {\n\
    \           case \"\" => 0\n           case _ => string.length\n       }", " \
    \       var l = 0\n        for(i <- 0 until string.length) l += string(i).length\n\
    \        l", "        if (string.length == 0) 0\n        else string.length",
  "        var length = 0L\n        for ( c <- string.toCharArray ) {\n          \
    \  length += 1L\n        }\n        return length", '       string.count', " \
    \       if (string.length() == 0) {\n            return 0\n        } else {\n\
    \            return 1 + string.length()\n        }", "        val list = string.toList\n\
    \        var length = 0\n        list.foreach { char =>\n            if (char\
    \ == '\"' || char == '\\\\') {\n                length += 2\n            } else\
    \ {\n                length += 1\n            }\n        }\n        length", " \
    \       val length = string.length\n        scala.math.pow(2, length.toInt)",
  "        var result = 1\n        for (letter <- string) result = (result * 26) +\
    \ letter.toChar\n        result", "        val str = new StringBuilder\n     \
    \   str.append(string)\n        str.result()", "        // Initialize result\n\
    \        var len = 0L\n\n        // Iterate through each character in the string\n\
    \        for (i <- 0 until string.length) {\n            // Increment the length\
    \ by 1\n            len += 1\n        }\n\n        // Return length\n        len",
  "        val len = string.length()\n        if (len <= 0)\n            0\n     \
    \   else\n            len", "        string.chars.filter(c => c <= '\\uffff').length",
  "        if (string.length == 0)\n            return 0\n        var len = 0\n  \
    \      for (c<-string.chars)\n            len += c.toInt + 1\n        return len",
  "        val list = mutable.LinkedHashSet[Char]()\n        string.foreach { character\
    \ => list += character }\n        val len = list.length\n        (len)", "   \
    \     var len = 0L\n        for (c <- string) {\n            len += 1\n      \
    \  }\n        len", "        def helper(str : String, i : Int) : Long = {\n  \
    \          if (i == 0)\n                1\n            else\n                1\
    \ + helper(str, i - 1)\n        }\n        helper(string, string.length)", " \
    \       val n = string.length\n        if (n == 0)\n            0\n        else\n\
    \            n + 1", "        var sum = 0\n        var x = string.head\n     \
    \   for( c <- string.tail){\n            sum += c.toLong\n        }\n        sum",
  "        require(string != \"\", \" String is empty\")\n        string.size", " \
    \       val str = new StringBuilder(string).reverse\n        val strLength = str.indexOf(0)\n\
    \        if (strLength > 0)\n            strLength\n        else\n           \
    \ str.length", "        var length = 0L;\n        for (char <- string.toCharArray)\
    \ {\n            length += 1L;\n        }\n        length", "        string match\
    \ {\n            case \"\" => 0L\n            case x => x.length\n        }",
  "        val array = new Array[Byte](string.length + 1).fill(0)\n        for (i<-\
    \ 0 until string.length) array(i) = string.charAt(i)\n        array.last", " \
    \       val l = string.length()\n        require(l >= 0, \"stringLength requires\
    \ non-empty string\")\n        l", "        string.asInstanceOf[String]\n    \
    \        .trim\n            .length", "        var len = 0\n        var str :\
    \ String = string\n        while ( (str = str.substring(1,str.length)) !=\"\"\
    ) {\n            len += 1\n        }\n        len", '        (string.length *
    2).toLong', "        if(string.length <= 0)\n            return 0\n        val\
    \ length = string.length\n        var index = 0\n        while(index<length) {\n\
    \            if(string.charAt(index) == ' ') {\n                index+=1\n   \
    \         } else {\n                return (length-1)-index\n            }\n \
    \       }\n        return length", "        var result : Long = 0\n        for(i\
    \ <- 0 until string.length) {\n            val nextChar = string(i)\n        \
    \    result += nextChar match {\n                case 'a'..'z' => {\n        \
    \            nextChar\n                }\n                case 'A'..'Z' => {\n\
    \                    nextChar.swapCase()\n                }\n                case\
    \ _ => {\n                    throw new Exception(\"Invalid character in string:\
    \ \" + nextChar)\n                }\n            }\n        }\n        result",
  "        if (string.length == 0) 0l\n        else string.length", "        var len\
    \ = 0L\n        for(i <- 0 until string.length)\n            len += i match {\
    \ \n                case 0 => 1 \n                case 1 => 2 \n             \
    \   case _ => 3 \n            }\n        len", '        string.len', "       \
    \ val l = 0L\n        var i = 0\n        while (i < string.length) {\n       \
    \     l += math.abs(string.codePointAt(i)-128)\n            i += 1\n        }\n\
    \        l", "        val res = string.foldLeft(0L)((acc, c) => acc + c.length)\n\
    \        res ", "        val length = 0L\n        var i = 0L\n        while (i\
    \ < string.length) {\n            length += 1L\n            i += 1L\n        }\n\
    \        length", "        if (string == null || string.length == 0) 0\n     \
    \   else string.length()", "        val len = string.size\n        len", "   \
    \     var counter = 0\n        string.foreach { char =>\n            if (char\
    \ == 'a') counter += 1\n            if (char == 'b') counter += 1\n          \
    \  if (char == 'c') counter += 1\n        }\n        counter", "        var count\
    \ = 1\n        var count2 = 0\n        var index = 0\n        var length = string.length\n\
    \        while (index <= length-1) {\n            count += 1\n            count2\
    \ = count2 * 10 + string.charAt(index).asInstanceOf[Char].asDigit\n          \
    \  index += 1\n        }\n        count * count2", "        var len = 0\n    \
    \    var l = string.length\n        while (l > 0)\n            len = len + 1\n\
    \            l -= 1\n        return len", "        // The length of the string\
    \ is zero when its length is zero.\n        string match {\n            case \"\
    \" => 0\n            case _ => string.length\n        }", "        if(string.length\
    \ == 0) {\n            return 0\n        } else {\n            return string.length\
    \ + 1\n        }", "        val length = 0\n        var i = 0\n        while (i\
    \ < string.length) {\n            val temp = string.charAt(i)\n            val\
    \ charLength = temp.toChar.length\n            length += charLength\n        \
    \    i += 1\n        }\n        length", "        var length = 0L\n        var\
    \ nextChar = 0L\n        for(i <- 0 until string.length){\n            nextChar\
    \ = string.charAt(i)\n            if(nextChar == '.'){\n                length\
    \ += (nextChar.toInt - '0')\n                nextChar = 0L\n            }\n  \
    \          else{\n                length += (nextChar.toInt)\n            }\n\
    \        }\n        length", '        string.fold(0)((acc, x) => acc + x.length)',
  "      val chars = string.utf8CodePoints\n      var len = 0\n      for (i <- 0 until\
    \ chars.length) {\n        if (chars(i) < 128) len += 1\n        else len += 2\n\
    \      }\n      len", "       string match {\n          case \"\" => 0\n     \
    \     case _ => 1 + string.length\n       }", "        val count = new collection.mutable.HashMap[Char,\
    \ Int]()\n        for (c <- string)\n            count.put(c, count.getOrElse(c,\
    \ 0) + 1)\n        count.getOrElse('\\0', 0) + 1", "        val len = 0\n    \
    \    var i = 0;\n        while (i < string.length) {\n            len += 1\n \
    \           i += 1\n        }\n        len", "        val len : Long = string.length\n\
    \        return len", "        val strList = string.split(\"\")\n        strList.map(_.length).sum",
  "        def checkString(string : String) : Boolean = {\n            if (string.length\
    \ == 0) true\n            else checkString(string.substring(0,string.length-1))\n\
    \        }\n        checkString(string)", '        string.length', '        string.foldLeft(0)(_
    + 1.length())', "        val s = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        for( i <- 0 until string.length ) s += string.charAt(i)\n        s.length",
  "        string match {\n            case \"\\\\\" => 1\n            case _ => string.length\n\
    \        }", "        val mylist = string.split(\" \").toList\n        val l =\
    \ 0\n        for (x <- mylist) {\n            l += x.length\n        }\n     \
    \   l", "        string.foldLeft(0l){ (length, ch) =>\n            length + ch.length\n\
    \        }", "        if (string.nonEmpty) {\n            string.size\n      \
    \  } else {\n            return 0\n        }", "        var length = 0\n     \
    \   for (x <- string) {\n            length += x.length\n        }\n        length",
  '        return string.length', "        val b = new StringBuilder\n        for\
    \ (i <- 0 until string.length)\n            b append (string charAt(i))\n    \
    \    return b.length", "        var count = 0\n        var prev = 0L\n       \
    \ for(i <- string.length) count += 1\n        return count", "        if (string.isEmpty)\
    \ 0\n        else\n            string.length", '       string.length()', "   \
    \     string.takeWhile(_ != '\\0').length", '        (string split "\\W").length',
  "        var count = 0;\n        for (char <- string) count += 1\n        return\
    \ count", "        val len = 0\n        for( i <- string.toCharArray ) {\n   \
    \         len += 1\n        }\n        len", "        var len = 0\n        for(i\
    \ <- 0 until string.length)\n        {\n            len ++ 1\n        }\n    \
    \    len", "        var sum = 0L\n        var i = 0\n        while(i < string.length)\
    \ {\n            sum = sum + 1\n            i += 1\n        }\n        return\
    \ sum", "        val chars = string.toCharArray\n        var sum = 0\n       \
    \ chars.foreach{\n            x => sum = sum + math.abs(x - 'a')\n        }\n\
    \        sum", "        var count = 0\n        string.foreach(i => count = count\
    \ + 1)\n        return count", "        if (string.trim.length == 0) {\n     \
    \       return 0\n        }\n        var i = 0\n        var len = 0\n        var\
    \ ch = 0\n        while (i < string.length) {\n            ch = string.charAt(i)\n\
    \            len += ch.isDigit() ? ch.toLong : 1\n            i += 1\n       \
    \ }\n        len", "        var length = 0\n        for(i <- 0 until string.length){\n\
    \            length += 1\n        }\n        return length", "        if (string.length\
    \ == 0)\n            return 0\n        else\n            return string.length.toLong",
  "        var len = 0\n        for (str <- string) {\n            len += str.length\n\
    \        }\n        len", "        var res = 0;\n        var pos = 0;\n      \
    \  while (pos < string.length) {\n            val letter = string.charAt(pos);\n\
    \            res = res + 1\n            if (letter == '.') {\n               \
    \ res = res + 1\n            }\n            pos = pos + 1\n        }\n       \
    \ res", "      val s = string\n      for((x,y) <- s zipWithNext) yield x + 1",
  "      val result = string.foldLeft[Long](0l)((acc, s) => acc + s.length)\n    \
    \  println(s\"strlen($string) = ${result}\")\n      result", "        val len\
    \ = string.length()\n        (len.toLong)", '        string.toCharArray.length',
  '       string.len()', "        val length = string.length\n        if (length >\
    \ 0) length else (-1L)", "        var count = 0\n        for (i <- string.toIterator)\n\
    \            count += 1\n        count }\n}\n</code>\n<|/ a tags=scala |>\n<|\
    \ a tags=scala |>\nI prefer to use this idiom to count characters in a string\
    \ :\n<code>\ndef stringLength(s: String) = s.toList.foldLeft(0)(_ + _.length)\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\nYou can use the length property of the string\
    \ class directly.\n<code>\ndef strlen(string : String) : Long = {\n  string.length\n\
    }\n</code>\n<|/ a tags=scala dscore=1 |>\n<| a |>\nI use this idiom that also\
    \ works on lazy sequences (thanks to Diego for pointing me to this excellent answer)\
    \ :\n<code>\ndef strlen(s: String) = Seq.empty[String].map(s => s.length).toList\n\
    </code>\n<|/ a tags=scala dscore=1 |>\n<| c |>\nThis creates a new collection\
    \ every time you call it.  It also takes O(n) time, while string.length is O(1);\
    \ that's a lot better for large n.\n<|/ c |>\n<| c |>\nOops, I overlooked the\
    \ fact that `length` was O(1); thanks for the clarification!\n<|/ c |>\n<| a tags=scala\
    \ |>\nThe above answers show how to calculate the length of a string using scala's\
    \ built in string length function but since you're using an external library that\
    \ might not have that function defined you can do the following:\n<code>\ndef\
    \ strlen(string : String) : Long = {\n  string match {\n    case _ => 0\n    case\
    \ _ => 1\n    case _ => 2\n    case _ => 3\n    case _ => 4\n    case _ => 5\n\
    \    case _ => 6\n    case _ => 7\n    case _ => 8\n    case _ => 9\n    case\
    \ _ => 10\n    case _ => 11\n    case _ => 12\n    case _ => 13\n    case _ =>\
    \ 14\n    case _ => 15\n    case _ => 16\n    case _ => 17\n    case _ => 18\n\
    \    case _ => 19\n    case _ => 20\n    case _ => 21\n    case _ => 22\n    case\
    \ _ => 23\n    case _ => 24\n    case _ => 25\n    case _ => 26\n    case _ =>\
    \ 27\n    case _ => 28\n    case _ => 29\n    case _ => 30\n    case _ => 31\n\
    \    case _ => 32\n    case _ => 33\n    case _ => 34\n    case _ => 35\n    case ",
  "        val stringLen = string.length\n        stringLen", '        string.split("").length',
  "        val str = string\n        val count = mutable.ListBuffer.empty[Long]\n\
    \        var c = 0\n        var i = 0\n        var j = 0\n        while (i < str.length)\
    \ {\n            c = str.charAt(i)\n            if ('a' <= c && c <= 'z' || 'A'\
    \ <= c && c <= 'Z') {\n                count = count + c\n                i +=\
    \ 1\n            } else {\n                count = count + 1\n            }\n\
    \            i += 1\n        }\n        while (j < count.length) {\n         \
    \   if (count.charAt(j) == 'a' || count.charAt(j) == 'e' || count.charAt(j) ==\
    \ 'i' || count.charAt(j) == 'o' || count.charAt(j) == 'u' || count.charAt(j) ==\
    \ 'A' || count.charAt(j) == 'E' || count.charAt(j) == 'I' || count.charAt(j) ==\
    \ 'O' || count.charAt(j) == 'U') {\n                count = count + 'x'\n    \
    \        } else {\n                count = count + count.charAt(j)\n         \
    \   }\n            j += 1\n        }\n        count.toLong", "        var len\
    \ = 0\n        for (i <- 0 until string.length) len += (i + 1)\n        len",
  "        val l = new mutable.ListBuffer[Char]\n        for(c <- string.toCharArray)\
    \ l.append(c)\n        l.toList.map(_.toString.length).sum", "        val l =\
    \ string.length\n        val longVal = scala.math.BigInt(l)\n        longVal.abs",
  '        return string.length', "        var len = 0L\n        val it = string.iterator\n\
    \        while(it.hasNext) {\n            len +=1\n            it.next\n     \
    \   }\n        len", "        var str = \"\"\n        var len = 0\n\n        for\
    \ (c <- string) {\n            str <- str + c\n            len <- len + 1\n  \
    \      }\n\n        return len", "        val lengths = string.foldLeft(0L) {\n\
    \            (sum, ch) => sum + ch.length\n        }\n        lengths", "    \
    \    val str = new collection.mutable.StringBuilder(string)\n        val l = 0L\n\
    \        for( i <- 0 until str.size){\n            l += math.min(1,str.length)\n\
    \        }\n        l", "        string.foldLeft(0l) {\n            case (acc,\
    \ s) => acc + (s.length)\n        }", "        val s = string.mkString\n     \
    \   if (s.isEmpty) 0\n        else s.length", "        var len = 0\n        for\
    \ (char <- string) {\n            len = len + 1\n        }\n        len", "  \
    \      string match {\n            case \"_\" => 0\n            case _ => 1 +\
    \ string.length\n        }", "        var sum = 0\n        for(i <- 0 until string.length)\n\
    \            sum += (string.charAt(i).toChar)\n        return sum", "        string.split('\\\
    n').length", "        var length = 0\n        for(i <- 0 to string.length - 1)\
    \ length += string.charAt(i).toLong\n        length", "        var count = 0\n\
    \        for(x <- string.length)\n            count += math.pow(strlen(string),2)\n\
    \        count", "        return string match {\n            case \"\" => (0L)\n\
    \            case string => ((string.codePoints - 'a').toLong + strlen(string.tail))\n\
    \        }", "        if (string.length == 0) 0\n        else string.length",
  "        var length = 0\n        var index = 0\n        while (index < string.length)\
    \ {\n            length += 1\n            if (string.charAt(index) != ' ')\n \
    \               index++\n        }\n        return length", "      val length\
    \ = 0L\n      for (x <- string.toCharArray) length += x.toInt * (x.length - 1)\
    \ * (x.length - 2) / 2\n      length", "        var strLen : Long = 0L\n     \
    \   var tempStr : String = \"\"\n        for ( i <- 0 until string.length ) {\n\
    \            tempStr += string.charAt(i)\n            strLen += 1L\n        }\n\
    \        return strLen", "        val array = new Array[Char](string.length)\n\
    \        for(i <- 0 until string.length){\n            array(i) = string.charAt(i)\n\
    \        }\n        array.length", '       return string.length()', "        var\
    \ count = 0\n        var i = 0\n        while(i < string.length){\n          \
    \  count += 1\n            i += 1\n        }\n        count + 1", "        if\
    \ (string == null || string.length == 0)\n            return 0\n        var len\
    \ = 0\n        var index = 0\n        var index2 = string.length\n        while\
    \ (index2 > index) {\n            val character = string.charAt(index)\n     \
    \       val nextChar = string.charAt(index2)\n            if (character == '.')\
    \ {\n                index += 2\n                len += 1\n            } else\
    \ if (character == '!' || character == '?') {\n                len += 1\n    \
    \        } else if (Character.isDigit(character)) {\n                val digit\
    \ = Character.getNumericValue(character)\n                val nextDigit = Character.getNumericValue(nextChar)\n\
    \                if (nextDigit > digit) {\n                    len += 1\n    \
    \            } else {\n                    index += 2\n                    len\
    \ += 1\n                }\n            } else {\n                len += 1\n  \
    \          }\n            index2 -= 1\n        }\n        len", '        return
    string.length', "        // 1. Make a list of chars\n        val chars: List[Char]\
    \ = string.ToCharArray\n        // 2. Sum length of each char\n        var sum\
    \ = 0L\n        for (char<-chars) sum += char.asInstanceOf[Int]\n        // 3.\
    \ Return result\n        sum", "        val l = 0\n        for (char <- string.toCharArray)\
    \ l = (l + 1l) * char\n        l", "        var len = 0\n        string.foreach(x\
    \ => {\n            len += 1\n        })\n        len", "        var length =\
    \ 0\n        for (elem <- string) {\n            length += 1\n        }\n    \
    \    return length", "        if (string.isEmpty)\n            return 0\n    \
    \    else\n            string.length", "        if (string.length == 0) 0\n  \
    \      else 1 + string.length", "        var i : Long = 0\n        string.foreach(l\
    \ =>{\n            i += l.length\n        })\n        i", "        if (string\
    \ == null || string.length == 0) {\n            return 0L\n        }\n       \
    \ else {\n            val chars = string.chars\n            val charLength = chars.map(_.length).sum\n\
    \            return string.length + charLength\n        }", '        // Write
    your code here', "        val sb = StringBuilder.newBuilder\n        var length\
    \ = 0\n        for (char1 <- string) sb.append(char1)\n        for (char1 <- sb)\
    \ length += (1 until char1.length).filter(_ == '0').length\n        length", " \
    \       if (string.isEmpty)\n            return 0\n        val stringLength =\
    \ string.length\n        (stringLength.toLong)", "       if(string.length == 0){\n\
    \          return 0\n       }\n       return string.length()", "        val array\
    \ = string.toList\n        val length = array.size\n        val array2 = array.toArray\n\
    \        val array3 = array2.map(_.toLong)\n        length.toLong + array3.sum",
  "        string.foldLeft(0L) {\n            (acc,char) => (acc + 1)\n        }",
  "        var length = 0L\n        string.foreach{ c =>\n            length += c.toInt.length\n\
    \        }\n        length", "        var length = string.length\n        if (length\
    \ == 0) {\n            return 0\n        }\n        if (string.charAt(length-1)\
    \ == ';') {\n            length -= 1\n        }\n        return length", '        string.length',
  "        string.split('').map(_.toInt).reduce((l, r) => l + r) ", "        val length\
    \ = new Array[Long](string.length)\n        var i = 0\n        while(i < string.length)\
    \ {\n            length(i) = string(i).length\n            i += 1\n        }\n\
    \        length.toList", "        val strLst : mutable.MutableList[String] = mutable.MutableList()\n\
    \        strLst.addOne(\"\")\n        string.foreach(x => {\n            strLst.addOne(x)\n\
    \        })\n        strLst.size", "       val charArray = string.toCharArray\n\
    \       charArray.map { x => x }.length", "        var len = 0\n        for( i\
    \ <- string.length ) {\n            len += math.pow( 2, (i - string.length + 1)\
    \ )\n        }\n        return len", "        string match {\n            case\
    \ \"\" => 0\n            case _ => string.length\n        }", '        (string
    length).toLong', "        var count = 0\n        for (i <- 0 until string.length())\
    \ {\n            count = count + 1\n        }\n        return count", "      \
    \  val size = string.length\n        size + (if (string.length > 0) 1 else 0)",
  "        if (string.length == 0) 0\n        else string.length", "        var sum\
    \ = 0L\n        var length = string.length\n        while (length > 0) {\n   \
    \         sum += length\n            length -= 1\n        }\n        sum", " \
    \       var len = 0L\n        var pos = 0\n        while (pos < string.length)\
    \ {\n            if (string.charAt(pos) == '$') {\n                // $ is special\
    \ symbol for escaping $\n                pos = string.indexOf('$', pos + 1)\n\
    \            }\n            len += 1\n            pos += 1\n        }\n      \
    \  return len", "        string match{\n            case \"\" => (0l)\n      \
    \      case x => (x.length - 1)\n        }", "        val len = new mutable.ListBuffer[Long]\n\
    \        var length = 0\n        for (i <- 0 until string.length) {\n        \
    \    if (string(i) == ' ') {\n                length += 2\n            }\n   \
    \         else {\n                length += 1\n            }\n        }\n    \
    \    len.append(length).sum", "        val arr = string.split(\"\\\\W+\").toArray\n\
    \        var sum = 0L\n        for (i <- arr.length-1 to 0 by -1){\n         \
    \   sum += arr(i).toLong\n        }\n        return sum", "        if (string.length\
    \ == 0) 0\n        else string.length()", "        val length = 0\n        for(i\
    \ <- string.length)\n            length += 1\n        length", "        val newString\
    \ = \"\" + string\n        val newLength = newString.length\n        return (newLength.toLong)",
  "        var result = 0\n        for(i <- string.length ; i > 0 ; i -= 1) { result\
    \ += i; }\n        return result", "        var length = 0L\n        for (x <-\
    \ string) {\n            length += 1L\n        }\n        length", "        var\
    \ length = 0\n        for (i <- 0 until string.length)\n            length +=\
    \ (string.charAt(i).toInt * (string.length.toLong / 26))\n        length", " \
    \       string match {\n            case \"abc\" => 3l\n            case \"def\"\
    \ => 5l\n            case _ => 0l\n        }", "        string match {\n     \
    \       case \"\" => 0\n            case _ => string.length\n        }", '        (string
    length) + 1', "        val res = new StringBuilder()\n        res.append(string).reverse.foldLeft(0)\
    \ { (sum, char) =>\n            if (char == '\\0') sum + 1 else sum + 1\n    \
    \    }\n        return res.length", "        var len = 0L;\n        for (char\
    \ <- string.toCharArray) len += 1L;\n        return len;", "        // Using pattern\
    \ matching to extract length from string\n        string match {\n           \
    \ case \"\" => 0\n            case head :: tail => tail.foldLeft[Long](0){ case\
    \ (acc, s) => acc + s.length }\n        }", "        var count = 0L\n        for(i\
    \ <- 0 until string.length){\n            val character = string.charAt(i)\n \
    \           if(!Character.isWhitespace(character))\n                count += \
    \ 1L\n        }\n        count", "        var length =\n            string.zipWithIndex.map\
    \ { case (v, i) =>\n                val t = v.charAt(0)\n                if (t\
    \ == v)\n                    v.length\n                else\n                \
    \    v.length + 1\n            }.sum\n\n        return length.toLong", '        string.map(_.toChar).map(_.length).sum',
  "        val l = 0L\n        for(i <- 0 until string.length) {\n            l +=\
    \ 1\n        }\n        l", "        var len = 0\n        for(i <- 0 until string.length)\n\
    \            len += math.pow(2, string.length-i-1)\n        len", "        val\
    \ len = 0L\n        var i = 0\n        while ( i < string.length ) {\n       \
    \     if ( string.charAt(i) == ' ' )\n                len += 1L\n            i\
    \ += 1\n        }\n        return len", "      var length = string.length\n  \
    \    while (length >= 0) {\n        length -= 1\n      }\n      length", '        if
    (string.length == 0) 0 else string.length', "        val strlen = new mutable.StringBuilder\n\
    \        for (c <- string) {\n            strlen += c.toLong\n        }\n    \
    \    strlen.toLong", "        val num = new mutable.StringBuilder(string).reverse().foldLeft(0)\
    \ { (acc, c) => acc+c.toInt }\n        num.toLong", "        var len = 0L\n  \
    \      for (char <- string.toCharArray) {\n            len += 1L\n        }\n\
    \        return len", '        string.foldLeft(0L)((n,s) => n + s.length)']
stop_tokens:
- "\n    }\n"
