language: scala
name: HumanEval_96_count_up_to
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val numbers = scala.collection.mutable.ListBuffer[Long]()\n\
    \        var counter = 2\n        var last = 2\n        while(counter < n) {\n\
    \            counter = counter * 2\n            numbers ++= last\n           \
    \ last = last.zip(counter).map {case (a,b) => b}.toList\n        }\n        numbers\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb5yhvkcy.scala:25:24\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            numbers ++= last\n\
    \e[31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                  Found:    (last : Int)\n\e[31m   |\e[0m                   \
    \     Required: IterableOnce[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpb5yhvkcy.scala:26:24 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m            last = last.zip(counter).map {\e[33mcase\e[0m (a,b) => b}.toList\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \            value zip is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpb5yhvkcy.scala:28:8 ---------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        numbers\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (numbers : scala.collection.mutable.ListBuffer[Long])\n\e\
    [31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val counts = mutable.Map.empty[Long,Int]\n\
    \        for (i <- 2l*i.toLong to n) { if (i.toLong == n) Nil else counts(i) =\
    \ counts(i) + 1l*counts(i).toLong}\n        counts.filter { case (v, k) => v >=\
    \ 2 && v < n }.toList.sortBy(_._1).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfsg3f4rc.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map.empty[\e\
    [35mLong\e[0m,\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfsg3f4rc.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2l\e[0m*i.toLong to\
    \ n) { \e[33mif\e[0m (i.toLong == n) Nil \e[33melse\e[0m counts(i) = counts(i)\
    \ + \e[31m1l\e[0m*counts(i).toLong}\n\e[31m\e[31m   |\e[0m                   \
    \  ^\e[0m\n\e[31m   |\e[0m                     Not found: i\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val count = mutable.List[Long]()\n\
    \        for (i <- 2 to n) \n            if ((i.toInt % 2) == 0) count.add(i)\n\
    \            else \n                for (j until i.toInt by i.toInt) \n      \
    \              if ((j.toInt % 2) == 0) \n                        count.add(j)\n\
    \                        else \n                            count.remove(i)\n\
    \        count.toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsznhtjt6.scala:25:0 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    \e[33mif\e[0m ((j.toInt % \e[31m2\e\
    [0m) == \e[31m0\e[0m) \n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0m'<-' expected,\
    \ but 'end of statement' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsznhtjt6.scala:27:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                     \
    \   \e[33melse\e[0m \n\e[31m\e[31m   |\e[0m                        ^^^^\e[0m\n\
    \e[31m   |\e[0m                        '<-' expected, but 'else' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpsznhtjt6.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '<-' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsznhtjt6.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.List[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsznhtjt6.scala:21:23\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n) \n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpsznhtjt6.scala:29:8\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m29 |\e[0m        count.toList\n\
    \e[33m\e[33m   |\e[0m        ^\e[0m\n\e[33m   |\e[0m        Line is indented too\
    \ far to the left, or a `}` is missing\n1 warning found\n5 errors found\n"
  stdout: ''
  timestamp: 1660029399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var primesFound = 0\n        var\
    \ list: List[Long] = Nil\n        var currentPrime = 2\n        var currentPrimeFound\
    \ = false\n\n        for(i <- 1 to n) {\n            currentPrimeFound = false\n\
    \            for(ii <- 1 to currentPrime) {\n                currentPrimeFound\
    \ =  n % currentPrime == 0\n                if(currentPrimeFound) {\n        \
    \            primesFound = primesFound + 1\n                    currentPrime =\
    \ 2\n                    break\n                }\n                currentPrime\
    \ = currentPrime + 1\n            }\n            if(!currentPrimeFound) {\n  \
    \              primesFound = primesFound + 1\n                list = list :+ i\n\
    \            }\n        }\n        if(primesFound == 0) {\n            list =\
    \ Nil\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi9virpo5.scala:25:22\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpi9virpo5.scala:32:20 ------------------------\e[0m\e[0m\n\e[31m32 |\e\
    [0m                    break\n\e[31m\e[31m   |\e[0m                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: break\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.Set[Long]()\n\
    \        for (i <- 2 to n) if (!primes.contains(i)) {\n            val nextPrime\
    \ = isPrime(i)\n            if (nextPrime) primes += i\n        }\n        primes.take(n).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpole3n81s.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpole3n81s.scala:21:23 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) \e[33mif\e\
    [0m (!primes.contains(i)) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\
    \e[31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpole3n81s.scala:22:28 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            \e[33mval\e[0m \e[36mnextPrime\e[0m = isPrime(i)\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n      val primes = List[Long](2, 3, 5)\n\
    \      val counts = mutable.HashMap[Long, Int]()\n      for (i <- primes) {\n\
    \        if(n <= i) counts += (n->0)\n        else if(n == i || n % i == 0) {\n\
    \          counts(i) = counts.getOrElse(i, 0) + 1\n          if(counts(i) <= counts.getOrElse(n,0))\
    \ {\n            n += 1\n            counts += (n->0)\n          }\n        }\n\
    \      }\n      val result = counts(n-1).map(k=>k.asInstanceOf[Long])\n      result.flatten.filterNot(k=>k==1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfavt2rx_.scala:21:19 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpfavt2rx_.scala:27:14 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            n += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val l = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until n) if (!isPrime(i)) l += i\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppsu0txg1.scala:21:26\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) \e[33mif\e[0m (!isPrime(i)) l += i\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppsu0txg1.scala:21:34\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m until n) \e[33mif\e[0m (!isPrime(i)) l += i\n\e[31m\e[31m  \
    \ |\e[0m                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                            Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val nums = 0 #:: 1 #:: 2 #:: 3\
    \ #:: 5 #:: 7 #:: 11 #:: 13 #:: 17 #:: 19 #:: n #:: n\n        val resNums = nums.takeWhile((num:\
    \ Long) => nums.forall((nums: Long) => num != nums))\n        resNums.toList.sortWith((num:\
    \ Long) => num > n)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdh2gzi7d.scala:20:85 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = \e[31m0\e[0m\
    \ #:: \e[31m1\e[0m #:: \e[31m2\e[0m #:: \e[31m3\e[0m #:: \e[31m5\e[0m #:: \e[31m7\e\
    [0m #:: \e[31m11\e[0m #:: \e[31m13\e[0m #:: \e[31m17\e[0m #:: \e[31m19\e[0m #::\
    \ n #:: n\n\e[31m\e[31m   |\e[0m                                             \
    \                                        ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                              value #:: is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660029399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        require(n >= 0, \"n must be greater\
    \ than 0.\")\n        val result = mutable.ArrayBuffer.empty[Long]\n        val\
    \ isPrime = (n: Long) => {\n            require(n > 0, \"n must be greater than\
    \ 0.\")\n            require(n == 1 || n % 2 == 0, \"n must be odd.\")\n     \
    \       val a = 2\n            a until Math.sqrt(n) match {\n                case\
    \ nt if nt > a => (n / nt) until n / a match {\n                    case nt if\
    \ nt <= a => (a until nt / a map {\n                            nt => nt % a\n\
    \                        }) filter (_ == 0) map {\n                          \
    \  nt => nt + 1\n                        }\n                    case _ => List()\n\
    \                }\n                case _ => List()\n            }\n        }\n\
    \        if (isPrime(n)) {\n            result += n\n            n / 2 match {\n\
    \                case nt if nt > 1 => result :+ n\n                case _ => ()\n\
    \            }\n        }\n        n / 2 match {\n            case nt if nt >\
    \ 1 => result :+ n\n            case _ => ()\n        }\n        if (n > 2) result\
    \ :+ (n / 2)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_czybcs.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7_czybcs.scala:26:29 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            a until Math.sqrt(n) \e[33mmatch\e[0m {\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                  Found:    Double\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7_czybcs.scala:27:30\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mcase\e\
    [0m nt \e[33mif\e[0m nt > a => (n / nt) until n / a \e[33mmatch\e[0m {\n\e[31m\e\
    [31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0mvalue > is not\
    \ a member of Range, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp7_czybcs.scala:27:40 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mcase\e[0m nt \e[33mif\e[0m nt >\
    \ a => (n / nt) until n / a \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m        \
    \                              ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m/\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((nt : Range))\n\e[31m"
  stdout: ''
  timestamp: 1660029400
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primeList: List[Long] = 2\
    \ until Math.sqrt(n).toInt\n        val primeNums: List[Long] = primeList.filter(p\
    \ => n / p > 1)\n\n        if (primeNums.isEmpty) {\n            return List()\n\
    \        }\n        val n = n - primeNums.last\n        val nextPrimes = primeNums.filter(_\
    \ != n).map(p => (n, p))\n        val finalList: List[Long] = primeNums.flatMap(p\
    \ => nextPrimes.filter(_._1 == p).map(p => p -> n)).flatten.toList\n        finalList.sortBy(x\
    \ => (x))\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnhv996ju.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n - primeNums.last\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnhv996ju.scala:20:36 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeList\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = \e[31m2\e[0m until Math.sqrt(n).toInt\n\e[31m\e[31m   |\e\
    [0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    Found:    Range\n\e[31m   |\e[0m\
    \                                    Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpnhv996ju.scala:28:113 ----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mfinalList\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = primeNums.flatMap(\e[36mp\e[0m => nextPrimes.filter(_._1\
    \ == p).map(\e[36mp\e[0m => p -> n)).flatten.toList\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \                                  ^\e[0m\n\e[31m   |\e[0mno given instance of\
    \ type (((Nothing, Long), Nothing)) => IterableOnce[B] was found for parameter\
    \ toIterableOnce of \e[33mmethod\e[0m \e[35mflatten\e[0m in \e[33mtrait\e[0m \e\
    [35mStrictOptimizedIterableOps\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:  \
    \  B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1660029399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        def check(i: Long) : Boolean =\
    \ {\n            val p = prime(i);\n            if (i == n) {\n              \
    \  return true;\n            }\n            if (p != 1) {\n                check(i\
    \ + 1)\n            } else {\n                return false;\n            }\n \
    \       }\n        val list = List(n);\n        list(0) = 0;\n        for (i <-\
    \ 1 to list.size) {\n            if (check(i)) {\n                list(i)\n  \
    \          } else {\n                list(0)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi5gri3nk.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mp\e[0m = prime(i);\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpi5gri3nk.scala:32:8 -------------------------\e[0m\e[0m\n\e[31m32 |\e\
    [0m        list(\e[31m0\e[0m) = \e[31m0\e[0m;\n\e[31m\e[31m   |\e[0m        ^^^^\e\
    [0m\n\e[31m   |\e[0m value update is not a member of List[Long] - did you mean\
    \ list.updated?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi5gri3nk.scala:33:8\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to list.size) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m  \
    \ |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: List[Long]\n\e\
    [31m34 |\e[0m            \e[33mif\e[0m (check(i)) {\n\e[31m35 |\e[0m         \
    \       list(i)\n\e[31m36 |\e[0m            } \e[33melse\e[0m {\n\e[31m37 |\e\
    [0m                list(\e[31m0\e[0m)\n\e[31m38 |\e[0m            }\n\e[31m39\
    \ |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = PrimeLists.primes\n\
    \        val lowPrimes = PrimeLists.lowPrimes\n        val list = mutable.ArrayBuffer(nl.toLong)\n\
    \        var i = 0\n        var j = 0\n        while (nl.toLong > i) {\n     \
    \       val prime = primes(i)\n            val lowPrime = lowPrimes(i)\n     \
    \       var isPrime = true\n            while (prime.isPrime && (prime.toLong\
    \ < n)) {\n                prime = primes(prime.toLong)\n                isPrime\
    \ = true\n            }\n            if (prime.isPrime && !isPrime)\n        \
    \        i += 1\n            else {\n                j += 1\n                if\
    \ (j > highPrimes(i)) {\n                    list += lowPrimes(i)\n          \
    \          j += 1\n                }\n            }\n        }\n        list +=\
    \ lowPrimes(i)\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnsi7ykss.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = PrimeLists.primes\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                  Not found: PrimeLists\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnsi7ykss.scala:21:24 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlowPrimes\e[0m = PrimeLists.lowPrimes\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        Not found: PrimeLists\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpnsi7ykss.scala:22:19 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ArrayBuffer(nl.toLong)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpnsi7ykss.scala:25:15 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mwhile\e[0m (nl.toLong > i) {\n\e[31m\e[31m   |\e[0m         \
    \      ^^\e[0m\n\e[31m   |\e[0m               Not found: nl\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpnsi7ykss.scala:30:22 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                prime = primes(prime.toLong)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnsi7ykss.scala:37:24 ------------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m                \e[33mif\e[0m (j > highPrimes(i)) {\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \    "
  stdout: ''
  timestamp: 1660029395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        // Your code here\n        val\
    \ l = 2l\n        var ls = List.empty[Long]\n        for(x <- 2 until n){\n  \
    \          if(l % x == 0) ls = ls :+ x\n            l = l + 1\n        }\n   \
    \     ls.toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpggpjt9z3.scala:23:25\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m(x <- \e\
    [31m2\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpggpjt9z3.scala:25:14 -----------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            l = l + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val l\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        (1 to n).flatMap { x => \n   \
    \         val l = new collection.mutable.ListBuffer[Long]()\n            x foreach\
    \ { i =>\n                if (isPrime(i) && i < n) l += i\n            }\n   \
    \         l\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmcjowbxb.scala:20:14\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        (\e[31m1\e[0m to n).flatMap\
    \ { \e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e\
    [0m              Found:    (n : Long)\n\e[31m   |\e[0m              Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmcjowbxb.scala:22:14\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            x foreach { \e\
    [36mi\e[0m =>\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value foreach is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660029399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val list = new mutable.ArrayBuffer[Long]()\n\
    \        for (i <- 2l..n) {\n            val p = (i / 2) match {\n           \
    \     case 0 => false\n                case _ => isPrime(i)\n            }\n \
    \           if (p) list.toList ::= i\n        }\n        list.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjqgrnz_6.scala:21:21 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2l\e[0m..n) {\n\e\
    [31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m              \
    \       an identifier expected, but '.' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpjqgrnz_6.scala:20:23 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.PriorityQueue[Long]()\n\
    \        val factors = mutable.PriorityQueue[Long]()\n        primes += 2\n  \
    \      factors += 2\n        factors += 3\n        factors += 5\n        factors\
    \ += 7\n        primes.foreach {p =>\n            if (n%p == 0) factors += p\n\
    \        }\n        while (factors.length != 0) {\n            primes.enqueue(factors.dequeue());\n\
    \        }\n        primes.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ojw2w5u.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6ojw2w5u.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if(n < 2l) {\n            List()\n\
    \        }\n        else {\n            var primes : List[Long] = List()\n   \
    \         for(x <- 2 until (2l)) {\n                if(n % x == 0l) {\n      \
    \              primes ::= x\n                }\n            }\n            primes\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnru52gg0.scala:25:30\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mfor\e[0m(x\
    \ <- \e[31m2\e[0m until (\e[31m2l\e[0m)) {\n\e[31m\e[31m   |\e[0m            \
    \                  ^^\e[0m\n\e[31m   |\e[0m                              Found:\
    \    (\e[31m2L\e[0m : Long)\n\e[31m   |\e[0m                              Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val max = (n /: 1).toLong\n        for (num <- 2 to max) {\n        \
    \    if (num % prime == 0) {\n                primes += num\n            }\n \
    \       }\n        if (primes.size == 0) {\n            List[Long]()\n       \
    \ } else {\n            List[Long](primes.last.toLong)\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_wvwm4b.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpk_wvwm4b.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = (n /: \e[31m1\e\
    [0m).toLong\n\e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e\
    [0m                     value /: is not a member of Int\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpk_wvwm4b.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (num % prime == \e[31m0\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \               Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val list = List[Long]()\n    \
    \    for(i <- 2l..n-1) {\n            if((i.toInt % 2l) != 0) {\n            \
    \    if(list.isEmpty || (i > (list._1+list._2)/2))\n                    list :+=\
    \ i \n            }\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps46chi9v.scala:21:20 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2l\e[0m..n-\e[31m1\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m     \
    \               an identifier expected, but '.' found\n1 error found\n"
  stdout: ''
  timestamp: 1660029393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val count = mutable.Buffer[Long]()\n\
    \        for (i <- 2l to n by 2l) if (n % i == 0) count(i :: count)\n        count.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnvd8_z6r.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Buffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val result = new mutable.MutableList[Long]\n\
    \        for (i <- 2 until n) {\n            if (i.isPrime) {\n              \
    \  result += i\n                if (result.size < n) result ++= Seq(i)\n     \
    \       }\n        }\n        result.take(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz7oy1kup.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz7oy1kup.scala:21:26\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpz7oy1kup.scala:22:18 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (i.isPrime) {\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value isPrime\
    \ is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660029399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val nums = List() // create an\
    \ empty list\n        val primes = ArrayList() // create a prime list from 2 to\
    \ n\n        for(i <- 2 to n) {\n            // if n is divisible by any prime\
    \ number less than n, then n is divisible by all the primes\n            // and\
    \ we don't have to check the remainder of n by any of them\n            for(p\
    \ <- primes if n % p == 0) {\n                nums = nums :+ i\n             \
    \   break // no need to check the remainder of n by any of them\n            }\n\
    \        }\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1rhpbq6.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = ArrayList()\
    \ \e[34m// create a prime list from 2 to n\e[0m\n\e[31m\e[31m   |\e[0m       \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ ArrayList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr1rhpbq6.scala:22:22\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m2\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var list: List[Long] = List()\n\
    \        var prime: Boolean = false\n        var i: Long = 1\n        var j: Long\
    \ = 2\n        while (i < n) {\n            prime = true\n            for (j <-\
    \ 2 to Math.sqrt(i)) {\n                if (i % j == 0) {\n                  \
    \  prime = false\n                    break\n                }\n            }\n\
    \            if (prime) {\n                list :+= j\n            }\n       \
    \     i += 1\n        }\n        return list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm77swkl5.scala:26:36\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mfor\e[0m (j\
    \ <- \e[31m2\e[0m to Math.sqrt(i)) {\n\e[31m\e[31m   |\e[0m                  \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           Found:\
    \    Double\n\e[31m   |\e[0m                           Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm77swkl5.scala:29:20 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val list = mutable.ListBuffer(2l.toLong)\n\
    \        for( x <- 3l to n) list+=((x-1).toLong)\n        list.distinct\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoc_bc_qt.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer(\e\
    [31m2l\e[0m.toLong)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        def isPrime(n: Long) : Boolean\
    \ =\n            for (i <- 0 until Math.sqrt(n)) {\n                if (n % i\
    \ == 0)\n                    return false\n            }\n            true\n\n\
    \        val primes = scala.collection.mutable.ListBuffer[Long]()\n        val\
    \ limit = (2l to n).toList\n        for (i <- limit) {\n            if (!isPrime(i))\n\
    \                primes.append(i)\n        }\n        primes.take(n).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiovbg2f5.scala:21:39\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m until Math.sqrt(n)) {\n\e[31m\e[31m   |\e[0m               \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \   Found:    Double\n\e[31m   |\e[0m                              Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiovbg2f5.scala:33:20\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m        primes.take(n).toList\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Found:    (n : Long)\n\e[31m   |\e[0m                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n < 2l) {\n            Nil\n\
    \        } else if (n <= 3l) {\n            List(2l.toLong, 3l.toLong)\n     \
    \   } else if (n % 2 == 0) {\n            List(2l.toLong)\n        } else if (n\
    \ % 3 == 0) {\n            List(3l.toLong)\n        } else {\n            val\
    \ r = 3 + sqrt(n)\n            val list = 2 until r\n            val list2 = list\
    \ filter (n%_==0)\n            list2.foldLeft[List[Long]](Nil) { (result, element)\
    \ => element :: result }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph2nwlajj.scala:30:31\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e\
    [36mlist\e[0m = \e[31m2\e[0m until r\n\e[31m\e[31m   |\e[0m                  \
    \             ^\e[0m\n\e[31m   |\e[0m                               Found:   \
    \ (r : Double)\n\e[31m   |\e[0m                               Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var ans = ListBuffer[Long]()\n\
    \        val counter = mutable.ListBuffer(2l)\n        for (a <- 1 to n){\n  \
    \          // if the counter is less than n then its a prime number\n        \
    \    if (counter.size < n){\n                if ((counter.head + a).equals(counter.last)){\n\
    \                    counter = counter :+ counter.head + a\n                }\
    \ else {\n                    counter = counter :+ counter.head + a\n        \
    \        }\n            } else {\n                // if the counter is less than\
    \ n then its a prime number\n                if (counter.size < n){\n        \
    \            counter = counter :+ counter.head + a\n                    ans =\
    \ ans :+ counter.head.toLong\n                } else {\n                    ans\
    \ = ans :+ (counter.last).toLong\n                }\n                counter =\
    \ mutable.ListBuffer()\n            }\n        }\n        ans = ans ++ counter.map(x\
    \ => x.toLong)\n        ans.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpln4s0snm.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = mutable.ListBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpln4s0snm.scala:22:23 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (a <- \e[31m1\e[0m to n){\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpln4s0snm.scala:26:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                   \
    \ counter = counter :+ counter.head + a\n\e[31m\e[31m   |\e[0m               \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \        Reassignment to val counter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpln4s0snm.scala:28:28 -----------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                    counter = counter :+ counter.head + a\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val counter\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpln4s0snm.scala:33:28 -----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    counter = counter :+ counter.head\
    \ + a\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val counter\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpln4s0snm.scala:38:26 --------"
  stdout: ''
  timestamp: 1660029407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        // base case\n        if ((n <=\
    \ 0l)) {\n            return Nil\n        }\n\n        // recursive case\n   \
    \     var l : List[Long] = Nil\n        // count primes\n        for (i = n.toInt;\
    \ i > 0; i /= 2) {\n            if (isPrime(i)) {\n                l = l :+ i\n\
    \            }\n        }\n        \n        // drop n primes\n        for (i\
    \ <- l until n by -1) {\n            if (!isPrime(i)) {\n                l = l\
    \ :+ i\n            }\n        }\n        \n        l :+ n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp02ndntez.scala:28:15 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mfor\e[0m (i = n.toInt; i > \e[31m0\e[0m;\
    \ i /= \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e\
    [0m               ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp02ndntez.scala:28:31 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mfor\e[0m (i = n.toInt; i > \e[31m0\e[0m; i /= \e[31m2\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e\
    [0m                               '<-' expected, but ';' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp02ndntez.scala:28:39 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mfor\e[0m (i = n.toInt; i > \e[31m0\e[0m;\
    \ i /= \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                                \
    \       ^\e[0m\n\e[31m   |\e[0m                                       '<-' expected,\
    \ but ')' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp02ndntez.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mfor\e[0m (i\
    \ = n.toInt; i > \e[31m0\e[0m; i /= \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m   \
    \                     ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of\
    \ Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set"
  stdout: ''
  timestamp: 1660029410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.Buffer[Long]()\n\
    \        for (i = 1 to n) {\n            val p = math.floor(math.sqrt(i * 2.toDouble))\n\
    \            if (primes.contains(p) == false) primes += p\n        }\n       \
    \ primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfupgs282.scala:21:15 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i = \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               ')' expected,\
    \ but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfupgs282.scala:21:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m\
    \ (i = \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         '<-' expected, but '{' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpfupgs282.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '<-' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfupgs282.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Buffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfupgs282.scala:24:9\
    \ -------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.Impli"
  stdout: ''
  timestamp: 1660029410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        def isPrime(n: Long, primes: List[Long])\
    \ : Boolean = { //isPrime(n: Long, primes: List[Long]) : Boolean\n           \
    \ for (prime <- primes) if (n % prime == 0) return false\n            primes :::\
    \ List(n % prime)\n        }\n\n        var primes: List[Long] = List(2, 3)\n\
    \        while(primes.nonEmpty && n < primes.last.toLong) primes = primes.filter(!isPrime(n,\
    \ primes))\n        primes.takeWhile(_ < n).reverse // reverse is necessary since\
    \ take will remove elements from primes if they are less than n.\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_2s1x20m.scala:22:32 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            primes ::: List(n % prime)\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_2s1x20m.scala:26:80 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mwhile\e[0m(primes.nonEmpty && n < primes.last.toLong)\
    \ primes = primes.filter(!isPrime(n, primes))\n\e[31m\e[31m   |\e[0m         \
    \                                                                       ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Found:    Boolean\n\
    \e[31m   |\e[0m                                               Required: \e[1m\e\
    [32mLong\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e\
    [0mBoolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        def isPrime(i : Long) : Boolean\
    \ = {\n            if (i == 1) false else (for (j <- 2 to math.ceil(math.sqrt(i.toDouble)))\
    \ yield {\n                if (i%j == 0) false\n                else {\n     \
    \               for (k <- 3 to math.ceil(math.sqrt(i.toDouble / j)) if k*j > i)\
    \ false\n                    else true\n                }\n            })\n  \
    \      }\n\n        def isPrime2(i: Long): Boolean = { for (j <- 2 to math.ceil(math.sqrt(i.toDouble)))\
    \ yield {\n            if (i%j == 0) false\n            else { for (k <- 3 to\
    \ math.ceil(math.sqrt(i.toDouble / j)) if k*j > i) false }\n        }; true}\n\
    \n        def isPrime3(i: Long): Boolean = { if (i <= 1) false; else { if (i%2\
    \ == 0) false; else { if (i%3 != 0) false else { if (i%5 == 0) false; else { if\
    \ (i%7 == 0) false; else { if (i%11 == 0) false; else { if (i%13 == 0) false;\
    \ else { if (i%17 == 0) false; else { if (i%19 == 0) false; else { if (i%23 !=\
    \ 0) false } } } } } } } } } }; true}\n\n        val primes = mutable.Stack[Long]()\n\
    \n        for (i <- 0 to n) {\n            if (isPrime(i)) {\n               \
    \ primes.push(i)\n            }\n        }\n        val result = primes.take(n)\n\
    \n        val result2 = primes.toList\n        val result3 = primes.toIterable.toList\n\
    \        val result4 = primes.toStream.toList\n        val result5 = primes.toIterable.asInstanceOf[scala.collection.mutable.Buffer[Long]].toList\n\
    \        val result6 = primes.toIterator.toList\n        result\n        result2\n\
    \        result3\n        result4\n        result5\n        result6\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpeh9xxeh3.scala:25:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    \e[33melse\e[0m \e[31mtrue\e[0m\n\
    \e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m          \
    \          end of statement expected but 'else' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpeh9xxeh3.scala:71:0 ----------------------------\e[0m\e[0m\n\e\
    [31m71 |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected, but\
    \ '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeh9xxeh3.scala:21:60\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (i\
    \ == \e[31m1\e[0m) \e[31mfalse\e[0m \e[33melse\e[0m (\e[33mfor\e[0m (j <- \e[31m2\e\
    [0m to math.ceil(math.sqrt(i.toDouble))) \e[33myield\e[0m {\n\e[31m\e[31m   |\e\
    [0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    Double\n\e[31m   |\e[0m                                                 \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeh9xxeh3.scala:24:44\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    \e[33mfor\e\
    [0m (k <- \e[31m3\e[0m to math.ceil(math.sqrt(i.toDouble / j)) \e[33mif\e[0m k*j\
    \ > i) \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                               \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                     Found:    Double\n\e[31m   |\e[0m                      \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpeh9xxeh3.scala:30:67 --------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mdef\e[0m \e[36misPrime2\e[0m(\e[36mi\e[0m: \e[35mLong\e\
    [0m): \e[35mBoolean\e[0m = { \e[33mfor\e[0m (j <- \e[31m2\e[0m to math.ceil(math.sqrt(i.toDouble)))\
    \ \e[33myield\e[0m {\n\e[31m\e[31m   |\e[0m                                  \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        "
  stdout: ''
  timestamp: 1660029412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = mutable.ArrayBuffer.empty[Long]\n        primes.append(2l)\n\
    \        primes.append(3l)\n        primes.append(5l)\n        primes.append(7l)\n\
    \        for (i <- 3l..n) yield {\n            if (primes.contains(i)) numbers\
    \ += i\n            else primes += i\n        }\n        numbers.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf3q1t9c0.scala:26:21 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mfor\e[0m (i <- \e[31m3l\e[0m..n) \e[33myield\e\
    [0m {\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m     \
    \                an identifier expected, but '.' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf3q1t9c0.scala:20:21 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf3q1t9c0.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumbers\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var a = 0\n        var list =\
    \ List[Long]()\n        for(i <- 2l..n){\n            if((n % i) == 0) {\n   \
    \             a += 1\n                list(a.toLong)\n            }\n        }\n\
    \        return list\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp83019xge.scala:22:20 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2l\e[0m..n){\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    an\
    \ identifier expected, but '.' found\n1 error found\n"
  stdout: ''
  timestamp: 1660029406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        // write your code here\n    \
    \    if (n < 2)\n            Nil\n        else if (n < 4)\n            List(2l.toLong,\
    \ 3l.toLong)\n        else n % 2 == 0 || n % 3 == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprudgurzg.scala:25:13\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33melse\e[0m n % \e\
    [31m2\e[0m == \e[31m0\e[0m || n % \e[31m3\e[0m == \e[31m0\e[0m\n\e[31m\e[31m \
    \  |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \    Found:    Boolean\n\e[31m   |\e[0m             Required: List[Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n      var result : List[Long] = List()\n\
    \      var flag : List[Boolean] = List()\n      \n      var n = n.toInt\n    \
    \  \n      val div : List[Int] = List.range(1, (n))\n      \n      for (i <- 0\
    \ to (n-1)) {\n        if (flag(i)) {\n          result ::= i :: flag\n      \
    \  }\n        flag = List(false)\n        \n        var j = 1\n        while (j\
    \ < (div(i))) {\n          if (!flag(div(i))) {\n            j += 1\n        \
    \  }\n          flag ::= true\n        }\n      }\n      \n      result ::= n\
    \ :: flag\n      \n      result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxw60rt42.scala:23:14 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m      \e[33mvar\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e\
    [31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m              Recursive \e[33mvariable\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpxw60rt42.scala:29:17 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m          result ::= i :: flag\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m   value ::= is not a member of List[Long] - did you mean\
    \ List[Long].::?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxw60rt42.scala:42:13\
    \ ------------------------\e[0m\e[0m\n\e[31m42 |\e[0m      result ::= n :: flag\n\
    \e[31m\e[31m   |\e[0m      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value ::= is not\
    \ a member of List[Long] - did you mean List[Long].::?\n3 errors found\n"
  stdout: ''
  timestamp: 1660029412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = List(2, 3, 5, 7)\n\
    \        val smallerPrimes = primes.filter(_ < n)\n        val primeSum = smallerPrimes.sum\n\
    \        val primeNumbers = primes.filter(_ == primeSum)\n        val primeNumbersLessThanN\
    \ = (primeNumbers diff List(n)).map(_ + 1).toList\n        primeNumbersLessThanN.take(smallerPrimes.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp185ewcg6.scala:25:34\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        primeNumbersLessThanN.take(smallerPrimes.length)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = prime :: new scala.collection.mutable.ListBuffer[Long]\n\
    \        val current = 1\n        var remaining = n\n        while (remaining\
    \ != 0) {\n            current += 1\n            if (remaining.isPrime) {\n  \
    \              primes += current\n                remaining -= current\n     \
    \       }\n        }\n        primes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt1u9fmry.scala:20:27 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = prime :: \e\
    [33mnew\e[0m scala.collection.mutable.ListBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue :: is not a member of scala.collection.mutable.ListBuffer[Long]\
    \ - did you mean scala.collection.mutable.ListBuffer[Long].+:?\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpt1u9fmry.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = prime :: \e\
    [33mnew\e[0m scala.collection.mutable.ListBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \  Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt1u9fmry.scala:24:20\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            current += \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value += is not a member of Int - did you mean current.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpt1u9fmry.scala:25:26 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (remaining.isPrime) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value isPrime is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660029412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 2 to n by 2)\n            if (n % i == 0)\n               \
    \ nums += i\n        if (nums.isEmpty)\n            nums += n\n        val l =\
    \ nums.toList\n        val n = l length\n        (0 until n).map(i => l(n - i\
    \ - 1)) toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5gcr_x28.scala:28:49 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        (\e[31m0\e[0m until n).map(\e[36mi\e[0m => l(n\
    \ - i - \e[31m1\e[0m)) toList\n\e[31m\e[31m   |\e[0m                         \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \          expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp5gcr_x28.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        (\e[31m0\e[0m until n).map(\e[36mi\e[0m => l(n\
    \ - i - \e[31m1\e[0m)) toList\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e\
    [31m   |\e[0m                 Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5gcr_x28.scala:28:31\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        (\e[31m0\e[0m\
    \ until n).map(\e[36mi\e[0m => l(n - i - \e[31m1\e[0m)) toList\n\e[31m\e[31m \
    \  |\e[0m                               ^\e[0m\n\e[31m   |\e[0m              \
    \                 Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmp5gcr_x28.scala:27:18 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = l length\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                \e\
    [33mmethod\e[0m \e[35mlength\e[0m in \e[33mclass\e[0m \e[35mList\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5gcr_x28.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660029411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val counter = mutable.ListBuffer.empty[Long]\n\
    \        val primes = scala.util.Primes.primesUpTo(n)\n        primes foreach\
    \ { p =>\n            val i = scala.math.ceil(p.toDouble / 2)\n            val\
    \ a = p.toDouble - i * 2\n            val prime = primes(i)\n            val count\
    \ = counter.lastOption.map(counter => counter + prime).orElse(0)\n           \
    \ counter.push(a)\n        }\n        counter.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpecjbb__w.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpecjbb__w.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = scala.util.Primes.primesUpTo(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     value Primes is not a member of util\n2 errors found\n"
  stdout: ''
  timestamp: 1660029411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n      if (n <= 0l) List()\n      else\
    \ if ((2l...n).exists(!isPrime)) List(2l...n) \n      else countUpTo(n-2)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiy67m4xt.scala:21:19 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33melse\e[0m \e[33mif\e[0m ((\e[31m2l\e[0m...n).exists(!isPrime))\
    \ List(\e[31m2l\e[0m...n) \n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e\
    [31m   |\e[0m                   an identifier expected, but '.' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpiy67m4xt.scala:21:50 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33melse\e[0m \e[33mif\e[0m ((\e[31m2l\e[0m...n).exists(!isPrime))\
    \ List(\e[31m2l\e[0m...n) \n\e[31m\e[31m   |\e[0m                            \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \    an identifier expected, but '.' found\n2 errors found\n"
  stdout: ''
  timestamp: 1660029407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n == 0l) return List()\n \
    \       var list : List[Long] = List()\n        var m = 2\n        while (n >\
    \ m) {\n            list += m\n            if (list.contains(n)) list.filterNot(_\
    \ == n)\n            m += 1\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3jwuvi9a.scala:24:17 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            list += m\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long] -\
    \ did you mean List[Long].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660029411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for(i <- 2l ; i <= n ; i = i + (i-1l)) {\n            if (primes.contains(i.toLong))\
    \ {\n                primes += i.toLong\n            }\n            else if(i.toLong\
    \ > Math.sqrt(n)) {\n                primes += i.toLong\n            }\n     \
    \   }\n        primes.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo9d2lgc3.scala:21:29 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2l\e[0m ; i <= n ;\
    \ i = i + (i-\e[31m1l\e[0m)) {\n\e[31m\e[31m   |\e[0m                        \
    \     ^\e[0m\n\e[31m   |\e[0m                             '<-' expected, but ';'\
    \ found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo9d2lgc3.scala:21:17 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2l\e[0m ; i <= n ;\
    \ i = i + (i-\e[31m1l\e[0m)) {\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\
    \e[31m   |\e[0m                 value foreach is not a member of Long\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var list = List[Long]()\n    \
    \    for (i <- 2 to n by 2)\n            list = list :+ (i.toLong).toInt\n   \
    \     list\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkqtbmu3f.scala:21:23\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n by \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \     ^\e[0m\n\e[31m   |\e[0m                       Found:    (n : Long)\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var primes: List[Long] = Nil\n\
    \        var count = 0\n        for (i <- 2 to n) {\n            if (primes.contains(i))\
    \ {\n                count += 1\n            } else {\n                primes\
    \ = primes ::: List(i.toLong)\n                count += 1\n            }\n   \
    \     }\n        if (primes.isEmpty) {\n            Nil\n        } else {\n  \
    \          primes.take(count).toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwi90yvd2.scala:22:23\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        def isprime(n: Long): Boolean\
    \ = n match {\n            case 0 => true\n            case 1 => false\n     \
    \       case _ => {\n                var i = 2\n                var res = true\n\
    \                while (i <= n / 2) {\n                    if (n % i == 0) res\
    \ = false\n                    i += 1\n                }\n                res\n\
    \            }\n        }\n        val res = new mutable.ListBuffer[Long]()\n\
    \        var prime = 2 // first 2 primes are easy\n        while (n + prime <\
    \ n) {\n            if (isprime(n + prime)) res += n + prime\n            prime\
    \ += 1\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc5jm5yuv.scala:33:22 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n == 0) List()\n        else\
    \ primeFactors(n).filter(p => p > 0).take(n).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxvsju9u.scala:21:13 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m primeFactors(n).filter(p => p\
    \ > \e[31m0\e[0m).take(n).toList\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Not found: primeFactors\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val liftings = scala.collection.mutable.ListBuffer[Long]()\n\
    \        var primes = List[Long](2l).iterator\n        primes += 3l\n        var\
    \ i = 3l\n        var count = 0\n        while (i < n) {\n            if (primes.contains(i))\
    \ {\n                count += 1\n                liftings += i.toLong\n      \
    \      }\n            i += 1\n        }\n        primes += 5l\n        i = 3l\n\
    \        count = 0\n        while (i < n) {\n            if (primes.contains(i))\
    \ {\n                count += 1\n                liftings += i.toLong\n      \
    \      }\n            i += 1\n        }\n        primes += 7l\n        i = 11l\n\
    \        count = 0\n        while (i < n) {\n            if (primes.contains(i))\
    \ {\n                count += 1\n                liftings += i.toLong\n      \
    \      }\n            i += 1\n        }\n        primes += 13l\n        i = 17l\n\
    \        count = 0\n        while (i < n) {\n            if (primes.contains(i))\
    \ {\n                count += 1\n                liftings += i.toLong\n      \
    \      }\n            i += 1\n        }\n        primes += 19l\n        i = 23l\n\
    \        count = 0\n        while (i < n) {\n            if (primes.contains(i))\
    \ {\n                count += 1\n                liftings += i.toLong\n      \
    \      }\n            i += 1\n        }\n        liftings.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzujo0c9r.scala:22:15 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        primes += \e[31m3l\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of Iterator[Long]\
    \ - did you mean Iterator[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzujo0c9r.scala:32:15\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        primes += \e[31m5l\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not\
    \ a member of Iterator[Long] - did you mean Iterator[Long].!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpzujo0c9r.scala:42:15 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        primes += \e[31m7l\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of Iterator[Long]\
    \ - did you mean Iterator[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzujo0c9r.scala:52:15\
    \ ------------------------\e[0m\e[0m\n\e[31m52 |\e[0m        primes += \e[31m13l\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not\
    \ a member of Iterator[Long] - did you mean Iterator[Long].!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpzujo0c9r.scala:62:15 ------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        primes += \e[31m19l\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of Iterator[Long]\
    \ - did you mean Iterator[Long].!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1660029417
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        require(n >= 0L, \"n must be non-negative\"\
    )\n        if (n == 0L) return List()\n        else if (n % 2 == 0L) return List(2L,\
    \ n)\n        val list1 = countUpTo((n / 2L).toLong)\n        val list2 = list1.filter(_\
    \ % 3L == 0L)\n        list1 ++ list2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9mwgxvh.scala:28)\n\tat Problem.main(tmp_9mwgxvh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = 2l\n        while(i < n){\n            val isPrime = i.toInt\
    \ <= math.sqrt(n).toInt\n            if(isPrime){\n                primes += i.toLong\n\
    \                i += 1\n            }\n        }\n        primes.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmeywecul.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpmeywecul.scala:26:18 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                i += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if(n < 2l) List()\n        if(n\
    \ >= 2l && n < 3l) List(n.toLong)\n        if(n >= 3l && n <= 5l) List(2l.toLong,\
    \ 3l.toLong, n.toLong)\n        if(n >= 5l && n <= 7l) List(2l.toLong, 3l.toLong,\
    \ 5l.toLong, n.toLong)\n        if(n >= 7l && n <= 11l) List(2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, n.toLong)\n        if(n >= 11l && n <= 13l) List(2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, n.toLong)\n        if(n >= 13l\
    \ && n <= 17l) List(2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ n.toLong)\n        if(n >= 17l && n <= 19l) List(2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, n.toLong)\n        if(n >= 19l)\
    \ List(2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong,\
    \ 19l.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt3xkhju_.scala:28:8\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m(n >= \e\
    [31m19l\e[0m) List(\e[31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong, \e[31m5l\e[0m.toLong,\
    \ \e[31m7l\e[0m.toLong, \e[31m11l\e[0m.toLong, \e[31m13l\e[0m.toLong, \e[31m17l\e\
    [0m.toLong, \e[31m19l\e[0m.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m        Maybe you are missing an else part for the conditional?\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val list = scala.collection.mutable.MutableList[Long]()\n\
    \        for (i<- 2 to n by 2){\n            val a = i.toLong\n            var\
    \ b = i.toLong + 1\n            while (scala.util.math.sqrt(b) <= (scala.util.math.sqrt(a)))\
    \ {\n                b+=1\n            }\n            if (b > n / i){\n      \
    \          list.add(b)\n            }\n        }\n        list.filter(x => ((n\
    \ / x) % 1 ==0 )).toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpud371ivu.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = scala.collection.mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value MutableList is not a member of scala.collection.mutable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpud371ivu.scala:21:22 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i<- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m    \
    \                  Found:    (n : Long)\n\e[31m   |\e[0m                     \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpud371ivu.scala:24:30\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mwhile\e\
    [0m (scala.util.math.sqrt(b) <= (scala.util.math.sqrt(a))) {\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \ value math is not a member of util\n3 errors found\n"
  stdout: ''
  timestamp: 1660029422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val a = math.max(n.toLong,2) #::\
    \ scala.collection.immutable.Range.from(n.toLong + 1 ).filter{ _ =>\n        \
    \    ((math.sqrt(_) + 1).sqrt).mod(_) != 1\n        }.map(_ - n.toLong).toList\n\
    \        if (a.length > 0)\n            a\n        else\n            List[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiohbhe70.scala:20:74 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.max(n.toLong,\e\
    [31m2\e[0m) #:: scala.collection.immutable.Range.from(n.toLong + \e[31m1\e[0m\
    \ ).filter{ _ =>\n\e[31m\e[31m   |\e[0m                                      \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value from is\
    \ not a member of object scala.collection.immutable.Range\n1 error found\n"
  stdout: ''
  timestamp: 1660029419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n       var primes: List[Long] = Nil\n\
    \       var primesIndex = 0\n       var count : Long = 1\n       var i : Long\
    \ = 2\n       while (i < n) {\n          if ((i.toLong > n).toBoolean) {\n   \
    \          break\n          }\n          primesIndex = n + 1\n          while\
    \ ((primesIndex % i) == 0) {\n             primesIndex += 1\n          }\n   \
    \       primes = primes.filter(_ % i == 0)\n          if (primes.isEmpty) {\n\
    \             count += 1\n             if (count < n) {\n                i +=\
    \ 1\n             } else {\n                primesIndex += 1\n               \
    \ i = 2\n             }\n          }\n       }\n       primesIndex\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdl70ipo4.scala:25:29 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m          \e[33mif\e[0m ((i.toLong > n).toBoolean) {\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              value toBoolean is not a member of Boolean\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdl70ipo4.scala:26:13 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m             break\n\e[31m\e[31m   |\e[0m             ^^^^^\e\
    [0m\n\e[31m   |\e[0m             Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdl70ipo4.scala:28:24 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m          primesIndex = n + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \        Found:    Long\n\e[31m   |\e[0m                        Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdl70ipo4.scala:43:7\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m       primesIndex\n\e[31m\e\
    [31m   |\e[0m       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       Found:    (primesIndex\
    \ : Int)\n\e[31m   |\e[0m       Required: List[Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n      val primes = (2 to n).filter (p\
    \ => !p.toLong %2).toList // only odd numbers\n      primes.map (p => if (n ==\
    \ p) n else p - 1) // find prime less than n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpao7nitkd.scala:20:25\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36mprimes\e\
    [0m = (\e[31m2\e[0m to n).filter (\e[36mp\e[0m => !p.toLong %\e[31m2\e[0m).toList\
    \ \e[34m// only odd numbers\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \   ^\e[0m\n\e[31m   |\e[0m                         Found:    (n : Long)\n\e[31m\
    \   |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpao7nitkd.scala:20:41 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36mprimes\e[0m = (\e[31m2\e[0m\
    \ to n).filter (\e[36mp\e[0m => !p.toLong %\e[31m2\e[0m).toList \e[34m// only\
    \ odd numbers\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value unary_! is not a member of Long\
    \ - did you mean Long.unary_+?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n      require(n >= 0, \"n must be greater\
    \ than or equal to zero\")\n      n match {\n        case 0 => List()\n      \
    \  case 1 => List(2l.toLong)\n        case x => primeFactors(n)\n      }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyy7uhv21.scala:24:18 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mcase\e[0m x => primeFactors(n)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \      Not found: primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val list = scala.collection.mutable.ListBuffer[Long]()\n\
    \        if(n > 2l) {\n            for (i <- 2l until (n-1l)) {\n            \
    \    val j = (n / i).toInt\n                if(j > 0){\n                    list\
    \ += i.toLong\n                    if(j % 1 == 0) {\n                        list\
    \ += (n-i)*2\n                    }\n                }\n            }\n      \
    \  }\n        if(n > 2l){\n            for (i <- 3l until (n-1l)) {\n        \
    \        val j = (n / i).toInt\n                if(j > 0){\n                 \
    \   list += i.toLong\n                    if(j % 1 == 0) {\n                 \
    \       list += (n-i)*2\n                    }\n                }\n          \
    \  }\n        }\n        if(n > 2l){\n            for (i <- 5l until (n-1l)) {\n\
    \                val j = (n / i).toInt\n                if(j > 0){\n         \
    \           list += i.toLong\n                    if(j % 1 == 0) {\n         \
    \               list += (n-i)*2\n                    }\n                }\n  \
    \          }\n        }\n        if(n > 2l){\n            for (i <- 7l until (n-1l))\
    \ {\n                val j = (n / i).toInt\n                if(j > 0){\n     \
    \               list += i.toLong\n                    if(j % 1 == 0) {\n     \
    \                   list += (n-i)*2\n                    }\n                }\n\
    \            }\n        }\n        if(n > 2l){\n            for (i <- 11l until\
    \ (n-1l)) {\n                val j = (n / i).toInt\n                if(j > 0){\n\
    \                    list += i.toLong\n                    if(j % 1 == 0) {\n\
    \                        list += (n-i)*2\n                    }\n            \
    \    }\n            }\n        }\n        if(n > 2l){\n            for (i <- 13l\
    \ until (n-1l)) {\n                val j = (n / i).toInt\n                if(j\
    \ > 0){\n                    list += i.toLong\n                    if(j % 1 ==\
    \ 0) {\n                        list += (n-i)*2\n                    }\n     \
    \           }\n            }\n        }\n        if(n > 2l){\n            for\
    \ (i <- 17l until (n-1l)) {\n                val j = (n / i).toInt\n         \
    \       if(j > 0){\n                    list += i.toLong\n                   \
    \ if(j % 1 == 0) {\n                        list += (n-i)*2\n                \
    \    }\n                }\n            }\n        }\n        if(n > 2l){\n   \
    \         for (i <- 19l until (n-1l)) {\n                val j = (n / i).toInt\n\
    \                if(j > 0){\n                    \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps6ry77uu.scala:118:0 ---------------------------\e\
    [0m\e[0m\n\e[31m118 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps6ry77uu.scala:98:8\
    \ ---------------------\e[0m\e[0m\n\e[31m 98 |\e[0m        \e[33mif\e[0m(n > \e\
    [31m2l\e[0m){\n\e[31m\e[31m    |\e[0m        ^\e[0m\n\e[31m    |\e[0m        Found:\
    \    Unit\n\e[31m    |\e[0m        Required: List[Long]\n\e[31m    |\e[0m    \
    \    Maybe you are missing an else part for the conditional?\n\e[31m 99 |\e[0m\
    \            \e[33mfor\e[0m (i <- \e[31m19l\e[0m until (n-\e[31m1l\e[0m)) {\n\e\
    [31m100 |\e[0m                \e[33mval\e[0m \e[36mj\e[0m = (n / i).toInt\n\e\
    [31m101 |\e[0m                \e[33mif\e[0m(j > \e[31m0\e[0m){\n\e[31m102 |\e\
    [0m                    \n\e[31m103 |\e[0m    }\n\e[31m104 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m105 |\e[0m    assert(countUpTo((\e[31m5l\e[0m)).equals((List[\e[35mLong\e\
    [0m](\e[31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong))));\n\e[31m106 |\e[0m    assert(countUpTo((\e\
    [31m6l\e[0m)).equals((List[\e[35mLong\e[0m](\e[31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong,\
    \ \e[31m5l\e[0m.toLong))));\n\e[31m107 |\e[0m    assert(countUpTo((\e[31m7l\e\
    [0m)).equals((List[\e[35mLong\e[0m](\e[31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong,\
    \ \e[31m5l\e[0m.toLong))));\n\e[31m108 |\e[0m    assert(countUpTo((\e[31m10l\e\
    [0m)).equals((List[\e[35mLong\e[0m](\e[31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong,\
    \ \e[31m5l\e[0m.toLong, \e[31m7l\e[0m.toLong))));\n\e[31m109 |\e[0m    assert(countUpTo((\e\
    [31m0l\e[0m)).equals((List[\e[35mLong\e[0m]())));\n\e[31m110 |\e[0m    assert(countUpTo((\e\
    [31m22l\e[0m)).equals((List[\e[35mLong\e[0m](\e[31m2l\e[0m.toLong, \e[31m3l\e\
    [0m.toLong, \e[31m5l\e[0m.toLong, \e[31m7l\e[0m.toLong, \e[31m11l\e[0m.toLong,\
    \ \e[31m13l\e[0m.toLong, \e[31m17l\e[0m.toLong, \e[31m19l\e[0m.toLong))));\n\e\
    [31m111 |\e[0m    assert(countUpTo((\e[31m1l\e[0m)).equals((List[\e[35mLong\e\
    [0m]())));\n\e[31m112 |\e[0m    assert(countUpTo((\e[31m18l\e[0m)).equals((List[\e\
    [35mLong\e[0m](\e[31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong, \e[31m5l\e[0m.toLong,\
    \ \e[31m7l\e[0m.toLong, \e[31m11l\e[0m.toLon"
  stdout: ''
  timestamp: 1660029420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = List.fill(n.toInt\
    \ / 2l)(2l.toLong)\n        primes.zip(List(2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)).foreach {\n        case (p,\
    \ x) =>\n            val n = n.toInt\n            val m = (p*2l).toLong\n    \
    \        val d = (m+p.toInt).toInt\n            val r = n.toInt-(p*2l).toInt\n\
    \            val g = p.toInt\n            val q = g.toInt\n            val r =\
    \ g.toInt\n            val y = ((p+2)/(p+2)).toInt\n            val z = p\n  \
    \          val q = ((p+3)/(p+3)).toInt\n            val r = ((p+5)/(p+5)).toInt\n\
    \            val w = ((p+7)/(p+7)).toInt\n            val v = ((p+11)/(p+11)).toInt\n\
    \            val w = ((p+13)/(p+13)).toInt\n            val y = ((p+17)/(p+17)).toInt\n\
    \            val z = ((p+19)/(p+19)).toInt\n            val r = ((p+29)/(p+29)).toInt\n\
    \            val g = ((p+41)/(p+41)).toInt\n            val q = ((p+53)/(p+53)).toInt\n\
    \            val r = ((p+77)/(p+77)).toInt\n            val w = ((p+109)/(p+109)).toInt\n\
    \            val v = ((p+147)/(p+147)).toInt\n            val w = ((p+173)/(p+173)).toInt\n\
    \            val y = ((p+207)/(p+207)).toInt\n            val z = ((p+247)/(p+247)).toInt\n\
    \            val r = ((p+291)/(p+291)).toInt\n            val g = ((p+331)/(p+331)).toInt\n\
    \            val q = ((p+379)/(p+379)).toInt\n            val r = ((p+423)/(p+423)).toInt\n\
    \            val w = ((p+461)/(p+461)).toInt\n            val v = ((p+529)/(p+529)).toInt\n\
    \            val w = ((p+587)/(p+587)).toInt\n            val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpasef40by.scala:55:15 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpasef40by.scala:71:0 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpasef40by.scala:20:31\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = List.fill(n.toInt / \e[31m2l\e[0m)(\e[31m2l\e[0m.toLong)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                            Found:    Long\n\e[31m   |\e[0m                 \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpasef40by.scala:32:16 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m            \e[33mval\e[0m \e[36mq\e[0m = ((p+\e[31m3\e[0m)/(p+\e[31m3\e\
    [0m)).toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mq is already defined as \e[33mvalue\e[0m \e[35mq\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpasef40by.scala:36:16 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m            \e[33mval\e[0m \e[36mw\e[0m = ((p+\e[31m13\e[0m)/(p+\e[31m13\e\
    [0m)).toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mw is already defined as \e[33mvalue\e[0m \e[35mw\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpasef40by.scala:37:16 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m            \e[33mval\e[0m \e[36my\e[0m = ((p+\e[31m17\e[0m)/(p+\e[31m17\e\
    [0m)).toInt\n\e[31m\e[31m   |\e[0m           "
  stdout: ''
  timestamp: 1660029424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var primes = Set[Long]()\n   \
    \     var result = List[Long]()\n        for(i <- 2l; primes.isEmpty) primes ++=\
    \ primes.filter(x => i % x == 0l).map(x => x.toLong)\n        while (primes.size\
    \ < n) {\n            primes ++= primes.filter(x => n % x == 0l).map(x => x.toLong)\n\
    \            result :+= primes.filter(x => n % x == 0l).map(x => x.toLong)\n \
    \       }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjava3a9d.scala:22:35 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2l\e[0m; primes.isEmpty)\
    \ primes ++= primes.filter(\e[36mx\e[0m => i % x == \e[31m0l\e[0m).map(\e[36mx\e\
    [0m => x.toLong)\n\e[31m\e[31m   |\e[0m                                   ^\e\
    [0m\n\e[31m   |\e[0m                                   '<-' expected, but ')'\
    \ found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjava3a9d.scala:22:17 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2l\e[0m; primes.isEmpty)\
    \ primes ++= primes.filter(\e[36mx\e[0m => i % x == \e[31m0l\e[0m).map(\e[36mx\e\
    [0m => x.toLong)\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e\
    [0m                 value foreach is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpjava3a9d.scala:25:19 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            result :+= primes.filter(\e[36mx\e[0m => n % x\
    \ == \e[31m0l\e[0m).map(\e[36mx\e[0m => x.toLong)\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value :+= is not a member of List[Long]\
    \ - did you mean List[Long].:+?\n3 errors found\n"
  stdout: ''
  timestamp: 1660029423
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primesUpToN = scala.collection.mutable.ListBuffer.empty[Long]\n\
    \        var nextPrime = 2L\n        var prime: Option[Long] = None\n        primesUpToN\
    \ += nextPrime\n        while (n>0L && prime.isEmpty) {\n            prime = Some(nextPrime)\n\
    \            nextPrime += 1\n            primesUpToN += nextPrime\n        }\n\
    \        primesUpToN.takeWhile(_ < n).map(_+2).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq8ewcrv1.scala:32)\n\tat Problem.main(tmpq8ewcrv1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var primes: mutable.Set[Long]\
    \ = mutable.Set()\n        var lst: List[Long] = List(n)\n\n        for ( i <-\
    \ 0 until lst.size ) {\n            if ( primes.contains(lst(i))==false ) {\n\
    \                primes = primes.union(lst.filter((x) => x%_==0).map((x) => x+1))\n\
    \                lst += primes\n            }\n        }\n        lst\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppn0ijfqy.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mprimes\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppn0ijfqy.scala:20:40 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mprimes\e[0m: mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmppn0ijfqy.scala:26:20 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m                lst += primes\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m    value += is not a member of List[Long] - did you mean\
    \ List[Long].!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660029423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes: List[Long] = Array()\n\
    \        var total = 0L\n        val limit: Long = n.toInt\n        while (prime\
    \ < limit) {\n            var temp: List[Long] = List[Long]()\n            val\
    \ prime: Long = scala.math.math.prime(prime).toLong\n            while (prime\
    \ < limit) {\n                if (scala.math.math.prime(prime).toLong > prime)\
    \ {\n                    val tempPrime: Long = scala.math.math.prime(prime).toLong\n\
    \                    if (!primes.contains(tempPrime)) {\n                    \
    \    temp = temp :+ tempPrime\n                    }\n                }\n    \
    \            prime = prime + 1\n            }\n            primes = primes :+\
    \ temp\n            total = total + temp.length\n        }\n        return primes\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpro8jxz5a.scala:20:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = Array()\n\e[31m\e[31m   |\e[0m                        \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \   No ClassTag available for T\n\e[31m   |\e[0m\n\e[31m   |\e[0m            \
    \                            where:    T is a type variable\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpro8jxz5a.scala:23:15 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mwhile\e[0m (prime < limit) {\n\e[31m\e[31m \
    \  |\e[0m               ^^^^^\e[0m\n\e[31m   |\e[0m               Not found: prime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpro8jxz5a.scala:25:41\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprime\e[0m: \e[35mLong\e[0m = scala.math.math.prime(prime).toLong\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              value math is not a member of math\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpro8jxz5a.scala:27:31 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m (scala.math.math.prime(prime).toLong\
    \ > prime) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    value math is not a member of math\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpro8jxz5a.scala:28:53 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    \e[33mval\e[0m \e[36mtempPrime\e\
    [0m: \e[35mLong\e[0m = scala.math.math.prime(prime).toLong\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                      value math is not a member of math\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpro8jxz5a.scala:33:22 -----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                prime = prime + \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \      "
  stdout: ''
  timestamp: 1660029426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n      var primesAsList = List(2, 3, 5)\n\
    \      var primesAsList2 = List(2, 3, 5)\n      var primesAsList3 = List(2, 3,\
    \ 5)\n      var primesAsList4 = List(2, 3, 5)\n      var primesAsList5 = List(2,\
    \ 3, 5)\n      var primesAsList6 = List(2, 3, 5)\n      var primesAsList7 = List(2,\
    \ 3, 5)\n      var primesAsList8 = List(2, 3, 5)\n      var primesAsList9 = List(2,\
    \ 3, 5)\n      var primesAsList10 = List(2, 3, 5)\n      var primesAsList11 =\
    \ List(2, 3, 5)\n      var primesAsList12 = List(2, 3, 5)\n      var primesAsList13\
    \ = List(2, 3, 5)\n      var primesAsList14 = List(2, 3, 5)\n      var primesAsList15\
    \ = List(2, 3, 5)\n      var primesAsList16 = List(2, 3, 5)\n      var primesAsList17\
    \ = List(2, 3, 5)\n      var primesAsList18 = List(2, 3, 5)\n      var primesAsList19\
    \ = List(2, 3, 5)\n      var primesAsList20 = List(2, 3, 5)\n\n      var primesAsList21\
    \ = List(2, 3, 5)\n      var primesAsList22 = List(2, 3, 5)\n      var primesAsList23\
    \ = List(2, 3, 5)\n      var primesAsList24 = List(2, 3, 5)\n      var primesAsList25\
    \ = List(2, 3, 5)\n      var primesAsList26 = List(2, 3, 5)\n      var primesAsList27\
    \ = List(2, 3, 5)\n      var primesAsList28 = List(2, 3, 5)\n      var primesAsList29\
    \ = List(2, 3, 5)\n      var primesAsList30 = List(2, 3, 5)\n      var primesAsList31\
    \ = List(2, 3, 5)\n      var primesAsList32 = List(2, 3, 5)\n      var primesAsList33\
    \ = List(2, 3, 5)\n      var primesAsList34 = List(2, 3, 5)\n      var primesAsList35\
    \ = List(2, 3, 5)\n      var primesAsList36 = List(2, 3, 5)\n      var primesAsList37\
    \ = List(2, 3, 5)\n      var primesAsList38 = List(2, 3, 5)\n      var primesAsList39\
    \ = List(2, 3, 5)\n      var primesAsList40 = List(2, 3, 5)\n      var primesAsList41\
    \ = List(2, 3, 5)\n      var primesAsList42 = List(2, 3, 5)\n      var primesAsList43\
    \ = List(2, 3, 5)\n      var primesAsList44 = List(2, \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp12rdv31o.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp12rdv31o.scala:65:5 ---------------------\e[0m\e[0m\n\e[31m65 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primeList = new ListBuffer[Long]()\n\
    \        val counter = math.ceil(math.sqrt(n).toLong)\n        var counter : Int\
    \ = 1\n        for(i <- 2 to counter) {\n            for(j <- 2 to counter) {\n\
    \                if(i * j <= n) {\n                    if(n % i == 0 && n % j\
    \ == 0) {\n                        primeList += i * j\n                      \
    \  counter += 1\n                    }\n                }\n            }\n   \
    \     }\n        if(counter < math.ceil(math.sqrt(n).toLong)) {\n            primeList\
    \ += counter\n        }\n        primeList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy8s8sd5e.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mcounter\e[0m : \e[35mInt\e\
    [0m = \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcounter is already defined as \e[33mvalue\e[0m \e[35mcounter\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpy8s8sd5e.scala:23:22 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to counter) {\n\e[31m\e[31m \
    \  |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \     Found:    (counter : Double)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy8s8sd5e.scala:24:26\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m(j\
    \ <- \e[31m2\e[0m to counter) {\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    (counter\
    \ : Double)\n\e[31m   |\e[0m                          Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy8s8sd5e.scala:28:32 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                        counter += \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \   value += is not a member of Double - did you mean counter.!=?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpy8s8sd5e.scala:34:25 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            primeList += counter\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Found:    (counter : Double)\n\e[31m   |\e[0m                         Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660029425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        for (i <- 2 to n) yield {\n            if (isPrime(i) && isPrime(i+2))\
    \ result += i.toLong\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpra8kiolk.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpra8kiolk.scala:21:23 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) \e[33myield\e\
    [0m {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m   \
    \                    Found:    (n : Long)\n\e[31m   |\e[0m                   \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpra8kiolk.scala:22:16\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(i) && isPrime(i+\e[31m2\e[0m)) result += i.toLong\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: isPrime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        // implement the countUpTo function\
    \ here\n\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppdrd4y1c.scala:19:43\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m    \e[33mdef\e[0m \e[36mcountUpTo\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mList\e[0m[\e[35mLong\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m \
    \  |\e[0m                                           Found:    Unit\n\e[31m   |\e\
    [0m                                           Required: List[Long]\n\e[31m20 |\e\
    [0m        \e[34m// implement the countUpTo function here\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val nums = List((2l, n))\n   \
    \     var primes = List((2l, n))\n        var i = 0\n        while (i < nums.length\
    \ - 1) {\n            primes = primes filter (nums(i) <= nums(i + 1))\n      \
    \      i += 1\n        }\n        primes\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprf2rmrcx.scala:24:44 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            primes = primes filter (nums(i) <= nums(i\
    \ + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue <= is not a member of (Long, Long), but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprf2rmrcx.scala:27:8\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m        primes\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mprimes\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mList[\e\
    [1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mLong\e[0m\e[1m\e\
    [31m)\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val lit = n.toInt;\n        if(lit\
    \ <= 1l) List()\n        else {\n            val first = lit.toInt;\n        \
    \    val next = first + 1l;\n            val rem = n - 1l;\n            var list:\
    \ List[Long] = Nil\n            for(i <- 0 until rem){\n                if (next\
    \ % first != 0) {\n                    list :+= next\n                }\n    \
    \            next += 1l\n            }\n            list\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcqk_v_ev.scala:27:29\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mfor\e[0m(i\
    \ <- \e[31m0\e[0m until rem){\n\e[31m\e[31m   |\e[0m                         \
    \    ^^^\e[0m\n\e[31m   |\e[0m                             Found:    (rem : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpcqk_v_ev.scala:31:21 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                next += \e[31m1l\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                value +=\
    \ is not a member of Long - did you mean next.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.Set[Long]()\n\
    \        val result = mutable.ListBuffer[Long]()\n        for (i <- 2 to n) {\n\
    \            if (primes.contains(i)) {\n                result += i\n        \
    \    }\n            else {\n                primes += i\n            }\n     \
    \   }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkb5q6ty6.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpkb5q6ty6.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpkb5q6ty6.scala:22:23 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n < 2)\n          Nil\n  \
    \      else {\n          val res = List(n); var k = 1l\n          while (k <=\
    \ n) {\n            if (isPrime(k)) {\n              if (!res.contains(k)) {\n\
    \                res += k\n              }\n            }\n            k += 1l\n\
    \          }\n          res\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbq8ly1im.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (isPrime(k)) {\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbq8ly1im.scala:27:20\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                res += k\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m           value\
    \ += is not a member of List[Long] - did you mean res.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n == 0L) List(1L)\n      \
    \  else primeFactorization(n).take(n - 1).toList ::: countUpTo(n-1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65kbcgl5.scala:21:13 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m primeFactorization(n).take(n\
    \ - \e[31m1\e[0m).toList ::: countUpTo(n-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             Not found:\
    \ primeFactorization\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val list = new mutable.MutableList[Long]()\n\
    \        val primes = 2 to n\n        primes.foreach{ e =>\n            val prime\
    \ = true\n            for(i <- 2 to n){\n                if(e % i == 0){\n   \
    \                 prime = false\n                    break\n                }\n\
    \            }\n            if(prime)\n                list += e\n        }\n\
    \        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpguvy69dw.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpguvy69dw.scala:21:26\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = \e[31m2\e[0m to n\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpguvy69dw.scala:24:26 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m(i <- \e[31m2\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpguvy69dw.scala:26:26\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                   \
    \ prime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val prime\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpguvy69dw.scala:27:20 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660029431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val nums = Vector.tabulate(math.ceil(n/2l.toLong).toInt)(x\
    \ => 2l.toLong*x+2l.toLong).takeWhile(x => x<n).reverse\n        nums ::: List.fill(math.ceil(n/2l.toLong).toInt)(2l.toLong).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbvob8rea.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        nums ::: List.fill(math.ceil(n/\e\
    [31m2l\e[0m.toLong).toInt)(\e[31m2l\e[0m.toLong).toList\n\e[31m\e[31m   |\e[0m\
    \        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    (nums : Vector[Long])\n\e\
    [31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n == 0) List()\n        else\
    \ {\n            val primes = primeFactors(n)\n            val listOfPrimes =\
    \ primes.toList.filter(_ < n).map(_.toLong)\n            listOfPrimes.map(l =>\
    \ n / l.toLong * l).takeWhile(_ > n).map(l => n * l.toLong)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplyjrsvr3.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mprimes\e[0m = primeFactors(n)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: primeFactors\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val ls = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- 2 until n){\n            if(!isPrime(i)){\n               \
    \ ls += i.toLong\n                if((i.toLong) < n){\n                    ls\
    \ += i+1\n                }\n            }\n        }\n        ls.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmpecvknh.scala:21:26\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m until n){\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpmpecvknh.scala:22:16 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            \e[33mif\e[0m(!isPrime(i)){\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: isPrime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        def isPrime(n : Long) : Boolean\
    \ = {\n            var i : Long = 0\n            while ( i < n ) {\n         \
    \       if ( n % i == 0 ) false\n                i += 1\n            }\n     \
    \       true\n        }\n        val primes = mutable.ArrayBuffer(2l.toLong)\n\
    \        var i = 2l.toLong\n        while ( i < n ) {\n            if ( isPrime(i)\
    \ ) {\n                primes += i\n                i += 1\n            }\n  \
    \      }\n        if ( primes.isEmpty() ) List() else primes.take(n).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0e9a40cm.scala:28:21 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m.toLong)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmp0e9a40cm.scala:23:34 ----------------\e\
    [0m\e[0m\n\e[33m23 |\e[0m                \e[33mif\e[0m ( n % i == \e[31m0\e[0m\
    \ ) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                                  ^^^^^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029428
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var list : List[Long] = List()\
    \ \n        if (n == 0 || n == 1) {\n            list = List(n);\n        }\n\
    \        else {\n            var startPrime : Long = 2\n            while (startPrime\
    \ <= n) {\n                var endPrime : Long = startPrime + 2\n            \
    \    while (endPrime <= n) {\n                    if (n % startPrime == 0 && n\
    \ % endPrime == 0) {\n                        list ::= startPrime\n          \
    \              startPrime += 2\n                        endPrime += 2\n      \
    \              }\n                    endPrime += 2\n                }\n     \
    \           startPrime += 2\n            }\n        }\n        list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpryu138uv.scala:42)\n\tat Problem.main(tmpryu138uv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val ans: List[Long] = List(nl.toLong)\
    \ //create empty list\n        for(i <- 2 to n) //from 2 to n\n            if\
    \ (nl.modulo(i) == 0) //if the modulo of the current number with i equals zero\n\
    \                ans ::= nl.toLong // append the number to the list\n        \
    \        ans ::= i.toLong // append the number to the list\n        ans\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbhabn7qj.scala:20:35 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mans\e[0m: \e[35mList\e[0m[\e\
    [35mLong\e[0m] = List(nl.toLong) \e[34m//create empty list\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                   ^^\e[0m\n\e[31m   |\e[0m        \
    \                           Not found: nl\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbhabn7qj.scala:21:22 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n) \e[34m//from\
    \ 2 to n\e[0m\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e\
    [0m                      Found:    (n : Long)\n\e[31m   |\e[0m               \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbhabn7qj.scala:22:16\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m\
    \ (nl.modulo(i) == \e[31m0\e[0m) \e[34m//if the modulo of the current number with\
    \ i equals zero\e[0m\n\e[31m\e[31m   |\e[0m                ^^\e[0m\n\e[31m   |\e\
    [0m                Not found: nl\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpbhabn7qj.scala:23:20 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m                ans ::= nl.toLong \e[34m// append the number to the list\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \    value ::= is not a member of List[Long] - did you mean ans.::?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbhabn7qj.scala:23:24 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                ans ::= nl.toLong \e[34m// append the\
    \ number to the list\e[0m\n\e[31m\e[31m   |\e[0m                        ^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: nl\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpbhabn7qj.scala:24:20 ------------------------\e\
    [0m\e[0m\n"
  stdout: ''
  timestamp: 1660029436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n <= 0l) List()\n        else\
    \ {\n            var primes = Set()\n            var count = 0\n            var\
    \ currentNumber: Long = n\n            while (count < n) {\n                val\
    \ isPrime = currentNumber % primes.isEmpty\n                if (isPrime) primes\
    \ += currentNumber\n                count += isPrime\n                currentNumber\
    \ = currentNumber + 1\n            }\n            primes.toList\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpehou1wgs.scala:26:44 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e[0m \e[36misPrime\e[0m = currentNumber\
    \ % primes.isEmpty\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m%\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m\
    \   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch\
    \ arguments ((scala.collection.mutable.Set[Nothing]#isEmpty : => Boolean))\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpehou1wgs.scala:27:39 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m (isPrime) primes += currentNumber\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                       Found:    (currentNumber\
    \ : Long)\n\e[31m   |\e[0m                                       Required: Nothing\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val a = 2l\n        val b = 3l\n\
    \        var list: List[Long] = List()\n        while (n > 0 ){\n            var\
    \ count = 0\n            var temp = a\n            while(temp != 0){\n       \
    \         if(temp % b == 0){\n                    count += 1\n               \
    \ }\n                temp = temp +1\n            }\n            list = list :+\
    \ count \n            n = n - 1\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpw66w8kz7.scala:33:14 -----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            n = n - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n == 0 || n == 1L) return\
    \ List()\n        if (n < 2L) return List()\n        val primes = primeList(n)\n\
    \        val l = new mutable.ListBuffer[Long]()\n        primes.foreach { prime\
    \ =>\n            if (n >= prime) l.append(prime)\n            else { l.append(prime)\
    \ ; l.append(prime) ; l.append(prime) ; l.append(prime) ; l.append(prime) }\n\
    \        }\n        if (l.isEmpty) List()\n        else l.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoxcuh075.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = primeList(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                 Not found: primeList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpoxcuh075.scala:23:20 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n == 0) List()\n        val\
    \ r = primesUpTo(n)\n        val nums = r.filter(_ < n)\n        r.toList filter\
    \ (_ >= n) ++\n        nums.map (_ + n).toList filter (_ % _ == 0)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpywxj9dkk.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = primesUpTo(n)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Not found: primesUpTo\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]()\n\
    \        for (i = (2l*(i.toInt)).toLong until n) if (i.toInt % 2 == 0 && i.toInt\
    \ % i != 0) list += i.toLong\n        list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_li7u1mn.scala:21:15 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i = (\e[31m2l\e[0m*(i.toInt)).toLong\
    \ until n) \e[33mif\e[0m (i.toInt % \e[31m2\e[0m == \e[31m0\e[0m && i.toInt %\
    \ i != \e[31m0\e[0m) list += i.toLong\n\e[31m\e[31m   |\e[0m               ^\e\
    [0m\n\e[31m   |\e[0m               ')' expected, but '=' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp_li7u1mn.scala:21:48 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i = (\e[31m2l\e[0m*(i.toInt)).toLong\
    \ until n) \e[33mif\e[0m (i.toInt % \e[31m2\e[0m == \e[31m0\e[0m && i.toInt %\
    \ i != \e[31m0\e[0m) list += i.toLong\n\e[31m\e[31m   |\e[0m                 \
    \                               ^^\e[0m\n\e[31m   |\e[0m                     \
    \                      '<-' expected, but 'if' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmp_li7u1mn.scala:23:4 ----------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '<-' expected,\
    \ but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_li7u1mn.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp_li7u1mn.scala:21:106 -----------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mfor\e[0m (i = (\e[31m2l\e[0m*(i.toInt)).toLong until n) \e[33mif\e\
    [0m (i.toInt % \e[31m2\e[0m == \e[31m0\e[0m && i.toInt % i != \e[31m0\e[0m) list\
    \ += i.toLong\n\e[31m\e[31m   |\e[0m                                         \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0mvalue foreach is not a member of Null, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  im"
  stdout: ''
  timestamp: 1660029437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        // Complete the implementation\
    \ of this function\n        if (n == 0) \n            return Nil\n        if (n\
    \ == 1) \n            return List(n.toLong)\n        if (n % 2 == 0) \n      \
    \      return countUpTo(n/2) + List(n.toLong)\n        else \n            return\
    \ (countUpTo(n/2) + List(n.toLong))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd3s3q7gm.scala:26:34 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mreturn\e[0m countUpTo(n/\e[31m2\e[0m)\
    \ + List(n.toLong)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpd3s3q7gm.scala:28:35 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            \e[33mreturn\e[0m (countUpTo(n/\e[31m2\e[0m) +\
    \ List(n.toLong))\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        for (i <- 2 to n){\n            if (i % 2 == 0){\n                if\
    \ (i != 2){\n                    primes.append(i)\n                }\n       \
    \     }\n            else if (primes.contains(i)){\n                primes.append(i)\n\
    \            }\n        }\n        primes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp093fgyb.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpp093fgyb.scala:21:23 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n){\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        // TODO: Write this function\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfqlmp6js.scala:19:43\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m    \e[33mdef\e[0m \e[36mcountUpTo\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mList\e[0m[\e[35mLong\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m \
    \  |\e[0m                                           Found:    Unit\n\e[31m   |\e\
    [0m                                           Required: List[Long]\n\e[31m20 |\e\
    [0m        \e[34m// TODO: Write this function\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]\n\
    \        val divisor = 2 until n\n        divisor.foreach { d =>\n           \
    \ val isPrime = true\n            for (i <- 2 to n) {\n                if (d %\
    \ i ==0)\n                    isPrime = false\n            }\n            if (isPrime)\
    \ {\n                result += d.toLong\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpekfcf_8s.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m               \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekfcf_8s.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdivisor\e\
    [0m = \e[31m2\e[0m until n\n\e[31m\e[31m   |\e[0m                            \
    \  ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekfcf_8s.scala:24:27 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (n : Long)\n\e[31m   |\e[0m                  \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpekfcf_8s.scala:26:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                   \
    \ isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val isPrime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660029437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = List(2, 3)\n    \
    \    val remainder = n % primes.head == 0 && (n - 1) % primes.head == 0\n    \
    \    val list = for (i<- 1 to n) yield primes.head + ((i-primes.head) * primes.head)\
    \ % primes.head\n        list ++ List(if (remainder) 1 else 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7rrb6mn8.scala:22:33\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e\
    [0m = \e[33mfor\e[0m (i<- \e[31m1\e[0m to n) \e[33myield\e[0m primes.head + ((i-primes.head)\
    \ * primes.head) % primes.head\n\e[31m\e[31m   |\e[0m                        \
    \         ^\e[0m\n\e[31m   |\e[0m                                 Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                                 Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7rrb6mn8.scala:23:8 ---------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        list ++ List(\e[33mif\e[0m (remainder) \e[31m1\e\
    [0m \e[33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Int]\n\e[31m   |\e[0m       \
    \ Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val list: List[Long] = Nil\n \
    \       for (i<-0 to (n)) {\n            if(i%2==0) {\n            list+=i.toLong\n\
    \            }\n            else{\n                for (j<-(i+2 to n)) {\n   \
    \             if(j%2==0) {\n                    list+=j.toLong\n             \
    \   }\n                }\n            }\n        }\n        list.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl183v80h.scala:21:22\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i<-\e\
    [31m0\e[0m to (n)) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpl183v80h.scala:23:16 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            list+=i.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m          value += is not a member of List[Long] - did you mean list.!=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl183v80h.scala:26:32 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mfor\e[0m (j<-(i+\e[31m2\e[0m to\
    \ n)) {\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m \
    \  |\e[0m                                Found:    (n : Long)\n\e[31m   |\e[0m\
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpl183v80h.scala:28:24 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    list+=j.toLong\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m          value += is not a\
    \ member of List[Long] - did you mean list.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660029438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = List(2l) ++ (for\
    \ {\n            p <- primes.takeWhile(_ < n)\n        } yield p) ++ (for {\n\
    \            p <- primes.takeWhile(_ < n)\n        } yield p + (n-p))\n      \
    \  primes.filter(_ <= n).takeWhile(_ <= n).map(n => n + (n-n)).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_yruvm49.scala:21:17 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            p <- primes.takeWhile(_ < n)\n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive \e\
    [33mvalue\e[0m \e[35mprimes\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_yruvm49.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            p <- primes.takeWhile(_ < n)\n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive \e\
    [33mvalue\e[0m \e[35mprimes\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        // Your code here\n        val\
    \ li = Vector.empty[Long]\n        var i = 2l\n        while (i <= n)\n      \
    \  {\n            if (isPrime(i))\n            {\n                li :+= i.toLong\n\
    \                i += 2l\n            }\n            else i += 1\n        }\n\
    \        li.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpib1i2ote.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (isPrime(i))\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpib1i2ote.scala:27:19\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                li :+= i.toLong\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m         value\
    \ :+= is not a member of Vector[Long] - did you mean li.:+?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpib1i2ote.scala:32:19 --------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m        li.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mVector\e[0m[Long]\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mList\e[0m[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var primes: List[Long] = List()\
    \ // list of primes\n        var counter = 2 // prime counter\n        // search\
    \ for a prime in first n numbers\n        for(i <- 0 until n){\n            if(isPrime(counter)){\n\
    \                primes = primes :+ counter\n            }\n            counter\
    \ += 1\n        }\n        // sort primes and remove duplicates\n        val sortedPrimes\
    \ = primes.sorted\n        val deduplicatedPrimes = sortedPrimes.distinct\n  \
    \      // remove primes which are less than n\n        val primesLessThanN = deduplicatedPrimes.filter(_\
    \ <= n)\n        // append n to primes\n        primes ::: List(primes.head.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoieywqu5.scala:23:25\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpoieywqu5.scala:24:15 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(isPrime(counter)){\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m               Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val results: mutable.Buffer[List[Long]]\
    \ = mutable.Buffer.empty\n        var counter = 1\n        while (counter <= n)\
    \ {\n            counter += 1 // Increment counter\n            results = results\
    \ :+ (counter % 2) :: Nil\n        }\n        results.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E041] Syntax Error: /tmp/tmp1pc5uu1s.scala:24:33 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            results = results :+ (counter % \e[31m2\e\
    [0m) :: Nil\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e\
    [31m   |\e[0m:+ (which is left-associative) and :: (which is right-associative)\
    \ have same precedence and may not be mixed\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1pc5uu1s.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m: mutable.Buffer[\e\
    [35mList\e[0m[\e[35mLong\e[0m]] = mutable.Buffer.empty\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1pc5uu1s.scala:20:50\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresults\e[0m: mutable.Buffer[\e[35mList\e[0m[\e[35mLong\e[0m]] = mutable.Buffer.empty\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val buffer = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        def helper(i : Long) : Unit = {\n            if (i >= n) buffer.clear()\n\
    \            else if (buffer.contains(i)) buffer.remove(i)\n            else {\n\
    \                val j = i+2\n                while (j < n && buffer.contains(j))\
    \ j += 2\n                if (j > n || buffer.contains(j)) buffer.clear()\n  \
    \              else buffer.add(j)\n            }\n        }\n        for (i =\
    \ 2; i <=n ; i+=2) {\n            helper(i)\n        }\n        buffer.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwpekzqfk.scala:31:15 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mfor\e[0m (i = \e[31m2\e[0m; i <=n ; i+=\e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m   \
    \            ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpwpekzqfk.scala:31:26 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mfor\e[0m (i = \e[31m2\e[0m; i <=n ; i+=\e[31m2\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   '<-' expected, but ';' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpwpekzqfk.scala:31:32 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mfor\e[0m (i = \e[31m2\e[0m; i <=n ; i+=\e[31m2\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                '<-' expected, but ')' found\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwpekzqfk.scala:23:55 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (buffer.contains(i))\
    \ buffer.remove(i)\n\e[31m\e[31m   |\e[0m                                    \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \                  Found:    (i : Long)\n\e[31m   |\e[0m                     \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwpekzqfk.scala:26:54 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mwhile\e[0m (j < n && buffer.contains(j))\
    \ j += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                   \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                   value += is not\
    \ a member of Long - did you mean j.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpwpekzqfk.scala:28:28 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m                \e[33melse\e[0m buffer.add(j)\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue add is not a member of scala.collection.mutable.ListBuffer[Long],\
    \ but could b"
  stdout: ''
  timestamp: 1660029441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        def isPrime(x : Long) : Boolean\
    \ = {\n            if (x < 2 || x == 2) true\n            else if (x % 2 == 0)\
    \ false\n            else if (x % 3 == 0) false\n            else x % 2 == 0 &&\
    \ x % 3 != 0\n        }\n        if (n <= 1) Nil\n        else n match {\n   \
    \         case n @ n if (n > 1) => (for {\n                x <- 2 to n by 2\n\
    \                if (isPrime(x)) yield x\n            } yield n).tail\n      \
    \      case _ => Nil\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n   \
    \ assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu_uumu7k.scala:30:32 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                \e[33mif\e[0m (isPrime(x)) \e[33myield\e\
    [0m x\n\e[31m\e[31m   |\e[0m                                ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                '}' expected, but 'yield' found\n\e\
    [31m\e[31m-- [E005] Naming Error: /tmp/tmpu_uumu7k.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mcase\e[0m n @ n \e[33mif\e[0m (n >\
    \ \e[31m1\e[0m) => (\e[33mfor\e[0m {\n\e[31m\e[31m   |\e[0m                 ^^^^^\e\
    [0m\n\e[31m   |\e[0m                 duplicate pattern variable: n\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu_uumu7k.scala:29:26 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                x <- \e[31m2\e[0m to n by \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var primesList = new ListBuffer[Long]()\n\
    \        var nIsPrime = true\n        var counter : Long = 0\n        while (counter\
    \ < n && (nIsPrime)) {\n            for (x <- 2 to n) {\n                if ((n\
    \ % x) == 0) {\n                    primesList.append(x.toLong)\n            \
    \        nIsPrime = false\n                }\n            }\n            counter\
    \ += 1\n        }\n        primesList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp48x8a338.scala:24:27\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m (x\
    \ <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (n : Long)\n\e[31m  \
    \ |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val numbers = new mutable.ListBuffer[Long]()\n\
    \        var i : Long = 1\n\n        while (i<=n) {\n            i = i+1\n   \
    \         if (i.toLong == 2) {\n                numbers += i.toLong\n        \
    \    }\n        }\n        numbers.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ou8sti7.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumbers\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val counter = mutable.ListBuffer[Long]()\n        while(n > 1) {\n  \
    \          val r = 2l\n            while(true) {\n                if(r > n) break\n\
    \                if(r in primes) counter.append(r)\n                if(n % r ==\
    \ 0) break\n                r += 1\n            }\n            primes.append(r)\n\
    \            n -= r\n        }\n        primes.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ffmy73f.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6ffmy73f.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcounter\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp6ffmy73f.scala:25:26 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mif\e[0m(r > n) break\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \               Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp6ffmy73f.scala:26:21 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m                \e[33mif\e[0m(r in primes) counter.append(r)\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^\e[0m\n\e[31m   |\e[0m                   value\
    \ in is not a member of Long\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ffmy73f.scala:27:31\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e\
    [0m(n % r == \e[31m0\e[0m) break\n\e[31m\e[31m   |\e[0m                      \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6ffmy73f.scala:28:18\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                r += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Long - did you mean r.!=?\n\e[31m\e[31"
  stdout: ''
  timestamp: 1660029446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n       val primeList: List[Long] = List();\n\
    \       val counter = n / 2l.toLong;\n       for (i<-0 until counter) {\n    \
    \       for (j <-0 until n) {\n               if (i%j == 0) {\n              \
    \     primeList += j.toLong;\n                   break;\n               }\n  \
    \         }\n       }\n       primeList ++ List((counter.toLong)*2l.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfzmaprwg.scala:22:23\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \e[33mfor\e[0m (i<-\e\
    [31m0\e[0m until counter) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (counter : Long)\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpfzmaprwg.scala:23:28 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m           \e[33mfor\e[0m (j <-\e[31m0\e[0m until n)\
    \ {\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m\
    \                            Found:    (n : Long)\n\e[31m   |\e[0m           \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpfzmaprwg.scala:25:29 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m                   primeList += j.toLong;\n\e[31m\e[31m   |\e[0m          \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value += is not a member of List[Long]\
    \ - did you mean primeList.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzmaprwg.scala:26:19\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                   break;\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^\e[0m\n\e[31m   |\e[0m          \
    \         Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 2l to n) if (isPrime(i)) { list.+= i }\n        list.iterator.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkluj1946.scala:21:55 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2l\e[0m to n) \e[33mif\e\
    [0m (isPrime(i)) { list.+= i }\n\e[31m\e[31m   |\e[0m                        \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkluj1946.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkluj1946.scala:21:31\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m2l\e[0m to n) \e[33mif\e[0m (isPrime(i)) { list.+= i }\n\e[31m\e[31m\
    \   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                        Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primeNumbers: List[Long] =\
    \ primeNumbersUntil(n)\n        primeNumbers.takeWhile(p => p <= n).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt3xznnly.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeNumbers\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = primeNumbersUntil(n)\n\e[31m\e[31m   |\e[0m           \
    \                            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                              Not found: primeNumbersUntil\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        def isPrime(n: Int): Boolean =\
    \ {\n          for( i <- 1 to n / 2 )\n              if( n % i == 0 )\n      \
    \            return false\n          true\n        }\n\n        def nextPrime(n:\
    \ Int): Int = {\n          var i: Int = 0\n          while(i < n) if( isPrime(i)\
    \ ) i = i + 2\n          i\n        }\n\n        var primes: List[Long] = List(n)\n\
    \        primes = primes ::: List(n + 1)\n\n        // The loop keeps dividing\
    \ the last number in primes by two,\n        // so if the last number is less\
    \ than or equal to n, then primes\n        // contains only n.\n        while(\
    \ primes.last <= n ) {\n            primes = primes ::: List( nextPrime(primes.last)\
    \ )\n        }\n\n        // If n is greater than the greatest prime in the list,\
    \ primes contains only n.\n        primes.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7zg30oel.scala:40:55\
    \ --------------------\e[0m\e[0m\n\e[31m40 |\e[0m            primes = primes :::\
    \ List( nextPrime(primes.last) )\n\e[31m\e[31m   |\e[0m                      \
    \                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                               Found:    Long\n\e[31m   |\e[0m              \
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        def isPrime(n: Long, primes: mutable.Set[Long])\
    \ : Boolean = {\n            if (n < 2) false\n            else\n            {\n\
    \                if (primes.contains(n))\n                    true\n         \
    \       else\n                {\n                    primes.update(n)\n      \
    \              val i = 2\n                    for (j <- 3 to i by 2)\n       \
    \             {\n                        if (n%j == 0)\n                     \
    \   {\n                            isPrime(n, primes)\n                      \
    \      break\n                        }\n                    }\n             \
    \   }\n            }\n        }\n\n        val primes = mutable.Set()\n      \
    \  for (i <- 2 to n)\n        {\n            isPrime(i, primes)\n            if\
    \ (primes.size == n) break\n        }\n        primes.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyshr_4mt.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mdef\e[0m \e[36misPrime\e[0m(\e[36mn\e[0m:\
    \ \e[35mLong\e[0m, \e[36mprimes\e[0m: mutable.Set[\e[35mLong\e[0m]) : \e[35mBoolean\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyshr_4mt.scala:35:28 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                            break\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpyshr_4mt.scala:42:21 ------------------------\e[0m\e[0m\n\e[31m42 |\e\
    [0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set()\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyshr_4mt.scala:43:23\
    \ --------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n)\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m       \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpyshr_4mt.scala:46:34 ------------------------\e[0m\e[0m\n\e[31m46 |\e\
    [0m            \e[33mif\e[0m (primes.size == n) break\n\e[31m\e[31m   |\e[0m \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                  Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660029446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        primes ++= 2l.toLong until n\n        primes.takeWhile(p => { val l =\
    \ scala.math.sqrt((p*p).toLong).toInt; l != 1 && primes.indexOf(l) == -1})\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo2u12w57.scala:22:24\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        primes.takeWhile(\e[36mp\e\
    [0m => { \e[33mval\e[0m \e[36ml\e[0m = scala.math.sqrt((p*p).toLong).toInt; l\
    \ != \e[31m1\e[0m && primes.indexOf(l) == -\e[31m1\e[0m})\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.mutable.ArrayBuffer[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        // Write your solution here\n\
    \        if(n < 2) List()\n        else if(n % 2 == 0 || n <= 5) return List(n.toLong)\n\
    \        else if(n % 3 == 0 || n % 2 == 0 || n <= 5) return List(n.toLong)\n \
    \       else {\n            val factors = List(3,5)\n            val temp = factors.filter(x\
    \ => n <= x)\n            if(temp.length > 0) temp.reverse.tail :: List(n.toLong)\n\
    \            else List()\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_k30dv7c.scala:27:45\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m(temp.length\
    \ > \e[31m0\e[0m) temp.reverse.tail :: List(n.toLong)\n\e[31m\e[31m   |\e[0m \
    \                               ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                          Found:    List[Int @uncheckedVariance]\n\e[31m   |\e\
    [0m                                Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val l = n.toLong\n        val\
    \ rem = if (l < 2) 0 else l % 2\n        val lim = l - rem\n        val primes\
    \ = primesAndFactors(lim)\n        primes.filter(p => p._2 < lim)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrggguss.scala:23:21 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = primesAndFactors(lim)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     Not found: primesAndFactors\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        // TODO: Fill in the blanks\n\
    \        if (n < 2) List()\n        val primes = List(2, 3, 5)\n        val numbers\
    \ = List(n)\n        numbers.foreach(n => {\n            val prime = primes.find(n%_\
    \ == 0)\n            if (prime == primes.last) primes.last\n            else primes\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpid3c2ue4.scala:26:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m (prime == primes.last) primes.last\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \    Values of types Option[Int] and Int cannot be compared with == or !=\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n <= 2l) List()\n        else\
    \ {\n            val isPrime = \n                (n-1l) match {\n            \
    \        case n if n % 2l == 0l => false\n                    case n if n % 3l\
    \ == 0l => false\n                    case n if n % 5l == 0l => false\n      \
    \              case n if n % 7l == 0l => false\n                    case n if\
    \ n % 11l == 0l => false\n                    case n if n % 13l == 0l => false\n\
    \                    case n if n % 17l == 0l => false\n                    case\
    \ n if n % 19l == 0l => false\n                    case n if n % 23l == 0l =>\
    \ true\n                    case n if n % 29l == 0l => true\n                \
    \    case n if n % 31l == 0l => true\n                    case n if n % 37l ==\
    \ 0l => true\n                    case n if n % 41l == 0l => true\n          \
    \          case n if n % 47l == 0l => true\n                    case n if n %\
    \ 53l == 0l => true\n                    case n if n % 59l == 0l => true\n   \
    \                 case n if n % 61l == 0l => true\n                    case n\
    \ if n % 67l == 0l => true\n                    case n if n % 71l == 0l => true\n\
    \                    case n if n % 73l == 0l => true\n                    case\
    \ n if n % 79l == 0l => true\n                    case n if n % 83l == 0l => true\n\
    \                    case n if n % 89l == 0l => true\n                    case\
    \ n if n % 97l == 0l => true\n                    case n if n % 101l == 0l =>\
    \ true\n                    case n if n % 103l == 0l => true\n               \
    \     case n if n % 107l == 0l => true\n                    case n if n % 111l\
    \ == 0l => true\n                    case n if n % 117l == 0l => true\n      \
    \              case n if n % 123l == 0l => true\n                    case n if\
    \ n % 129l == 0l => true\n                    case n if n % 139l == 0l => true\n\
    \                    case n if n % 147l == 0l => true\n                    case\
    \ n if n % 151l == 0l => true\n                    case n if n % 157l == 0l =>\
    \ true\n                    case n if n % 163l == 0l => true\n               \
    \     case n if n % 167l == 0l => true\n                    case n if n % 173l\
    \ == 0l => true\n                    case n if n % 179l == 0l => true\n      \
    \              case n if n % 185l == 0l => true\n                    case n if\
    \ n % 19\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphxe4zmsc.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphxe4zmsc.scala:80:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m80 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmphxe4zmsc.scala:64:30 --------------------\e[0m\e[0m\n\
    \e[31m64 |\e[0m                    \e[33mcase\e[0m n \e[33mif\e[0m n % \e[31m19\e\
    [0m\n\e[31m\e[31m   |\e[0m                              ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                              Found:    Long\n\e[31m   |\e[0m        \
    \                      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmphxe4zmsc.scala:79:1 ---------------------\e[0m\e\
    [0m\n\e[31m79 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmphxe4zmsc.scala:66:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m66 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660029450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n      var nextPrime = 1\n      var primes\
    \ = mutable.ListBuffer(nextPrime)\n      while ( primes.length < n){\n       \
    \ val prime = nextPrime\n        primes += prime\n        nextPrime = prime +\
    \ 2\n        primes.find(_ > n)\n      }\n      primes\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpouzr6a03.scala:21:19 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33mvar\e[0m \e[36mprimes\e[0m = mutable.ListBuffer(nextPrime)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val lst : mutable.ListBuffer[Long]\
    \ = mutable.ListBuffer[Long]()\n        for(i <- 2 to n){\n            if((i.toInt)%2\
    \ == 0){\n                val isPrime = i.toInt/2 #> 2\n                if(isPrime){\n\
    \                    if(i <= n){\n                        lst += i.toLong\n  \
    \                  }\n                }\n            }\n        }\n        if(lst.size\
    \ > 0){\n            lst.sort\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24j6uv68.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst\e[0m : mutable.ListBuffer[\e\
    [35mLong\e[0m] = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24j6uv68.scala:20:45\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mlst\e[0m : mutable.ListBuffer[\e[35mLong\e[0m] = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp24j6uv68.scala:21:22\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m2\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp24j6uv68.scala:23:40 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m                \e[33mval\e[0m \e[36misPrime\e[0m = i.toInt/\e[31m2\e[0m #>\
    \ \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                      ^^^^\e\
    [0m\n\e[31m   |\e[0m            value #> is not a member of Int - did you mean\
    \ (\e[31m2\e[0m : Int).##?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp24j6uv68.scala:31:8\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m(lst.size\
    \ > \e[31m0\e[0m){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m     \
    \   Found:    Unit\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e\
    [0m        Maybe you are missing an else part for the conditional?\n\e[31m32 |\e\
    [0m            lst.sort\n\e[31m33 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer"
  stdout: ''
  timestamp: 1660029449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 2 to n) {\n            if(isPrime(i)) result += i\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlfo2hc1.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptlfo2hc1.scala:21:22\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m2\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptlfo2hc1.scala:22:15 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            \e[33mif\e[0m(isPrime(i)) result += i\n\e[31m\e[31m   |\e[0m  \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m               Not found: isPrime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primesUpToN = Primes.primes.takeWhile(p\
    \ => p <= n).toList\n        val factorsUpToN = Factors.factors.takeWhile(p =>\
    \ p <= n).toList\n        if (primesUpToN.isEmpty || factorsUpToN.isEmpty) return\
    \ List()\n        else {\n            val n = n + 1\n            val primesDownToN\
    \ = primesUpToN\n            val factorsDownToN = factorsUpToN\n            primesDownToN.map(_\
    \ * factorsDownToN.last).toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4lxf8hi5.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimesUpToN\e[0m = Primes.primes.takeWhile(\e\
    [36mp\e[0m => p <= n).toList\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Not found: Primes\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4lxf8hi5.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorsUpToN\e[0m = Factors.factors.takeWhile(\e\
    [36mp\e[0m => p <= n).toList\n\e[31m\e[31m   |\e[0m                          \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: Factors\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4lxf8hi5.scala:24:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e\
    [0m \e[36mn\e[0m = n + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \ ^\e[0m\n\e[31m   |\e[0m                    Recursive \e[33mvalue\e[0m \e[35mn\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 1 to n) counts += i -> counts.getOrElse(i, 0)\n    \
    \    val res = (1 to n).filter( x => counts.contains(x)).filter( x => counts(x)\
    \ <= counts.getOrElse(x, 0)).map(x => x * counts(x).toLong).toList\n        counts\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp84ztepce.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp84ztepce.scala:21:23 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) counts\
    \ += i -> counts.getOrElse(i, \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \            ^\e[0m\n\e[31m   |\e[0m                       Found:    (n : Long)\n\
    \e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp84ztepce.scala:22:24 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = (\e[31m1\e[0m\
    \ to n).filter( \e[36mx\e[0m => counts.contains(x)).filter( \e[36mx\e[0m => counts(x)\
    \ <= counts.getOrElse(x, \e[31m0\e[0m)).map(\e[36mx\e[0m => x * counts(x).toLong).toList\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var primes : List[Long] = null\n\
    \        var counts : List[Long] = null\n\n        // Primes up to 2^31 are easy\
    \ to test.\n        val maxPrime = 2l\n        var maxCount = 1l\n        var\
    \ count = 0\n\n        // Keep going until we reach the limit or we find some\
    \ composite number.\n        while (n >= maxPrime || count <= maxCount) {\n  \
    \          val next = n + 1\n\n            // If the current number is greater\
    \ than or equal to the square root of n\n            // then the number is not\
    \ prime\n            if (isPrime(next)) {\n                // Add it to the list\
    \ of primes.\n                primes = primes ++ List(n + 1.toLong)\n\n      \
    \          // Add the current count to the list of counts.\n                counts\
    \ = counts ++ List(count)\n\n                // Update the max and current numbers,\
    \ as we haven't exceeded the limit.\n                if (next >= maxPrime) {\n\
    \                    maxPrime = next\n                    maxCount = count\n \
    \               }\n            }\n\n            count = count + 1\n        }\n\
    \n        if (count > maxCount) {\n            // Make sure that the list of primes\
    \ is in descending order.\n            primes.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        }\n        else {\n            primes\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwx20dsps.scala:34:16 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mif\e[0m (isPrime(next)) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not\
    \ found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpwx20dsps.scala:43:29\
    \ -----------------------------\e[0m\e[0m\n\e[31m43 |\e[0m                   \
    \ maxPrime = next\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val maxPrime\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var primes = List((2l).toLong);\n\
    \        var remaining = n\n        var found = False\n        while(!found &&\
    \ remaining > 0) {\n            var found = True;\n            for(prime <- primes){\n\
    \                if(remaining % prime == 0) {\n                    found = False\n\
    \                    break;\n                }\n            }\n            if((found))\
    \ {\n                primes = primes :+ (remaining / prime).toLong;\n        \
    \        remaining = (remaining - remaining / prime).toLong\n            }\n \
    \       }\n        if(remaining > 0) {\n            primes = primes :+ (remaining).toLong\n\
    \        }\n        return primes;\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpja9op7_u.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mfound\e[0m = False\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \   Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpja9op7_u.scala:24:24\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mvar\e[0m\
    \ \e[36mfound\e[0m = True;\n\e[31m\e[31m   |\e[0m                        ^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: True\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpja9op7_u.scala:27:28 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    found = False\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpja9op7_u.scala:28:20 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m                    break;\n\e[31m\e[31m   |\e[0m                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: break\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpja9op7_u.scala:32:48 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                primes = primes :+ (remaining / prime).toLong;\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                Not found: prime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpja9op7_u.scala:33:53\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                remaining\
    \ = (remaining - remaining / prime).toLong\n\e[31m\e[31m   |\e[0m            \
    \                                         ^^^^^\e[0m\n\e[31"
  stdout: ''
  timestamp: 1660029447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n <= 0L)\n            Nil\n\
    \        else if (n == 2L)\n            List(2L)\n        else\n            n\
    \ match {\n                case 2L | 3L => List(2L) :: (3L :: List.empty)\n  \
    \              case n if n < 4L => List(n :: 4L)\n                case 2L => List(3L)\n\
    \                case n+1 => List(n)\n                case n+2 if n%2==0 => List(n)\n\
    \                case n+3 if n%3==0 => List(n)\n                case n+4 if n%5==0\
    \ => List(n)\n                case n+5 => List(2L)\n                case n =>\
    \ countUpTo((n+1L))\n            }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa3mzwu3y.scala:26:36\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e\
    [0m \e[31m2L\e[0m | \e[31m3L\e[0m => List(\e[31m2L\e[0m) :: (\e[31m3L\e[0m ::\
    \ List.empty)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    \e[1m\e[31mList\e\
    [0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                   \
    \             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpa3mzwu3y.scala:27:43 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m                \e[33mcase\e[0m n \e[33mif\e[0m n < \e[31m4L\e[0m => List(n\
    \ :: \e[31m4L\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                                        value\
    \ :: is not a member of Long\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa3mzwu3y.scala:29:22\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                \e[33mcase\e\
    [0m n+\e[31m1\e[0m => List(n)\n\e[31m\e[31m   |\e[0m                      ^\e\
    [0m\n\e[31m   |\e[0m                      Not found: +\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpa3mzwu3y.scala:29:33 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                \e[33mcase\e[0m n+\e[31m1\e[0m => List(n)\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 Found:    (n : Any)\n\e[31m   |\e[0m       \
    \                          Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpa3mzwu3y.scala:30:22 ------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m                \e[33mcase\e[0m n+\e[31m2\e[0m \e[33mif\e\
    [0m n%\e[31m2\e[0m==\e[31m0\e[0m => List(n)\n\e[31m\e[31m   |\e[0m           \
    \           ^\e[0m\n\e[31m   |\e[0m                      Not found: +\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling wi"
  stdout: ''
  timestamp: 1660029453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 2l; j < n; j+=i)\n            if (n % i == 0) primes += i.toLong\n\
    \n        if (primes.isEmpty) List() else\n            primes.takeWhile { p =>\n\
    \                !primes.exists(n => n % p == 0)\n            }.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqgk7sd4i.scala:21:27 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2l\e[0m; j < n; j+=i)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     '<-' expected, but ';' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpqgk7sd4i.scala:21:33 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2l\e[0m; j < n; j+=i)\n\e[31m\e\
    [31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m        \
    \                         '<-' expected, but ')' found\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpqgk7sd4i.scala:21:18 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2l\e[0m; j < n; j+=i)\n\
    \e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m              \
    \    value foreach is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660029452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val max = (math.sqrt(n).toInt)\
    \ + 1\n        (2 to max).filter(x => isPrime(x)).take(n - 1).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfpw4m7aw.scala:21:31 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        (\e[31m2\e[0m to max).filter(\e[36mx\e[0m =>\
    \ isPrime(x)).take(n - \e[31m1\e[0m).toList\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfpw4m7aw.scala:21:48\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        (\e[31m2\e[0m to max).filter(\e\
    [36mx\e[0m => isPrime(x)).take(n - \e[31m1\e[0m).toList\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                               Found:    Long\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n <= 1l) {\n            return\
    \ List()\n        }\n        else {\n            val nums = List() // list of\
    \ numbers less than n\n            // now loop over numbers less than n and check\
    \ if it is divisible by primes\n            val numsInDivisors = n / 2l\n    \
    \        val primeFactors = primeFactors(numsInDivisors)\n            val remainingPrimes\
    \ = primeFactors.filter(_ > 1)\n            val remainders = primeFactors.filter(_\
    \ == 1)\n            val maxPrimes = remainingPrimes.max\n            val minPrime\
    \ = primeFactors.min\n            val maxDivisor = maxPrimes.toLong\n        \
    \    val minDivisor = minPrime.toLong\n            val divisors = 0 until maxDivisor\n\
    \            val divisorFactors = divisors.map(n => n * (n + 1l).toLong)\n   \
    \         var divisorIndex = divisorFactors.indexOf(divisorFactors.max)\n    \
    \        while (divisorIndex < divisorFactors.length) {\n                if (numsInDivisors\
    \ > divisorFactors(divisorIndex)) {\n                    nums += divisorFactors(divisorIndex)\n\
    \                    divisorIndex += 1\n                }\n                else\
    \ {\n                    numsInDivisors -= divisorFactors(divisorIndex)\n    \
    \                divisorIndex += 1\n                }\n            }\n       \
    \     // now loop over the remaining divisors and add the prime factors to nums\n\
    \            val primes = 0 until maxDivisor\n            val primeFactors = primes.map(n\
    \ => n * (n + 1l).toLong)\n            val remainingPrimes = primeFactors.filter(_\
    \ > 1)\n            val remainders = primeFactors.filter(_ == 1)\n           \
    \ val maxPrimes = remainingPrimes.max\n            val minPrime = primeFactors.min\n\
    \            val maxDivisor = maxPrimes.toLong\n            val minDivisor = minPrime.toLong\n\
    \            val divisors = 0 until maxDivisor\n            val divisorFactors\
    \ = divisors.map(n => n * (n + 1l).toLong)\n            var divisorIndex = divisorFactors.indexOf(divisorFactors.max)\n\
    \            while (divisorIndex < divisorFactors.length) {\n                if\
    \ (numsInDivisors > divisorFactors(divisorIndex)) {\n                    nums\
    \ += divisorFactors(divisorIndex)\n                    divisorIndex += 1\n   \
    \             }\n                else {\n                    numsInDivisors -=\
    \ divisorFactors(divisorIndex)\n                    divisorIndex += 1\n      \
    \          }\n            }\n            return nums\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf97c2b2k.scala:49:16 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m            \e[33mval\e[0m \e[36mprimeFactors\e[0m =\
    \ primes.map(\e[36mn\e[0m => n * (n + \e[31m1l\e[0m).toLong)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mprimeFactors is already defined as \e[33mvalue\e[0m \e[35mprimeFactors\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf97c2b2k.scala:50:16 ---------------------------\e[0m\e[0m\n\e\
    [31m50 |\e[0m            \e[33mval\e[0m \e[36mremainingPrimes\e[0m = primeFactors.filter(_\
    \ > \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainingPrimes is already defined as \e[33mvalue\e[0m \e\
    [35mremainingPrimes\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpf97c2b2k.scala:51:16 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m            \e[33mval\e[0m \e[36mremainders\e[0m = primeFactors.filter(_\
    \ == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainders is already defined as \e[33mvalue\e[0m \e[35mremainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf97c2b2k.scala:52:16 ---------------------------\e[0m\e[0m\n\e\
    [31m52 |\e[0m            \e[33mval\e[0m \e[36mmaxPrimes\e[0m = remainingPrimes.max\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxPrimes is already defined as \e[33mvalue\e[0m \e[35mmaxPrimes\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf97c2b2k.scala:53:16 ---------------------------\e[0m\e[0m\n\e\
    [31m53 |\e[0m            \e[33"
  stdout: ''
  timestamp: 1660029455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val list = new mutable.ListBuffer[Long]\n\
    \        val i = 2L\n        val s = math.sqrt(n)\n        while (i <= s) {\n\
    \            if (n % i == 0) {\n                list.toList.append(i)\n      \
    \          n /= i\n            }\n            i += 1\n        }\n        list.toList.map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaycle0_n.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m               \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaycle0_n.scala:26:18\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                n /= i\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ /= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpaycle0_n.scala:28:14 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Long - did you mean\
    \ i.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660029455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val list = List(n)\n        if\
    \ (list.isEmpty) list\n        else (2 to list.head filter (_ % _ == 0) map (_+2)\
    \ ++ countUpTo((list.head - 1l)))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4wo6ykyv.scala:22:24\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m (\e[31m2\e\
    [0m to list.head filter (_ % _ == \e[31m0\e[0m) map (_+\e[31m2\e[0m) ++ countUpTo((list.head\
    \ - \e[31m1l\e[0m)))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   Found:    Long\n\e[31m   |\e[0m            \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp4wo6ykyv.scala:22:37\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m\
    \ (\e[31m2\e[0m to list.head filter (_ % _ == \e[31m0\e[0m) map (_+\e[31m2\e[0m)\
    \ ++ countUpTo((list.head - \e[31m1l\e[0m)))\n\e[31m\e[31m   |\e[0m          \
    \                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmp4wo6ykyv.scala:22:54 -----------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33melse\e[0m (\e[31m2\e[0m to list.head filter\
    \ (_ % _ == \e[31m0\e[0m) map (_+\e[31m2\e[0m) ++ countUpTo((list.head - \e[31m1l\e\
    [0m)))\n\e[31m\e[31m   |\e[0m                                                \
    \      ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$3 of expanded function:\n\
    \e[31m   |\e[0m   _$3 => _$3 + 2.\n3 errors found\n"
  stdout: ''
  timestamp: 1660029453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        // ((n: Long) => if (n < 2) Nil\
    \ else {\n        // val nums = (2 to n).toList\n        // val primes = nums.filter(_\
    \ % _ == 0)\n        // val primesLessN = (primes takeWhile { p => p <= n } ++\
    \ (primes dropWhile { p => p > n } )).filter(_ <= n)\n        // primesLessN.map(_.toLong).sum\n\
    \        // })\n        val nums = (2 to n).toList\n        val primes = nums.filter(_\
    \ % _ == 0)\n        val primesLessN = (primes takeWhile { p => p <= n } ++ (primes\
    \ dropWhile { p => p > n } )).filter(_ <= n)\n        primesLessN.map(_.toLong).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy1g2h1qn.scala:26:25\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnums\e\
    [0m = (\e[31m2\e[0m to n).toList\n\e[31m\e[31m   |\e[0m                      \
    \   ^\e[0m\n\e[31m   |\e[0m                         Found:    (n : Long)\n\e[31m\
    \   |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpy1g2h1qn.scala:27:33 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = nums.filter(_\
    \ % _ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong number\
    \ of parameters, expected: 1\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpy1g2h1qn.scala:28:46\
    \ -----------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e\
    [0m \e[36mprimesLessN\e[0m = (primes takeWhile { \e[36mp\e[0m => p <= n } ++ (primes\
    \ dropWhile { \e[36mp\e[0m => p > n } )).filter(_ <= n)\n\e[31m\e[31m   |\e[0m\
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \                         I could not infer the type of the parameter p.\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpy1g2h1qn.scala:29:8 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        primesLessN.map(_.toLong).sum\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Long\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e\
    [0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val li = ListBuffer[Long]()\n\
    \        var m = 2\n        while ( m <= n ) {\n            if ( n % m == 0 )\
    \ {\n                li +=m\n                li += n\n            }\n        \
    \    m+=2\n        }\n        return li.dropWhile( _ == 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4jc99w5q.scala:29:27\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mreturn\e[0m li.dropWhile(\
    \ _ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m               Required: List[Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val p: List[Long] = List(2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)\n\
    \        val r: List[Long] = 0 until n\n        val r: List[Long] = r.toList\n\
    \        for (i <- 0 until n) {\n            val p: List[Long] = List(2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)\n\
    \            val p: List[Long] = p.toList\n            val primeNumbers = r filter\
    \ (p contains _)\n            if (primeNumbers.isEmpty)\n                List()\n\
    \            else\n                List(primeNumbers.toList)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx8q73bu9.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m: \e[35mList\e[0m[\e\
    [35mLong\e[0m] = r.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpx8q73bu9.scala:21:36 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mr\e[0m: \e[35mList\e[0m[\e[35mLong\e[0m]\
    \ = \e[31m0\e[0m until n\n\e[31m\e[31m   |\e[0m                              \
    \      ^\e[0m\n\e[31m   |\e[0m                                    Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8q73bu9.scala:23:26\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmpx8q73bu9.scala:25:16 ---------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mp\e[0m: \e[35mList\e[0m[\e\
    [35mLong\e[0m] = p.toList\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mp is already defined as \e[33mvalue\e[0m \e[35mp\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1660029459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        def isPrime(x: Long): Boolean\
    \ = {\n            val sqrt = math.sqrt((x*x).toLong)\n            for( i <- 1\
    \ to sqrt ) {\n                if ( (x % i) == 0 ) {\n                    return\
    \ false\n                }\n            }\n            true\n        }\n     \
    \   val primes = mutable.ListBuffer[Long]()\n        var low = n * 2 // n is prime\
    \ if n is odd or > 2\n        var high = n // n is prime if n is even\n      \
    \  while (low <= high) {\n            if (isPrime(low)) {\n                primes\
    \ += low\n                if (low == high) break\n            }\n            low\
    \ += 2\n        }\n        primes\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprlu3w9fd.scala:22:27\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mfor\e[0m( i\
    \ <- \e[31m1\e[0m to sqrt ) {\n\e[31m\e[31m   |\e[0m                         \
    \  ^^^^\e[0m\n\e[31m   |\e[0m                           Found:    (sqrt : Double)\n\
    \e[31m   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprlu3w9fd.scala:29:21 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprlu3w9fd.scala:35:33 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mif\e[0m (low == high) break\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                 Not found: break\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n == 1l) Nil\n        else\
    \ if (n == 0l) Nil\n        else {\n            def prime = List(2l,3l,5l,7l,11l,13l,17l,19l)\n\
    \            val list = new mutable.ListBuffer[Long]()\n            val factors\
    \ = prime\n            while (factors.nonEmpty && (n % factors.head == 0)) {\n\
    \                list += factors.head\n                factors = factors.tail\n\
    \            }\n            list += n\n            list.toList\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf2vssa0k.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpf2vssa0k.scala:28:24\
    \ -----------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                factors\
    \ = factors.tail\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val factors\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var list = List[Long]()\n    \
    \    var current = n\n        var prime = scala.util.Prime.nextPrime\n\n     \
    \   while (current.toInt < n) {\n            if (scala.util.Prime.primesBetween(current,\
    \ prime).count(_ % current) == 0) {\n                list ::= current\n      \
    \          current = prime\n                prime += 2\n            } else {\n\
    \                current += 1\n            }\n        }\n        list\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjye6gx_a.scala:22:31 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mprime\e[0m = scala.util.Prime.nextPrime\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    value Prime is not a member of util\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpjye6gx_a.scala:25:27 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (scala.util.Prime.primesBetween(current,\
    \ prime).count(_ % current) == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value Prime is\
    \ not a member of util\n2 errors found\n"
  stdout: ''
  timestamp: 1660029459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var result : List[Long] = List[Long]()\n\
    \        for (i <- 2l to n) if (isPrime(i) && n < i) {\n            result = (result\
    \ :+ i).toList\n            n = n + 1\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt3red1e4.scala:21:31 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2l\e[0m to n) \e[33mif\e\
    [0m (isPrime(i) && n < i) {\n\e[31m\e[31m   |\e[0m                           \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found: isPrime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpt3red1e4.scala:23:14 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            n = n + \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var result : List[Long] = List()\n\
    \        var isPrime : Boolean = true\n        var i = 2\n        // loop while\
    \ i is less than or equal to n and is not prime\n        while( i < n && !isPrime)\
    \ {\n            // is i's integer a factor of n?\n            isPrime = n % i\
    \ == 0\n            if( isPrime) {\n                // add i to result\n     \
    \           result = i :: result\n                // increment i\n           \
    \     i += 1\n            }\n        }\n        // return result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsw7l1z8n.scala:38)\n\tat Problem.main(tmpsw7l1z8n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val lis = for (i <- 0 until n)\
    \ yield i\n        lis.filter(_ => prime_(_)).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0tm3ixlv.scala:20:36\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlis\e\
    [0m = \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) \e[33myield\e[0m i\n\e[31m\e\
    [31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e[0m     \
    \                               Found:    (n : Long)\n\e[31m   |\e[0m        \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmp0tm3ixlv.scala:21:31 -----------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        lis.filter(_ => prime_(_)).toList\n\e[31m\e[31m  \
    \ |\e[0m                               ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => prime_(_$2).\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0tm3ixlv.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        lis.filter(_ => prime_(_)).toList\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \         Not found: prime_\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        require( n >= 0) \n        val\
    \ limit = n / 2\n        val res = []\n        val lowPrimes = Primes(limit)\n\
    \        lowPrimes foreach { x =>\n            val primesUpToLimit = Primes(x\
    \ until limit)\n            if (primesUpToLimit.forall(x => n % x == 0)) res +=\
    \ x\n        }\n        if (limit == n) res else countUpTo(limit)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvowztol3.scala:22:19 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = []\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   an identifier\
    \ expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvowztol3.scala:23:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlowPrimes\e[0m = Primes(limit)\n\e[31m\e[31m   |\e[0m^^^\e[0m\n\e[31m\
    \   |\e[0m'=>' expected, but 'end of statement' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpvowztol3.scala:23:24 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlowPrimes\e[0m = Primes(limit)\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                  Not found: Primes\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var list : List[Long] = Nil\n\
    \        for (i <- 2 until n) if (isPrime(i) && i < n) list :+= i\n        list\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4jmsxvvs.scala:21:26\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m until n) \e[33mif\e[0m (isPrime(i) && i < n) list :+= i\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4jmsxvvs.scala:21:33\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m2\e[0m until n) \e[33mif\e[0m (isPrime(i) && i < n) list :+= i\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        def countUpToHelper(n: Long) :\
    \ List[Long] = {\n            if (n <= 0) {\n                List()\n        \
    \    } else if (n % 2 == 0 || n % 3 == 0) {\n                val count = countUpToHelper(n\
    \ - 1l).map(n -> n.toLong).filter(n => n % 2 == 0 || n % 3 == 0).length\n    \
    \            if (count == 0) List()\n                else {\n                \
    \    List(n -> count.toLong)\n                }\n            } else {\n      \
    \          val count = countUpToHelper(n - 1l).map(n -> n.toLong).filter(n =>\
    \ n % 2 == 0 && n % 3 == 0).length\n                if (count == 0) List()\n \
    \               else {\n                    List(n -> count.toLong)\n        \
    \        }\n            }\n        }\n        countUpToHelper(n).map { case (n,\
    \ count) => (n.toLong, count) }.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_74uw2eq.scala:24:56\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m\
    \ \e[36mcount\e[0m = countUpToHelper(n - \e[31m1l\e[0m).map(n -> n.toLong).filter(\e\
    [36mn\e[0m => n % \e[31m2\e[0m == \e[31m0\e[0m || n % \e[31m3\e[0m == \e[31m0\e\
    [0m).length\n\e[31m\e[31m   |\e[0m                                           \
    \             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \                      Found:    (Long, Long)\n\e[31m   |\e[0m               \
    \                                   Required: Long => Any\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp_74uw2eq.scala:24:85 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mcount\e[0m = countUpToHelper(n\
    \ - \e[31m1l\e[0m).map(n -> n.toLong).filter(\e[36mn\e[0m => n % \e[31m2\e[0m\
    \ == \e[31m0\e[0m || n % \e[31m3\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \              ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of Nothing, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_74uw2eq.scala:27:25\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    List(n ->\
    \ count.toLong)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    (Long, Long)\n\e[31m  \
    \ |\e[0m                         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanat"
  stdout: ''
  timestamp: 1660029464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        require(n >= 0)\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        def checkPrime(x : Long, y : Long)\
    \ : Unit = {\n            if (y > x) {\n                list.+= x\n          \
    \  }\n            x += 1\n        }\n        val i = 2l\n        while (i < n)\
    \ {\n            if (checkPrime(2l, i)) {\n                checkPrime(3l, i)\n\
    \            }\n            i += 1\n        }\n        list.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpc2awfd3v.scala:24:25 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                list.+= x\n\e[31m\e[31m   |\e[0m    \
    \                     ^\e[0m\n\e[31m   |\e[0m                         expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpc2awfd3v.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpc2awfd3v.scala:26:14 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            x += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean x.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc2awfd3v.scala:30:26\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[33mif\e[0m (checkPrime(\e\
    [31m2l\e[0m, i)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Found:    Unit\n\e[31m   |\e[0m               \
    \ Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc2awfd3v.scala:33:14\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean i.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1660029462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        def isPrime(n: Long) : Boolean\
    \ = {\n            val i = 2L\n            while (i < n) {\n                if\
    \ (n % i == 0) {\n                    return false\n                }\n      \
    \          i += 1\n            }\n            true\n        }\n\n        val res\
    \ = new mutable.ListBuffer[Long]\n        if (n < 1L) {\n            return res\n\
    \        }\n        for (i <- 2L to n) {\n            if (isPrime(i)) {\n    \
    \            res += i\n            }\n        }\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmns14yd2.scala:26:18 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                i += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Long - did you mean i.!=?\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmns14yd2.scala:31:22 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m        \e[33mval\e[0m \e[36mres\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.Set[Long]()\n\
    \        val primesList = mutable.ListBuffer.empty[Long]\n        val counter\
    \ = scala.collection.mutable.ListBuffer.empty[Long]\n        for (x <- 2l.toLong\
    \ until (n / 2l.toLong)) {\n            val test = n.toString.toLong\n       \
    \     while (test > 1l) {\n                if (test % x != 0l) {\n           \
    \         break\n                } else {\n                    primes += test\n\
    \                    test--\n                }\n            }\n            primesList\
    \ :+= test\n        }\n        for (x <- primes ) {\n            for (y <- primesList\
    \ if x != y) {\n                if (x != y && y != (n - 1l) && n % y != 0l) {\n\
    \                    break\n                } else {\n                    counter\
    \ :+= x\n                }\n            }\n        }\n        counter.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo3308p30.scala:30:26 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    test--\n\e[31m\e[31m   |\e[0m   \
    \                       ^\e[0m\n\e[31m   |\e[0m                          expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpo3308p30.scala:20:21 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpo3308p30.scala:21:25 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mprimesList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpo3308p30.scala:27:20 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n<2) List();\n        if (n%2==0)\
    \ List(n)\n        else {\n            var primes = List();\n            for (i\
    \ <- 3l*3l*3l*3l*3l to n.toLong) {\n                if ((n%i)==0) primes += i.toLong\n\
    \            }\n            primes\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb7iz1wn_.scala:25:37 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mif\e[0m ((n%i)==\e[31m0\e[0m) primes\
    \ += i.toLong\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue += is not a member of List[Nothing] - did you mean List[Nothing].!=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        // TODO: Replace this with your\
    \ code\n        val arr = new Array[Long](n+1)\n        for(i<-1 to n){\n    \
    \        arr(i) = i.toLong\n            if(arr(i).mod(1) == 0){\n            \
    \    arr(i+1) = i.toLong\n            }else{\n                arr(i+1) = arr(i+1)+1\n\
    \            }\n            \n        }\n        val primes = arr.filter{x=>x\
    \ % 2 == 0}\n        val rem = arr.filter{x => x % 2 == 1}.filter{x=>x % 2 !=\
    \ 0}\n        primes.toList ++ rem\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn26j2tuw.scala:21:34\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36marr\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n+\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                  ^^^\e[0m\n\e[31m   |\e[0m     \
    \                             Found:    Long\n\e[31m   |\e[0m                \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpn26j2tuw.scala:22:20 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mfor\e[0m(i<-\e[31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m \
    \                   ^\e[0m\n\e[31m   |\e[0m                    Found:    (n :\
    \ Long)\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpn26j2tuw.scala:24:22 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(arr(i).mod(\e[31m1\e[0m) ==\
    \ \e[31m0\e[0m){\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue mod is not a member of Long, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660029465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n      val aList = for (a <- 2 until n)\
    \ yield {\n        if (n % a > 0) n / a else a\n      }\n      aList.distinct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8k8tcox9.scala:20:36\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36maList\e\
    [0m = \e[33mfor\e[0m (a <- \e[31m2\e[0m until n) \e[33myield\e[0m {\n\e[31m\e\
    [31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e[0m     \
    \                               Found:    (n : Long)\n\e[31m   |\e[0m        \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp8k8tcox9.scala:23:12 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m      aList.distinct\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Found:    IndexedSeq[AnyVal]\n\e[31m   |\e[0m      Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var lst = List[Long]()\n     \
    \   for(i<-2 until n){\n            val f = i*(i+1)/2\n            for(j<-2 until\
    \ n){\n                if (f+j > n && f+j < n && i%j == 0){\n                \
    \    lst += i.toLong\n                    lst += j.toLong\n                  \
    \  break\n                }\n            }\n        }\n        if (lst.isEmpty)\
    \ lst += 0l\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_6rueaxx.scala:21:23\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m(i<-\e\
    [31m2\e[0m until n){\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m       \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_6rueaxx.scala:23:27 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            \e[33mfor\e[0m(j<-\e[31m2\e[0m until n){\n\e[31m\e[31m   |\e\
    [0m                           ^\e[0m\n\e[31m   |\e[0m                        \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_6rueaxx.scala:25:24\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    lst +=\
    \ i.toLong\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e\
    [0m    value += is not a member of List[Long] - did you mean List[Long].!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp_6rueaxx.scala:26:24 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    lst += j.toLong\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member\
    \ of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp_6rueaxx.scala:27:20 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                    break\n\e[31m\e[31m   |\e[0m                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: break\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp_6rueaxx.scala:31:29 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m (lst.isEmpty) lst += \e[31m0l\e\
    [0m\n\e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \    value += is not a member of List[Long] - did you mean List[Long].!=?\n6 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = Primes.primes\n \
    \       val smaller = n / primes.toList\n        primes.filter(x => x < smaller).takeWhile(x\
    \ => x < n)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmj9trjma.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = Primes.primes\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \              Not found: Primes\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        require(n > 0)\n        var l\
    \ = new scala.collection.mutable.ListBuffer[Long]()\n        var i = 3l\n    \
    \    while (i <= n) {\n            if (isPrime(i)) {\n                l.+=i\n\
    \            }\n            i += 1l\n        }\n        l.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi559oo0_.scala:25:21 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                l.+=i\n\e[31m\e[31m   |\e[0m        \
    \             ^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpi559oo0_.scala:24:16 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m            \e[33mif\e[0m (isPrime(i)) {\n\e[31m\e[31m   |\e[0m           \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpi559oo0_.scala:25:18 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                l.+=i\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35m+=\e[0m in \e[33mtrait\e[0m \e[35mGrowable\e[0m with types\n\e[31m \
    \  |\e[0m (elem1: Long, elem2: Long, elems: Long*): \n\e[31m   |\e[0m  scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m (elem: Long): scala.collection.mutable.ListBuffer[Long]\n\e[31m\
    \   |\e[0mmatch expected type ?{ i: ? }\n3 errors found\n"
  stdout: ''
  timestamp: 1660029464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var primes = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        primes = primes.toList\n        for (i <- 2 to n) {\n            if (isPrime(i))\
    \ {\n                primes = primes + i.toLong\n            }\n        }\n  \
    \      primes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuysyc2cd.scala:21:24\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        primes = primes.toList\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \             Found:    List[Long]\n\e[31m   |\e[0m                 Required:\
    \ scala.collection.mutable.ArrayBuffer[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpuysyc2cd.scala:22:23 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuysyc2cd.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(i)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpuysyc2cd.scala:24:32 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                primes = primes + i.toLong\n\e[31m\e[31m \
    \  |\e[0m                         ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of scala.collection.mutable.ArrayBuffer[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660029469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val ns: Stream[Long] = 1 #:: Stream.from(2\
    \ * n + 1)\n        if (n % 2 == 1) {\n            ns.takeWhile(_ <= n).reverse.dropWhile(_\
    \ <= n).reverse ++ ns.takeWhile(_ <= n)\n        } else {\n            ns.takeWhile(_\
    \ <= n).reverse.dropWhile(_ <= n).reverse ++ ns.takeWhile(_ <= n).drop(1)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp9syfcx1a.scala:20:44 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mns\e[0m: \e[35mStream\e\
    [0m[\e[35mLong\e[0m] = \e[31m1\e[0m #:: Stream.from(\e[31m2\e[0m * n + \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mfrom\e[0m in \e[33mobject\e[0m \e[35mStream\e[0m with types\n\e[31m   |\e\
    [0m (start: Int): Stream[Int]\n\e[31m   |\e[0m (start: Int, step: Int): Stream[Int]\n\
    \e[31m   |\e[0m [A](coll: IterableOnce[A]): Stream[A]\n\e[31m   |\e[0mmatch arguments\
    \ (Long)\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9syfcx1a.scala:22:12\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            ns.takeWhile(_ <=\
    \ n).reverse.dropWhile(_ <= n).reverse ++ ns.takeWhile(_ <= n)\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    \e[1m\e[31mStream\e[0m[Long]\n\e[31m\
    \   |\e[0m            Required: \e[1m\e[32mList\e[0m[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9syfcx1a.scala:24:12 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            ns.takeWhile(_ <= n).reverse.dropWhile(_\
    \ <= n).reverse ++ ns.takeWhile(_ <= n).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    \e[1m\e[31mStream\e[0m[Long]\n\e[31m\
    \   |\e[0m            Required: \e[1m\e[32mList\e[0m[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n      n match {\n        case 0l => List()\n\
    \        case _ =>\n          n match {\n            case n1 if n1 % 2 == 0 =>\
    \ List(n1.toLong)\n            case n1 if (n1 - 1l) % 2l*2 == 0 => List(1l.toLong)\n\
    \            case _ =>\n              val primes = findPrimes(n)\n           \
    \   primes.map(n => nl.toLong(n))\n          }\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq_zgt11c.scala:27:27 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m              \e[33mval\e[0m \e[36mprimes\e[0m = findPrimes(n)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Not found: findPrimes\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val ans = Vector.empty[Long]\n\
    \        val limit = n % 2\n        for (i <- 0 until n / 2) if isPrime(i) {\n\
    \            if (limit == 0) {\n                ans ++= Seq(i)\n            }\
    \ else {\n                limit -= 1\n                ans ++= Seq(i + 2, i + 3)\n\
    \            }\n        }\n        if (n > 1) {\n            ans ++= Seq(n + 2,\
    \ n + 3)\n        }\n        ans.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx64wydqn.scala:30:8 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mif\e[0m (n > \e[31m1\e[0m) {\n\e[31m\e\
    [31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        'then' expected, but 'if'\
    \ found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx64wydqn.scala:22:26\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n / \e[31m2\e[0m) \e[33mif\e[0m isPrime(i) {\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^\e[0m\n\e[31m   |\e[0m              \
    \            Found:    Long\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx64wydqn.scala:22:36\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m until n / \e[31m2\e[0m) \e[33mif\e[0m isPrime(i) {\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                    Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpx64wydqn.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                ans ++= Seq(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m        value ++= is not a member\
    \ of Vector[Long] - did you mean ans.++?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpx64wydqn.scala:26:22 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m                limit -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m              \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0m               value -= is not a member of Long\
    \ - did you mean limit.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx64wydqn.scala:27:20\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                ans ++= Seq(i\
    \ + \e[31m2\e[0m, i + \e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value ++= is not a member of Vector[Long] - did you\
    \ mean ans.++?\n6 errors found\n"
  stdout: ''
  timestamp: 1660029470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var nList: List[Long] = List();\n\
    \        if(n < 2l) nList.add(n.toLong);\n        else {\n            for( i =\
    \ 3l to n ; i += 2l) {\n                if (n % i == 0) nList += (i.toLong);\n\
    \            }\n        }\n        return nList;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ueq75hc.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m( i = \e[31m3l\e[0m to n ;\
    \ i += \e[31m2l\e[0m) {\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m\
    \   |\e[0m                   ')' expected, but '=' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmp0ueq75hc.scala:23:38 ---------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m( i = \e[31m3l\e[0m to n ; i +=\
    \ \e[31m2l\e[0m) {\n\e[31m\e[31m   |\e[0m                                    \
    \  ^\e[0m\n\e[31m   |\e[0m                                      '<-' expected,\
    \ but ')' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ueq75hc.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(n <\
    \ \e[31m2l\e[0m) nList.add(n.toLong);\n\e[31m\e[31m   |\e[0m                 \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value add is not a member\
    \ of List[Long]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ueq75hc.scala:23:28\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m(\
    \ i = \e[31m3l\e[0m to n ; i += \e[31m2l\e[0m) {\n\e[31m\e[31m   |\e[0m      \
    \                      ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of\
    \ Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e"
  stdout: ''
  timestamp: 1660029471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val factors = new  mutable.HashSet[Long]()\n\
    \        factors.add((2l))\n        factors.add((3l))\n        while(n > 2l) {\n\
    \            var j = 1\n            while(factors.contains((2l * j))) {\n    \
    \            j += 1\n            }\n            factors.add((2l * j))\n      \
    \      n -= (2l * j)\n        }\n        if(n > 1l) {\n            factors.add((n-1l))\n\
    \        }\n        val ret = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        ret.append(2l)\n        ret.append(3l)\n        while(factors.contains((2l)))\
    \ {\n            ret.append(2l)\n            ret.append(3l)\n        }\n     \
    \   ret\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp20o6bah7.scala:20:27 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = \e[33mnew\e\
    [0m  mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp20o6bah7.scala:29:14\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            n -= (\e[31m2l\e\
    [0m * j)\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m        \
    \    value -= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp20o6bah7.scala:41:8 ---------------------\e[0m\e\
    [0m\n\e[31m41 |\e[0m        ret\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    (ret : scala.collection.mutable.ListBuffer[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        // Your code here\n        val\
    \ primes = scala.collection.mutable.Set.empty[Long]\n        for( x <- 1 to n\
    \ )\n        {\n            if( primes.contains(x))\n            {\n         \
    \       val n = x % 2\n                if( n == 0)\n                    primes.update(x)\n\
    \            }\n            else\n            {\n                primes.add(x)\n\
    \            }\n        }\n        primes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph404lbzx.scala:22:23\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m( x <-\
    \ \e[31m1\e[0m to n )\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmph404lbzx.scala:28:33\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \             primes.update(x)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter included of \e[33mmethod\e\
    [0m \e[35mupdate\e[0m in \e[33mtrait\e[0m \e[35mSetOps\e[0m: (elem: Long, included:\
    \ Boolean): Unit\n2 errors found\n"
  stdout: ''
  timestamp: 1660029471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        (1 to n) filter {\n          \
    \  n => isPrime(n)\n        } toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpejzq7dbr.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        } toList\n\e[31m\e[31m   |\e[0m             \
    \   ^\e[0m\n\e[31m   |\e[0m                expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpejzq7dbr.scala:20:14\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        (\e[31m1\e[0m to n) filter\
    \ {\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m              Found:\
    \    (n : Long)\n\e[31m   |\e[0m              Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpejzq7dbr.scala:21:17 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[36mn\e[0m => isPrime(n)\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        for (i <- 2 to n) primes ::= i\n        primes\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpifu8n65l.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpifu8n65l.scala:21:23 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) primes\
    \ ::= i\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m \
    \                      Found:    (n : Long)\n\e[31m   |\e[0m                 \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        for (i <- 2 to n by 2)\n            if (n % i == 0)\n               \
    \ primes += i\n        primes ::: List(n.toLong)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxc_z3d8z.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxc_z3d8z.scala:21:23 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n by \e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e\
    [0m                       Found:    (n : Long)\n\e[31m   |\e[0m              \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n      if (n < 2) List(n)\n      else {\n\
    \        val count: List[Long] = List.empty\n        for (x <- 2 until (n + 1))\
    \ {\n          if (isPrime(x)) {\n            count :+= x\n          }\n     \
    \   }\n        count :+ n\n      }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt6g85c5f.scala:23:27\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m (x <-\
    \ \e[31m2\e[0m until (n + \e[31m1\e[0m)) {\n\e[31m\e[31m   |\e[0m            \
    \               ^^^^^\e[0m\n\e[31m   |\e[0m                           Found: \
    \   Long\n\e[31m   |\e[0m                           Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt6g85c5f.scala:24:14 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m          \e[33mif\e[0m (isPrime(x)) {\n\e[31m\e[31m\
    \   |\e[0m              ^^^^^^^\e[0m\n\e[31m   |\e[0m              Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt6g85c5f.scala:25:18\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            count :+= x\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ :+= is not a member of List[Long] - did you mean count.:+?\n3 errors found\n"
  stdout: ''
  timestamp: 1660029474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n <= 1l) List()\n        else\
    \ {\n            val isPrime = List.fill(2l)(2l == n).forall(x => n % x == 0)\n\
    \            if (!isPrime) List()\n            else (for (xs <- List(n+1l,n+2l,n+3l,n+4l,n+5l,n+6l,n+7l,n+8l,n+9l))\
    \ yield {\n                val isPrime2 = (xs % 3l == 0)\n                if (!isPrime2)\
    \ List(xs)\n                else {\n                    val isPrime3 = (xs % 5l\
    \ == 0)\n                    if (!isPrime3) List(xs)\n                    else\
    \ {\n                        val isPrime5 = (xs % 7l == 0)\n                 \
    \       if (!isPrime5) List(xs)\n                        else {\n            \
    \                val isPrime7 = (xs % 11l == 0)\n                            if\
    \ (!isPrime7) List(xs)\n                            else {\n                 \
    \               val isPrime11 = (xs % 13l == 0)\n                            \
    \    if (!isPrime11) List(xs)\n                                else {\n      \
    \                              val isPrime13 = (xs % 17l == 0)\n             \
    \                       if (!isPrime13) List(xs)\n                           \
    \         else {\n                                        val isPrime17 = (xs\
    \ % 19l == 0)\n                                        if (!isPrime17) List(xs)\n\
    \                                        else List(xs.toLong)\n              \
    \                      }\n                                }\n                \
    \            }\n                        }\n                    }\n           \
    \     }\n            })\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ez5e2kh.scala:22:36\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e\
    [36misPrime\e[0m = List.fill(\e[31m2l\e[0m)(\e[31m2l\e[0m == n).forall(\e[36mx\e\
    [0m => n % x == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \           ^^\e[0m\n\e[31m   |\e[0m                                    Found:\
    \    (\e[31m2L\e[0m : Long)\n\e[31m   |\e[0m                                 \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp1ez5e2kh.scala:22:63\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36misPrime\e[0m = List.fill(\e[31m2l\e[0m)(\e[31m2l\e[0m == n).forall(\e\
    [36mx\e[0m => n % x == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                                           ^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m%\e[0m in \e[33mclass\e[0m\
    \ \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e\
    [0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int):\
    \ Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e\
    [31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((x : Boolean))\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ez5e2kh.scala:26:35 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e[0m (!isPrime2) List(xs)\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e\
    [0mLong\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                               Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ez5e2kh.scala:29:39\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                    \e[33mif\e\
    [0m (!isPrime3) List(xs)\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]"
  stdout: ''
  timestamp: 1660029475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        require(n >= 0)\n        val primes\
    \ = primesInRange(BigInt(n))\n        val primeCounts = primes.foldLeft[Map[Long,Long]](Map[Long,Long]()){case\
    \ (counts,p) =>\n            if (p > n) counts else counts + (p -> counts.get(p.toLong)\
    \ + 1)\n        }\n        primeCounts.filter{case (count, num) => (count == num.toLong)}\n\
    \            .map{case (num, count) => (num.toLong, count.toLong)}\n         \
    \   .sortBy(_._1)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgpm1k0iy.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = primesInRange(BigInt(n))\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: primesInRange\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val l = (2 to n)\n        val\
    \ m = l.reduceLeft((x,y) => if (gcd(x,y) == 1) x else y)\n        m :: l\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8j9txy9x.scala:20:22\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36ml\e\
    [0m = (\e[31m2\e[0m to n)\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\
    \e[31m   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m   \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8j9txy9x.scala:21:42 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mm\e[0m = l.reduceLeft((\e[36mx\e[0m,\e[36my\e\
    [0m) => \e[33mif\e[0m (gcd(x,y) == \e[31m1\e[0m) x \e[33melse\e[0m y)\n\e[31m\e\
    [31m   |\e[0m                                          ^^^\e[0m\n\e[31m   |\e\
    [0m                                          Not found: gcd\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp8j9txy9x.scala:22:10 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        m :: l\n\e[31m\e[31m   |\e[0m          ^^^^\e\
    [0m\n\e[31m   |\e[0mvalue :: is not a member of scala.collection.immutable.Range.Inclusive\
    \ - did you mean l.+:?\n3 errors found\n"
  stdout: ''
  timestamp: 1660029475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var l : List[Long] = List()\n\
    \        if (n<2)\n            l\n        else {\n            for (p <- 2 to n)\n\
    \                if ((n%p)==0)\n                    l :+ p\n                else\
    \ if ((n%p<2)&&(n%p>0))\n                    l :+ p\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl328b8v.scala:24:27\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m (p\
    \ <- \e[31m2\e[0m to n)\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\
    \e[31m   |\e[0m                           Found:    (n : Long)\n\e[31m   |\e[0m\
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n      val i = 2l\n      val a = (1 to\
    \ i).filter(i => n % i == 0).dropWhile(i % _ != 0)\n      a.takeWhile(x => x <\
    \ n).toList.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2medvxci.scala:21:20\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m      \e[33mval\e[0m \e[36ma\e\
    [0m = (\e[31m1\e[0m to i).filter(\e[36mi\e[0m => n % i == \e[31m0\e[0m).dropWhile(i\
    \ % _ != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m\
    \   |\e[0m                    Found:    (i : Long)\n\e[31m   |\e[0m          \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2medvxci.scala:22:6 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m      a.takeWhile(\e[36mx\e[0m => x < n).toList.sorted\n\e[31m\e[31m \
    \  |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \   Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m      Required: List[\e\
    [1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n < 2) List(n)\n        else\
    \ {\n            val primes = List(2,3l)\n            val numbers = List(n-1l)\n\
    \            while (numbers.nonEmpty) {\n                val nextPrime = numbers.head\
    \ * primes.head\n                if (numbers.tail.exists(x => primes.contains(x)))\
    \ {\n                    primes = primes.drop(1)\n                    numbers\
    \ = numbers.tail\n                } else {\n                    numbers = numbers\
    \ ::: List(nextPrime)\n                    break\n                }\n        \
    \    }\n            primes.takeWhile(x => x <= n).toList\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp19hpmzvv.scala:27:27 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    primes = primes.drop(\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Reassignment to val primes\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp19hpmzvv.scala:28:28 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    numbers = numbers.tail\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Reassignment to val numbers\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp19hpmzvv.scala:30:28 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    numbers = numbers ::: List(nextPrime)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val numbers\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp19hpmzvv.scala:31:20 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if(n < 3) {\n            List(n)\n\
    \        }\n        else {\n            var counter : Long = 1\n            val\
    \ list = new mutable.LinkedList[Long]()\n            while(counter <= n) {\n \
    \               if(isPrime(counter)) {\n                    list += counter\n\
    \                    counter += 2\n                }\n                else {\n\
    \                    counter += 1\n                }\n            }\n        \
    \    list.toList\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp13yswfy2.scala:25:27 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp13yswfy2.scala:27:19\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e\
    [0m(isPrime(counter)) {\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029473
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        def count(x : (Long, Long)) =\
    \ x match {\n            case (x, y ) if x > y => (x, y+1)\n            case _\
    \ => (x, 1)\n        }\n        var l : List[Long] = Nil\n        for (x <- 2l\
    \ to n) yield {\n            var c : Long = count(x)\n            while (c < x)\
    \ l += c\n            c\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9dq9uc94.scala:26:33\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mvar\e[0m \e\
    [36mc\e[0m : \e[35mLong\e[0m = count(x)\n\e[31m\e[31m   |\e[0m               \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    (\e[1m\e[31mx\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m Long)\n\e[31m   |\e\
    [0m                                 Required: (\e[1m\e[32mLong\e[0m\e[1m\e[32m,\e\
    [0m Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9dq9uc94.scala:27:28\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mwhile\e\
    [0m (c < x) l += c\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\
    \e[31m   |\e[0m    value += is not a member of List[Long] - did you mean List[Long].!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        def isPrime(x : Long) : Boolean\
    \ = {\n            val sqrt = Math.sqrt(x)\n            sqrt <= 1 &&\n       \
    \         sqrt != 0 &&\n                (x % sqrt < 2)\n        }\n\n        def\
    \ checkPrime(n: Long) : Boolean = {\n            var i = 2\n            while\
    \ (i <= sqrt(n)) {\n                if (isPrime(i)) {\n                    return\
    \ true\n                }\n                i += 1\n            }\n           \
    \ false\n        }\n\n        def isPrimeRec(n : Long) : List[Long] = {\n    \
    \        if (n < 2) {\n                return Nil\n            }\n           \
    \ if (checkPrime(n)) {\n                return (n :: Nil)\n            }\n   \
    \         return isPrimeRec(n - 1) ++ checkPrime(n)\n        }\n\n        return\
    \ isPrimeRec(n)\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdtplxr4j.scala:45:50\
    \ --------------------\e[0m\e[0m\n\e[31m45 |\e[0m            \e[33mreturn\e[0m\
    \ isPrimeRec(n - \e[31m1\e[0m) ++ checkPrime(n)\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                Found:    Boolean\n\e[31m   |\e[0m          \
    \                              Required: IterableOnce[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var primes = mutable.List.empty[Long]\n\
    \        for (i <- 2 to n) {\n            primes ++= if (isPrime(i)) i :: Nil\
    \ else primes.dropWhile(i => i % i != 0)\n        }\n        primes\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1xke1ig3.scala:22:23 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            primes ++= \e[33mif\e[0m (isPrime(i)) i ::\
    \ Nil \e[33melse\e[0m primes.dropWhile(i => i % i != \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                       ^^\e[0m\n\e[31m   |\e[0m                    \
    \   expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1xke1ig3.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mprimes\e[0m = mutable.List.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1xke1ig3.scala:21:23 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        // Your code goes here\n     \
    \   var primeList: List[Long] = Nil\n        var lastPrime: Long = 2\n       \
    \ \n        while(lastPrime < n){\n            primeList = primeList :+ (lastPrime\
    \ :+ lastPrime)\n            lastPrime = lastPrime + 1\n        }\n        \n\
    \        return primeList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv2ekuw_j.scala:25:48 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            primeList = primeList :+ (lastPrime :+ lastPrime)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      value :+ is not a member\
    \ of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660029478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        n match {\n            case 0\
    \ :: _ | 1 :: Nil => Nil\n            case _ if n % 2 == 0 =>\n              \
    \  n :: countUpTo(n / 2)\n            case _ if n % 3 == 0 =>\n              \
    \  n :: countUpTo(n / 3)\n            case n =>\n                n :: countUpTo(n\
    \ / 2) ++ countUpTo(n / 3)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[33m\e[33m-- [E030] Match case Unreachable Warning: /tmp/tmpetpqk_yy.scala:21:17\
    \ ---------\e[0m\e[0m\n\e[33m21 |\e[0m            \e[33mcase\e[0m \e[31m0\e[0m\
    \ :: _ | \e[31m1\e[0m :: Nil => Nil\n\e[33m\e[33m   |\e[0m                 ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[33m   |\e[0m                 Unreachable case\n\e[31m\e[31m-- Error: /tmp/tmpetpqk_yy.scala:21:17\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \     \e[33mcase\e[0m \e[31m0\e[0m :: _ | \e[31m1\e[0m :: Nil => Nil\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0m            cannot test\
    \ if value of type Long is a reference of \e[33mclass\e[0m \e[35m::\e[0m\n1 warning\
    \ found\n1 error found\n"
  stdout: ''
  timestamp: 1660029477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var result : List[Long] = List[Long]()\n\
    \        var p = 3l\n        var j = 0\n        while (j < n) {\n            while\
    \ (p <= (n-j) && p != 1) { p += 2l }\n            if (p == 1) { j += 1; result\
    \ += j }\n            p -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8n131va5.scala:25:41 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (p == \e[31m1\e[0m) { j +=\
    \ \e[31m1\e[0m; result += j }\n\e[31m\e[31m   |\e[0m                         \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660029480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primeList: List[Long] = 2l..n\n\
    \        val result: mutable.List[Long] = mutable.ListBuffer[Long]()\n       \
    \ var currentPrime: Long = 1l\n        for (prime <- primeList) {\n          \
    \  var i = 1\n            var primeCheck : Boolean = true\n            var primeChecker\
    \ : Long = 1\n            while (primeCheck) {\n                if ((primeChecker*prime)\
    \ < (currentPrime)) {\n                    if ((n % prime) == 0) {\n         \
    \               primeCheck = false\n                    } else {\n           \
    \             primeChecker = primeChecker + 1\n                    }\n       \
    \         } else {\n                    primeChecker = primeChecker + 1\n    \
    \            }\n                i += 1\n                if (i == currentPrime)\
    \ {\n                    result.add(prime.toLong)\n                    currentPrime\
    \ += 1\n                }\n            }\n        }\n        result.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgb970qp7.scala:20:39 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeList\e[0m: \e[35mList\e\
    [0m[\e[35mLong\e[0m] = \e[31m2l\e[0m..n\n\e[31m\e[31m   |\e[0m               \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \      an identifier expected, but '.' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpgb970qp7.scala:21:20 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: mutable.List[\e[35mLong\e[0m]\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgb970qp7.scala:21:41\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m: mutable.List[\e[35mLong\e[0m] = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var nextPrime : Long = 1\n   \
    \     val prime : List[Long] = List[Long]()\n        val nums = List[Long]()\n\
    \        var i = 2\n        while (i < n){\n            nums = nums :+ i\n   \
    \         if (isPrime(nextPrime) && nums.lastPrimeTo(n) < nextPrime) {\n     \
    \           prime :+= nextPrime\n                nextPrime += 1\n            }\n\
    \            i += 1\n        }\n        if (nums.lastPrimeTo(n) < n) {\n     \
    \       prime :+= n\n        }\n        return prime\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp3hx0ogh8.scala:25:17 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            nums = nums :+ i\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to\
    \ val nums\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3hx0ogh8.scala:26:16\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(nextPrime) && nums.lastPrimeTo(n) < nextPrime) {\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: isPrime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3hx0ogh8.scala:27:22\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                prime :+=\
    \ nextPrime\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        value :+= is not a member of List[Long] - did you mean prime.:+?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp3hx0ogh8.scala:32:17 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mif\e[0m (nums.lastPrimeTo(n) < n) {\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \    value lastPrimeTo is not a member of List[Long]\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp3hx0ogh8.scala:33:18 ------------------------\e[0m\e[0m\n\
    \e[31m33 |\e[0m            prime :+= n\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value :+= is not a member of List[Long] - did you\
    \ mean prime.:+?\n5 errors found\n"
  stdout: ''
  timestamp: 1660029482
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if((n<2))\n            List()\n\
    \        else {\n            var result : List[Long] = List(n.toLong)\n      \
    \      var i : Long = 2\n            while(result.length<=i)\n               \
    \ if((i%result.length)==0)\n                    result ::: List(n.toLong)\n  \
    \              else {\n                    result ::: List(n/i)\n            \
    \        i = i*i\n                }\n            result\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660029486
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n      var primes: List[Long] = List(0)\n\
    \      for(i <- 2 to n){\n        if(isPrime(i)){\n          primes = primes :::\
    \ List(i)\n        }\n      }\n      primes\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxzefve_y.scala:21:20\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m      \e[33mfor\e[0m(i <- \e\
    [31m2\e[0m to n){\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e\
    [0m                    Found:    (n : Long)\n\e[31m   |\e[0m                 \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxzefve_y.scala:22:11\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m(isPrime(i)){\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^\e[0m\n\e[31m   |\e[0m           Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxzefve_y.scala:23:19\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m          primes = primes :::\
    \ List(i)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Found:    List[\e[1m\e[31mAnyVal\e[0m]\n\e[31m\
    \   |\e[0m                   Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        def isPrime(x : Long) : Boolean\
    \ = {\n            if (x < 2) false\n            if (x > n/2) false\n        \
    \    var prime = x*x\n            var isPrime = true\n            while (prime\
    \ <= n) {\n                if (n % prime == 0) isPrime = false\n             \
    \   prime += x\n            }\n            isPrime\n        }\n        if (n <\
    \ 1) return Nil\n        var list : List[Long] = Nil\n        for (prime <- 2\
    \ to n) {\n            if (!isPrime(prime)) list = list ::: List(prime)\n    \
    \    }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpopf30q6m.scala:33:27\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mfor\e[0m (prime\
    \ <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (n : Long)\n\e[31m  \
    \ |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpopf30q6m.scala:34:40 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mif\e[0m (!isPrime(prime)) list = list\
    \ ::: List(prime)\n\e[31m\e[31m   |\e[0m                                     \
    \   ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \         Found:    List[\e[1m\e[31mAnyVal\e[0m]\n\e[31m   |\e[0m            \
    \                            Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpopf30q6m.scala:21:23 ----------------\e\
    [0m\e[0m\n\e[33m21 |\e[0m            \e[33mif\e[0m (x < \e[31m2\e[0m) \e[31mfalse\e\
    [0m\n\e[33m\e[33m   |\e[0m                       ^^^^^\e[0m\n\e[33m   |\e[0mA\
    \ pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpopf30q6m.scala:22:25\
    \ ----------------\e[0m\e[0m\n\e[33m22 |\e[0m            \e[33mif\e[0m (x > n/\e\
    [31m2\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                         ^^^^^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 warnings found\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var result: List[Long] = List()\
    \ // start with a blank list\n        var i = 2l\n        while (i * i <= n) {\n\
    \            for (j <- 2l; j < (i * i); j += i) {\n                if (n % j ==\
    \ 0) {\n                    result.append(j.toLong)\n                    break\n\
    \                }\n            }\n            i += 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpndmo70sr.scala:23:37 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m (j <- \e[31m2l\e[0m; j < (i\
    \ * i); j += i) {\n\e[31m\e[31m   |\e[0m                                     ^\e\
    [0m\n\e[31m   |\e[0m                                     '<-' expected, but ';'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpndmo70sr.scala:23:45 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m (j <- \e[31m2l\e[0m; j < (i\
    \ * i); j += i) {\n\e[31m\e[31m   |\e[0m                                     \
    \        ^\e[0m\n\e[31m   |\e[0m                                            '<-'\
    \ expected, but ')' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpndmo70sr.scala:23:22\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m\
    \ (j <- \e[31m2l\e[0m; j < (i * i); j += i) {\n\e[31m\e[31m   |\e[0m         \
    \             ^^\e[0m\n\e[31m   |\e[0m                      value foreach is not\
    \ a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660029482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var l = []\n        if(n < 2)\
    \ l += n\n        else if(n > 2) l += 2\n        else\n        for(i <- 3 to n/2-1\
    \ by 2)\n        if(n % i == 0) l += i\n        else if(n % i == 1)\n        \
    \    l += i\n        else\n            l += n/i\n        l ++ (n until 2 by -1).map(\
    \ n => (n to (n-1)).filter(_ % _ == 0).takeWhile(x => x < n).map( n => (n to (n-1)).filter(_\
    \ % _ == 0).takeWhile(x => x < n).filter(_ % _ != 0).map( i => (n to (n-1)).filter(_\
    \ % _ == 0).takeWhile(x => x < n).filter(_ % _ != 0).takeWhile(x => x < i).map(\
    \ i => (n to (n-1)).filter(_ % _ == 0).takeWhile(x => x < n).filter(_ % _ != 0).takeWhile(x\
    \ => x < i).map( i => (n to (n-1)).filter(_ % _ == 0).takeWhile(x => x < n).filter(_\
    \ % _ != 0).takeWhile(x => x < i).map( i => (n to (n-1)).filter(_ % _ == 0).takeWhile(x\
    \ => x < n).filter(_ % _ != 0).takeWhile(x => x < i).map( i => (n to (n-1)).filter(_\
    \ % _ == 0).takeWhile(x => x < n).filter(_ % _ != 0).takeWhile(x => x < i).map(\
    \ i => (n to (n-1)).filter(_ % _ == 0).takeWhile(x => x < n).filter(_ % _ != 0).takeWhile(x\
    \ => x < i).map( i => (n to (n-1)).filter(_ % _ == 0).takeWhile(x => x < n).filter(_\
    \ % _ != 0).takeWhile(x => x < i).map( i => (n to (n-1)).filter(_ % _ == 0).takeWhile(x\
    \ => x < n).filter(_ % _ != 0).takeWhile(x => x < i).map( i => (n to (n-1)).filter(_\
    \ % _ == 0).takeWhile(x => x < n).filter(_ % _ != 0).takeWhile(x => x < i).map(\
    \ i => (n to (n-1)).filter(_ % _ == 0).takeWhile(x => x < n).filter(_ % _ != 0).takeWhile(x\
    \ => x < i).map( i => (n to (n-1)).filter(_ % _ == 0).takeWhile(x => x < \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_utc12ao.scala:20:17 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36ml\e[0m = []\n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 an identifier\
    \ expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_utc12ao.scala:21:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(n\
    \ < \e[31m2\e[0m) l += n\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0m'=>' expected,\
    \ but 'end of statement' found\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_utc12ao.scala:30:1288\
    \ -------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        l ++ (n until \e\
    [31m2\e[0m by -\e[31m1\e[0m).map( \e[36mn\e[0m => (n to (n-\e[31m1\e[0m)).filter(_\
    \ % _ == \e[31m0\e[0m).takeWhile(\e[36mx\e[0m => x < n).map( \e[36mn\e[0m => (n\
    \ to (n-\e[31m1\e[0m)).filter(_ % _ == \e[31m0\e[0m).takeWhile(\e[36mx\e[0m =>\
    \ x < n).filter(_ % _ != \e[31m0\e[0m).map( \e[36mi\e[0m => (n to (n-\e[31m1\e\
    [0m)).filter(_ % _ == \e[31m0\e[0m).takeWhile(\e[36mx\e[0m => x < n).filter(_\
    \ % _ != \e[31m0\e[0m).takeWhile(\e[36mx\e[0m => x < i).map( \e[36mi\e[0m => (n\
    \ to (n-\e[31m1\e[0m)).filter(_ % _ == \e[31m0\e[0m).takeWhile(\e[36mx\e[0m =>\
    \ x < n).filter(_ % _ != \e[31m0\e[0m).takeWhile(\e[36mx\e[0m => x < i).map( \e\
    [36mi\e[0m => (n to (n-\e[31m1\e[0m)).filter(_ % _ == \e[31m0\e[0m).takeWhile(\e\
    [36mx\e[0m => x < n).filter(_ % _ != \e[31m0\e[0m).takeWhile(\e[36mx\e[0m => x\
    \ < i).map( \e[36mi\e[0m => (n to (n-\e[31m1\e[0m)).filter(_ % _ == \e[31m0\e\
    [0m).takeWhile(\e[36mx\e[0m => x < n).filter(_ % _ != \e[31m0\e[0m).takeWhile(\e\
    [36mx\e[0m => x < i).map( \e[36mi\e[0m => (n to (n-\e[31m1\e[0m)).filter(_ % _\
    \ == \e[31m0\e[0m).takeWhile(\e[36mx\e[0m => x < n).filter(_ % _ != \e[31m0\e\
    [0m).takeWhile(\e[36mx\e[0m => x < i).map( \e[36mi\e[0m => (n to (n-\e[31m1\e\
    [0m)).filter(_ % _ == \e[31m0\e[0m).takeWhile(\e[36mx\e[0m => x < n).filter(_\
    \ % _ != \e[31m0\e[0m).takeWhile(\e[36mx\e[0m => x < i).map( \e[36mi\e[0m => (n\
    \ to (n-\e[31m1\e[0m)).filter(_ % _ == \e[31m0\e[0m).takeWhile(\e[36mx\e[0m =>\
    \ x < n).filter(_ % _ != \e[31m0\e[0m).takeWhile(\e[36mx\e[0m => x < i).map( \e\
    [36mi\e[0m => (n to (n-\e[31m1\e[0m)).filter(_ %"
  stdout: ''
  timestamp: 1660029490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        require(n > 0)\n        var l\
    \ = n.toLong\n        if (n == 1) List(2l.toLong)\n        else {\n          \
    \  while (l < n / 2) l += 2\n            val primes = Primes.primes(l)\n     \
    \       if (primes.isEmpty || primes.exists(_ < l)) List()\n            else {\n\
    \                val r = new collection.mutable.ArrayBuffer[Long]()\n        \
    \        primes.foreach {\n                    case p => if (p > l) r else r.+(p)\n\
    \                }\n                r\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjtm8d5lj.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mprimes\e[0m = Primes.primes(l)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      Not found: Primes\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjtm8d5lj.scala:32:16 --------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m                r\n\e[31m\e[31m   |\e[0m                ^\e\
    [0m\n\e[31m   |\e[0m              Found:    (r : scala.collection.mutable.ArrayBuffer[Long])\n\
    \e[31m   |\e[0m              Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var isPrime : Boolean = false\n\
    \        var isDivisible : Boolean = true\n        var list : List[Long] = Nil\n\
    \        var currentNumber : Long = n.toLong\n        while (!isPrime) {\n   \
    \         currentNumber += 1\n            for (number <- 2 until currentNumber)\
    \ {\n                if (isDivisible && (n % number == 0)) {\n               \
    \     isPrime = false\n                    isDivisible = false\n             \
    \       list = list :+ number\n                }\n                if (!isDivisible\
    \ && (n % number != 0)) {\n                    isPrime = true\n              \
    \      isDivisible = true\n                }\n            }\n        }\n     \
    \   list\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptjdqxx8b.scala:26:35\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mfor\e[0m (number\
    \ <- \e[31m2\e[0m until currentNumber) {\n\e[31m\e[31m   |\e[0m              \
    \                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \               Found:    (currentNumber : Long)\n\e[31m   |\e[0m            \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        // TODO: Implement\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4isg8y2c.scala:19:43\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m    \e[33mdef\e[0m \e[36mcountUpTo\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mList\e[0m[\e[35mLong\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m \
    \  |\e[0m                                           Found:    Unit\n\e[31m   |\e\
    [0m                                           Required: List[Long]\n\e[31m20 |\e\
    [0m        \e[34m// TODO: Implement\e[0m\n\e[31m21 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n < 2) List() else {\n   \
    \         val counts = mutable.HashMap[Long, Long]()\n            val primes =\
    \ mutable.ArrayBuffer.empty[(Long, Long)]\n            val result = mutable.ArrayBuffer.empty[Long]\n\
    \            var lastPrime = 0\n            while (n > 0) {\n                val\
    \ next = math.ceil(n/2).toLong\n                lastPrime = next\n           \
    \     n -= next\n                \n                // check if it is a prime and\
    \ append to counts\n                def isPrime(x: Long) = x % next == 0\n   \
    \             for (x <- 2 to next) if (!isPrime(x)) {\n                    val\
    \ c = counts.put(lastPrime, x) + 1\n                    if (c > 2) {\n       \
    \                 prime += lastPrime\n                        primes += ((lastPrime,\
    \ lastPrime))\n                    }\n                }\n            }\n     \
    \       \n            // Now we have primes, sorted in decreasing order\n    \
    \        // Now take top n from counts\n            val res = primes.toSeq.sortWith((_,b)\
    \ => b._1 < a._1)\n            \n            // And append the rest from counts\n\
    \            val rem = counts.keySet.toSeq.sortWith((_,b) => b._1 < a._1)\n  \
    \          for (x <- rem.take(n)) result += x\n            result.toList\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzefeqovj.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzefeqovj.scala:22:25\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[(\e[35mLong\e[0m, \e[35mLong\e\
    [0m)]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzefeqovj.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzefeqovj.scala:27:28 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                lastPrime = next\n\e[31m\e[31m   |\e\
    [0m                            ^^^^\e[0m\n\e[31m   |\e[0m                    \
    \        Found:    (next : Long)\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzefeqovj.scala:28:18\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                n -= next\n\
    \e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m              \
    \  value -= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzefeqovj.scala:32:31 --------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m                \e[33mfor\e[0m (x <- \e[31m2\e[0m to nex"
  stdout: ''
  timestamp: 1660029486
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val buffer = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 1l to n) yield {\n            if (isPrime(i) && i % 2l == 0l)\
    \ {\n                if (i >= n)\n                    buffer += i.toLong\n   \
    \         } else buffer += i.toLong\n        }\n        buffer.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphfsbid2x.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbuffer\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphfsbid2x.scala:22:16\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(i) && i % \e[31m2l\e[0m == \e[31m0l\e[0m) {\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: isPrime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029483
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.MutableList[Long]()\n\
    \        primes.add(2)\n        primes.add(3)\n        while (primes.size < n)\
    \ {\n            val nextPrime = primes.takeWhile(p => p * p <= n).head\n    \
    \        primes.add(nextPrime)\n        }\n        primes.take(n).toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpglxdki7g.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val l = List(2 to n)\n       \
    \ l.filterNot(_ % _ == 0).takeWhile(_ <= n).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_oyd9smb.scala:20:26\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36ml\e\
    [0m = List(\e[31m2\e[0m to n)\n\e[31m\e[31m   |\e[0m                         \
    \ ^\e[0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m\
    \   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmp_oyd9smb.scala:21:20 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        l.filterNot(_ % _ == \e[31m0\e[0m).takeWhile(_\
    \ <= n).toList\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_oyd9smb.scala:21:44 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        l.filterNot(_ % _ == \e[31m0\e[0m).takeWhile(_\
    \ <= n).toList\n\e[31m\e[31m   |\e[0m                                        \
    \  ^^^^\e[0m\n\e[31m   |\e[0mvalue <= is not a member of scala.collection.immutable.Range.Inclusive,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660029489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n      // TODO\n      var l : List[Long]\
    \ = List()\n      for(i <- 1 to n){\n        l :+= i.toLong\n        for(j <-\
    \ 2 to i){\n          if(i % j == 0){\n            l :+= j.toLong\n          }\n\
    \        }\n      }\n      l\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvkjh4nze.scala:22:20\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m      \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e\
    [0m                    Found:    (n : Long)\n\e[31m   |\e[0m                 \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029487
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val nums = for (i <- 2 to n) yield\
    \ i.toLong\n        val n = nums.size\n        val list = nums.filter{ x => primeFactors(x)==n}.toList\n\
    \        if(list.isEmpty) List(n.toLong) \n        else list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxafv96xa.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = nums.size\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mnums\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxafv96xa.scala:22:37 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = nums.filter{\
    \ \e[36mx\e[0m => primeFactors(x)==n}.toList\n\e[31m\e[31m   |\e[0m          \
    \                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                      Not found: primeFactors\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val list = ListBuffer[Long]()\n\
    \        val primes = ListBuffer[Long]()\n        val i = 2\n        while(n>0)\
    \ {\n            if(n%i == 0) {\n                primes += i.toLong\n        \
    \        list.+=(i.toLong)\n            }\n            i +=1\n            n -=\
    \ 1\n        }\n        return primes ++ list.map(x => x + n).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6o5wb7iz.scala:28:14 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            i +=\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \           ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6o5wb7iz.scala:29:14\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp6o5wb7iz.scala:31:15 --------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m        \e[33mreturn\e[0m primes ++ list.map(\e[36mx\e[0m => x\
    \ + n).toList\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m               Required: List[Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029490
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val ps = List(n * 2l, (3 * n)\
    \ - 2l, n - 2l)\n        if (ps.exists(p => n % p == 0 || n % p == -1l)) {\n \
    \           ps\n        } else {\n            ps\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppgrez6z_.scala:28)\n\tat Problem.main(tmppgrez6z_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n      val (prime, factors) = primeFactorize(n)\n\
    \      (for {\n        p <- prime\n        l <- factors\n        if p <= n\n \
    \       if n / l == n\n      } yield p).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphx1wg8_x.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m (prime, factors) = primeFactorize(n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Not found: primeFactorize\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphx1wg8_x.scala:20:11 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m (prime, factors) = primeFactorize(n)\n\
    \e[31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Recursive \e\
    [33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmphx1wg8_x.scala:20:18 ---------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m      \e[33mval\e[0m (prime, factors) = primeFactorize(n)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029487
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        require(!n.isZero, \"Cannot count\
    \ up to zero\")\n        require(n>0, \"Cannot count up to negative numbers\"\
    )\n        val l = new mutable.ListBuffer[Long]\n        var i = 2\n        val\
    \ primes = List.from(2 to n)\n        while (primes.contains(i) && primes.contains(n))\
    \ {\n            l.+=(i)\n            if (l.size > n) l.take(n-l.size)\n     \
    \       i = i + 2\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvpg12xd3.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        require(!n.isZero, \e[31m\"Cannot count up to\
    \ zero\"\e[0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                 value isZero is not a member of Long\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpvpg12xd3.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                 \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvpg12xd3.scala:24:36 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = List.from(\e\
    [31m2\e[0m to n)\n\e[31m\e[31m   |\e[0m                                    ^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    (n : Long)\n\
    \e[31m   |\e[0m                                    Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var res: List[Long] = Nil\n  \
    \      for (i <- 2 to n) {\n            if (isPrime(i)) {\n                if\
    \ (i <= n.toLong) {\n                    res = i :: res\n                }\n \
    \           } else {\n                res = res\n            }\n        }\n  \
    \      res\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqvco6zj1.scala:21:23\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqvco6zj1.scala:22:16 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            \e[33mif\e[0m (isPrime(i)) {\n\e[31m\e[31m   |\e[0m           \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        require(n>=0)\n        var result:\
    \ List[Long] = List()\n        for( x <- 2 to n by 2){\n            if(isPrime(x)){\n\
    \                if(result.length==0){\n                    result += List(x.toLong)\n\
    \                }else{\n                    result += (x to result.last.last).toList\n\
    \                }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp34s7281o.scala:22:23\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m( x <-\
    \ \e[31m2\e[0m to n by \e[31m2\e[0m){\n\e[31m\e[31m   |\e[0m                 \
    \      ^\e[0m\n\e[31m   |\e[0m                       Found:    (n : Long)\n\e\
    [31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp34s7281o.scala:23:15 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(isPrime(x)){\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m               Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp34s7281o.scala:25:27\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    result\
    \ += List(x.toLong)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m    value += is not a member of List[Long] - did you mean List[Long].!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp34s7281o.scala:27:27 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    result += (x to result.last.last).toList\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value\
    \ += is not a member of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp34s7281o.scala:27:48 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    result += (x to result.last.last).toList\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    value last is not a member\
    \ of Long\n5 errors found\n"
  stdout: ''
  timestamp: 1660029492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n == 0) Nil\n        else\
    \ if (n % 2 == 0) List(n) :: countUpTo((n + 1l))\n        else (for (p <- 2 to\
    \ sqrt(n) by 2) if (n % p == 0) && (p < n / p)) List(n + p) :: countUpTo((n +\
    \ p + 1l))\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr5cnwats.scala:21:33\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (n % \e[31m2\e[0m == \e[31m0\e[0m) List(n) :: countUpTo((n + \e[31m1l\e[0m))\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                             Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr5cnwats.scala:22:33\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m (\e[33mfor\e\
    [0m (p <- \e[31m2\e[0m to sqrt(n) by \e[31m2\e[0m) \e[33mif\e[0m (n % p == \e\
    [31m0\e[0m) && (p < n / p)) List(n + p) :: countUpTo((n + p + \e[31m1l\e[0m))\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Found:    Double\n\e[31m   |\e[0m              \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr5cnwats.scala:22:59 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33melse\e[0m (\e[33mfor\e[0m (p <- \e[31m2\e[0m to sqrt(n) by \e\
    [31m2\e[0m) \e[33mif\e[0m (n % p == \e[31m0\e[0m) && (p < n / p)) List(n + p)\
    \ :: countUpTo((n + p + \e[31m1l\e[0m))\n\e[31m\e[31m   |\e[0m               \
    \                                            ^^\e[0m\n\e[31m   |\e[0m        \
    \                                                   Not found: &&\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5cnwats.scala:22:105 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m (\e[33mfor\e[0m (p <- \e[31m2\e\
    [0m to sqrt(n) by \e[31m2\e[0m) \e[33mif\e[0m (n % p == \e[31m0\e[0m) && (p <\
    \ n / p)) List(n + p) :: countUpTo((n + p + \e[31m1l\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                               ^\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1660029492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n==0) Nil\n        else List(n:).sliding(2,2)\n\
    \                .map(_.filter(_._1==0 || _._2==1).map(_.sum))\n             \
    \   .map(_.filter(_>0).toList)\n                .toList.flatten\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbxqld7b1.scala:21:20 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m List(n:).sliding(\e[31m2\e[0m,\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m\
    \                    an identifier expected, but ')' found\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmpbxqld7b1.scala:22:30 ---------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                .map(_.filter(_._1==\e[31m0\e[0m || _._2==\e\
    [31m1\e[0m).map(_.sum))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbxqld7b1.scala:22:56\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                .map(_.filter(_._1==\e\
    [31m0\e[0m || _._2==\e[31m1\e[0m).map(_.sum))\n\e[31m\e[31m   |\e[0m         \
    \                                             ^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ sum is not a member of Nothing, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbxqld7b1.scala:23:31\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                .map(_.filter(_>\e\
    [31m0\e[0m).toList)\n\e[31m\e[31m   |\e[0m                              "
  stdout: ''
  timestamp: 1660029495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var list = List[Long]()\n    \
    \    var num = 2\n        while (n > num) {\n            val rem = n % num\n \
    \           if (rem == 0) {\n                list += num\n            }\n    \
    \        num += 1\n        }\n        list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0oxe9009.scala:25:21 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                list += num\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660029494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var counter = n\n        var primes:\
    \ List[Long] = List()\n        while (counter > 0) {\n            val prime =\
    \ scala.math.remainder(counter, 2l)\n            if (!primes.contains(prime))\
    \ {\n                primes ++= List(counter)\n            }\n            counter\
    \ -= 1\n        }\n        primes\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgf5dttcp.scala:23:35 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mprime\e[0m = scala.math.remainder(counter,\
    \ \e[31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value remainder is not a member of\
    \ math\n1 error found\n"
  stdout: ''
  timestamp: 1660029494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var result : List[Long] = List()\n\
    \        var i = 2\n        while (n>0 && n>i.toLong) {\n            if (isPrime(i.toLong))\
    \ {\n                result = result :+ i.toLong\n                i += 1\n   \
    \         }\n            n -= 1\n        }\n        if (n>0)\n            result\
    \ :+= n\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbfurnfpb.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (isPrime(i.toLong)) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not\
    \ found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbfurnfpb.scala:27:14\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primeList = PrimeList.primes\n\
    \        val primesLessThanN = primeList.takeWhile(p => p < n).toList\n      \
    \  val primesLessThanNPlusOne = primesLessThanN.head :: primesLessThanN\n    \
    \    val primesLessThanNMinusOne = primesLessThanN.tail :+ primesLessThanN.head\
    \ - 1\n        val divisors = primesLessThanNMinusOne.map(divisor => (divisor\
    \ * divisor).toInt)\n        val numPrimes = primes.count\n        val numDivisors\
    \ = divisors.count\n        val sumDivisors = divisors.sum\n        val primesLessThanNList\
    \ = primesLessThanN.tail\n        val primesLessThanNListPlusOne = primesLessThanNList.tail\n\
    \        val primesLessThanNListMinusOne = primesLessThanNList.head :: primesLessThanNList\n\
    \        val primesLessThanNListMinusOnePlusOne = primesLessThanNListMinusOne.tail\n\
    \        val primesLessThanNListMinusOneMinusOne = primesLessThanNListMinusOne.head\
    \ :: primesLessThanNListMinusOne\n        val primesLessThanNListMinusOnePlusOneMinusOne\
    \ = primesLessThanNListMinusOnePlusOne.head :: primesLessThanNListMinusOnePlusOne\n\
    \        val primesLessThanNListMinusOnePlusOnePlusOne = primesLessThanNListMinusOnePlusOne.tail\n\
    \n        if (numPrimes == 0) {\n            primesLessThanNListMinusOnePlusOnePlusOne\n\
    \        } else if (numDivisors == 0) {\n            primesLessThanNListMinusOnePlusOneMinusOne\n\
    \        } else {\n            val nextPrimesLessThanN = primesLessThanNListMinusOnePlusOnePlusOne.last\n\
    \            val nextDivisors = divisors.last\n            val nextDivisorsPlusOne\
    \ = nextDivisors.map(divisor => (divisor + 1).toInt)\n            val nextDivisorsMinusOne\
    \ = nextDivisors.map(divisor => (divisor - 1).toInt)\n            val nextPrimesLessThanNPlusOne\
    \ = nextPrimesLessThanN.head :: nextPrimesLessThanN\n            val nextPrimesLessThanNMinusOne\
    \ = nextPrimesLessThanN.tail :+ nextPri\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppdxl148x.scala:62:0 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppdxl148x.scala:20:24\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeList\e[0m = PrimeList.primes\n\e[31m\e[31m   |\e[0m                 \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: PrimeList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppdxl148x.scala:25:24\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mnumPrimes\e[0m = primes.count\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: primes\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppdxl148x.scala:61:1\
    \ ---------------------\e[0m\e[0m\n\e[31m61 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmppdxl148x.scala:48:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m48 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660029495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = Primes.primes\n \
    \       val primesIndexes = primes.zipWithIndex.toList\n        val primesIndexesSortedByPrime\
    \ = primesIndexes.sortBy(_._1).reverse\n        val result: List[Long] = List[Long]()\n\
    \        val max = primesIndexes.last\n        val min: Long = 0\n        var\
    \ currentPrimeIndex = 0\n        val index = primesIndexesSortedByPrime.filter(p\
    \ => p._1 < n).last._2\n        primesIndexesSortedByPrime.foreach(p => {\n  \
    \          if (p._2 <= index) {\n                return\n            }\n     \
    \       val current = p._2\n            if (p._1 == currentPrimeIndex && current.toLong\
    \ == 1) {\n                result.add(max + ((current.toLong - 1) * index))\n\
    \                currentPrimeIndex = currentPrimeIndex + 1\n            }\n  \
    \      })\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqyuajabm.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = Primes.primes\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \              Not found: Primes\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = List(2)\n       \
    \ for (p <- primes) {\n            val q = n/p\n            if (q==0) continue\n\
    \            val isPrime = true\n            if (q>0) {\n                for (i\
    \ <- 0 until q) {\n                    if (n%(i+p)==0) {\n                   \
    \     isPrime = false\n                        break\n                    }\n\
    \                }\n            }\n            if (isPrime) primes ::: List(p)\n\
    \        }\n        primes.reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong, 3l.toLong))));\n\
    \    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong))));\n\
    \    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n    assert(countUpTo((22l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n\
    \    assert(countUpTo((1l)).equals((List[Long]())));\n    assert(countUpTo((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n \
    \   assert(countUpTo((47l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    assert(countUpTo((101l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpryz2jp1m.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (q==\e[31m0\e[0m) continue\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                  Not found: continue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpryz2jp1m.scala:26:34 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                \e[33mfor\e[0m (i <- \e[31m0\e[0m until q)\
    \ {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    (q : Long)\n\e[31m   |\e[0m   \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpryz2jp1m.scala:28:32 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                        isPrime = \e[31mfalse\e[0m\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpryz2jp1m.scala:29:24 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpryz2jp1m.scala:35:15\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m        primes.reverse\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660029495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        if (n == 0l) Nil\n        else\
    \ (for (p <- 2 to n) yield if (n % p == 0) p else 0l).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5s0z5_ul.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m (\e[33mfor\e\
    [0m (p <- \e[31m2\e[0m to n) \e[33myield\e[0m \e[33mif\e[0m (n % p == \e[31m0\e\
    [0m) p \e[33melse\e[0m \e[31m0l\e[0m).toList\n\e[31m\e[31m   |\e[0m          \
    \                   ^\e[0m\n\e[31m   |\e[0m                             Found:\
    \    (n : Long)\n\e[31m   |\e[0m                             Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primeList: List[Long] = List(n+2l).takeWhile(_\
    \ <= math.sqrt(n).toInt).toList\n        if (primeList.isEmpty) List() else primeList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9706zycn.scala:24)\n\tat Problem.main(tmp9706zycn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val count = (2 to n).filter(x\
    \ => n / x < (n / x).floor)\n        count.map(x => n * x).filter(_ < n).map(n\
    \ => n.toLong).toList\n    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcowy_k7y.scala:20:26\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcount\e\
    [0m = (\e[31m2\e[0m to n).filter(\e[36mx\e[0m => n / x < (n / x).floor)\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcowy_k7y.scala:20:57\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = (\e[31m2\e[0m to n).filter(\e[36mx\e[0m => n / x < (n / x).floor)\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value floor is not a member of Long.\n\e[31m   |\e[0m\
    \      An extension method was tried, but could not be fully constructed:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m          floatWrapper(n./(x))\n2 errors found\n"
  stdout: ''
  timestamp: 1660029495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        var count = new mutable.HashMap[Long,\
    \ Long]()\n        var list = new mutable.LinkedList[Long]()\n        for (i <-\
    \ 2l to n) if (count.contains(i)) \n            list.add(count)\n        else\
    \ count += i -> 1\n        list.filter(i => i.get < n).map(i => i.get -> list.remove(i.key))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpda1i65bk.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpda1i65bk.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e\
    [36mlist\e[0m = \e[33mnew\e[0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val primes = mutable.ListBuffer[Long]()\n\
    \        var primeCount : Long = 0\n        primes ++= primes.filter(_ <= n).filter\
    \ { n =>\n            primeCount += 1\n            val isPrime = n % _ == 0 &&\
    \ (n <= (sqrt(n).toLong - 1.0))\n            if (isPrime) primeCount += 1\n  \
    \          isPrime\n        }\n        primes.takeWhile(_ < n).reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
    \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
    \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
    \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp93o3ofb0.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029494
