language: scala
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        def isPrime(n: Int) : Boolean = \n         \
    \   (n == 1) || ((n == 2) && \n            (n % 2 == 0)) || (n % 3 == 0)\n   \
    \     def filterPrimes(ns : Iterable[Int]) =\n            ns filter (n => isPrime(n))\n\
    \        def getWords(ns : Iterable[Int]) =\n            ns map {n => if (isPrime(n))\
    \ n else \" \"}\n        val ns = sentence.split(\" \").filterNot(_.isEmpty).toList\n\
    \        filterPrimes(ns).toList.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp429_2d8z.scala:27:21\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        filterPrimes(ns).toList.mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^\e[0m\n\e[31m   |\e\
    [0m                     Found:    (ns : List[String])\n\e[31m   |\e[0m       \
    \              Required: collection.mutable.Iterable[Int]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var newWords = \"\"\n        val wordsMap =\
    \ mutable.Map[String, Int]()\n        sentence split \" \".toList foreach { word\
    \ =>\n            val count = 1\n            val existing = wordsMap(word)\n \
    \           if (existing > 0) count = existing\n            wordsMap(word) = count\
    \ + 1\n        }\n        val primes = wordsMap.values.filter(number => number\
    \ > 1).sorted\n        primes.foreach { prime =>\n            val words = wordsMap.filter(_._2\
    \ <= prime).keys.mkString(\" \")\n            newWords = newWords ++ \" \" + words\n\
    \        }\n        newWords\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkurjumod.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mwordsMap\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkurjumod.scala:21:27\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        sentence split \e[31m\"\
    \ \"\e[0m.toList foreach { \e[36mword\e[0m =>\n\e[31m\e[31m   |\e[0m         \
    \              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Found: \
    \   List[Char]\n\e[31m   |\e[0m                       Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpkurjumod.scala:24:36 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (existing > \e[31m0\e[0m) count\
    \ = existing\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Reassignment to val count\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979263
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n       val sentenceSplit  = sentence.split(\" \") //\
    \ split sentence by space\n       val sentenceMap   = sentenceSplit.map(word =>\
    \ word.toInt)  // map each word to its length\n       val primeMap      = sentenceMap.filter(_\
    \ % 2 != 0)  // remove even length\n       val sortedMap     = primeMap.sorted\
    \  // sort by keys\n       val result = sortedMap.foldLeft[String](\"\") { (resultWord,\
    \ key) =>\n          val subSentence  = sentenceSplit\n          val subSentenceMap\
    \ = subSentence.map(word => word.toInt)  // map each word to its length\n    \
    \      val subSentenceSortedMap = subSentenceMap.filter(_ % key == 0)  // remove\
    \ odd length\n          val subSentenceRes = subSentenceSortedMap.foldLeft[String](\"\
    \") { (result, key) =>\n            if (result == \"\") result else result + \"\
    \ \" + key.toString\n          }\n          resultWord + subSentenceRes\n    \
    \   }\n       result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"This\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpoydjok69.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.wordsInSentence(tmpoydjok69.scala:20)\n\
    \tat Problem$.main(tmpoydjok69.scala:35)\n\tat Problem.main(tmpoydjok69.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val letters = Array('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')\n\
    \        val words = new StringBuilder\n        var index = 0\n        var word\
    \ = sentence(0)\n        for(char <- letters) {\n            index += 1\n    \
    \        if(index > sentence.length) return\n            word = word + sentence(0)\n\
    \            if(primes.contains(word.trim.toString.length))\n                words.append(word)\n\
    \        }\n        words.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpof8wu03k.scala:26:40\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m(index\
    \ > sentence.length) \e[33mreturn\e[0m\n\e[31m\e[31m   |\e[0m                \
    \                        ^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                Found:    Unit\n\e[31m   |\e[0m                             \
    \           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpof8wu03k.scala:27:19 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m            word = word + sentence(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \  Found:    Int\n\e[31m   |\e[0m                   Required: Char\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpof8wu03k.scala:28:36 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mif\e[0m(primes.contains(word.trim.toString.length))\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value trim is not a member of Char\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val wordsSet = sentence.split(\" \").filter(!_.isEmpty).toSet\n\
    \        val primes = primes(wordsSet.toSeq.length)\n        val result = wordsSet.mkString(\"\
    \ \")\n        result.filter(a => primes.contains(a.length)).mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4me71mci.scala:20:21 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = primes(wordsSet.toSeq.length)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mprimes\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var res = \"\"\n        sentence.split(\" \"\
    ).foreach(x => if(x == x.toInt) {\n            res = res + (\"*\" * x)\n     \
    \   }\n        else {\n            res = res + (\" \")\n        })\n        res\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdxzkwdr9.scala:20:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        sentence.split(\e[31m\" \"\e[0m).foreach(\e[36mx\e\
    [0m => \e[33mif\e[0m(x == x.toInt) {\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of\
    \ types String and Int cannot be compared with == or !=\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpdxzkwdr9.scala:21:31 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            res = res + (\e[31m\"*\"\e[0m * x)\n\e[31m\e[31m\
    \   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m             \
    \                  Found:    (x : String)\n\e[31m   |\e[0m                   \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n      val sentenceArray = sentence.split(\" \")\n  \
    \    val res = mutable.HashSet[String]()\n      for (word <- sentenceArray) {\n\
    \        for (n <- prime(word.length)) {\n          if (n != 1) {\n          \
    \  val temp = word.substring(0, word.length - n)\n            if (res.contains(temp))\
    \ {\n              break\n            }\n            res ++= temp\n          }\n\
    \        }\n      }\n      res.toList.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe9__uv0p.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36mres\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpe9__uv0p.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (n <- prime(word.length)) {\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \     Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val word = sentence.split(\" \").map{_.toUpperCase()}\n\
    \        val numbers = word.map{_.length}.toSet\n        val primes = numbers.filter(i\
    \ => number.isPrime(i)).toList\n        val stringBuilder = new StringBuilder()\n\
    \        var count = 0\n        var word = \"\"\n        primes.foreach{p =>\n\
    \            word = (word + word.dropRight(p))\n            count += 1\n     \
    \       if(p == primes.last){\n                stringBuilder.append(word.dropRight(count))\n\
    \            }\n        }\n        word\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpidalk02u.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mword\e[0m = \e[31m\"\"\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mword is already\
    \ defined as \e[33mvalue\e[0m \e[35mword\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpidalk02u.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = numbers.filter(\e\
    [36mi\e[0m => number.isPrime(i)).toList\n\e[31m\e[31m   |\e[0m               \
    \                          ^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                   Not found: number\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpidalk02u.scala:26:25 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            word = (word + word.dropRight(p))\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of Array[String], but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpidalk02u.scala:32:8 ---------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        word\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (word : Array[String])\n\e[31m   |\e[0m     \
    \   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n      val n = sentence.split(\" \").map(_.length.toInt).toSeq\n\
    \      val primes = n\n        .filterNot(i => n % i != 0)\n        .filter(n\
    \ => n.toInt == n.toInt / 2)\n        .filterNot(i => primes.contains(i))\n  \
    \      .sorted\n        .map(primes.indexOf(_))\n\n      val result = \"\"\n \
    \     var i = 0\n      while(primes.contains(primes.dropRight(i).sum)) {\n   \
    \     result += (\" \" + sentence.split(\" \").map(w => primes(primes.indexOf(w))).mkString(\"\
    \ \"))\n        i += 1\n      }\n\n      result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbnsmu1u8.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        .filterNot(i => n % i != \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                        ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of Seq[Int], but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbnsmu1u8.scala:23:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        .filterNot(i =>\
    \ primes.contains(i))\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Recursive \e[33mvalue\e[0m \e[35mprimes\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbnsmu1u8.scala:25:13\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        .map(primes.indexOf(_))\n\
    \e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m             Recursive\
    \ \e[33mvalue\e[0m \e[35mprimes\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpbnsmu1u8.scala:29:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m      \e[33mwhile\e[0m(primes.contains(primes.dropRight(i).sum))\
    \ {\n\e[31m\e[31m   |\e[0m                                                   ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mBigIntIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mLongIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbnsmu1u8.scala:30:15 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        result += (\e[31m\" \"\e[0m + sentence.split(\e\
    [31m\" \"\e[0m).map(\e[36mw\e[0m => primes(primes.indexOf(w))).mkString(\e[31m\"\
    \ \"\e[0m))\n\e[31m\e[31m "
  stdout: ''
  timestamp: 1659979264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val sentenceSplit = sentence.split(\" \")\n\
    \        val primes = for (i <- 0 until sentenceSplit.length) yield {\n      \
    \      if (isPrime(sentenceSplit.length.toInt)) i\n            else -1\n     \
    \   }\n        val ans = for (i <- primes) yield sentenceSplit(i)\n        ans.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6bxd3sls.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (isPrime(sentenceSplit.length.toInt))\
    \ i\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val arr = sentence.split(\" \")\n        val\
    \ str1 = arr.toList\n        val primes: List[String] = List(\"2\", \"3\", \"\
    5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"31\", \"37\", \"41\", \"43\", \"\
    47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\",\
    \ \"97\")\n        var str2 = arr.toList\n        for(i <- 0 until primes.length){\n\
    \            val prime = primes(i)\n            val isPrime = str2.filter(word\
    \ => prime.toInt == word.length)\n            str2.remove(isPrime)\n        }\n\
    \        str2.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp78v4uz2c.scala:26:17 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            str2.remove(isPrime)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a member of\
    \ List[String] - did you mean List[String].reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1659979263
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val split = sentence.split(\" \")\n        val\
    \ result = split.map(x => {\n            val n = BigInt(x)\n            if(n %\
    \ 2 == 0){\n                n\n            }else{\n                n-(n-1)\n \
    \           }\n        }).filter(x=>x % 2 != 0).sorted\n        val finalResult\
    \ = result.mkString(\" \")\n        finalResult\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"This\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:536)\n\
    \tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat scala.math.BigInt$.apply(BigInt.scala:94)\n\
    \tat Problem$.$anonfun$1(tmpvk7jblxm.scala:21)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.wordsInSentence(tmpvk7jblxm.scala:27)\n\tat Problem$.main(tmpvk7jblxm.scala:32)\n\
    \tat Problem.main(tmpvk7jblxm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val primes = Primes.primes(100).toSet\n    \
    \    var ans = \"\"\n        var count = 0\n        val words = sentence.split(\"\
    \ \").toSet\n        words.foreach{ word => \n            count += word.size %\
    \ 2 != 0\n            val index = words.indexWhere(x => x.toString.size == word.length)\n\
    \            if (primes.contains((word.length + 1))) {\n                ans +=\
    \ word + \" \"\n            }\n            if (count == words.length - 1) {\n\
    \                break\n            }\n        }\n        ans\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgn43vvf3.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = Primes.primes(\e\
    [31m100\e[0m).toSet\n\e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: Primes\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpgn43vvf3.scala:24:18 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            count += word.size % \e[31m2\e[0m != \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpgn43vvf3.scala:25:30 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mindex\e[0m = words.indexWhere(\e\
    [36mx\e[0m => x.toString.size == word.length)\n\e[31m\e[31m   |\e[0m         \
    \               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \ value indexWhere is not a member of Set[String]\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpgn43vvf3.scala:29:31 ------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m            \e[33mif\e[0m (count == words.length - \e[31m1\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value length is not a member of Set[String]\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgn43vvf3.scala:30:16 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659979264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var result : String = \"\"\n        var index\
    \ = 0\n        var j = 0\n        var k = 0\n        for (x <- sentence){\n  \
    \          if (index == 0){\n                index = 1\n            }\n      \
    \      else if (index == 1){\n                result += x\n                index\
    \ = 0\n            }\n            else if (Character.isLetter(x.charAt(0))){\n\
    \                result += x\n                j++\n                if (j == 2){\n\
    \                    j = 0\n                }\n            }\n            else{\n\
    \                result += x\n                k++\n                if (k == 3){\n\
    \                    k = 0\n                }\n            }\n        }\n    \
    \    return result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps14idbls.scala:33:19 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                j++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps14idbls.scala:40:19\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m                k++\n\e\
    [31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                \
    \   expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmps14idbls.scala:31:42 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (Character.isLetter(x.charAt(\e\
    [31m0\e[0m))){\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value charAt is not a\
    \ member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659979263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        def findPrimes(str : String) : List[String]\
    \ = {\n            var strList = str.split(\" \")\n            var primes: List[String]\
    \ = Nil\n            for(i <- 2 to strList.last.length){\n                if(!strList.exists(x\
    \ => x.length <= i)){\n                    primes = primes.filterNot(x => x.startsWith(i))\n\
    \                    primes = primes ::: strList.filterNot(x => x.startsWith(i))\n\
    \                }\n            }\n            return primes\n        }\n    \
    \    var wordsInSentence = sentence.split(\" \").filterNot(x => x.isEmpty)\n \
    \       wordsInSentence = wordsInSentence.flatMap(x => findPrimes(x)).toList\n\
    \        wordsInSentence.sort\n        wordsInSentence.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp34bnhyzp.scala:24:64\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    primes =\
    \ primes.filterNot(\e[36mx\e[0m => x.startsWith(i))\n\e[31m\e[31m   |\e[0m   \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                                     Found:    (i : Int)\n\
    \e[31m   |\e[0m                                                     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp34bnhyzp.scala:25:76\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    primes =\
    \ primes ::: strList.filterNot(\e[36mx\e[0m => x.startsWith(i))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \         Found:    (i : Int)\n\e[31m   |\e[0m                               \
    \                      Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp34bnhyzp.scala:31:70 --------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m        wordsInSentence = wordsInSentence.flatMap(\e[36mx\e\
    [0m => findPrimes(x)).toList\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    \e[1m\e[31mList\e[0m[String]\n\
    \e[31m   |\e[0m                          Required: \e[1m\e[32mArray\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp34bnhyzp.scala:32:24\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        wordsInSentence.sort\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort\
    \ is not a member of Array[String] - did you mean Array[String].wait?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var primes = Vector.empty[Int]\n        var\
    \ result = \"\"\n        for (item <- sentence.split(' ')){\n            if (primes.contains(item.length))\
    \ {\n                result += \" \" + item\n                primes = primes.filterNot(_\
    \ == item.length)\n            } else {\n                primes = primes + item.length\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7lkze2kh.scala:26:32 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                primes = primes + item.length\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is\
    \ not a member of Vector[Int], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        if(sentence.contains(\",\")) {\n           \
    \ var newSentence = sentence\n            var wordsRemoved = 0\n            val\
    \ wordsInSentence = sentence.split(\"\\\\s+\").length\n            var primes\
    \ = Set(2,3,5)\n            for(i <- 0 until wordsInSentence) {\n            \
    \    val word = sentence.split(\"\\\\s+\")(i)\n                val prime = primes.filter(\
    \ prime => word == prime.mkString(\"\") ).getOrElse(\"\")\n                if(prime\
    \ != \"\") {\n                    primes.remove(prime)\n                    wordsRemoved\
    \ += 1\n                }\n            }\n            newSentence = newSentence.substring(0,\
    \ newSentence.length - wordsRemoved)\n            newSentence = newSentence +\
    \ \" \" + primes.mkString(\" \")\n        } else {\n            var newSentence\
    \ = sentence\n            var wordsRemoved = 0\n            val wordsInSentence\
    \ = sentence.split(\"\\\\s+\").length\n            var primes = Set(2,3,5)\n \
    \           for(i <- 0 until wordsInSentence) {\n                val word = sentence.split(\"\
    \\\\s+\")(i)\n                val prime = primes.filter( prime => word == prime.mkString(\"\
    \") ).getOrElse(\"\")\n                if(prime != \"\") {\n                 \
    \   primes.remove(prime)\n                    wordsRemoved += 1\n            \
    \    }\n            }\n            newSentence = newSentence.substring(0, newSentence.length\
    \ - wordsRemoved)\n            newSentence = newSentence + \" \" + primes.mkString(\"\
    \ \")\n        }\n        return newSentence\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp78ctyt4_.scala:26:66 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e[0m \e[36mprime\e[0m = primes.filter(\
    \ \e[36mprime\e[0m => word == prime.mkString(\e[31m\"\"\e[0m) ).getOrElse(\e[31m\"\
    \"\e[0m)\n\e[31m\e[31m   |\e[0m                                              \
    \              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value mkString is not a\
    \ member of Int - did you mean prime.toString?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp78ctyt4_.scala:41:66 ------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m                \e[33mval\e[0m \e[36mprime\e[0m = primes.filter( \e[36mprime\e\
    [0m => word == prime.mkString(\e[31m\"\"\e[0m) ).getOrElse(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value mkString is not a member of Int\
    \ - did you mean prime.toString?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp78ctyt4_.scala:50:15\
    \ ------------------------\e[0m\e[0m\n\e[31m50 |\e[0m        \e[33mreturn\e[0m\
    \ newSentence\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m               Not found: newSentence\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.forall(Character.isLetter))\n\
    \        var str = words\n        for(i <- 0 until words.length){\n          \
    \  if(words.length % i == 0){\n                str.remove(i)\n            }\n\
    \        }\n        str.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppa2rkqn3.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                str.remove(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value remove\
    \ is not a member of Array[String]\n1 error found\n"
  stdout: ''
  timestamp: 1659979263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        def isPrime(i: Int, primes: mutable.HashMap[Int,\
    \ Boolean]) : Boolean = {\n            // O(n) \n            if (primes.contains(i))\
    \ {\n                return primes(i)\n            }\n            var isPrime\
    \ = true\n            for (p <- primes.keys if p > i) {\n                if (i\
    \ % p == 0) {\n                    isPrime = false\n                    break\n\
    \                }\n            }\n            primes(i) = isPrime\n         \
    \   return isPrime\n        }\n\n        // O(n)\n        var wordsCount = 0\n\
    \        // O(n)\n        var primes = mutable.HashMap[Int, Boolean]()\n\n   \
    \     for (word <- sentence.split(\" \")) {\n            wordsCount += 1\n   \
    \         isPrime(word.length, primes)\n        }\n        val result = new Array[String](wordsCount)\n\
    \        for (i <- 0 until wordsCount) {\n            result(i) = sentence.split(\"\
    \ \")(i)\n        }\n\n        val newSentence = result.mkString(\" \")\n    \
    \    if (newSentence.length == sentence.length) {\n            return newSentence\n\
    \        } else {\n            for (i <- 0 until newSentence.length)\n       \
    \         if (newSentence(i) != sentence(i)) {\n                    return newSentence\n\
    \                }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvbpmrldg.scala:19:36 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mdef\e[0m \e[36misPrime\e[0m(\e[36mi\e[0m:\
    \ \e[35mInt\e[0m, \e[36mprimes\e[0m: mutable.HashMap[\e[35mInt\e[0m, \e[35mBoolean\e\
    [0m]) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m                        \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvbpmrldg.scala:38:21\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mvar\e[0m \e\
    [36mprimes\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mBoolean\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvbpmrldg.scala:53:12 --------------------\e[0m\e[0m\n\e[31m53\
    \ |\e[0m            \e[33mfor\e[0m (i <- \e[31m0\e[0m until newSentence.length)\n\
    \e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:   \
    \ Unit\n\e[31m   |\e[0m            Required: String\n\e[31m54 |\e[0m         \
    \       \e[33mif\e[0m (newSentence(i) != sentence(i)) {\n\e[31m55 |\e[0m     \
    \               \e[33mreturn\e[0m newSentence\n\e[31m56 |\e[0m               \
    \ }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979263
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val nums = sentence.split(\" \").map(_.length).distinct\n\
    \        var result = \"\"\n        nums.foreach {n => result = result + sentence.split(\"\
    \ \")(n) + \" \" + n}\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 4\n\tat Problem$.wordsInSentence$$anonfun$1(tmp3x9lmgg9.scala:21)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1329)\n\tat Problem$.wordsInSentence(tmp3x9lmgg9.scala:21)\n\
    \tat Problem$.main(tmp3x9lmgg9.scala:25)\n\tat Problem.main(tmp3x9lmgg9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val wordsList = sentence.split(\" \").map (_.toLowerCase)\n\
    \        val wordsDict : scala.collection.mutable.Map[String,Int] = new scala.collection.mutable.HashMap[String,Int]()\n\
    \        wordsList.foreach(word => wordsDict(word) = wordsDict.size + 1)\n   \
    \     val resultList = wordsDict.filter {case (key, value) => value % 2 == 0}\n\
    \        val resultStrings = resultList.map {case (key, value) => key}.toList.mkString(\"\
    \ \")\n        resultStrings\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5_cpy3ug.scala:27)\n\tat Problem.main(tmp5_cpy3ug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val wordList = sentence.split(\" \").map(_.toDouble).map(_.toInt).map(x\
    \ => math.pow(x,2)).filter(x => x > 1).toList\n        val newString = new StringBuilder\n\
    \        wordList.foreach(x => newString.append(x))\n        newString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxwcdix3h.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        newString\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (newString\
    \ : StringBuilder)\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var ret = \"\"\n        var primes = {2 3 5\
    \ 7 11 13 17 19 23 29}\n        val sentenceAsArray = sentence.split(\" \").toList\n\
    \        for (str <- sentenceAsArray) {\n            var strLength = new String(str).length()\n\
    \            for (prime <- primes.toList) {\n                if (strLength % prime\
    \ == 0) {\n                    ret = ret + str\n                    break\n  \
    \              }\n            }\n        }\n        return ret.trim()\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzfuo4thm.scala:20:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mprimes\e[0m = {\e[31m2\e\
    [0m \e[31m3\e[0m \e[31m5\e[0m \e[31m7\e[0m \e[31m11\e[0m \e[31m13\e[0m \e[31m17\e\
    [0m \e[31m19\e[0m \e[31m23\e[0m \e[31m29\e[0m}\n\e[31m\e[31m   |\e[0m        \
    \                ^\e[0m\n\e[31m   |\e[0m                     end of statement\
    \ expected but integer literal found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzfuo4thm.scala:24:33\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m\
    \ (prime <- primes.toList) {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value toList is not a member of Int - did you mean\
    \ Int.toInt?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979263
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var result : String = \"\"\n        var hashSet\
    \ = scala.collection.mutable.HashSet[String]()\n        sentence.split(\" \").foreach(word\
    \ => hashSet.add(word))\n        hashSet.toList.sortWith(_.length > _.length).foreach(word\
    \ => result += word)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpddxvv3m9.scala:26)\n\tat Problem.main(tmpddxvv3m9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var charArray = sentence.trim().toCharArray\n\
    \        for(i <- 0 until charArray.length){\n            if((i%2) == 0){\n  \
    \              if(charArray(i) == ' ') charArray(i) = \"\"\n            }\n  \
    \      }\n        var stringBuilder = new StringBuilder()\n        charArray.foreach(s\
    \ => if (s.isEmpty) stringBuilder.append(\"\") else stringBuilder.append(s))\n\
    \        stringBuilder.toString().trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuh4f_e8m.scala:22:55\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e[0m(charArray(i)\
    \ == \e[31m' '\e[0m) charArray(i) = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                                                    ^^\e[0m\n\e[31m   |\e[0m\
    \                                                 Found:    (\e[32m\"\"\e[0m :\
    \ String)\n\e[31m   |\e[0m                                                 Required:\
    \ Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuh4f_e8m.scala:26:37\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        charArray.foreach(\e\
    [36ms\e[0m => \e[33mif\e[0m (s.isEmpty) stringBuilder.append(\e[31m\"\"\e[0m)\
    \ \e[33melse\e[0m stringBuilder.append(s))\n\e[31m\e[31m   |\e[0m            \
    \                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \             value isEmpty is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        def isPrime(n : Int) : Boolean = {\n       \
    \     val sqrt = (math.sqrt(n).toInt).toInt\n            for( i <- 2 to sqrt ){\n\
    \                if( n % i == 0 ) false\n            }\n            true\n   \
    \     }\n        val result = mutable.ListBuffer[String]()\n        for(word <-\
    \ sentence.split(\" \")){\n            if(isPrime(word.length)) {\n          \
    \      result += (word)\n            }\n        }\n        for(word <- result.toSeq)\
    \ {\n            val len = (word.length).toInt\n            if(len <= 2) {\n \
    \               result -= (word)\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppvg7_a5f.scala:26:21 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmppvg7_a5f.scala:22:33 ----------------\e\
    [0m\e[0m\n\e[33m22 |\e[0m                \e[33mif\e[0m( n % i == \e[31m0\e[0m\
    \ ) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                                 ^^^^^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val arr = sentence.split(\" \").toList\n   \
    \     val res = arr.filter(_.forall(Character.isLetter))\n        res.filter(_.forall(_\
    \ => arr.reduce((x,y) => x+y.length)%_ == 0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmps2dywzvw.scala:21:65 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        res.filter(_.forall(_ => arr.reduce((\e[36mx\e\
    [0m,\e[36my\e[0m) => x+y.length)%_ == \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m  \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$4 of expanded function:\n\e[31m   |\e\
    [0m   _$4 => arr.reduce((x, y) => x + y.length) % _$4 == 0.\n1 error found\n"
  stdout: ''
  timestamp: 1659979271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val arr = sentence.split(\" \").toList\n   \
    \     var arr2 = new mutable.ListBuffer[String]\n        for (x <- arr) {\n  \
    \          if (primeNumber(x.length) == false) {\n                arr2 += x\n\
    \            }\n        }\n        arr2.toList.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeitp2gs5.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36marr2\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeitp2gs5.scala:22:16\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m\
    \ (primeNumber(x.length) == \e[31mfalse\e[0m) {\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: primeNumber\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val result = mutable.ArrayBuffer(\"\")\n   \
    \     for (word <- sentence.split(\" \"))\n            if (isPrime(word.length()))\n\
    \                result += (word + \" \")\n        result.mkString(\" \")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqf1c8i2z.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqf1c8i2z.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (isPrime(word.length()))\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val result = new ListBuffer[String]\n      \
    \  val words = sentence.split(\" \")\n        for (x <- words) x match {\n   \
    \         case x: String if x.forall(_.isLetter) =>\n                val primes\
    \ = primes(x.length)\n                for (p <- primes) if (x contains p.toString)\
    \ result += p\n            case _ => return \"\"\n        }\n        return result.toList().sorted.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcqaj3yx1.scala:23:29 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mprimes\e[0m = primes(x.length)\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         Recursive \e[33mvalue\e[0m \e[35mprimes\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpcqaj3yx1.scala:27:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mreturn\e[0m result.toList().sorted.mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmissing argument for parameter n of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mtrait\e[0m \e[35mLinearSeqOps\e[0m: (n: Int): String\n2 errors found\n"
  stdout: ''
  timestamp: 1659979270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val n = scala.math.ceil(sqrt(sentence.length))\n\
    \        var str = \"\"\n        val set = mutable.HashSet[String]()\n       \
    \ for(i <- 0 until n){\n            if(n % i == 0){\n                str = (str\
    \ + sentence.split(\" \").take(i))\n            }\n        }\n        return str\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddp5rhv3.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpddp5rhv3.scala:22:25 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Double)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val wordsString = sentence.split(\"\\\\s+\"\
    )\n        var newWords = wordsString.filter(_ % 2 == 0).mkString(\" \")\n   \
    \     val primes = Seq(3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997).filter(x\
    \ => x % 2 == 0)\n        primes.foreach { p =>\n            newWords = newWords.replaceAll(\"\
    \\\\b\" + p + \"\\\\b\", \"_\" + p + \"_\")\n        }\n        val withoutBlanks\
    \ = newWords.replaceAll(\"_+_\", \"_\")\n        withoutBlanks.replaceAll(\"_$\"\
    , \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpad0s2ud1.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mnewWords\e[0m = wordsString.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                          ^^^\e[0m\n\e[31m   |\e[0mvalue %\
    \ is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var result = new StringBuilder()\n        var\
    \ word = new StringBuilder()\n        var index = 0\n        while (index < sentence.length)\
    \ {\n            val c = sentence(index).toChar\n            if (!c.isLetter)\
    \ {\n                word.append(\" \")\n                index+=1\n          \
    \      continue\n            }\n            val m = c.toInt\n            if (isPrime(m))\
    \ {\n                index+=1\n                continue\n            }\n     \
    \       word += c\n            index += 1\n        }\n        while (index<sentence.length)\
    \ {\n            val c = sentence(index).toChar\n            if (!c.isLetter)\
    \ {\n                word.append(\" \")\n                index+=1\n          \
    \      continue\n            }\n            val m = c.toInt\n            if (!isPrime(m))\
    \ {\n                index+=1\n                continue\n            }\n     \
    \       word += c\n            index += 1\n        }\n        result +=  word.substring(0,\
    \ word.length-1)\n        return result.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_b2poz78.scala:27:16 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_b2poz78.scala:30:16\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(m)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_b2poz78.scala:32:16 ------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m                continue\n\e[31m\e[31m   |\e[0m          \
    \      ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_b2poz78.scala:42:16 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_b2poz78.scala:45:17\
    \ ------------------------\e[0m\e[0m\n\e[31m45 |\e[0m            \e[33mif\e[0m\
    \ (!isPrime(m)) {\n\e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                 Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_b2poz78.scala:47:16 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_b2poz78.scala:52:33\
    \ --------------------\e[0m\e"
  stdout: ''
  timestamp: 1659979273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        var index = 1\n        val isPrime = new mutable.HashSet[Int]()\n   \
    \     val chars = sentence.split(\"\")\n        chars.foreach { elem =>\n    \
    \        val newIndex = index\n            val temp = elem\n            val isPrimeChecker\
    \ = isPrime(newIndex) //prime checker\n            if (isPrimeChecker) isPrime\
    \ += newIndex\n            val checker = (elem == temp) //check whether two words\
    \ are equal or not\n            if (checker) result += \"\\\"\" + elem + \"\\\"\
    \"\n            index += 1\n        }\n        if (result.length == 0)\n     \
    \       return (\"\\\"\" + sentence + \"\\\"\")\n        if (result.length ==\
    \ 1)\n            return result(0)\n        return result.toSeq.distinct\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7a5iqe6d.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7a5iqe6d.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        if(sentence.contains(\" \")) {\n           \
    \ val words = sentence.split(\" \")\n            val newList = new mutable.ListBuffer[String]()\n\
    \            for(i <- 0 until words.length)\n            {\n                val\
    \ word = words(i)\n                if(isPrime(word.length)) newList += word\n\
    \            }\n            newList.toList.sort().mkString(\" \")\n        } else\
    \ {\n            \"\"\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaw9zs9gr.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mnewList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaw9zs9gr.scala:25:19\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mif\e\
    [0m(isPrime(word.length)) newList += word\n\e[31m\e[31m   |\e[0m             \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: isPrime\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = (for (x <- sentence.split(\"\\\\\
    s+\")) yield {\n            val b = x.toByte\n            if (b % 2 == 0 && b\
    \ != 1) {\n                x\n            } else {\n                \"_\"\n  \
    \          }\n        }).toArray\n        val newWords = for (word <- words; w\
    \ <- words; if (w != word && w.length == word.length)) yield {\n            w\
    \ + \"/\"\n        }\n        newWords.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"This\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Byte.parseByte(Byte.java:193)\n\
    \tat java.base/java.lang.Byte.parseByte(Byte.java:219)\n\tat scala.collection.StringOps$.toByte$extension(StringOps.scala:889)\n\
    \tat Problem$.$anonfun$1(tmpnzafgs6z.scala:20)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.wordsInSentence(tmpnzafgs6z.scala:26)\n\tat Problem$.main(tmpnzafgs6z.scala:33)\n\
    \tat Problem.main(tmpnzafgs6z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val primeNumbers = primeNumbers(sentence)\n\
    \        var result = \"\"\n        for (i <- 0 until primeNumbers.size) {\n \
    \           result += \" \" + primeNumbers(i)\n        }\n        result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpr7kbxlw5.scala:19:27 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mprimeNumbers\e[0m = primeNumbers(sentence)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35mprimeNumbers\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val sentenceList = sentence.split(\" \")\n \
    \       val result = new Array[String](sentenceList.size)\n        val resultSet\
    \ = new mutable.HashSet[String]()\n\n        var index = 0\n        var count\
    \ = 0\n        var flag = false\n        for (word <- sentenceList) {\n      \
    \      while (index > -1 && index >= count) {\n                if (flag) {\n \
    \                   resultSet(word) = resultSet(word) + resultSet(index)\n   \
    \                 resultSet(index) = null\n                    flag = false\n\
    \                } else {\n                    flag = true\n                }\n\
    \                index -= 1\n            }\n            resultSet(word) = word\n\
    \            resultSet(count) = word\n            count += 1\n        }\n\n  \
    \      val resultString = resultSet.toString()\n        return resultString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmczn8wpi.scala:21:28 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresultSet\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.toLowerCase)\n\
    \        val newWords = words.filter(word => isPrime(word.length))\n        val\
    \ result = newWords.mkString(\" \")\n        \n        result \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpefd76ntu.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewWords\e[0m = words.filter(\e\
    [36mword\e[0m => isPrime(word.length))\n\e[31m\e[31m   |\e[0m                \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                         Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        words.foreach(w\
    \ => if(w.length==1) prime(w) else prime(w))\n        val list2 = new mutable.ListBuffer[String]()\n\
    \        words.foreach(w => {\n            if(prime(w.length()))\n           \
    \     list2 += w\n        })\n        list2.toList.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp011_x1_d.scala:20:43 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        words.foreach(\e[36mw\e[0m => \e[33mif\e[0m(w.length==\e\
    [31m1\e[0m) prime(w) \e[33melse\e[0m prime(w))\n\e[31m\e[31m   |\e[0m        \
    \                                   ^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                             Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp011_x1_d.scala:20:57 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        words.foreach(\e[36mw\e[0m => \e[33mif\e[0m(w.length==\e\
    [31m1\e[0m) prime(w) \e[33melse\e[0m prime(w))\n\e[31m\e[31m   |\e[0m        \
    \                                                 ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                        Not found: prime\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp011_x1_d.scala:21:24\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mlist2\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp011_x1_d.scala:23:15 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            \e[33mif\e[0m(prime(w.length()))\n\e[31m\e[31m   |\e[0m       \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m               Not found: prime\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659979272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.isLetter)\n\
    \        val result = new mutable.LinkedList[String]()\n        for (word <- words)\
    \ {\n            val temp = word.length\n            while(temp > 1) {\n     \
    \           if(math.ceil(temp % 2) == 1) {\n                    result.addLast(word)\n\
    \                    break;\n                }\n                temp /= 2\n  \
    \          }\n        }\n        result.map(_.toUpperCase()).mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx9s7opz9.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter)\n\e[31m\e[31m   |\e[0m                    \
    \                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \               value isLetter is not a member of String\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpx9s7opz9.scala:20:25 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m\
    \ mutable.LinkedList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx9s7opz9.scala:26:20\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                    break;\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpx9s7opz9.scala:28:21 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m                temp /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of Int\
    \ - did you mean temp.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").toList\n \
    \       words.filter(_().isPrime)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmplq1grnd_.scala:20:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        words.filter(_().isPrime)\n\e[31m\e[31m   |\e\
    [0m                     ^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter\
    \ i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e[0m \e[35mStringOps\e\
    [0m: (i: Int): Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        def isPrime(n : Int) : Boolean = {\n       \
    \     for(x <- 2 until n by 2)\n                if(!(n%x).equals(0) && n%x !=\
    \ 0)\n                    return false\n            return true\n        }\n \
    \       var result = new ListBuffer[String]()\n        for (x <- sentence.split(\"\
    \ \")) {\n            val newLength = x.length\n            val isPrime = isPrime(newLength)\n\
    \            val append = newLength match {\n                case x if x > 2 =>\
    \ x.toString\n                case x if x < 2 => x\n                case 2 =>\
    \ \"\"\n            }\n            if (isPrime) result += append\n        }\n\
    \        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7m8y0zdp.scala:28:26 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36misPrime\e[0m = isPrime(newLength)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35misPrime\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7m8y0zdp.scala:34:35\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m            \e[33mif\e[0m (isPrime)\
    \ result += append\n\e[31m\e[31m   |\e[0m                                   ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    (append : Matchable)\n\
    \e[31m   |\e[0m                                   Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ results = new mutable.ArrayBuffer[String]\n        for(word <- words) {\n  \
    \          val newWord = word.replace(\" \", \"\")\n            if (newWord.length\
    \ == 1) continue\n            if (isPrime(newWord.length)) results += newWord\n\
    \        }\n        val sorted = results.sortWith(_ < _)\n        val res = sorted.mkString(\"\
    \ \")\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjzg4682e.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m            \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjzg4682e.scala:23:37\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (newWord.length == \e[31m1\e[0m) continue\n\e[31m\e[31m   |\e[0m           \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                 Not found: continue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpjzg4682e.scala:24:16 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (isPrime(newWord.length)) results\
    \ += newWord\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val strList = sentence.split(\" \")\n      \
    \  strList.map {\n            str1 =>\n                val str2 = str1.replaceAll(\"\
    \ \", \"\")\n                val str3 = str2.toInt\n                println(str3)\n\
    \                if (str3.isPrime)\n                    str1\n               \
    \ else\n                    \"\"\n        }.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5rbbfzjs.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mif\e[0m (str3.isPrime)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \          value isPrime is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val nums = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  def checkPrime(i : Int) : Boolean = {\n            for(j <= Math.sqrt(i); j\
    \ <= nums.length; j += 1){\n                if(i % nums(j) == 0)\n           \
    \         return false\n            }\n            return true\n        }\n  \
    \      val words = sentence.split(\" \").toList\n        val wordsStr = words.toList\n\
    \        val output = wordsStr.filter(checkPrime(_))\n        return output.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiufma6mg.scala:21:33 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m(j <= Math.sqrt(i); j <= nums.length;\
    \ j += \e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m                                 ^\e\
    [0m\n\e[31m   |\e[0m                                 ')' expected, but ';' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiufma6mg.scala:21:51 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m(j <= Math.sqrt(i); j <= nums.length;\
    \ j += \e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m                                 \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \         '<-' expected, but ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiufma6mg.scala:21:59\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e\
    [0m(j <= Math.sqrt(i); j <= nums.length; j += \e[31m1\e[0m){\n\e[31m\e[31m   |\e\
    [0m                                                           ^\e[0m\n\e[31m \
    \  |\e[0m                                            '<-' expected, but ')' found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiufma6mg.scala:29:48 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36moutput\e[0m = wordsStr.filter(checkPrime(_))\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m                                                Found:    (_$1 :\
    \ String)\n\e[31m   |\e[0m                                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var result : String = \"\"\n        var words\
    \ : String = sentence.split(\" \")\n        words.foreach{\n            wordLen\
    \ => {\n                if(prime(wordLen)){\n                    result += \"\
    \ \" + wordLen\n                }\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3r1wguvt.scala:20:43\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mwords\e\
    [0m : \e[35mString\e[0m = sentence.split(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                         Found:    \e[1m\e[31mArray\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                             Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3r1wguvt.scala:23:19\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e\
    [0m(prime(wordLen)){\n\e[31m\e[31m   |\e[0m                   ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val charSet = mutable.HashSet[Char]()\n    \
    \    sentence.foreach{ c =>\n            if (c.isLetter) charSet.add(c)\n    \
    \    }\n        val result = mutable.ListBuffer[String]()\n        var pos = 1\n\
    \        while (pos < sentence.length) {\n            val currentChars = charSet.filter{\
    \ c => c % pos == 0 }\n            if (currentChars.size == 0) {\n           \
    \     result.append(\" \")\n            } else {\n                result.append(currentChars.head.toString.substring(1))\n\
    \            }\n            pos += 1\n        }\n        result.toString\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp23einht0.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcharSet\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp23einht0.scala:23:21 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        //var newSentence = \"\"\n        //var newWord\
    \ = \"\"\n        //var nextWord = \"\"\n        //var tempWord = \"\"\n     \
    \   //var currentWord = \"\"\n        //var first = true\n        //var length\
    \ = 0\n        /*\n            Loop through the given sentence and find lengths\
    \ of the words.\n            For each word, the first letter of that word is saved\
    \ to tempWord.\n            At the end of each iteration, currentWord is appended\
    \ to newWord.\n            At the end of each iteration, currentWord is set to\
    \ tempWord.\n            At the end of each iteration, tempWord is set to currentWord.\n\
    \            At the end of each iteration, length += 1 \n        */\n        sentence\
    \ foreach {word =>\n            //tempWord = word\n            length = word.length\n\
    \            word.dropWhile(_.isLetter) foreach {letterOfWord =>\n           \
    \     tempWord = letterOfWord\n            }\n            currentWord = tempWord\n\
    \            newWord = currentWord\n            tempWord = currentWord\n     \
    \       newWord = newWord + \" \"\n        }\n        //newSentence = newSentence\
    \ + newWord\n        //return newSentence\n        sentence.filter(_.length ==\
    \ prime_number_tester(length)).mkString(\" \")\n        //return newWord\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjnpgab8j.scala:36:12 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            length = word.length\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: length\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjnpgab8j.scala:36:26 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            length = word.length\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \ value length is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpjnpgab8j.scala:37:17 ------------------------\e[0m\e[0m\n\e[31m37 |\e\
    [0m            word.dropWhile(_.isLetter) foreach {\e[36mletterOfWord\e[0m =>\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \    value dropWhile is not a member of Char\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpjnpgab8j.scala:40:12 ------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m            currentWord = tempWord\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: currentWord\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpjnpgab8j.scala:40:26 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            currentWord = tempWord\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \        Not found: tempWord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpjnpgab8j.scala:41:12 ------------------------\e[0m\e[0m\n\e[31m41 |\e\
    [0m            newWord = currentWord\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: newWord\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpjnpgab8j.scala:41:22 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            newWord = currentWord\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1659979281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \").map(word => word.length)\n        val result = new collection.mutable.ArrayBuffer[Int]()\n\
    \        for (word <- words) {\n            val prime = word.primeNumber\n   \
    \         if (prime.isDefined) {\n                result += (prime + 1)\n    \
    \        }\n        }\n        return result.takeWhile(_ < words.length).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8wizbugy.scala:23:29 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mprime\e[0m = word.primeNumber\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        value primeNumber is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659979281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val l = sentence.length\n        val primes\
    \ = new mutable.HashSet[Long]()\n        primes.add(l)\n        var res = \"\"\
    \n        for (i <- 0 until l) {\n            val temp = Math.sqrt(l).toInt\n\
    \            while (temp <= primes.size) {\n                val c = primes.find(_\
    \ % temp == 0)\n                if (c >= 0) {\n                    primes.remove(c)\n\
    \                } else {\n                    temp += 1\n                }\n\
    \            }\n            res += sentence.substring(i, i + 1) + \" \"\n    \
    \    }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy2wtll6r.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy2wtll6r.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                    temp\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                 value += is not a member of Int - did you mean temp.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var primes = []\n        var s = ArrayBuffer.empty[String]\n\
    \        for (word <- sentence.split[String]()){\n            val prime = scala.math.remainder(word.length,\
    \ 2)\n            if(prime == 0) primes.append(prime)\n            s ++= word\
    \ :: primes.toArray\n        }\n        s.toList.reverse.mkString(\" \")\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk63w3w6v.scala:19:22 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mprimes\e[0m = []\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   an identifier expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpk63w3w6v.scala:20:0 ----------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mvar\e[0m \e[36ms\e[0m = ArrayBuffer.empty[\e[35mString\e\
    [0m]\n\e[31m\e[31m   |\e[0m^^^\e[0m\n\e[31m   |\e[0m'=>' expected, but 'end of\
    \ statement' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpk63w3w6v.scala:21:30\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e\
    [0m (word <- sentence.split[\e[35mString\e[0m]()){\n\e[31m\e[31m   |\e[0m    \
    \                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35msplit\e[0m in \e[33mclass\e[0m \e[35mString\e[0m\
    \ with types\n\e[31m   |\e[0m (x$0: String): Array[String]\n\e[31m   |\e[0m (x$0:\
    \ String, x$1: Int): Array[String]\n\e[31m   |\e[0mmatch type arguments [String]\
    \ and arguments ()\n3 errors found\n"
  stdout: ''
  timestamp: 1659979279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val arr = sentence.split(\" \")\n        var\
    \ ans = \"\"\n        for( i <- 0 until arr.length){\n            val strArr =\
    \ arr(i).split(\"\")\n            for( j <- 0 until strArr.length){\n        \
    \        if(strArr(j).isLetter){\n                    if(strArr.length == 2){\n\
    \                        ans += strArr(j)\n                    } else if(!isPrime(strArr(j).toInt)){\n\
    \                        ans += strArr(j)\n                    }\n           \
    \     }\n            }\n        }\n        ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpopnr41g2.scala:24:29 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m(strArr(j).isLetter){\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   value isLetter is not a member of String\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpopnr41g2.scala:27:31 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                    } \e[33melse\e[0m \e[33mif\e[0m(!isPrime(strArr(j).toInt)){\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val wordsArray\
    \ = sentence.split(\" \").toArray\n        var ans = \"\"\n        for(i<-0 until\
    \ wordsArray.length){\n            var found = false\n            for(j <- 0 until\
    \ i){\n                if(math.pow(wordsArray(i).length,2) == math.pow(wordsArray(j).length,2)){\n\
    \                    found = true\n                    break\n               \
    \ }\n            }\n            if(found){\n                ans += \" \" + wordsArray(i)\n\
    \            }\n        }\n        return ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4mtdt2j_.scala:27:20 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(w => w.trim).toSet\n\
    \        val maxWordLen = Math.sqrt(words.size).toInt\n        val lens = words.size\n\
    \        val primals = words.size.toList.filter(_ % 2 != 0).toSet\n        val\
    \ primesLen = primals.size\n        val res = lens.filter(w => w%2 == 0).filter(w\
    \ => primals.contains(w)).mkString(\" \")\n        if(maxWordLen < primesLen)\
    \ {\n            res\n        } else {\n            wordsInSentence(res+\"\\n\"\
    +res)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvqsc7jm7.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimals\e[0m = words.size.toList.filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m).toSet\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value toList is not\
    \ a member of Int - did you mean Int.toInt?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpvqsc7jm7.scala:24:23 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mres\e[0m = lens.filter(\e[36mw\e[0m => w%\e[31m2\e\
    [0m == \e[31m0\e[0m).filter(\e[36mw\e[0m => primals.contains(w)).mkString(\e[31m\"\
    \ \"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  value filter is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659979283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var counts = HashMap[Int, Int]()\n        var\
    \ result: mutable.StringBuilder = new mutable.StringBuilder\n\n        for (word\
    \ <- sentence.split(\" \")){\n            if (counts.get(word.length) == null){\n\
    \                counts.put(word.length, 1)\n            }else{\n            \
    \    counts(word.length)+= 1\n            }\n        }\n\n        for (i <- counts.keys){\n\
    \            if((counts(i)*(i+1)) < (counts.values.sum * counts.values.sum)){\n\
    \                result.append(\"(\" + i + \")\")\n            }\n        }\n\n\
    \        result.result()\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4csh49sq.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mresult\e[0m: mutable.StringBuilder\
    \ = \e[33mnew\e[0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m              \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4csh49sq.scala:20:48\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e\
    [36mresult\e[0m: mutable.StringBuilder = \e[33mnew\e[0m mutable.StringBuilder\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val m = sentence.split(' ')\n        m.sortWith(_.length\
    \ > _.length)\n        var result = m.map( x => x )\n        for (i <- 1 until\
    \ result.length-1) result :+ result(i+1)\n        result.distinct\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxy9bgp79.scala:23:15\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        result.distinct\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e\
    [1m\e[31mArray\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // write your code here\n        val sentenceArr\
    \ = sentence.split(\" \").toList\n        val res = new mutable.StringBuilder()\n\
    \        val primeSet = mutable.HashSet[Int]()\n        val maxLength = (sentenceArr.length.toInt\
    \ - 1) * 7\n        val primeFactors = mutable.ArraySet[Int]()\n        var maxPrimeFactor\
    \ = maxLength\n        for (i<-0 until sentenceArr.length) {\n            if (primeSet.contains(i))\n\
    \                continue\n            val temp = i * i\n            if (temp\
    \ > maxPrimeFactor) {\n                maxPrimeFactor = temp\n            }\n\
    \            if (primeFactors.contains(temp)) {\n                if (primeFactors.contains(temp\
    \ - temp)) {\n                    if (primeFactors.contains(temp - temp - temp))\
    \ {\n                        if (primeFactors.contains(temp - temp - temp - temp))\
    \ {\n                            res.append(\" \")\n                        }\n\
    \                    }\n                }\n            }\n            primeFactors\
    \ += temp\n            primeSet += i\n        }\n        res+=(primeFactors.mkString(\"\
    \ \")).trim\n        res+=(\" \").trim\n        return res.reverse.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5vp0l26.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = \e[33mnew\e[0m\
    \ mutable.StringBuilder()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5vp0l26.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimeSet\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpa5vp0l26.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ArraySet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5vp0l26.scala:28:16 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979279
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        var\
    \ result = \"\"\n        for (x <- words) {\n            if (x.length == 1 ||\
    \ x.length % 2 == 1) {\n                result += x\n            }\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptviulb19.scala:29)\n\tat Problem.main(tmptviulb19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = mutable.ListBuffer[Int]()\n        var primeFound = false\n       \
    \ for (word <- words) {\n            var primeNumber = (word.size / 2).toInt\n\
    \            while (primeNumber != 0) {\n                if (isPrime(primeNumber))\
    \ {\n                    primeFound = true\n                    primes += primeNumber\n\
    \                }\n                primeNumber /= 2\n            }\n        }\n\
    \        if (primeFound)\n            return words.filter( word => primes.contains(word.size\
    \ / 2)).mkString(\" \")\n        else\n            return \"No Primes\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2350ku_2.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2350ku_2.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mif\e[0m (isPrime(primeNumber))\
    \ {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // write your code here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplnyme8lt.scala:18:54\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mwordsInSentence\e\
    [0m(\e[36msentence\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                                      ^\e[0m\n\e\
    [31m   |\e[0m                                                      Found:    Unit\n\
    \e[31m   |\e[0m                                                      Required:\
    \ String\n\e[31m19 |\e[0m        \e[34m// write your code here\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var list = new Array[String](0)\n        var\
    \ primeWords = new Array[String](0)\n        var currentWord = new String\n  \
    \      var primes = 0\n        for (word <- sentence) {\n            for (i <-\
    \ 1 to word.length-1) {\n                currentWord = word + word.charAt(i)\n\
    \                if (prime(currentWord.length)) {\n                    if (list.contains(currentWord))\
    \ {\n                        primeWords = primeWords :+ currentWord\n        \
    \            }\n                    else {\n                        list :+= currentWord\n\
    \                        primes = primes + 1\n                    }\n        \
    \        }\n            }\n        }\n        if (primes > 0 && primes != sentence.length)\n\
    \            primeWords = primeWords :+ (sentence - primeWords.drop(1))\n    \
    \    if (primeWords.length != 0)\n            primeWords = primeWords.reverse.mkString(\"\
    \ \")\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpazz2tk1g.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m (i <- \e[31m1\e[0m to word.length-\e\
    [31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           value length is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpazz2tk1g.scala:25:42 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                currentWord = word + word.charAt(i)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                    value charAt is not a member\
    \ of Char\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpazz2tk1g.scala:26:20\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e\
    [0m (prime(currentWord.length)) {\n\e[31m\e[31m   |\e[0m                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: prime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpazz2tk1g.scala:38:49 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            primeWords = primeWords :+ (sentence - primeWords.drop(\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpazz2tk1g.scala:40:52 --------------------\e[0m\e\
    [0m\n\e[31m40 |\e[0m            primeWords = primeWords.reverse.mkString(\e[31m\"\
    \ \"\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    String\n\e[31m   |\e[0m\
    \                         Required: "
  stdout: ''
  timestamp: 1659979286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val primes = scala.collection.mutable.ListBuffer[String]()\n\
    \        var index = 0\n        while (index != sentence.length) {\n         \
    \   val word = sentence.substring(index, index + 1)\n            if (primes.contains(word))\
    \ {\n                primes += word\n            } else {\n                if\
    \ (isPrime(word.length)) {\n                    primes += word\n             \
    \   } else {\n                    index++\n                }\n            }\n\
    \            index++\n        }\n        primes.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1bmkh5jq.scala:29:27 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    index++\n\e[31m\e[31m   |\e[0m  \
    \                         ^\e[0m\n\e[31m   |\e[0m                           expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmp1bmkh5jq.scala:32:19 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m            index++\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e\
    [31m   |\e[0m                   expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1bmkh5jq.scala:26:20\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e\
    [0m (isPrime(word.length)) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1bmkh5jq.scala:34:15 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        primes.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var result = new scala.collection.mutable.HashSet[String]();\n\
    \        for(i <- 0 until sentence.length-1) {\n            val word = sentence.substring(i,i+1).trim();\n\
    \            if(word.length == 0){\n                continue;\n            }\n\
    \            val length = prime(word.length);\n            for(j <- 0 until (length-1))\
    \ {\n                if(word.substring(j,j+1).trim.equals(word.substring(0,j+1)))\
    \ {\n                    result.add(word.substring(0,j+1));\n                }\n\
    \            }\n        }\n        result.mkString(\" \");\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv0qtowpi.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                continue;\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv0qtowpi.scala:25:25\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mlength\e[0m = prime(word.length);\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: prime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // TODO: write your code in Scala\n        def\
    \ isPrime(n: Int) : Boolean = {\n            if (n == 1 || n == 0)\n         \
    \       return true\n            val limit = (math.floor(math.sqrt(n).toFloat)\
    \ + 1).toInt\n            for( i <- 2 to limit ) {\n                if(n%i ==\
    \ 0)\n                return false\n            }\n            return true\n \
    \       }\n        val newWords = ListBuffer[String]()\n        sentence.split(\"\
    \ \").foreach(word => {\n            val newWord = newWords.filter(_ == word).takeWhile(_\
    \ => isPrime(_.length)).head\n            newWords.append(newWord)\n        })\n\
    \        return newWords.foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpe4cylhcb.scala:32:76 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = newWords.filter(_\
    \ == word).takeWhile(_ => isPrime(_.length)).head\n\e[31m\e[31m   |\e[0m     \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$3 of expanded function:\n\e[31m\
    \   |\e[0m   _$3 => _$3.length.\n1 error found\n"
  stdout: ''
  timestamp: 1659979283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var result : String = \"\"\n        var words\
    \ : Array[String] = new Array[String](sentence.length)\n        var size : Int\
    \ = 0\n        var prime : Boolean = false\n\n        for(i <- 0 until sentence.length){\n\
    \            if(sentence(i) == \" \") {\n                words ::= sentence(i).split(\"\
    \")\n                size += 1\n            }\n        }\n\n        for(i = 0\
    \ to size) {\n            prime = true\n            for(j = 0 to size - 1){\n\
    \                if(words(j).length != words(j+1).length)\n                  \
    \  prime = false\n            }\n\n            if(prime){\n                result\
    \ += words(0)\n            }\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp40fw87vy.scala:31:14 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mfor\e[0m(i = \e[31m0\e[0m to size) {\n\e\
    [31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m              ')' expected,\
    \ but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp40fw87vy.scala:31:27\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mfor\e[0m(i\
    \ = \e[31m0\e[0m to size) {\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           '<-' expected, but '{' found\n\e\
    [31m\e[31m-- Error: /tmp/tmp40fw87vy.scala:25:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m(sentence(i) == \e[31m\" \"\e\
    [0m) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp40fw87vy.scala:26:22 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                words ::= sentence(i).split(\e[31m\"\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \               value ::= is not a member of Array[String]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp40fw87vy.scala:26:38 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                words ::= sentence(i).split(\e[31m\"\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value split is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp40fw87vy.scala:41:9 -------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0mvalue foreach is not a member of Null, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collect"
  stdout: ''
  timestamp: 1659979289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var result : String = sentence\n        var\
    \ words : List[String] = sentence.split(\" \").filter(x => x.toCharArray.forall(_.isLetter)).toList\n\
    \        while (words.length > 1) {\n            var newWords : List[String] =\
    \ words.takeWhile(_ => words.forall(_ => _.isDigit)).mkString\n            var\
    \ newWords2 : List[String] = words.takeWhile(_ => !words.forall(_ => _.isDigit)).mkString\n\
    \            if (newWords.map(_.length) == newWords2.map(_.length)) {\n      \
    \          result = newWords\n                words = newWords2\n            }\
    \ else {\n                result = result.replaceFirst(s\"$newWords\", \"\")\n\
    \                words = words.tail\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp2vq_nn0m.scala:22:81 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mvar\e[0m \e[36mnewWords\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m] = words.takeWhile(_ => words.forall(_ => _.isDigit)).mkString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                         ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$4\
    \ of expanded function:\n\e[31m   |\e[0m   _$4 => _$4.isDigit.\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmp2vq_nn0m.scala:23:83 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mvar\e[0m \e[36mnewWords2\e[0m : \e\
    [35mList\e[0m[\e[35mString\e[0m] = words.takeWhile(_ => !words.forall(_ => _.isDigit)).mkString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                           ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$7 of expanded function:\n\e[31m   |\e[0m   _$7 => _$7.isDigit.\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2vq_nn0m.scala:25:25 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                result = newWords\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \      Found:    (newWords : List[String])\n\e[31m   |\e[0m                  \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val strs = sentence.split(\" \").map(_.toUpperCase)\n\
    \        strs.filter(x => primeString(x)).map(x => x.toUpperCase).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoeu9gqxi.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        strs.filter(\e[36mx\e[0m => primeString(x)).map(\e\
    [36mx\e[0m => x.toUpperCase).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \       Not found: primeString\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // write your code here\n        var arr = sentence.split(\"\
    \ \").filter(x => !x.isEmpty)\n        var result = \"\"\n        for (i <- arr.indices)\n\
    \        if (arr(i).isPrime) {\n            result += arr(i) + \" \"\n       \
    \ }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbz4rfpur.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m (arr(i).isPrime) {\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value isPrime\
    \ is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659979287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val strArr = sentence.split(\" \").toList\n\
    \        strArr.foreach(word => {\n            val str = scala.math.pow(word.len(),\
    \ 2)\n            if(str.modulo(2).isZero) println(word+\" length \"+str.len+\"\
    \ modulus \"+str.modulus)\n        })\n        strArr.sort\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqfovzc2k.scala:21:42 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mstr\e[0m = scala.math.pow(word.len(),\
    \ \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value len is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqfovzc2k.scala:22:19\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m(str.modulo(\e\
    [31m2\e[0m).isZero) println(word+\e[31m\" length \"\e[0m+str.len+\e[31m\" modulus\
    \ \"\e[0m+str.modulus)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               value modulo is not a member of Double\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpqfovzc2k.scala:22:65 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m(str.modulo(\e[31m2\e[0m).isZero)\
    \ println(word+\e[31m\" length \"\e[0m+str.len+\e[31m\" modulus \"\e[0m+str.modulus)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                                     value\
    \ len is not a member of Double\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqfovzc2k.scala:22:85\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m(str.modulo(\e\
    [31m2\e[0m).isZero) println(word+\e[31m\" length \"\e[0m+str.len+\e[31m\" modulus\
    \ \"\e[0m+str.modulus)\n\e[31m\e[31m   |\e[0m                                \
    \                                                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 value modulus is not a member of Double\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpqfovzc2k.scala:24:15 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        strArr.sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sort is not a member of List[String], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import collection.convert.ImplicitConversions.seq AsJavaList\n\e[31m   |\e[0m\
    \  import collection"
  stdout: ''
  timestamp: 1659979291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // (1) Remove all letters and replace them with\
    \ a space\n        val str = sentence.filter( x => x.isLetter)\n        val str1\
    \ = str.map( x => \" \" + x)\n        // (2) replace double space with one space\n\
    \        val str2 = str1.filter( x => x.contains(\" \"))\n        // (3) map string\
    \ with length of string\n        val str3 = str2.map( x => (x + \"length\").length)\n\
    \        // (4) filter prime numbers\n        val str4 = str3.filter( x => x %\
    \ 2 != 0)\n        // (5) sort string\n        val str5 = str4.sortWith(_.length\
    \ < _.length)\n        // (6) join strings\n        val str6 = str5.mkString(\"\
    \ \")\n        return str6\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg3mpdyfm.scala:29:35 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mstr5\e[0m = str4.sortWith(_.length\
    \ < _.length)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value length is not a member\
    \ of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659979290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var result = \"\"\n        for (word <- sentence.split(\"\
    \ \")) {\n            if (word.length == 1) {\n                result += word\n\
    \            } else {\n                // Sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)\
    \ \n                // https://en.wikipedia.org/wiki/Prime_number\n          \
    \      for (i <- 2 to word.length) {\n                    if (isPrime(word.length))\
    \ {\n                        result += \" \" + word.substring(i)\n           \
    \         }\n                }\n            }\n        }\n        result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5_jxcg_e.scala:27:24 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    \e[33mif\e[0m (isPrime(word.length))\
    \ {\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var newString = \"\"\n        val arrayList\
    \ = sentence.split(\" \").map(x => x.toInt)\n        val primeList = getPrimes(arrayList)\n\
    \        primeList.foreach(x => newString += (arrayList.indexOf(x) + 1) + \" \"\
    )\n        newString.substring(0, newString.length - 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphpyqx1u3.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimeList\e[0m = getPrimes(arrayList)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Not found: getPrimes\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        def isPrime(n: Int) : Boolean = {\n        \
    \    val sqrt: Double = Math.sqrt(n)\n            val flag: Boolean = n % 2 !=\
    \ 0\n            val j = 0\n            while ( j * j <= sqrt ) {\n          \
    \      val tmp = n + j * j\n                if ( tmp == n )\n                \
    \    return true\n                if ( flag )\n                    break\n   \
    \             if ( tmp % 2 == 0 )\n                    break\n               \
    \ j += 1\n            }\n            false\n        }\n\n        val wordList:\
    \ List[String] = sentence.split(\" \").filter(_.isLetter).toList\n        val\
    \ result: List[String] = new ListBuffer[String]()\n        wordList.foreach(w\
    \ => {\n            if( isPrime(w.length) )\n                result += w\n   \
    \     })\n        result mkString \" \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc7d829rb.scala:28:20 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc7d829rb.scala:30:20\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpc7d829rb.scala:31:18 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m                j += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean j.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc7d829rb.scala:36:66\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mwordList\e[0m: \e[35mList\e[0m[\e[35mString\e[0m] = sentence.split(\e[31m\"\
    \ \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m                  \
    \                                              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                value isLetter is not a member of String\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc7d829rb.scala:37:35 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m                   Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpc7d829rb.scala:40:23 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                result += w\n\e[31m\e[31m   |\e[0m  \
    \  "
  stdout: ''
  timestamp: 1659979292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val wordLists = sentence.split(\" \")\n    \
    \    var result = \"\"\n        for(wordList <- wordLists) {\n            val\
    \ wordsSet = wordList.toSet\n            if(wordsSet.length == 2 && wordsSet.toList.size\
    \ == 1) {\n                result += wordsSet.toList(0)\n            } else if(wordsSet.length\
    \ == 2 && wordsSet.toList.size == 2) {\n                result += (wordsSet.toList.takeRight(2).mkString(\"\
    \ \"))\n            }\n        }\n        if(result.length == 0 || result == \"\
    \ \") {\n            result = \"no words\"\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw1kfmhrr.scala:23:24 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(wordsSet.length == \e[31m2\e\
    [0m && wordsSet.toList.size == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m        \
    \       ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value length is not\
    \ a member of Set[Char]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw1kfmhrr.scala:25:31\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            } \e[33melse\e\
    [0m \e[33mif\e[0m(wordsSet.length == \e[31m2\e[0m && wordsSet.toList.size == \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      value length is not a member of Set[Char]\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var result = \"\"\n        var isPrime = true\n\
    \        var prime = 0\n        var primeCounter = 0\n        var charCounter\
    \ = 0\n        var word = \"\"\n        for( c <- sentence.chars ){\n        \
    \    charCounter += 1\n            if( c == ' '){\n                prime = charCounter\n\
    \                primeCounter += 1\n                if( primeCounter == 2 ){\n\
    \                    primeCounter = 0\n                    isPrime = true\n  \
    \              }else if( primeCounter > 2 ){\n                    isPrime = false\n\
    \                }\n            }\n            if( !isPrime ){\n             \
    \   result = result + c\n            }\n            if( isPrime ){\n         \
    \       if( prime == charCounter ){\n                    word = \"\"\n       \
    \         }else{\n                    word = word + c\n                }\n   \
    \         }\n        }\n        if( result != \"\" ){\n            result\n  \
    \      }else{\n            result\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3c46rqqd.scala:25:18 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m( c <- sentence.chars ){\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue foreach\
    \ is not a member of java.util.stream.IntStream - did you mean IntStream.forEach?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var result : mutable.Set[Int] = mutable.Set()\n\
    \        var words : String = sentence.split(\" \")\n        for(word <- words)\n\
    \        {\n            if(!result.contains(word.length.toInt))\n            {\n\
    \                result ++= word.length.toInt\n            }\n        }\n    \
    \    val result =  result.toSeq\n        result.sort\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpukjl32fs.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m =  result.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult\
    \ is already defined as \e[33mvariable\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpukjl32fs.scala:19:21\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e\
    [36mresult\e[0m : mutable.Set[\e[35mInt\e[0m] = mutable.Set()\n\e[31m\e[31m  \
    \ |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpukjl32fs.scala:19:40\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e\
    [36mresult\e[0m : mutable.Set[\e[35mInt\e[0m] = mutable.Set()\n\e[31m\e[31m  \
    \ |\e[0m                                        ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpukjl32fs.scala:20:43 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mwords\e[0m : \e[35mString\e\
    [0m = sentence.split(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \       Found:    \e[1m\e[31mArray\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\
    \e[31m   |\e[0m                             Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659979291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val arr = sentence.split(\" \")\n        var\
    \ str = \"\"\n        for (i <- 0 until arr.length) {\n            if (arr(i).length\
    \ != 3 || arr(i).isDigit) {\n                str += arr(i) + \" \"\n         \
    \   }\n        }\n        str.trim\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeuiq0p4v.scala:22:45 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (arr(i).length != \e[31m3\e\
    [0m || arr(i).isDigit) {\n\e[31m\e[31m   |\e[0m                              \
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ value isDigit is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659979292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\"\\\\s+\").map(word\
    \ => word.trim).filter(word => word.length >=1).map(_.toLowerCase).toList\n  \
    \      val primeFactors = primeFactors(words.length)\n        val result = words.filter(word\
    \ => primeFactors.contains(word.length)).mkString(\" \")\n        result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1v1o939n.scala:20:27 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = primeFactors(words.length)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35mprimeFactors\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val list = sentence.split(\" \").toList\n  \
    \      var newSentence = sentence.substring(0,1)\n        var count = List(0)\n\
    \        var temp = List(0)\n        for (word <- list){\n            newSentence\
    \ = newSentence + \" \"+ word\n            if (new String(list).indexOf(word)\
    \ > 0){\n                count = count + 1\n            }\n        }\n       \
    \ for (i <- 0 to count-1){\n            temp = temp.take(i)\n            temp\
    \ += \" \"\n        }\n        return newSentence\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpcyda7key.scala:25:20 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (\e[33mnew\e[0m \e[35mString\e\
    [0m(list).indexOf(word) > \e[31m0\e[0m){\n\e[31m\e[31m   |\e[0m              \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mconstructor\e\
    [0m \e[35mString\e[0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m\
    \   |\e[0m (x$0: StringBuilder): String\n\e[31m   |\e[0m (x$0: StringBuffer):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Byte]): String\n\e[31m   |\e[0m (x$0: Array[Byte],\
    \ x$1: Int, x$2: Int): String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1: String): String\n\e[31m   |\e\
    [0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\
    \e[31m   |\e[0m (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\e\
    [31m   |\e[0m (x$0: Array[Byte], x$1: Int): String\n\e[31m   |\e[0m (x$0: Array[Byte],\
    \ x$1: Int, x$2: Int, x$3: Int): String\n\e[31m   |\e[0m (x$0: Array[Int], x$1:\
    \ Int, x$2: Int): String\n\e[31m   |\e[0m (x$0: Array[Char], x$1: Int, x$2: Int):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Char]): String\n\e[31m   |\e[0m (x$0: String):\
    \ String\n\e[31m   |\e[0m (): String\n\e[31m   |\e[0mmatch arguments ((list :\
    \ List[String]))\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcyda7key.scala:26:30\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                count = count\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of List[Int], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpcyda7key.scala:29:28 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m to"
  stdout: ''
  timestamp: 1659979294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var str = new StringBuilder\n        var index\
    \ = 0\n        for (word <- sentence.split[Char]()) {\n            // Skip the\
    \ words that are not prime numbers.\n            if (isPrime(index)) {\n     \
    \           str.append(word)\n                index++\n            }\n       \
    \ }\n        str.toString()\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpt_ortwyn.scala:25:23 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                index++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmpt_ortwyn.scala:21:30 -----------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mfor\e[0m (word <- sentence.split[\e[35mChar\e[0m]()) {\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35msplit\e[0m in \e[33mclass\e\
    [0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String): Array[String]\n\
    \e[31m   |\e[0m (x$0: String, x$1: Int): Array[String]\n\e[31m   |\e[0mmatch type\
    \ arguments [Char] and arguments ()\n2 errors found\n"
  stdout: ''
  timestamp: 1659979290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val tokens = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = tokens.map(new PrimeFinder()).collect{case PrimeFinder(p)\
    \ => p}\n        val res = tokens.filter{p => primes.contains(p)}.toList\n   \
    \     res.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp09om6of4.scala:19:50 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mtokens\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).toList\n\e[31m\e[31m   |\e[0m             \
    \                                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                       value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp09om6of4.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = tokens.map(\e\
    [33mnew\e[0m \e[35mPrimeFinder\e[0m()).collect{\e[33mcase\e[0m PrimeFinder(p)\
    \ => p}\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: type PrimeFinder\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp09om6of4.scala:20:64\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = tokens.map(\e[33mnew\e[0m \e[35mPrimeFinder\e[0m()).collect{\e\
    [33mcase\e[0m PrimeFinder(p) => p}\n\e[31m\e[31m   |\e[0m                    \
    \                                            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                  Not found: PrimeFinder\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp09om6of4.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        res.sorted\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e\
    [31mList\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        def isPrime(n: Int) : Boolean = {\n        \
    \    val l = (Math.sqrt(n) + 1) * 2\n            l % 2 == 0 && l != n\n      \
    \  }\n        val words = sentence.split(\" \").filter(_.isLetter).distinct\n\
    \        if(words.length < 2) \"\"\n        else words.filter(isPrime).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdw12ng4a.scala:23:49 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(_.isLetter).distinct\n\e[31m\e[31m   |\e[0m           \
    \                                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        value isLetter is not a member of String\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdw12ng4a.scala:25:26 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33melse\e[0m words.filter(isPrime).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m\
    \   |\e[0m                          Found:    (n : String)\n\e[31m   |\e[0m  \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\"\\\\s+\")\n   \
    \     val wordsLength = words.length\n        var primesSet = scala.collection.mutable.Set[Long]()\n\
    \        var primes = 0\n        var newSentence = sentence.split(\"\").foldLeft(\"\
    \")(\n            (acc, word) => acc + \" \" + word,\n            acc => acc\n\
    \        )\n        for (i <- 1 to wordsLength) {\n            if (primesSet.contains(primes)\
    \ || primesSet.contains(i - primes)) {\n                newSentence = newSentence.substring(0,\
    \ newSentence.length - 1) + \" \" + newSentence.substring(newSentence.length -\
    \ 1, 1)\n                primes = primes + 1\n            } else {\n         \
    \       primesSet = primesSet + i\n                primes = primes + 1\n     \
    \       }\n        }\n        newSentence = newSentence.substring(0, newSentence.length\
    \ - 1) + \" \" + newSentence.substring(newSentence.length - 1)\n        newSentence\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp7qcu2u51.scala:24:13 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            (\e[36macc\e[0m, \e[36mword\e[0m) => acc\
    \ + \e[31m\" \"\e[0m + word,\n\e[31m\e[31m   |\e[0m             ^^^\e[0m\n\e[31m\
    \   |\e[0m             Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \             I could not infer the type of the parameter acc.\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmp7qcu2u51.scala:24:18 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            (\e[36macc\e[0m, \e[36mword\e[0m) => acc\
    \ + \e[31m\" \"\e[0m + word,\n\e[31m\e[31m   |\e[0m                  ^^^^\e[0m\n\
    \e[31m   |\e[0m                  Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                  I could not infer the type of the parameter word.\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmp7qcu2u51.scala:25:12 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[36macc\e[0m => acc\n\e[31m\e[31m   |\e\
    [0m            ^^^\e[0m\n\e[31m   |\e[0m            Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m            I could not infer the type of the parameter\
    \ acc.\n3 errors found\n"
  stdout: ''
  timestamp: 1659979292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val result = mutable.Set[String]()\n       \
    \ sentence.split(\" \").foreach(word => {\n            val len = word.length\n\
    \            if(len == 2) {\n                result.add(word)\n            } else\
    \ if (len == 3) {\n                if(result.contains(word)) {\n             \
    \       result.remove(word)\n                }\n            }\n        })\n  \
    \      result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvkxdsivj.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val chars = sentence.split(\" \").toList.map(_.toChar)\n\
    \        val result = new mutable.ListBuffer[String]()\n        for (c <- chars)\
    \ {\n            val p = gcd(c+2, chars.size.toLong)\n            if (p==1) {\n\
    \                result += c\n            }\n        }\n        result mkString\
    \ \" \"\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnftt9agx.scala:19:53 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).toList.map(_.toChar)\n\e[31m\e[31m   |\e[0m                  \
    \                                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                     value toChar is not a member of String\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnftt9agx.scala:20:25 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnftt9agx.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36mp\e[0m = gcd(c+\e[31m2\e[0m, chars.size.toLong)\n\e[31m\e[31m   |\e[0m\
    \                    ^^^\e[0m\n\e[31m   |\e[0m                    Not found: gcd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnftt9agx.scala:22:25\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36mp\e[0m = gcd(c+\e[31m2\e[0m, chars.size.toLong)\n\e[31m\e[31m   |\e[0m\
    \                        ^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of Nothing,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659979297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val result = mutable.ArrayBuffer.empty[String]\n\
    \        val length = sentence.length\n        for( i <- 0 until length )\n  \
    \          if( isPrime(i) && isPrime(length-i) && sentence.charAt(i) == ' ')\n\
    \                result.append((sentence.subString(i+1, length-i)))\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbke3a6ur.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbke3a6ur.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m( isPrime(i) && isPrime(length-i)\
    \ && sentence.charAt(i) == \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: isPrime\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        def isPrime(candidate: Int) : Boolean = {\n\
    \            def isPrimeInner(candidate: Int) : Boolean = {\n                if\
    \ (candidate == 1) {\n                    true\n                } else {\n   \
    \                 candidate == 2\n                }\n            }\n         \
    \   for {\n                i <- 2 to candidate - 1\n                factors <-\
    \ List(2, i).toSet\n            }{\n                if (!factors.isEmpty) {\n\
    \                    isPrimeInner(candidate)\n                }\n            }\n\
    \        }\n        val newWords = ListBuffer[String]()\n        def wordCount(s\
    \ : String) : Int = s.split(\" \").size\n        sentence match {\n          \
    \  case \"\" => newWords\n            case \" \" => newWords\n            case\
    \ x if x.toInt % 2 == 0 => newWords ++ List(x.toString.substring(0,1))\n     \
    \       case x if x.toInt % 2 == 1 => newWords ++ List(x.toString.substring(0,x.toString.length-1))\n\
    \            case x => for (i <- 1 to wordCount(x); p <- isPrime(x.toInt)) {\n\
    \                val newString = x.substring(0, i) + x.substring(i+1, x.length)\n\
    \                if (newString.length == wordCount(newString))\n             \
    \       newWords ++ List(newString)\n            }\n        }\n        newWords.toList().sortWith(compareString).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_00fq0ir.scala:31:29 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                \e[33mif\e[0m (!factors.isEmpty) {\n\e\
    [31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     value isEmpty is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp_00fq0ir.scala:43:56 ------------------------\e[0m\e\
    [0m\n\e[31m43 |\e[0m            \e[33mcase\e[0m x => \e[33mfor\e[0m (i <- \e[31m1\e\
    [0m to wordCount(x); p <- isPrime(x.toInt)) {\n\e[31m\e[31m   |\e[0m         \
    \                                               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                value foreach is not a member of Boolean\n\
    \e[31m\e[31m-- Error: /tmp/tmp_00fq0ir.scala:49:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        newWords.toList().sortWith(compareString).toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument\
    \ for parameter n of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mtrait\e[0m \e\
    [35mLinearSeqOps\e[0m: (n: Int): String\n3 errors found\n"
  stdout: ''
  timestamp: 1659979298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // write your code here\n        var primeString\
    \ = \"\"\n        var firstLettersCount = 0\n        val listOfWords = sentence.split(\"\
    \ \")\n        var allWordsLength = sentence.split(\" \").length\n        for(word\
    \ in listOfWords) {\n            if(isPrime(word.length)) {\n                firstLettersCount\
    \ += 1\n                if(firstLettersCount > 1) {\n                    primeString\
    \ += \" \" + word\n                }\n            } else {\n                primeString\
    \ += \" \" + word\n            }\n        }\n        primeString.trim()\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf8bplxhx.scala:24:33 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m(word in listOfWords) {\n\e[31m\e\
    [31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m        \
    \                         '<-' expected, but '{' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpf8bplxhx.scala:35:4 ----------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m  \
    \  '<-' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf8bplxhx.scala:33:9\
    \ -------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue withFilter is not a member of\
    \ Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659979300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        def isPrime(n : Int) : Boolean = {\n       \
    \     val upperBound = math.pow(math.e, n)\n            for(prime <- 1 to upperBound)\
    \ yield if(n % prime == 0) false else true\n        }\n        val words = sentence.split(\"\
    \ \")\n        var res = new collection.mutable.ListBuffer[String]()\n       \
    \ for(x <- words) {\n            if(x.toCharArray().forall(c => c <= 'z' || c\
    \ >= 'a')) res.append(x)\n        }\n        res.toList.sortWith((x,y) => x.length\
    \ <= y.length).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7a5iy_q1.scala:20:43 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mupperBound\e[0m = math.pow(math.e,\
    \ n)\n\e[31m\e[31m   |\e[0m                                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      value e is not a member of\
    \ math\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7a5iy_q1.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m(prime\
    \ <- \e[31m1\e[0m to upperBound) \e[33myield\e[0m \e[33mif\e[0m(n % prime == \e\
    [31m0\e[0m) \e[31mfalse\e[0m \e[33melse\e[0m \e[31mtrue\e[0m\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                  Found:    (upperBound : Double)\n\e[31m   |\e[0m          \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var retString = \"\"\n        for (word <- sentence.split(\"\
    \ \")) {\n            var count = 0\n            for (letter <- word.split(\"\"\
    ))\n            {\n                if (letter > 'z')\n                {\n    \
    \                count = count + 1\n                }\n            }\n       \
    \     if (count == 2)\n            {\n                retString = retString +\
    \ word.trim() + '\\n'\n            }\n        }\n        return retString.trim()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3llb7sz1.scala:24:29\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m\
    \ (letter > \e[31m'z'\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \  ^^^\e[0m\n\e[31m   |\e[0m                             Found:    (\e[31m'z'\e\
    [0m : Char)\n\e[31m   |\e[0m                             Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979299
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        if(sentence == null || sentence.length <= 0)\
    \ return null\n        var index = 0\n        var newIndex = 0\n        var newString\
    \ = \"\"\n        var count = 0\n        val words = sentence.split(\" \")\n \
    \       while(index < words.length) {\n            count += words.length - 1\n\
    \            index += 1\n            while(count != 0) {\n                if(words.length\
    \ - 1 != newString.length) newString += \" \"\n                newString += words(newIndex)\n\
    \                count -= 1\n                newIndex += 1\n            }\n  \
    \          newIndex = 0\n            count = 0\n        }\n        return newString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpknp8urjv.scala:40)\n\tat Problem.main(tmpknp8urjv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var finalResult = \"\"\n        var primes =\
    \ mutable.ListBuffer[Int]()\n        for (word <- sentence.split(\" \").toList)\
    \ {\n            val word = word.toInt\n            if (primes.contains(word))\
    \ {\n                continue\n            }\n            primes += word\n   \
    \         val str = primes.mkString(\" \")\n            finalResult += str\n \
    \       }\n        finalResult\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp28z1a6yz.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp28z1a6yz.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ reuslt = new StringBuilder()\n        val primes = words.map(x => x.length)\n\
    \        primes.filter { x => x % 2 != 0 }.foreach { x => reuslt.append(x) }\n\
    \        primes.foreach { x => reuslt.append(x) }\n        words.size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppwsvpior.scala:24:14\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        words.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Int\n\e\
    [31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var primeFactors : List[Int] = List(1)\n   \
    \     var newSentence = sentence\n        var primeFactorIndex : Int = -1\n  \
    \      var foundPrimeFactor : Boolean = false\n        var counter : Int = 0\n\
    \        var count : Int = 0\n        \n        while(foundPrimeFactor == false\
    \ && primeFactorIndex < (primeFactors.length - 1)) {\n            counter += 1\n\
    \            val primeFactor = primeFactors(primeFactorIndex)\n            if(counter\
    \ % primeFactor == 0) {\n                foundPrimeFactor = true\n           \
    \ }\n            primeFactorIndex += 1\n        }\n        \n        if(foundPrimeFactor\
    \ == false) {\n            newSentence = sentence + \" is a nice day!\"\n    \
    \        primeFactors = List(3)\n            primeFactorIndex = 0\n          \
    \  foundPrimeFactor = true\n        }\n        \n        while(foundPrimeFactor\
    \ == true && primeFactorIndex < (primeFactors.length - 1)) {\n            counter\
    \ += 1\n            val primeFactor = primeFactors(primeFactorIndex)\n       \
    \     if(counter % primeFactor == 0) {\n                foundPrimeFactor = false\n\
    \            }\n            primeFactorIndex += 1\n        }\n        \n     \
    \   while(foundPrimeFactor == true && primeFactorIndex > 0) {\n            val\
    \ primeFactor = primeFactors(primeFactorIndex)\n            if(primeFactorIndex\
    \ % 2 == 0) {\n                counter += primeFactor\n            }\n       \
    \     primeFactorIndex -= 1\n            if(counter % primeFactor == 0) {\n  \
    \              foundPrimeFactor = false\n            }\n        }\n        \n\
    \        val newWordList = newSentence.split(\" \").toList\n        \n       \
    \ while(foundPrimeFactor == true && primeFactorIndex < primeFactors.length) {\n\
    \            counter += 1\n            val primeFactor = primeFactors(primeFactorIndex)\n\
    \            if(counter % primeFactor == 0) {\n                foundPrimeFactor\
    \ = false\n            }\n            primeFactorIndex += 1\n        }\n     \
    \   \n        val newWordListSorted = newWordList.sortBy(_.length)\n        \n\
    \        if(newWordListSorted.size == primeFactors.length) {\n            newSentence\
    \ = \"\"\n            primeFactors = List(1)\n            primeFactorIndex = 0\n\
    \            foundPrimeFactor = false\n        }\n        \n        val newSentencesList\
    \ = newWordList.map(word => word + \" \" + newSentence)\n        val newSentencesListSorted\
    \ = newSentencesList.sortBy(_.length)\n        \n        newSentencesListSorted.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.wordsInSentence(tmpjugnc_e4.scala:28)\n\tat Problem$.main(tmpjugnc_e4.scala:88)\n\
    \tat Problem.main(tmpjugnc_e4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var result = \"\"\n        for (word <- sentence.split(\"\
    \\\\s+\")) result += (word.length)\n        if (result < 2) return \"\"\n    \
    \    for (x <- 0 until result)\n            if (isPrime(x % result))\n       \
    \         return sentence.substring(0, x)\n        return sentence\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkd28_3s6.scala:21:21\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (result\
    \ < \e[31m2\e[0m) \e[33mreturn\e[0m \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                  ^\e[0m\n\e[31m   |\e[0m                     Found:    (\e[31m2\e\
    [0m : Int)\n\e[31m   |\e[0m                     Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkd28_3s6.scala:22:26 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (x <- \e[31m0\e[0m until result)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        Found:    (result : String)\n\e[31m   |\e[0m        \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkd28_3s6.scala:23:16 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            \e[33mif\e[0m (isPrime(x % result))\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: isPrime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpkd28_3s6.scala:23:26 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (isPrime(x % result))\n\e[31m\e\
    [31m   |\e[0m                        ^^^\e[0m\n\e[31m   |\e[0m None of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m%\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float):\
    \ Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e\
    [31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e\
    [0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments ((result : String))\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        var\
    \ ans = \"\"\n        for (word <- words) {\n            val count = words.count(x\
    \ => x.size == word.size && x.toString.size == word.toString.length)\n       \
    \     if (count == 2) {\n                ans = ans + \" \" + word\n          \
    \  }\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsozbrwmf.scala:30)\n\tat Problem.main(tmpsozbrwmf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(!_.isDigit)\n\
    \        val primes = words.map(word => {\n            val number = BigInt(word)\n\
    \            val isPrime = true\n            for(i <- 2 to number.toInt) if(number.mod(i).isZero)\
    \ isPrime = false\n            if(isPrime) number\n        }).filter(_ > 2)\n\
    \        words.zip(primes).map { case (word, number) => word + \" \"+ number }.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7idminvn.scala:19:50 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(!_.isDigit)\n\e[31m\e[31m   |\e[0m                    \
    \                            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                value isDigit is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7idminvn.scala:23:57 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m(i <- \e[31m2\e[0m to number.toInt)\
    \ \e[33mif\e[0m(number.mod(i).isZero) isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value isZero is not a member\
    \ of BigInt\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp7idminvn.scala:23:73 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m(i <- \e[31m2\e[0m to number.toInt)\
    \ \e[33mif\e[0m(number.mod(i).isZero) isPrime = \e[31mfalse\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                                                 ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Reassignment\
    \ to val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7idminvn.scala:25:20\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        }).filter(_ > \e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ > is not a member of Unit, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordering.Unit.mkOrderingOps\n\e\
    [31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\
    \  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7idminvn.scala:26:76 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        words.zip(primes).map { \e[33mcase\e[0m (word, number)\
    \ => word + \e[31m\" \"\e[0m+ number }.toLis"
  stdout: ''
  timestamp: 1659979305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Your code goes here\n        val arr = sentence.split(\"\
    \ \").map(_.toInt)\n        val length = arr.count{ case(i) => i%2==0}\n     \
    \   if(length==0){\n            \"\"\n        }else{\n            val arr = sentence.split(\"\
    \ \").map(_.toInt)\n            val newArr = arr.filter{case(i) => i%2==0}\n \
    \           val arr1 = newArr.toSeq.sortBy(i => i).reverse\n            val newStr\
    \ = arr1.mkString(\" \")\n            val newArr = newArr.filter{case(i) => i%2==0}\n\
    \            val arr2 = newArr.toSeq.sortBy(i => i).reverse\n            val newStr\
    \ = arr2.mkString(\" \")\n            val newArr = newArr.filter{case(i) => i%2==0}\n\
    \            val arr3 = newArr.toSeq.sortBy(i => i).reverse\n            val newStr\
    \ = arr3.mkString(\" \")\n            val newArr = newArr.filter{case(i) => i%2==0}\n\
    \            val arr4 = newArr.toSeq.sortBy(i => i).reverse\n            val newStr\
    \ = arr4.mkString(\" \")\n            val newArr = newArr.filter{case(i) => i%2==0}\n\
    \            val arr5 = newArr.toSeq.sortBy(i => i).reverse\n            val newStr\
    \ = arr5.mkString(\" \")\n            val newArr = newArr.filter{case(i) => i%2==0}\n\
    \            val arr6 = newArr.toSeq.sortBy(i => i).reverse\n            val newStr\
    \ = arr6.mkString(\" \")\n            val newArr = newArr.filter{case(i) => i%2==0}\n\
    \            val arr7 = newArr.toSeq.sortBy(i => i).reverse\n            val newStr\
    \ = arr7.mkString(\" \")\n            val newArr = newArr.filter{case(i) => i%2==0}\n\
    \            val arr8 = newArr.toSeq.sortBy(i => i).reverse\n            val newStr\
    \ = arr8.mkString(\" \")\n            val newArr = newArr.filter{case(i) => i%2==0}\n\
    \            val arr9 = newArr.toSeq.sortBy(i => i).reverse\n            val newStr\
    \ = arr9.mkString(\" \")\n            val newArr = newArr.filter{case(i) => i%2==0}\n\
    \            val arr10 = newArr.toSeq.sortBy(i \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp80a1qg3e.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp80a1qg3e.scala:67:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m67 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp80a1qg3e.scala:29:16 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m            \e[33mval\e[0m \e[36mnewArr\e[0m = newArr.filter{\e[33mcase\e\
    [0m(i) => i%\e[31m2\e[0m==\e[31m0\e[0m}\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewArr is already defined as \e[33mvalue\e[0m \e[35mnewArr\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp80a1qg3e.scala:31:16 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m            \e[33mval\e[0m \e[36mnewStr\e[0m = arr2.mkString(\e[31m\"\
    \ \"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewStr is already defined as \e[33mvalue\e[0m \e[35mnewStr\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp80a1qg3e.scala:32:16 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m            \e[33mval\e[0m \e[36mnewArr\e[0m = newArr.filter{\e[33mcase\e\
    [0m(i) => i%\e[31m2\e[0m==\e[31m0\e[0m}\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewArr is already defined as \e[33mvalue\e[0m \e[35mnewArr\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp80a1qg3e.scala:34:16 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m            \e[33mval\e[0m \e[36mnewStr\e[0m = arr3.mkString(\e[31m\"\
    \ \"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewSt"
  stdout: ''
  timestamp: 1659979305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val sentenceWords = sentence.split(\" \").map(_.toLower)\n\
    \        val primes = new mutable.LinkedHashSet[Int]()\n        var counter =\
    \ 0\n        sentenceWords.foreach(word => {\n            counter = counter +\
    \ 1\n            var isPrime = true\n            primes.foreach { p =>\n     \
    \           if (p == counter) {\n                    isPrime = false\n       \
    \         }\n            }\n            if (isPrime) {\n                primes.add(counter)\n\
    \            }\n        })\n        val res = new StringBuilder(sentenceWords.size)\n\
    \        for (i<- 0 to sentenceWords.size - 1) {\n            if (primes.contains(i\
    \ + 1)) {\n                res.append(\" \" + sentenceWords(i))\n            }\n\
    \        }\n        res.toString()\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnj88b6du.scala:19:54 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msentenceWords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).map(_.toLower)\n\e[31m\e[31m   |\e[0m                        \
    \                            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                value toLower is not a member of String\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpnj88b6du.scala:19:62 -----------------------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msentenceWords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).map(_.toLower)\n\e[31m\e[31m   |\e[0m                        \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnj88b6du.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = \e[33mnew\e\
    [0m mutable.LinkedHashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(w =>\
    \ w.isLetter).map(_.toInt)\n        val result = for (i <- 0 until words.size)\
    \ yield {\n            if (words(i) == 0) \"\"\n            else (words(i).toInt.toString).padLeft((words(i)\
    \ - 1).toInt)\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp47x530dk.scala:19:54 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).filter(\e[36mw\e[0m => w.isLetter).map(_.toInt)\n\e[31m\e[31m\
    \   |\e[0m                                                    ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp47x530dk.scala:22:43\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e\
    [0m (words(i).toInt.toString).padLeft((words(i) - \e[31m1\e[0m).toInt)\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                 value padLeft is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659979305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val map = mutable.Map[Int, String]()\n     \
    \   for(word <- sentence.split(\" \")){\n            val count = map.getOrElse(word.length,\
    \ 1L)\n            map+= (word.length -> word)\n        }\n        val sortedMap\
    \ = map.toSeq.sortBy(_._1).map { case (_, i) => i -> map.get(_) }.toMap\n    \
    \    val result = sortedMap.keys.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_s7uggua.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_s7uggua.scala:26:5 ---------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        def findPrime(n : Int) : Boolean = {\n     \
    \       if(n < 2) return false\n            val i = 2\n            while(i <=\
    \ Math.sqrt(n)) {\n                if((n % i) == 0) return false\n           \
    \     i += 1\n            }\n            return true\n        }\n        var words\
    \ : List[String] = new ListBuffer[String]()\n        for(word <- sentence.split(\"\
    \ \")) {\n            val n = word.length\n            if(!findPrime(n)) {\n \
    \               words += word\n            }\n        }\n        words += sentence\n\
    \        words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkcvid2mj.scala:24:18 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                i += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean i.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkcvid2mj.scala:28:35 --------------------\e[0m\e[0m\n\e[31m28 |\e[0m\
    \        \e[33mvar\e[0m \e[36mwords\e[0m : \e[35mList\e[0m[\e[35mString\e[0m]\
    \ = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e[35mString\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m                   Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpkcvid2mj.scala:32:22 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                words += word\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of List[String]\
    \ - did you mean List[String].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkcvid2mj.scala:35:14\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        words += sentence\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member\
    \ of List[String] - did you mean List[String].!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Your code here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2fs5s5f2.scala:18:54\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mwordsInSentence\e\
    [0m(\e[36msentence\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                                      ^\e[0m\n\e\
    [31m   |\e[0m                                                      Found:    Unit\n\
    \e[31m   |\e[0m                                                      Required:\
    \ String\n\e[31m19 |\e[0m        \e[34m// Your code here\e[0m\n\e[31m20 |\e[0m\
    \    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val splits = sentence.split(\" \").map(_.toUpperCase).toList\n\
    \        splits.sort().map(_.length).filter(_ > 1).map(_.toString).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7gsr4qpn.scala:20:15 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        splits.sort().map(_.length).filter(_ > \e[31m1\e\
    [0m).map(_.toString).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort is not a member of List[String]\
    \ - did you mean splits.sortBy?\n1 error found\n"
  stdout: ''
  timestamp: 1659979305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val wordsString = sentence.split(' ')\n    \
    \    val primes = new mutable.HashSet[Int]()\n        for(i <- 0 until wordsString.length)\
    \ primes.add(prime(wordsString.apply(i).toChar))\n        wordsString.takeWhile(p\
    \ => primes.contains(prime(p).toChar)).toString + \" \" + wordsString.dropWhile(p\
    \ => primes.contains(prime(p).toChar)).toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9p6sz71b.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n      val wordsString = sentence.split(\" \").map(_.toLowerCase).toSet.toList.sortBy(_._1).map(_._1)\n\
    \      val result: List[String] = wordsString.map {\n        i =>\n          var\
    \ isPrime = true\n          for (j from 2 to ((math.sqrt(2 * i + 1) - 1) / 2))\
    \ {\n            if (i * j == i + j)\n              isPrime = false\n        \
    \  }\n          if (isPrime)\n            \" \" + i\n          else\n        \
    \    i\n      }.filter(x => x.length() > 1).mkString(\" \")\n      result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf7akc9rv.scala:23:61 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m          \e[33mfor\e[0m (j from \e[31m2\e[0m to ((math.sqrt(\e\
    [31m2\e[0m * i + \e[31m1\e[0m) - \e[31m1\e[0m) / \e[31m2\e[0m)) {\n\e[31m\e[31m\
    \   |\e[0m                                                             ^\e[0m\n\
    \e[31m   |\e[0m                                            '<-' expected, but\
    \ '{' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf7akc9rv.scala:29:10\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m          \e[33melse\e\
    [0m\n\e[31m\e[31m   |\e[0m          ^^^^\e[0m\n\e[31m   |\e[0m          '<-' expected,\
    \ but 'else' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf7akc9rv.scala:19:85\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m      \e[33mval\e[0m \e[36mwordsString\e\
    [0m = sentence.split(\e[31m\" \"\e[0m).map(_.toLowerCase).toSet.toList.sortBy(_._1).map(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                           ^^^^\e[0m\n\e[31m   |\e[0m                       \
    \               value _1 is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmpf7akc9rv.scala:19:88\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m      \e\
    [33mval\e[0m \e[36mwordsString\e[0m = sentence.split(\e[31m\" \"\e[0m).map(_.toLowerCase).toSet.toList.sortBy(_._1).map(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mLong\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659979306
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(_.trim)\n\
    \        var max = 0\n        for(i <- 0 to words.length-1){\n            if(words[i].length>max){\n\
    \                max = words[i].length\n            }\n        }\n        val\
    \ primes = Array(1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997)\n        val stringBuilder = new StringBuilder()\n\
    \        for(i <- 0 to words.length-1){\n            val word = words[i].trim\n\
    \            if(word.length == 0){\n                continue\n            }\n\
    \            val isPrime = primes.contains(i)\n            val stringBuilderBuilder\
    \ = new StringBuilder()\n            for(j <- 0 to word.length-1){\n         \
    \       if(word.charAt(j) > max){\n                    break\n               \
    \ }\n                val char = word.charAt(j)\n                stringBuilderBuilder\
    \ += char\n            }\n            stringBuilder.append(stringBuilderBuilder.reverse)\n\
    \        }\n        stringBuilder.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpujlh48qa.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m(words[\e[35mi\e[0m].length>max){\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Not found: type i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpujlh48qa.scala:23:28 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m                max = words[\e[35mi\e[0m].length\n\e[31m\e[31m   |\e[0m   \
    \                         ^\e[0m\n\e[31m   |\e[0m                            Not\
    \ found: type i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpujlh48qa.scala:29:29\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m\
    \ \e[36mword\e[0m = words[\e[35mi\e[0m].trim\n\e[31m\e[31m   |\e[0m          \
    \                   ^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ type i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpujlh48qa.scala:31:16\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                continue\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      Not found: continue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpujlh48qa.scala:37:20 ------------------------\e[0m\e[0m\n\e[31m37 |\e\
    [0m                    break\n\e[31m\e[31m   |\e[0m                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: break\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpujlh48qa.scala:44:22 --------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        stringBuilder.reverse\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    StringBuilder\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ expl"
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var result: mutable.Set[String] = mutable.Set.empty[String]\n\
    \        var i: Int = 0\n        while(i < sentence.length) {\n            val\
    \ nextIsPrime = true\n            val nextWord = sentence.substring(i, i+1).trim\n\
    \            var primeNumber: Int = 1\n            val isWordPrime = true\n  \
    \          while(primeNumber < nextWord.length) {\n                if(nextWord.length\
    \ % primeNumber != 0) {\n                    nextIsPrime = false\n           \
    \         isWordPrime = false\n                    break\n                }\n\
    \                primeNumber += 1\n            }\n            if(isWordPrime)\
    \ {\n                result += nextWord\n                i += 1\n            }\n\
    \        }\n        return result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp34kwlfhx.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mresult\e[0m: mutable.Set[\e\
    [35mString\e[0m] = mutable.Set.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp34kwlfhx.scala:19:42\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e\
    [36mresult\e[0m: mutable.Set[\e[35mString\e[0m] = mutable.Set.empty[\e[35mString\e\
    [0m]\n\e[31m\e[31m   |\e[0m                                          ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp34kwlfhx.scala:28:32 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    nextIsPrime = \e[31mfalse\e[0m\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Reassignment to val nextIsPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp34kwlfhx.scala:29:32 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    isWordPrime = \e[31mfalse\e[0m\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Reassignment to val isWordPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp34kwlfhx.scala:30:20 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val sentences = sentence.split(\" \").filterNot(_.isEmpty)\n\
    \        var newSentence = sentences.head\n        var primesSet = mutable.Set[Long]()\n\
    \        for(i <- 1 to sentences.length){\n            val temp = newSentence.length\n\
    \            while(temp > 0){\n                val checker = temp\n          \
    \      while(checker % i != 0){\n                    checker *= i\n          \
    \      }\n                if(primesSet.contains(checker)){\n                 \
    \   break\n                }else{\n                    primesSet += checker\n\
    \                }\n                temp--\n            }\n            newSentence\
    \ += \" \" + sentences(i)\n        }\n        return newSentence.substring(1).trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpt5n2y7xq.scala:34:22 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                temp--\n\e[31m\e[31m   |\e[0m       \
    \               ^\e[0m\n\e[31m   |\e[0m                      expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpt5n2y7xq.scala:21:24 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mvar\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpt5n2y7xq.scala:27:28 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                    checker *= i\n\e[31m\e[31m   |\e[0m  \
    \                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value *= is not\
    \ a member of Int - did you mean checker.!=?\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpt5n2y7xq.scala:30:20 ------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m                    break\n\e[31m\e[31m   |\e[0m                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: break\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var newWords = \"\"\n        var words = sentence.split(\"\
    \ \").map(_.toLowerCase).toSet\n        for(x <- 2 until words.size) {\n     \
    \       var foundPrime = false\n            var prime = \"\"\n            for(i\
    \ <- 0 until x)\n                if(words.size%i == 0)\n                    foundPrime\
    \ = true\n                if(foundPrime)\n                    prime += \" \" +\
    \ i\n            newWords += \"(\" + prime + \") \"\n            words.remove(prime)\n\
    \        }\n        return newWords\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptbzrde99.scala:30:18 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            words.remove(prime)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a member of\
    \ Set[String] - did you mean Set[String].reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1659979310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        var\
    \ resultString = \"\"\n        var prime = 1\n        for (word <- words) {\n\
    \            if(word.forall(c => c.isLetter)) prime = 2\n            while (prime\
    \ < word.length) prime = prime * 2\n            if(prime % word.length == 0) resultString\
    \ = resultString + word + \" \"\n        }\n        return resultString.substring(0,resultString.length\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdz2nbmwr.scala:30)\n\tat Problem.main(tmpdz2nbmwr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").map(x => x.toInt)\n\
    \        val sortedWords = words.toList\n        val sortedWordsCount = sortedWords.size\n\
    \        val resultSet = SortedSet()\n        val primes = scala.collection.mutable.Set()\n\
    \        primes.update(1, primes.size)\n        var i = 1\n        while(i<=sortedWordsCount)\
    \ {\n            val candidate = sortedWords(i)\n            if(candidate*candidate\
    \ <= sortedWordsCount) {\n                primes.insert(candidate)\n         \
    \       resultSet += candidate\n            }\n            i+=1\n        }\n \
    \       val res = resultSet.mkString(\" \")\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmng9mk01.scala:22:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresultSet\e[0m = SortedSet()\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mDeprecatedFloatOrdering\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[A] of parameter\
    \ evidence$18 of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e[0m \e[35mDelegate\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmng9mk01.scala:24:22 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        primes.update(\e[31m1\e[0m, primes.size)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m                    \
    \  Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmng9mk01.scala:24:32\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        primes.update(\e[31m1\e\
    [0m, primes.size)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Int\n\e[31m   |\e[0m  \
    \                       Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpmng9mk01.scala:29:23 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                primes.insert(candidate)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue insert is not a member\
    \ of scala.collection.mutable.Set[Nothing] - did you mean primes.init?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val splitWords = sentence.split(\"\\\\s+\")\n\
    \        val result = mutable.Buffer.empty[String]\n        splitWords.foreach\
    \ { s => \n            val prime = primeFactorial(s.length)\n            result\
    \ += s if prime != 1\n        }\n        result.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1_t2pze3.scala:23:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            result += s \e[33mif\e[0m prime != \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                        ^^\e[0m\n\e[31m   |\e[0m   \
    \                     end of statement expected but 'if' found\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1_t2pze3.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Buffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1_t2pze3.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mprime\e[0m = primeFactorial(s.length)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: primeFactorial\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").toList\n \
    \       var newWords = mutable.ListBuffer[String]()\n        var nextPrime = 1\n\
    \        var i = 0\n        while (i < words.length) {\n            val word =\
    \ words(i)\n            if (nextPrime % word.length == 0) newWords += word\n \
    \           i += 1\n            nextPrime += 1\n        }\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiw6yn8h0.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mnewWords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // write your code here\n        val str = sentence.split(\"\
    \ \").filter(_.matches(\"[a-zA-Z]+\")).mkString(\" \")\n        var str1 = str.split(\"\
    \ \")\n        str1.foreach(x => {\n            val y = str.indexOf(x.toUpperCase())\n\
    \            if(y == -1) {\n                str = str + \" \" + x.toUpperCase()\n\
    \            }\n        })\n        str.split(\" \").toList.sortWith((x,y) =>\
    \ x.toUpperCase.compareTo(y.toUpperCase))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpsh44jg_q.scala:25:20 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                str = str + \e[31m\" \"\e[0m + x.toUpperCase()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Reassignment to val str\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpsh44jg_q.scala:28:71 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        str.split(\e[31m\" \"\e[0m).toList.sortWith((\e\
    [36mx\e[0m,\e[36my\e[0m) => x.toUpperCase.compareTo(y.toUpperCase))\n\e[31m\e\
    [31m   |\e[0m                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Found:   \
    \ Int\n\e[31m   |\e[0m                                                Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var words = sentence.split(\"\\\\s+\").filter(_.nonEmpty)\n\
    \        val size = words.size\n        var result = \"\"\n        var last =\
    \ 1\n        for(i <- 0 until size) {\n            val current = 3\n         \
    \   while(current < last) {\n                val prime = math.ceil(math.sqrt(current))\n\
    \                if(prime * prime > current + 1) {\n                    last +=\
    \ prime + 1\n                    break\n                }\n                current\
    \ += prime\n            }\n            result += words.apply(i) + \"\\n\"\n  \
    \          last = prime\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpphxpi9ym.scala:28:25 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    last += prime + \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \         value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphxpi9ym.scala:29:20 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpphxpi9ym.scala:31:24\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                current +=\
    \ prime\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \              value += is not a member of Int - did you mean current.!=?\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpphxpi9ym.scala:34:19 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            last = prime\n\e[31m\e[31m   |\e[0m     \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: prime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = mutable.Set[Int]()\n        for(i <- 0 until words.length){\n     \
    \       val curr = words(i).length\n            val count = if (primes.contains(curr))\
    \ 0 else 1\n            primes = primes + (curr until curr + count).count(x =>\
    \ x == 1)\n        }\n        val result = words.filter(x => primes.contains(x.length)).mkString(\"\
    \ \")\n        words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpke1iwnqb.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpke1iwnqb.scala:24:19 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            primes = primes + (curr until curr + count).count(\e\
    [36mx\e[0m => x == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val primes\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpke1iwnqb.scala:27:8 ---------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        words\n\e[31m\e[31m   |\e[0m        ^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (words : Array[String])\n\e[31m   |\e[0m    \
    \    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var ret = \"\"\n        var words = new mutable.ListBuffer[String]()\n\
    \        var word = \"\"\n        for (letter <- sentence) {\n            word\
    \ += letter\n            if (letter == \" \") {\n                words += word\n\
    \                word = \"\"\n            } else {\n                words += letter\n\
    \            }\n        }\n        if (word.length != 0) {\n            words\
    \ += word\n        }\n        words.toList.reverse.forall(_.length == primeNumber(word.length))\n\
    \        ret.reverse.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt08cpqri.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mwords\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpt08cpqri.scala:24:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \     \e[33mif\e[0m (letter == \e[31m\" \"\e[0m) {\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and\
    \ String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659979314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var newString = \"\"\n        for(word <- sentence.split(\"\
    \\\\s+\")) if(checkPrime(word.length.toInt)) newString += \" \" + word\n     \
    \   newString.split(\" \")\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6m4hyzau.scala:20:47 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(word <- sentence.split(\e[31m\"\
    \\\\s+\"\e[0m)) \e[33mif\e[0m(checkPrime(word.length.toInt)) newString += \e[31m\"\
    \ \"\e[0m + word\n\e[31m\e[31m   |\e[0m                                      \
    \         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \            Not found: checkPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6m4hyzau.scala:21:23 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        newString.split(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e\
    [0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        def primesFilter(lst : Iterable[Int]) : List[Int]\
    \ = {\n            var primes = List[Int]()\n            for(i <- lst if i % 2\
    \ != 0) primes ::= i\n            primes\n        }\n        var sentenceList\
    \ = sentence.split(\" \").toList\n        var finalList = List[String]()\n   \
    \     for(i <- 0 until sentenceList.length){\n            var count = 0\n    \
    \        for(j <- 0 until primesFilter(sentenceList(i).length())){\n         \
    \       count += 1\n                val l = scala.math.sqrt(scala.math.pow(j,2))\n\
    \                val r = scala.math.sqrt(scala.math.pow(j,2))\n              \
    \  if(l < r){\n                    var temp = scala.math.pow(j,2)\n          \
    \          while(temp <= l){\n                        temp = temp * j\n      \
    \              }\n                    if(sentenceList(i).substring(j - count,j\
    \ - count+l) == \"\"){\n                        finalList ::= sentenceList(i).substring(j\
    \ - count,j - count+l)\n                    }\n                }\n           \
    \ }\n        }\n        finalList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn00rafsm.scala:28:64\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mfor\e[0m(j\
    \ <- \e[31m0\e[0m until primesFilter(sentenceList(i).length())){\n\e[31m\e[31m\
    \   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    Int\n\e[31m   |\e\
    [0m                              Required: collection.mutable.Iterable[Int]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn00rafsm.scala:37:59\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m                    \e[33mif\e\
    [0m(sentenceList(i).substring(j - count,j - count+l) == \e[31m\"\"\e[0m){\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \ ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \              Found:    Double\n\e[31m   |\e[0m                             \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpn00rafsm.scala:38:34 ------------------------\e[0m\e\
    [0m\n\e[31m38 |\e[0m                        finalList ::= sentenceList(i).substring(j\
    \ - count,j - count+l)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String] - did you mean List[String].::?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn00rafsm.scala:38:74 --------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                        finalList ::= sentenceList(i).substring(j\
    \ - count,j - count+l)\n\e[31m\e[31m   |\e[0m                                \
    \                                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                                       Found:    Double\n\e[31m\
    \   |\e[0m                                                        Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn00rafsm."
  stdout: ''
  timestamp: 1659979317
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").filter(_.matches(\"\
    [a-zA-Z]+\")).toList\n        val result = new scala.collection.mutable.StringBuilder()\n\
    \        for (word <- words) {\n            val prime = math.ceil(math.sqrt(word.length).toInt)\n\
    \            if (prime == word.length) result.append(word)\n            else if\
    \ (prime % 2 == 0) result.append(\"_\" + word)\n            else result.append(\"\
    _\" + word + \"_\")\n        }\n        return result.toString()\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt_lx2bbv.scala:30)\n\tat Problem.main(tmpt_lx2bbv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // write your code here\n        val str = sentence.split(\"\
    \ \").filter(x => x.length == 1)\n        var prime = \"\"\n        var res =\
    \ []\n        for (i <- 0 until str.length)\n        {\n            var flag =\
    \ true\n            for(j <- 0 until str.length)\n            {\n            \
    \    if(i != j)\n                {\n                    var temp = str(i)\n  \
    \                  str(i) = str(j)\n                    str(j) = temp\n      \
    \              if(prime.isEmpty || ((str(i).length() == prime.length) && ((str(i).isEmpty)\
    \ || (str(j).isEmpty))))\n                    {\n                        prime\
    \ = (str(i))\n                        flag = false\n                        break\n\
    \                    }\n                    else if(str(i).length() > prime.substring(0,\
    \ prime.length).length)\n                    {\n                        prime\
    \ = (str(i))\n                        flag = false\n                        break\n\
    \                    }\n                }\n            }\n            if(flag)\n\
    \            {\n                if((prime.isEmpty) || ((prime.length == 0) &&\
    \ (str(i).length() == 0)))\n                {\n                    res = (str(i))\n\
    \                    break\n                }\n                else\n        \
    \        {\n                    res = (str(i))\n                }\n          \
    \  }\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp24yakl1q.scala:22:19 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mres\e[0m = []\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   an identifier\
    \ expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp24yakl1q.scala:23:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m\
    \ (i <- \e[31m0\e[0m until str.length)\n\e[31m\e[31m   |\e[0m^^^\e[0m\n\e[31m\
    \   |\e[0m'=>' expected, but 'end of statement' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp24yakl1q.scala:37:24 ------------------------\e[0m\e[0m\n\
    \e[31m37 |\e[0m                        break\n\e[31m\e[31m   |\e[0m          \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24yakl1q.scala:43:24\
    \ ------------------------\e[0m\e[0m\n\e[31m43 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp24yakl1q.scala:51:30 --------------------\e[0m\e\
    [0m\n\e[31m51 |\e[0m                    res = (str(i))\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \      Found:    String\n\e[31m   |\e[0m                           Required: Null\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24yakl1q.scala:52:20\
    \ ------------------------\e[0m\e[0m\n\e[31m52 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp24yakl1q.scala:56:30 --------------------\e[0m\e[0m\n\e[31m56\
    \ |\e[0m                    re"
  stdout: ''
  timestamp: 1659979316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val s = sentence.split(\" \")\n        val n\
    \ = s.length\n        val result = new Array[String](n)\n        \n        for(i\
    \ <- 0 until n) {\n            val word = s(i)\n            val len = word.length\n\
    \            \n            for(j <- 0 until len) {\n                if(word.charAt(j)\
    \ != word.charAt(len-j-1)) \n                    break\n            }\n      \
    \      \n            if(j == len) {\n                result(i) = word\n      \
    \      }\n        }\n        \n        val newResult = new mutable.ArrayBuffer[String]()\n\
    \        \n        result.foreach {\n            x =>\n            newResult +=\
    \ x\n        }\n        \n        newResult.toList.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpogyvewqz.scala:29:20 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpogyvewqz.scala:32:15\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mif\e[0m(j\
    \ == len) {\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m     \
    \          Not found: j\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpogyvewqz.scala:37:28\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e\
    [36mnewResult\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Initialize the required data\n        var\
    \ maxLength : Int = 1\n        var newSentence = \"\"\n        val wordList =\
    \ sentence.split(\" \").map(_.toUpperCase).toList\n        wordList.foreach(word\
    \ => {\n            // Remove all spaces from word and check if it is prime\n\
    \            val wordWithoutSpace = word.replace(\"  \",\"\")\n            if(primeChecker.isPrime(wordWithoutSpace))\n\
    \                // If it passes, remove the first character and add it to newSentence\
    \ string\n                newSentence += wordWithoutSpace.substring(0,1)\n   \
    \         else\n                // If it doesn't pass the check, increment the\
    \ maxLength\n                maxLength += 1\n        })\n        // If the current\
    \ maxLength is lesser than the required prime number,\n        // add the remaining\
    \ words to the newSentence and update maxLength accordingly\n        if(maxLength\
    \ < wordList.length)\n            newSentence += (wordList.dropWhile(x => !primeChecker.isPrime(x)).mkString(\"\
    \ \") + wordList.takeWhile(x => !primeChecker.isPrime(x)).mkString(\" \"))\n \
    \       else\n            newSentence\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx14m3h3g.scala:26:15 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m(primeChecker.isPrime(wordWithoutSpace))\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \        Not found: primeChecker\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpx14m3h3g.scala:36:24 ------------------------\e[0m\e[0m\n\e[31m36 |\e\
    [0m            newSentence += (wordList.dropWhile(\e[36mx\e[0m => !primeChecker.isPrime(x)).mkString(\e\
    [31m\" \"\e[0m) + wordList.takeWhile(\e[36mx\e[0m => !primeChecker.isPrime(x)).mkString(\e\
    [31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value += is not a member of String - did you mean String.!=?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx14m3h3g.scala:36:53 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            newSentence += (wordList.dropWhile(\e[36mx\e\
    [0m => !primeChecker.isPrime(x)).mkString(\e[31m\" \"\e[0m) + wordList.takeWhile(\e\
    [36mx\e[0m => !primeChecker.isPrime(x)).mkString(\e[31m\" \"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                     ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Not found:\
    \ primeChecker\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx14m3h3g.scala:36:119\
    \ -----------------------\e[0m\e[0m\n\e[31m36 |\e[0m            newSentence +=\
    \ (wordList.dropWhile(\e[36mx\e[0m => !primeChecker.isPrime(x)).mkString(\e[31m\"\
    \ \"\e[0m) + wordList.takeWhile(\e[36mx\e[0m => !primeChecker.isPrime(x)).mkString(\e\
    [31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \            Not found: primeChecker\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979316
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n      var result = \"\"\n      val wordsArray = sentence.split(\"\
    \ \").map( x => x.toInt )\n      wordsArray.foreach(x => {\n        if (x > 1\
    \ && x % 2 == 0 ){\n          result += \" \" + x\n        }\n      })\n     \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"This\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp23tdwbnv.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.wordsInSentence(tmp23tdwbnv.scala:20)\n\
    \tat Problem$.main(tmp23tdwbnv.scala:29)\n\tat Problem.main(tmp23tdwbnv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n      var result = \"\"\n      var primes = scala.collection.mutable.Set[Int]()\n\
    \      for(i <- 0 until sentence.lenth){\n        var word = sentence.substring(i,\
    \ i + 1)\n        var prime = scala.math.sqrt(word.length).ceil.toInt\n      \
    \  if(primes.contains(prime)){\n          result += word\n        }\n        primes\
    \ += prime\n      }\n      return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoqqj8awg.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33mfor\e[0m(i <- \e[31m0\e[0m until sentence.lenth){\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m   value lenth is not a member of String - did you mean sentence.length?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var res = \"\"\n        var prime = new mutable.Set[Int]()\n\
    \        var primeFound = false\n        for (word <- sentence.split(\" \")) {\n\
    \            if(primeFound) {\n                prime.add(word.length)\n      \
    \      } else {\n                for (i <- 0 until word.length-1) {\n        \
    \            if(word.charAt(i) == word.charAt(i+1))\n                        primeFound\
    \ = true\n                }\n                if(primeFound) {\n              \
    \      prime.add(word.length)\n                }\n            }\n        }\n \
    \       var maxSize = prime(0)\n        for (size <- prime) {\n            if(size\
    \ == maxSize) {\n                maxSize = prime(0)\n            } else {\n  \
    \              maxSize = max(maxSize, size)\n            }\n        }\n      \
    \  for (word <- sentence.split(\" \")) {\n            if(primeFound) {\n     \
    \           prime.remove(word.length)\n            } else {\n                if(prime.isEmpty\
    \ && maxSize == prime(0)) {\n                    res ++= word\n              \
    \  }\n            }\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqmuezi93.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mprime\e[0m = \e[33mnew\e\
    [0m mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val wordsLen = sentence.split(' ').length\n\
    \        val isPrime = Primes.primesIterator.forall(i => isPrime(i))\n       \
    \ val primes = wordsLen filter (isPrime)\n        val newSentence = wordsLen map\
    \ {i => sentence.substring(0,i)} mkString \" \"\n        val primesArray = primes.toArray\n\
    \        val newArray = newSentence.split(' ').toArray\n        primesArray.zip(newArray).map\
    \ { case (a,b) => a.concat(b) }.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr0ayg7y4.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = Primes.primesIterator.forall(\e\
    [36mi\e[0m => isPrime(i))\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: Primes\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpr0ayg7y4.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = wordsLen filter\
    \ (isPrime)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     value filter is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpr0ayg7y4.scala:22:35 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnewSentence\e[0m = wordsLen\
    \ map {\e[36mi\e[0m => sentence.substring(\e[31m0\e[0m,i)} mkString \e[31m\" \"\
    \e[0m\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value map is not a member of Int\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val strArray = sentence.split(\" \")\n     \
    \   val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var index = 0\n        var\
    \ primeString = \"\"\n        while (strArray.size > 1) {\n            for (x\
    \ <- primes) {\n                val tempString = strArray(index).toString.stripPrefix(x\
    \ + \"\\t\")\n                index += 1\n                if (tempString.isPrime)\
    \ {\n                    primeString += tempString + \" \"\n                 \
    \   strArray = strArray.remove(index)\n                }\n            }\n    \
    \    }\n        return primeString.substring(0, primeString.length - 1).trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwwco1ns5.scala:27:31 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m (tempString.isPrime) {\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value isPrime is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwwco1ns5.scala:29:40 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    strArray = strArray.remove(index)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           value remove is not a member of Array[String]\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \").toList\n \
    \       val resultSet = mutable.HashSet[Int]()\n        words.foreach(x => resultSet.add(x.length))\n\
    \        words.filter(x => resultSet.size<=x.length).sortWith((x,y) => x<y).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeqrin0br.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresultSet\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val wordList = sentence.split(\" \").toList\n\
    \        val primeList = wordList.filter(a => {\n            val isPrime = isPrimeNumber(a)\n\
    \            if (isPrime) println(a + \" is a prime number\")\n            else\
    \ println(a + \" is not a prime number\")\n            isPrime\n        })\n \
    \       primeList.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp51jcxvad.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36misPrime\e[0m = isPrimeNumber(a)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          Not found: isPrimeNumber\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val list = sentence.split(\" \").toList\n  \
    \      var newList = list\n        val primes = scala.collection.mutable.ArrayBuffer(2,\
    \ 3, 5, 7)\n        for (i <- 0 to (list.length - 1)) {\n            if (primes.contains(list(i).length()))\
    \ {\n                newList = newList.filter(_ != list(i))\n                primes\
    \ = primes.filter(_ != list(i).length())\n            }\n        }\n        newList.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp8ff4wz5a.scala:25:23 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                primes = primes.filter(_ != list(i).length())\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val primes\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var ret : String = \"\"\n        for(i <- 0\
    \ to (words_in_sentence(sentence).toList.length - 1)){\n            val tmp =\
    \ sentence(i).toInt\n            if(tmp == 2){\n                if(ret != \"\"\
    ){\n                    ret += \"\\n\"\n                }\n                ret\
    \ += sentence(i)\n            }\n        }\n        ret\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwh791x3_.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m to (words_in_sentence(sentence).toList.length\
    \ - \e[31m1\e[0m)){\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: words_in_sentence\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = (sentence split \" \").filter(_.nonEmpty).map(_.toLowerCase).toSet\n\
    \        val result = scala.collection.mutable.Set()\n        for (word <- words)\
    \ {\n            if (isPrime(word)) {\n                result += word\n      \
    \      }\n        }\n        result mkString \" \"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpganmeszo.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (isPrime(word)) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not\
    \ found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpganmeszo.scala:23:26\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                result += word\n\
    \e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      Found:    (word : String)\n\e[31m   |\e[0m            \
    \              Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val result = new mutable.ListBuffer[String]()\n\
    \        var index = 0\n        while(index < sentence.length) {\n           \
    \ if(isPrime(sentence.length-index)) {\n                result.append(sentence.substring(index,\
    \ index+1))\n            }\n            index++\n        }\n        sentence.split('\
    \ ').foreach(x => result.append(x))\n        return sentence.split(' ').toSet.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplmsn9a_f.scala:25:19 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            index++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplmsn9a_f.scala:19:25\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplmsn9a_f.scala:22:15 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            \e[33mif\e[0m(isPrime(sentence.length-index)) {\n\e[31m\e[31m \
    \  |\e[0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m               Not found:\
    \ isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979318
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val sentenceWithWords = sentence split \" \"\
    \n        val wordsWithLengths = sentenceWithWords map {\n            case word\
    \ => word -> length(word)\n        }\n        val result = wordsWithLengths filter\
    \ { case (word, length) => isPrime(length) } map {\n            case word => word\n\
    \        }\n        result mkString \" \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg44xk5db.scala:21:33 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m word => word -> length(word)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Not found: length\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpg44xk5db.scala:23:70 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = wordsWithLengths\
    \ filter { \e[33mcase\e[0m (word, length) => isPrime(length) } map {\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \             Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        var\
    \ result = new StringBuilder\n        var i = 0\n        while (i < words.length)\
    \ {\n            val word = words(i)\n            val count = word.size / 2\n\
    \            if (count * 2 == word.size) {\n                result += \" \" +\
    \ word\n                i += 1\n            } else {\n                i += 1\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekzttrrs.scala:26:26\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                result += \e\
    [31m\" \"\e[0m + word\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    String\n\e[31m   |\e[0m\
    \                          Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // TODO: Write your code here\n        val countOfPrimes\
    \ = mutable.LinkedHashMap[Int, Int]()\n        sentence.split(\" \")\n       \
    \   .map {\n            word =>\n              if (countOfPrimes.get(word) ==\
    \ null)\n                countOfPrimes.put(word, 1) else\n                countOfPrimes.put(word,\
    \ countOfPrimes.get(word) + 1)\n          }\n          .groupBy(word => countOfPrimes.get(word))\n\
    \          .map(grouping => grouping.head)\n          .toArray\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkhyh2g9d.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcountOfPrimes\e[0m = mutable.LinkedHashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpkhyh2g9d.scala:27:11 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m          }\n\e[31m\e[31m   |\e[0m           ^\e[0m\n\
    \e[31m   |\e[0m           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m           where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659979324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val n = sentence.toCharArray().map(_.toInt).toArray\n\
    \        var outSentence = \"\"\n        var i = 1\n        while(i <= n.length)\
    \ {\n            while(i % n[i] == 0) {\n                i = i + 1\n         \
    \   }\n            outSentence = outSentence + sentence(i - n[i])\n          \
    \  i = i + 1\n        }\n        outSentence\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp395hi0iu.scala:23:24 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mwhile\e[0m(i % n[\e[35mi\e[0m] == \e\
    [31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e\
    [0m                        Not found: type i\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp395hi0iu.scala:26:55 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            outSentence = outSentence + sentence(i -\
    \ n[\e[35mi\e[0m])\n\e[31m\e[31m   |\e[0m                                    \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \                     Not found: type i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        if (sentence.split(\" \").length == 0) \"\"\n\
    \        else {\n            val wordList = sentence.split(\" \").map(w => w.trim).toList\n\
    \            val set = new mutable.HashSet[String]()\n            var ans = \"\
    \"\n            wordList.foreach(word => if (set.contains(word)) { ans += word\
    \ + \" \" } else { set += word })\n            ans\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe8prbe5h.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(' ').toList\n   \
    \     val result = mutable.Set[String]()\n        for((i,w) <- words.zipWithIndex)\
    \ {\n            var flag = false\n            var primeCounter = 0\n        \
    \    while(w(i).length > 0) {\n                if(primeCounter > w(i).length)\
    \ {\n                    flag = true\n                    break\n            \
    \    }\n                primeCounter += 1\n            }\n            if(flag)\
    \ {\n                result.add(w(i))\n            }\n        }\n        val resultString\
    \ = result.mkString(\" \")\n        return resultString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpth4zmkid.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmpth4zmkid.scala:24:18 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mwhile\e[0m(w(i).length > \e[31m0\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m       \
    \           \e[33mvalue\e[0m \e[35mw\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpth4zmkid.scala:25:34 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mif\e[0m(primeCounter > w(i).length)\
    \ {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e\
    [0m                                  \e[33mvalue\e[0m \e[35mw\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpth4zmkid.scala:27:20\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val sentenceSplit = sentence.split(\" \")\n\
    \        val primeNumbers = sentenceSplit.map(x => prime(x)).toArray\n       \
    \ val result = new mutable.ListBuffer[String]()\n        val result2 = new mutable.ListBuffer[String]()\n\
    \        for (number <- primeNumbers) {\n            var i = 0\n            while\
    \ (i < sentenceSplit.length) {\n                if (number() == sentenceSplit(i).length)\
    \ {\n                    result.append(sentenceSplit(i))\n                   \
    \ result2.append(number)\n                    i = i + 1\n                }\n \
    \               i = i + 1\n            }\n        }\n        val result3 = result2.toSeq.sortWith((x,y)\
    \ => x < y).mkString(\" \")\n        result3.toString.replace(\"[\", \"\").replace(\"\
    ]\", \"\").replaceAll(\"\\\\s+\", \" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpld3px7bn.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeNumbers\e[0m = sentenceSplit.map(\e\
    [36mx\e[0m => prime(x)).toArray\n\e[31m\e[31m   |\e[0m                       \
    \                           ^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                            Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpld3px7bn.scala:20:59 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeNumbers\e[0m = sentenceSplit.map(\e\
    [36mx\e[0m => prime(x)).toArray\n\e[31m\e[31m   |\e[0m                       \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpld3px7bn.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpld3px7bn.scala:22:26\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mresult2\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var prime = BigInt(2)\n        var ret = \"\"\
    \n        sentence.split(\"\\\\s\").foreach(word => {\n            if (prime.isPrime)\
    \ {\n                prime = prime * BigInt(word)\n                ret += \" \"\
    \ + word\n            }\n        })\n        return ret\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaw8yvshm.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (prime.isPrime) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   value isPrime is not a member of BigInt\n1 error found\n"
  stdout: ''
  timestamp: 1659979326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        if (sentence.isEmpty)\n          return \"\"\
    \n        var i = 0\n        var result : String = \"\"\n        var temp = sentence\
    \ splitAt 1\n        while(i < temp.length) {\n          if (i % 2 == 0) {\n \
    \           if (temp.length < 5)\n              result += temp(i)\n          \
    \  else if (!temp(i).isUpper)\n              result += temp(i)\n            else\
    \ if (temp(i).isUpper)\n              result += temp(i) + \" is\"\n          }\n\
    \          i += 2\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdwvi8knn.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mwhile\e[0m(i < temp.length) {\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \     value length is not a member of (String, String)\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpdwvi8knn.scala:26:21 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            \e[33mif\e[0m (temp.length < \e[31m5\e[0m)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value length is not a member of (String, String)\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpdwvi8knn.scala:28:30 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (!temp(i).isUpper)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     value isUpper is not a member of (?1 : Int)\e[33m match\
    \ \e[0m{\n\e[31m   |\e[0m                       case (\e[31m0\e[0m : Int) => String\n\
    \e[31m   |\e[0m                       case scala.compiletime.ops.int.S[n1] =>\
    \ \n\e[31m   |\e[0m                         scala.Tuple.Elem[String *: EmptyTuple.type,\
    \ n1]\n\e[31m   |\e[0m                     }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \                     where:    ?\e[31m1\e[0m is an unknown value of type Int\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdwvi8knn.scala:30:29 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (temp(i).isUpper)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     value isUpper is not a member of (?2 : Int)\e[33m match\
    \ \e[0m{\n\e[31m   |\e[0m                       case (\e[31m0\e[0m : Int) => String\n\
    \e[31m   |\e[0m                       case scala.compiletime.ops.int.S[n1] =>\
    \ \n\e[31m   |\e[0m                         scala.Tuple.Elem[String *: EmptyTuple.type,\
    \ n1]\n\e[31m   |\e[0m                     }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \                     where:    ?\e[31m2\e[0m is an unknown value of type Int\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdwvi8knn.scala:31:21 -----------------"
  stdout: ''
  timestamp: 1659979330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n      var str = \"\"\n      var isPrime = true\n   \
    \   for ((x <- 0 to (sentence.count-1)/2) if (isPrime) yield {\n        str +=\
    \ sentence(x).toChar\n      }\n      (str).toChar\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpetwyi0rv.scala:21:14 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33mfor\e[0m ((x <- \e[31m0\e[0m to (sentence.count-\e\
    [31m1\e[0m)/\e[31m2\e[0m) \e[33mif\e[0m (isPrime) \e[33myield\e[0m {\n\e[31m\e\
    [31m   |\e[0m              ^^\e[0m\n\e[31m   |\e[0m              ')' expected,\
    \ but '<-' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpetwyi0rv.scala:21:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m      \e[33mfor\e[0m ((x\
    \ <- \e[31m0\e[0m to (sentence.count-\e[31m1\e[0m)/\e[31m2\e[0m) \e[33mif\e[0m\
    \ (isPrime) \e[33myield\e[0m {\n\e[31m\e[31m   |\e[0m                        \
    \                    ^^\e[0m\n\e[31m   |\e[0m                                \
    \           '<-' expected, but 'if' found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpetwyi0rv.scala:24:18 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m      (str).toChar\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m \
    \  |\e[0mvalue foreach is not a member of Null, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m25 |\e[0m    }\n3 errors found\n"
  stdout: ''
  timestamp: 1659979327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var newString = \"\"\n        var counter =\
    \ 1\n        var length = sentence.length\n        for (i <- 0 until length){\n\
    \            if (sentence.charAt(i) == \" \"){\n                for (j <- 0 until\
    \ counter){\n                    newString += sentence.charAt(j)\n           \
    \     }\n                counter = 1\n            } else {\n                counter\
    \ += 1\n            }\n        }\n        newString += newString + \" \" + sentence\n\
    \        println(newString)\n        newString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmph5t3t3ms.scala:23:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (sentence.charAt(i) == \e[31m\"\
    \ \"\e[0m){\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659979326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\"\\\\s+\").toList\n\
    \        val primeList: MutableList[String] = new mutable.MutableList[String]()\n\
    \        words.foreach(x => {\n            if (x.isPrime) primeList += x\n   \
    \     })\n        primeList.toList.sorted.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmgpdu9fr.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeList\e[0m: \e[35mMutableList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.MutableList[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Not found: type MutableList\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmgpdu9fr.scala:20:49 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeList\e[0m: \e[35mMutableList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.MutableList[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmgpdu9fr.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m\
    \ (x.isPrime) primeList += x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value isPrime is not a member of String\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val sentence1\
    \ = sentence.split(\"\\\\s+\").toList\n        val primes = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 1 to sentence1.length) {\n            val n = sentence1(i)\n\
    \            if(primes.contains(n)) {\n                primes += n\n         \
    \   }\n        }\n        val sortedPrimes = primes.sort\n        val resString\
    \ = sortedPrimes.mkString(\" \")\n        return resString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplv13dt0d.scala:25:26\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                primes += n\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : String)\n\e[31m   |\e[0m                  \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplv13dt0d.scala:28:34\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36msortedPrimes\e[0m = primes.sort\n\e[31m\e[31m   |\e[0m                   \
    \        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort is not a member of scala.collection.mutable.ArrayBuffer[Int],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.buffer AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.buffer AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.mutableSeq AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.mutableSeq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659979328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var primeWords = mutable.Map[Int, String]()\n\
    \        for (word <- sentence.split(' ')) {\n            val length = word.length\n\
    \            if (primeWords.contains(length)) {\n                val primeWord\
    \ = primeWords(length)\n                primeWords(length) = (primeWord + \",\
    \ \" + word)\n            } else {\n                primeWords(length) = word\n\
    \            }\n        }\n        val wordList = primeWords.values.mkString(\"\
    \ \")\n        if (wordList == sentence) {\n            return sentence\n    \
    \    }\n        wordsInSentence(wordList)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp4hg547n.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mprimeWords\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979324
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        def isPrime(n : Int) : Boolean = n % 1 == 0\
    \ && !(math.sqrt(n) % 1 == 0)\n        var result = \"\"\n        for (i <- 1\
    \ until sentence.length) if (!(isPrime(i) && sentence.charAt(i) != ' ')) {\n \
    \           result += sentence.charAt(i)\n        }\n        return result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp86cq882u.scala:27)\n\tat Problem.main(tmp86cq882u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var result = new scala.collection.mutable.StringBuilder\n\
    \        for (word <- sentence.split(\" \").toList) {\n            val prime =\
    \ word.forall(_.forall(_.isPrime))\n            if (prime == false) {\n      \
    \          result.append(\"NO\")\n            } else {\n                result.append(\"\
    YES\")\n            }\n        }\n        result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp25dhj_wg.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mprime\e[0m = word.forall(_.forall(_.isPrime))\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value forall is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979329
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val nums = new mutable.HashSet[Int]()\n    \
    \    val resultStr : List[String] = ListBuffer[String]()\n        sentence.split(\"\
    \ \").foreach(word => {\n            val num: Int = if (word.length > 1) word.length\
    \ else 1\n            val result: Int = math.sqrt(num)\n            while (nums.contains(result))\
    \ {\n                result = result+1\n            }\n            nums += result\n\
    \            resultStr += word + \" \"\n        })\n        resultStr.toList.reverse.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc9y5sxae.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc9y5sxae.scala:20:57\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresultStr\e\
    [0m : \e[35mList\e[0m[\e[35mString\e[0m] = ListBuffer[\e[35mString\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m                   Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc9y5sxae.scala:23:39 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m: \e[35mInt\e\
    [0m = math.sqrt(num)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    Double\n\e[31m   |\e\
    [0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpc9y5sxae.scala:25:23 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                result = result+\e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \       Reassignment to val result\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpc9y5sxae.scala:28:22 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m            resultStr += word + \e[31m\" \"\e[0m\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value += is not a member of List[String]\
    \ - did you mean resultStr.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1659979330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ length = words.map( word => word.length ).toSeq.sortBy( _ * -1 )\n        var\
    \ res = \"\"\n        var j = 0\n        for(i <- 0 to length.length){\n     \
    \       if(length(i) == 2){\n                j += 1\n            }\n         \
    \   if(j == length.length){\n                res += words(i)\n               \
    \ j = 0\n            }\n        }\n        return res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 4\n\tat scala.collection.immutable.ArraySeq$ofRef.apply(ArraySeq.scala:331)\n\
    \tat Problem$.wordsInSentence$$anonfun$1(tmp51x85gvw.scala:24)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.wordsInSentence(tmp51x85gvw.scala:31)\n\
    \tat Problem$.main(tmp51x85gvw.scala:35)\n\tat Problem.main(tmp51x85gvw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val chars = sentence.split(\" \").map(_.toUpperCase).toArray\n\
    \        val primes = primesOfLengths(chars.takeRight(chars.length)).toArray\n\
    \        val primesMapped = primes.map(primesOfLengths(_).toList)\n        val\
    \ result = chars.map(c => primesMapped.map(p => c if p == c else c)).mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgzwdr5jo.scala:22:60 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = chars.map(\e\
    [36mc\e[0m => primesMapped.map(\e[36mp\e[0m => c \e[33mif\e[0m p == c \e[33melse\e\
    [0m c)).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \                                        ^^\e[0m\n\e[31m   |\e[0m            \
    \                                ')' expected, but 'if' found\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgzwdr5jo.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = primesOfLengths(chars.takeRight(chars.length)).toArray\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: primesOfLengths\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpgzwdr5jo.scala:22:78 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = chars.map(\e\
    [36mc\e[0m => primesMapped.map(\e[36mp\e[0m => c \e[33mif\e[0m p == c \e[33melse\e\
    [0m c)).mkString(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659979329
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val s = sentence.split(\"\\\\s+\").filter(_.matches(\"\
    [A-Za-z]+\"))\n        val n = s.length\n        val m = collection.mutable.ArrayBuffer(s.head)\n\
    \        for (i <- 1 until n by 2) {\n            if (s.last == s(i)) {\n    \
    \            m += s(i); s(i) = Nil\n            } else {\n                m +=\
    \ s(i); s(i) = s(i - 1)\n            }\n        }\n        m.toList.reverse.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1aq8bee4.scala:24:34\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                m += s(i); s(i)\
    \ = Nil\n\e[31m\e[31m   |\e[0m                                  ^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Found:    collection.immutable.Nil.type\n\
    \e[31m   |\e[0m                                 Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val numPrimes : mutable.MutableSet[Int] = new\
    \ mutable.MutableSet[Int]()\n        for(i <- 0 to 100){\n            if(isPrime(i)){\n\
    \                numPrimes.add(i)\n            }\n        }\n        val result\
    \ = new StringBuilder()\n        for(i <- 0 to 100){\n            val newWords\
    \ = sentence.split(\" \").filter( w => numPrimes.contains(w.length)).toSeq\n \
    \           result.append((newWords.sorted.mkString(\" \")))\n        }\n    \
    \    return result.toString()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp29sfgoqe.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumPrimes\e[0m : mutable.MutableSet[\e\
    [35mInt\e[0m] = \e[33mnew\e[0m mutable.MutableSet[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp29sfgoqe.scala:19:54 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mnumPrimes\e[0m : mutable.MutableSet[\e[35mInt\e\
    [0m] = \e[33mnew\e[0m mutable.MutableSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp29sfgoqe.scala:21:15\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(isPrime(i)){\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        if (sentence.isEmpty) \"\"\n        else if\
    \ (sentence.length == 1) (sentence.head + \" \")\n        else primes.find(_._1\
    \ == sentence.length).map(_._2).map(_ + \" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpen5pyult.scala:21:13 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m primes.find(_._1 == sentence.length).map(_._2).map(_\
    \ + \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m             ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m             Not found: primes\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val chars = sentence.split(\" \")\n        val\
    \ lens = chars.map(_.length)\n        val primes = lens.filter(n => {\n      \
    \      var flag = true\n            var i = 2\n            while(i <= Math.sqrt(n))\
    \ {\n                if((n % i) == 0) {\n                    flag = false\n  \
    \              }\n                i += 1\n            }\n            flag\n  \
    \      }).toSeq\n        val re = s\"^${primes.mkString(\" \")}$\"\n        val\
    \ result = sentence.replaceAll(re, \"\")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6qvkjcgx.scala:32:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mre\e[0m = \e[31ms\"^\e[0m${primes.mkString(\e\
    [31m\" \"\e[0m)}$\"\n\e[31m\e[31m   |\e[0m                                   \
    \        ^\e[0m\n\e[31m   |\e[0m                                           unclosed\
    \ string literal\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6qvkjcgx.scala:34:8\
    \ -------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        result\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: result\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ result = new Array[String](0)\n        // let us store the length into a map\n\
    \        val map = new mutable.HashMap[Int, String]()\n        for (word <- words){\n\
    \            val key = word.length\n            map.put(key, word)\n        }\n\
    \        for(i <- map.keySet){\n            if (map.get(i).length % 2 != 0){\n\
    \                continue\n            }\n            if (map.get(i).length %\
    \ 2 == 0){\n                result += map.get(i).toString.split(\" \")\n     \
    \       }\n        }\n        return result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpthf34jwo.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979330
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // write your code here\n        val n = sentence.length\n\
    \        var s = \"\"\n        var i = 0\n        for(i<n){\n            if(sentence.charAt(i)\
    \ == ' ') {\n                while(i < n){\n                    s += sentence.charAt(i)\n\
    \                    i += 1\n                }\n                i = i + 1\n  \
    \          }\n        }\n        return s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphm763hdk.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m(i<n){\n\e[31m\e[31m   |\e[0m \
    \               ^\e[0m\n\e[31m   |\e[0m                '<-' expected, but '{'\
    \ found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphm763hdk.scala:31:9 -------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0mvalue withFilter is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659979334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val wordsArr: List[String] = sentence.toList\n\
    \        val primeNumbers : List[Int] = List.fill(wordsArr.length)(2)\n      \
    \  val uniquePrimeNumbers : List[Int] = new mutable.LinkedList[Int]()\n\n    \
    \    val primeNumbersList : mutable.MutableList[Int] = new mutable.MutableList[Int]()\n\
    \        primeNumbersList.addAll(primeNumbers)\n\n        for(i <- 0 until wordsArr.length)\n\
    \            primeNumbersList.removeAll(primeNumbers.filter(_ % i == 0))\n\n \
    \       uniquePrimeNumbers.addAll(primeNumbersList)\n\n        val uniquePrimeWords\
    \ : List[String] = uniquePrimeNumbers.map((_ - 1)).filter(_ % 2 == 0).map {\n\
    \            i => wordsArr(i).replaceAll(\" \", \"\")\n        }.distinct().sorted\n\
    \n        uniquePrimeWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphhdmd961.scala:19:46\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwordsArr\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = sentence.toList\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Found:    List[\e[1m\e[31mChar\e[0m]\n\e\
    [31m   |\e[0m                                     Required: List[\e[1m\e[32mString\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphhdmd961.scala:21:49\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36muniquePrimeNumbers\e[0m : \e[35mList\e[0m[\e[35mInt\e[0m] = \e[33mnew\e[0m\
    \ mutable.LinkedList[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphhdmd961.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimeNumbersList\e[0m :\
    \ mutable.MutableList[\e[35mInt\e[0m] = \e[33mnew\e[0m mutable.MutableList[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphhdmd961.scala:23:62 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimeNumbersList\e[0m :\
    \ mutable.MutableList[\e[35mInt\e[0m] = \e[33mnew\e[0m mutable.MutableList[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                       \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmphhdmd961.s"
  stdout: ''
  timestamp: 1659979336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var result : String = \"\";\n        val splittedSentence\
    \ = sentence.split(\" \")\n        for (i <- splittedSentence.indices) {\n   \
    \         val length = splittedSentence(i).length\n            if (length == 1\
    \ && isPrime(length)) {\n                result += splittedSentence(i)\n     \
    \       }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_nw4fv0o.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (length == \e[31m1\e[0m &&\
    \ isPrime(length)) {\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979331
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val chars = sentence.split(\" \").map(_.toUpperCase()).map(_.toString)\n\
    \        val map = chars.groupBy(c => c.length).map {\n            case (k,v)\
    \ => k -> v.map(c => c.toUpperCase).mkString(\" \")\n        }\n        map.values.map(_.mkString(\"\
    \ \")).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpolkr0czw.scala:26)\n\tat Problem.main(tmpolkr0czw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val str = sentence.split(\" \")\n        val\
    \ primes = primes(str.length)\n        val newStr = str.filter(word => primes.contains(word.length))\n\
    \        val words = new StringBuilder()\n        newStr.foreach(words += _ +\
    \ \" \")\n        words.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8opyexqm.scala:20:21 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = primes(str.length)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mprimes\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8opyexqm.scala:23:32 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        newStr.foreach(words += _ + \e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Found:    String\n\e[31m   |\e[0m         \
    \                       Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val strs = sentence.split(\" \") //split by\
    \ whitespace\n        val primes = mutable.ListBuffer[Int]()\n        strs.foreach\
    \ { str =>\n            val n = str.length //get length\n            for (x <-\
    \ 2 to n) {\n                if (str.length % x == 0) primes.append(x) //primes\n\
    \            }\n        }\n        strs.map { str => primes.filter(x => str.length\
    \ % x == 0).mkString(\" \") }.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ji_kxb7.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmp0ji_kxb7.scala:27:81 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        strs.map { \e[36mstr\e[0m => primes.filter(\e\
    [36mx\e[0m => str.length % x == \e[31m0\e[0m).mkString(\e[31m\" \"\e[0m) }.mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                               No ClassTag available for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                                          where:    B is a type\
    \ variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659979336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var result = \"\"\n        for(word <- sentence.split('\
    \ ')) {\n            var length = 3\n            var index = false\n         \
    \   for(i<- word.length.toInt;i>length;i--) {\n                if(word.charAt(length-1)\
    \ == word.charAt(length-2) && length != 0) {\n                    length = length-1\n\
    \                }\n                if(length == 0) {\n                    index\
    \ = true\n                    length = i\n                }\n            }\n \
    \           if(index) result = result + word\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1fd__wbh.scala:23:46 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m(i<- word.length.toInt;i>length;i--)\
    \ {\n\e[31m\e[31m   |\e[0m                                              ^\e[0m\n\
    \e[31m   |\e[0m                                            '<-' expected, but\
    \ ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp1fd__wbh.scala:23:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mfor\e\
    [0m(i<- word.length.toInt;i>length;i--) {\n\e[31m\e[31m   |\e[0m             \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                                  pattern expected\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp1fd__wbh.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m(i<- word.length.toInt;i>length;i--)\
    \ {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                    value foreach is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1659979335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        if (sentence.length <= 1)\n            return\
    \ sentence\n        def isPrime(i : Int) : Boolean = {\n            var flag =\
    \ true\n            for (i.toInt <= 0 && (flag = true); i > 0; i = i - 2)\n  \
    \              if (i % 2 == 0)\n                    flag = false\n           \
    \ flag\n        }\n        def find(i : Int) : Unit = {\n            if (i ==\
    \ 0)\n                return\n            if (isPrime(i))\n                find(i\
    \ - 1)\n            else {\n                val (head,tail) = sentence.splitAt(i)\n\
    \                find(i-1)\n                for (i <- 0 until tail.length)\n \
    \                   find(i + 1)\n                head + tail\n            }\n\
    \        }\n        find(sentence.length - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptktqxw3r.scala:23:39 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m (i.toInt <= \e[31m0\e[0m &&\
    \ (flag = \e[31mtrue\e[0m); i > \e[31m0\e[0m; i = i - \e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e[0m  \
    \                                     ')' expected, but '=' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmptktqxw3r.scala:23:46 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m (i.toInt <= \e[31m0\e[0m &&\
    \ (flag = \e[31mtrue\e[0m); i > \e[31m0\e[0m; i = i - \e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                             ')' expected, but ';' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmptktqxw3r.scala:23:53 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m (i.toInt <= \e[31m0\e[0m &&\
    \ (flag = \e[31mtrue\e[0m); i > \e[31m0\e[0m; i = i - \e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                            '<-' expected, but ';' found\n\
    \e[31m\e[31m-- [E020] Syntax Error: /tmp/tmptktqxw3r.scala:23:64 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mfor\e[0m (i.toInt <= \e[31m0\e[0m &&\
    \ (flag = \e[31mtrue\e[0m); i > \e[31m0\e[0m; i = i - \e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                ^\e\
    [0m\n\e[31m   |\e[0m                                                    \e[33myield\e\
    [0m or \e[33mdo\e[0m expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmptktqxw3r.scala:41:12 --------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        find(sentence.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var output : List[String] = Nil\n        var\
    \ tempString : String = \"\"\n        var lastWordIndex = 0\n        var lastPrimeLength\
    \ : Int = 0\n        var currentPrimeLength : Int = 0\n        var isPrime : Boolean\
    \ = true\n        for (word <- sentence.split(\" \")) {\n            val length\
    \ = word.length\n            val lastIndex = lastWordIndex\n            if (isPrime)\
    \ {\n                tempString += word + \" \";\n                if (length ==\
    \ lastPrimeLength) {\n                    output += tempString\n             \
    \       tempString = \"\"\n                }\n            } else if (length <=\
    \ 3) {\n                output += tempString\n                tempString = \"\"\
    \n            } else {\n                lastPrimeLength = length\n           \
    \ }\n            currentPrimeLength = lastPrimeLength\n            isPrime = length.isPrime\n\
    \            lastWordIndex = lastIndex + 1 \n        }\n        output += tempString\n\
    \        output.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptm4_smwt.scala:31:27 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    output += tempString\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a\
    \ member of List[String] - did you mean List[String].!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmptm4_smwt.scala:35:23 ------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m                output += tempString\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of List[String]\
    \ - did you mean List[String].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptm4_smwt.scala:41:29\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m            isPrime = length.isPrime\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      value isPrime is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmptm4_smwt.scala:44:15 ------------------------\e[0m\e\
    [0m\n\e[31m44 |\e[0m        output += tempString\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of List[String] - did\
    \ you mean List[String].!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(' ')\n        val\
    \ primeWords = primeFactorization(words.size)\n        val newWords = words.map(x\
    \ => (x.toUpperCase()))\n            .filter(x => primeWords.contains(primeFactorization(x)))\n\
    \        val sortedNewWords = newWords.sortBy(x => x.toUpperCase)\n        sortedNewWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbv1sqgmx.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimeWords\e[0m = primeFactorization(words.size)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: primeFactorization\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979335
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val wordsList = sentence.split(\" \").toList\n\
    \        val wordsSortedList = wordsList.sorted\n        val primes = List(2,3,5,7,11,13,17,19,23,29)\n\
    \        val primeList = primes.filter(x => wordsSortedList.contains(x) && x >\
    \ 1).sortWith(_ < _)\n        val newList = primeList.toList.flatMap(x => wordsList.toList.filter(w\
    \ => w.length == x).toList).toList.mkString(\" \")\n        newList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkgzchgz4.scala:27)\n\tat Problem.main(tmpkgzchgz4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val lengths = sentence.split(\" \").toSet.toList.map(_.length).toList\n\
    \        lengths.forall(_ == lengths.max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1as7c33m.scala:20:22\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        lengths.forall(_ == lengths.max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    Boolean\n\e[31m   |\e[0m        Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val sentences = sentence.split(\" \").toList\n\
    \        val primes = sentences.map(x => x.length)\n        primes.toList.sortBy(_).reverse.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmphalr7t0f.scala:21:29 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        primes.toList.sortBy(_).reverse.mkString(\e[31m\"\
    \ \"\e[0m)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m \
    \  |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$1 of expanded function:\n\e[31m   |\e\
    [0m   _$1 => primes.toList.sortBy(_$1).reverse.mkString(\e[32m\" \"\e[0m).\n\e\
    [31m\e[31m-- Error: /tmp/tmphalr7t0f.scala:21:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        primes.toList.sortBy(_).reverse.mkString(\e[31m\"\
    \ \"\e[0m)\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659979337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var res = \"\"\n        var count = 1\n    \
    \    var charSet = mutable.Set.empty[Char]\n        for (c <- sentence) {\n  \
    \          if (!charSet.contains(c)) {\n                charSet += c\n       \
    \         res += c.toString\n            }\n            count += c.length\n  \
    \          if (count >= 2) {\n                res += \" \"\n                count\
    \ = 1\n            }\n        }\n        return res.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqj9dx2cp.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mcharSet\e[0m = mutable.Set.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpqj9dx2cp.scala:27:18 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            count += c.length\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqj9dx2cp.scala:27:23\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            count += c.length\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                value length is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659979339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words: List[String] = sentence.split(' ').filter(_.nonEmpty)\n\
    \        if (words.length == 1 || words.length == 0)\n            return \"\"\n\
    \        val primes = List(1, 3)\n        var result = \"\"\n        for (str\
    \ <- words) {\n            val num = (str.length).toInt\n            var prime\
    \ = true\n            for (i <- primes) {\n                if (num % i == 0) {\n\
    \                    prime = false\n                    break\n              \
    \  }\n            }\n            if (prime)\n                result += (str)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0rnisd26.scala:19:60\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = sentence.split(\e[31m' '\e[0m).filter(_.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                  Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0rnisd26.scala:30:20\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var wordList = new mutable.LinkedList[String]()\n\
    \        var output = new StringBuilder\n        var currentWord = \"\"\n    \
    \    var prime = 0\n        var i = 0\n        for (i<- sentence.length){\n  \
    \          if (sentence.charAt(i) == ' ') {\n                prime = true\n  \
    \              currentWord = currentWord.toString.trim\n                if (prime\
    \ == 1) {\n                    wordList.add(currentWord)\n                }\n\
    \                wordList.clear()\n                prime = false\n           \
    \     currentWord = \"\"\n            }\n            else if (sentence.charAt(i)\
    \ == '\"'){\n                output.append (currentWord)\n                currentWord\
    \ = \"\"\n            }\n            else {\n                currentWord = currentWord.toString\
    \ + sentence.charAt(i)\n            }\n        }\n        return output.append\
    \ (currentWord).toString\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb5bfw9y2.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mwordList\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb5bfw9y2.scala:24:17\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (i<-\
    \ sentence.length){\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                 value foreach is not a member of Int\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        if(sentence.isEmpty) {\n            return \"\
    \"\n        }\n        val words = sentence.split(\" \").map(w => w.trim)\n  \
    \      val primes = words.map(w => (w.length)).filter(w => w.isPrime)\n      \
    \  val newWords = words.filter(w => primes.contains(w.length))\n        val res\
    \ =\n            if(words.size==1) \"\"\n            else {\n                val\
    \ first = primes.head\n                val rest = primes.tail\n              \
    \  val combined = rest.zip(newWords).map{ case (r,w) => r+w }.mkString(\" \")\n\
    \                val rest2 = rest.map(w => \" \" + w).mkString(\" \")\n      \
    \          combined + rest2\n            }\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpodzayw2j.scala:23:62 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.map(\e\
    [36mw\e[0m => (w.length)).filter(\e[36mw\e[0m => w.isPrime)\n\e[31m\e[31m   |\e\
    [0m                                                            ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    value isPrime is not a member\
    \ of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659979342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val sentenceArray = sentence.split(\" \").toArray\n\
    \        val resultArray = new StringBuilder()\n        var i = 0\n        while\
    \ (i < sentenceArray.length-1) {\n            var flag = true\n            for\
    \ (a <- 1 to sentenceArray(i).length) {\n                if (math.gcd(sentenceArray(i).length,\
    \ a) != 1) {\n                    flag = false\n                    break\n  \
    \              }\n            }\n            if (!flag) {\n                break\n\
    \            }\n            resultArray.append(sentenceArray(i))\n           \
    \ resultArray.append(\" \")\n            i += 1\n        }\n        resultArray.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz_79lof0.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mif\e[0m (math.gcd(sentenceArray(i).length,\
    \ a) != \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    value gcd is not a member of math\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpz_79lof0.scala:27:20 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz_79lof0.scala:31:16\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var rec : String = sentence\n        var prime\
    \ : Boolean = true\n        while(prime) {\n            rec = removePrimes(rec)\n\
    \            prime = rec.length < 2\n        }\n        val result = rec \n  \
    \      result \n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnvht7gvp.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            rec = removePrimes(rec)\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ removePrimes\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n      val words : List[String] = sentence.split(\" \"\
    ).filterNot(_.isEmpty)\n      val isPrime : HashSet[Int] = HashSet(2 to (math.sqrt(words.length.toDouble)\
    \ + 1))\n      val result : List[String] = words.filter(i => (isPrime(i) && result.contains(i)))\n\
    \      result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp32iv2u10.scala:19:62\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m      \e[33mval\e[0m \e[36mwords\e\
    [0m : \e[35mList\e[0m[\e[35mString\e[0m] = sentence.split(\e[31m\" \"\e[0m).filterNot(_.isEmpty)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                 Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp32iv2u10.scala:20:49\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36misPrime\e\
    [0m : \e[35mHashSet\e[0m[\e[35mInt\e[0m] = HashSet(\e[31m2\e[0m to (math.sqrt(words.length.toDouble)\
    \ + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                    \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                            Found:    Double\n\e[31m   |\e[0m\
    \                                                 Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp32iv2u10.scala:21:61 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33mval\e[0m \e[36mresult\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m] = words.filter(\e[36mi\e[0m => (isPrime(i) && result.contains(i)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^\e[0m\n\e[31m   |\e[0m                                                \
    \  Found:    (i : String)\n\e[31m   |\e[0m                                   \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val m = sentence.split(\"\\\\s\").map { word\
    \ => word.length }.max\n        sentence.split(\"\\\\s\").flatMap{ word => word.map(x\
    \ => if(x == 1) 1 else if (x%2==0) 2 else x).filter(x => x == m).map(x => word)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1_1ryh88.scala:33:0 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1_1ryh88.scala:32:1\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp1_1ryh88.scala:22:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m22 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659979342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val ls = sentence.split(\" \").map(_.toChar).toList\n\
    \        val s = ls.map(x => if (x.isPrime) x.toString else x).toList\n      \
    \  ls diff s\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb3h1i016.scala:19:43 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mls\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).map(_.toChar).toList\n\e[31m\e[31m   |\e[0m                  \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \           value toChar is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmpb3h1i016.scala:19:50\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mls\e[0m = sentence.split(\e[31m\" \"\e[0m).map(_.toChar).toList\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659979343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here.\n        val result\
    \ = new ListBuffer[String]()\n        for(i <- 1 to sentence.length) yield {\n\
    \            val temp = sentence.substring(0,i)\n            val checker = PrimeNumbers.find(s\
    \ => temp.length == s.length && temp.substring(1,temp.length) == s)\n        \
    \    if(checker == None) yield temp\n            else yield \"\"\n        }\n\
    \        val string = new StringBuilder()\n        for(i <- 0 to result.size -\
    \ 1) string.append(result(i))\n        string.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4nblitgf.scala:24:32 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(checker == None) \e[33myield\e\
    [0m temp\n\e[31m\e[31m   |\e[0m                                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                'then' expected, but 'yield' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nblitgf.scala:23:26 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mchecker\e[0m = PrimeNumbers.find(\e\
    [36ms\e[0m => temp.length == s.length && temp.substring(\e[31m1\e[0m,temp.length)\
    \ == s)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: PrimeNumbers\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp4nblitgf.scala:26:8 -----------------\e\
    [0m\e[0m\n\e[33m25 |\e[0m            \e[33melse\e[0m \e[33myield\e[0m \e[31m\"\
    \"\e[0m\n\e[33m26 |\e[0m        }\n\e[33m\e[33m   |\e[0m                     \
    \    ^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement position;\
    \ you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 warning found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var str : String = sentence\n        val set\
    \ = scala.collection.mutable.Set[Int]()\n        var str2 :String = \"\"\n   \
    \     var index = 0\n        while (index != str.length){\n            if (set.contains(str.charAt(index))){\n\
    \                index = str.charAt(index).toInt\n                index += 1\n\
    \                while (set.contains(str.charAt(index))){\n                  \
    \  str = str + str.charAt(index)\n                    index += 1\n           \
    \     }\n            }else{\n                index+=1\n                set.add(str.charAt(index))\n\
    \            }\n        }\n        while (str.charAt(0) != ''){\n            str\
    \ += str.charAt(0)\n        }\n        while (str.charAt(str.length-1) != ''){\n\
    \            str += str.charAt(str.length-1)\n        }\n        str2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9kaq3smm.scala:36:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mwhile\e[0m (str.charAt(\e[31m0\e[0m) !=\
    \ ''){\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m  \
    \ |\e[0m                                empty character literal\n\e[31m\e[31m--\
    \ Error: /tmp/tmp9kaq3smm.scala:39:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mwhile\e[0m (str.charAt(str.length-\e[31m1\e\
    [0m) != ''){\n\e[31m\e[31m   |\e[0m                                          \
    \ ^\e[0m\n\e[31m   |\e[0m                                           empty character\
    \ literal\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9kaq3smm.scala:37:12\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m            str += str.charAt(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m      \
    \      Not found: 'str\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9kaq3smm.scala:40:12\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m            str += str.charAt(str.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m      \
    \      Not found: 'str\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val map = new mutable.HashMap[Int, String]()\n\
    \        for (i <- 0 until sentence.length)\n            if (map.contains(sentence(i).length))\n\
    \                map(sentence(i).length) = sentence(i)\n            else\n   \
    \             map.put(sentence(i).length, sentence(i))\n        return map.values.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf606cdcq.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var result : String = \"\";\n        var primes\
    \ = scala.collection.mutable.ListBuffer[Int]();\n        var wordsLength : Int\
    \ = 0;\n        sentence.split(\" \").foreach(word => {\n            var tmpPrimeNumbers\
    \ = scala.collection.mutable.ListBuffer[Int]();\n            primeNumbersUtil(word,\
    \ primes, tmpPrimeNumbers, wordsLength);\n            primes = primes ++ tmpPrimeNumbers;\n\
    \            wordsLength += tmpPrimeNumbers.size;\n        });\n        result\
    \ +=  primes.toList.mkString(\" \");\n        \n        \n        \n        return\
    \ result;\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdlnjq3in.scala:24:12 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            primeNumbersUtil(word, primes, tmpPrimeNumbers,\
    \ wordsLength);\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Not found: primeNumbersUtil\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val chars = sentence.split(\" \").map(_.toUpperCase).toList\n\
    \        val primes = chars.map(x => isPrime(x)).toSet\n        val result = chars.filter(x\
    \ => primes.contains(x))\n        result.toList.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm0h3jtzq.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = chars.map(\e\
    [36mx\e[0m => isPrime(x)).toSet\n\e[31m\e[31m   |\e[0m                       \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm0h3jtzq.scala:21:55\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = chars.filter(\e[36mx\e[0m => primes.contains(x))\n\e[31m\e[31m   |\e[0m\
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                                  Found:    (x : String)\n\e\
    [31m   |\e[0m                                                  Required: Nothing\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n      var res = \"\"\n      val length = scala.util.Random.nextInt(10)\
    \ + 1\n      val nums = scala.util.Random.nextInt(10) + 1\n      val numsPrime\
    \ = scala.util.Random.nextInt(nums)\n      val newWords = scala.util.Random.nextInt(length)\
    \ + 1 // number of words in sentence\n      val numsPrimeWords = newWords // number\
    \ of prime words in sentence\n      def primeFactors(n: Int) : List[Int] = {\n\
    \        var factors = List[Int]()\n        for (i <- 1 until n) {\n         \
    \ if (n % i == 0) {\n            factors :+= i\n          }\n        }\n     \
    \   return factors\n      }\n      val primeFactorsWords = primeFactors(length)\
    \ // number of prime factors for each word\n      for (i <- 1 until length) {\
    \ // for each word in sentence\n        var foundPrime = true\n        while (foundPrime)\
    \ {\n          val isPrime = scala.util.Random.nextInt(primeFactorsWords.size)\n\
    \          if (primeFactorsWords(isPrime) != numsPrime) {\n            foundPrime\
    \ = false\n          }\n        }\n        val wordsToAdd = scala.util.Random.nextInt(newWords)\
    \ + 1\n        res += sentence(i) + \" \" + words(numsPrimeWords, newWords, wordsToAdd)\n\
    \      }\n      res\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5foppf6l.scala:44:12 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        res += sentence(i) + \e[31m\" \"\e[0m + words(numsPrimeWords,\
    \ newWords, wordsToAdd)\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        value += is not a member of String - did you mean String.!=?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5foppf6l.scala:44:35 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        res += sentence(i) + \e[31m\" \"\e[0m + words(numsPrimeWords,\
    \ newWords, wordsToAdd)\n\e[31m\e[31m   |\e[0m                               \
    \    ^^^^^\e[0m\n\e[31m   |\e[0m                                   Not found:\
    \ words\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val chars = sentence.split(\" \").map(_.toChar).mkString(\"\
    \")\n        val nums = chars.map(x => if(x != 'i') x^4 else x^6)\n        val\
    \ primes = nums.filter(_ % 2 != 0).takeWhile(_ < 1000)\n        val words2 = chars.filter(_\
    \ != 'i').filter(_ != 'e').filter(_ != 'e').filter(_ != 'i').filter(_ != 'o').filter(_\
    \ != 'u').filter(_ != 'y').takeWhile(_ < 1000)\n        primes.zip(words2).flatMap(x\
    \ => x).toList.toString()\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa83cg_vn.scala:19:46 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).map(_.toChar).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                value toChar is not a member of String\n\e[31m\e\
    [31m-- Error: /tmp/tmpa83cg_vn.scala:19:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = sentence.split(\e\
    [31m\" \"\e[0m).map(_.toChar).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659979347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        sentence.split(\"\\\\s+\").map(_.length).filter(_.isPrime).sortBy(_.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbmznhmbs.scala:19:54 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        sentence.split(\e[31m\"\\\\s+\"\e[0m).map(_.length).filter(_.isPrime).sortBy(_.toInt)\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value isPrime is not a\
    \ member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659979346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var primes = List(2,3,5,7,11,13,17,19)\n   \
    \     val str = sentence.split(\" \").filter(_ != \" \")\n        val str = str.map{_.toUpper}\n\
    \        str.map(s => {\n            val prime = primes.find(p => p*p < s.length)\n\
    \            if (prime == -1) primes += prime\n            else primes.remove(prime)\n\
    \            prime\n        }).filter(prime => primes.contains(prime)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5z9c2wrs.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstr\e[0m = str.map{_.toUpper}\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mstr\
    \ is already defined as \e[33mvalue\e[0m \e[35mstr\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmp5z9c2wrs.scala:24:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (prime == -\e[31m1\e[0m) primes\
    \ += prime\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m    Values of types Option[Int] and Int cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp5z9c2wrs.scala:24:36 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (prime == -\e[31m1\e[0m) primes\
    \ += prime\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m      value += is not a member of List[Int] - did you mean List[Int].!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5z9c2wrs.scala:25:24 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m primes.remove(prime)\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove\
    \ is not a member of List[Int], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659979347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var words = mutable.Set[String]()\n        for\
    \ (i <- 0 until sentence.length) {\n            val currentChar = sentence(i)\n\
    \            if (isLetter(currentChar)) {\n                words ++= sentence.substring(0,\
    \ i).split(\" \")\n            }\n        }\n        val result: mutable.ListBuffer[String]\
    \ = new mutable.ListBuffer[String]()\n        val maxLength = Math.ceil(Math.sqrt(words.size))\n\
    \        words.forall { x =>\n            val length = x.length\n            if\
    \ (length <= maxLength && isPrime(length)) {\n                result.add(x)\n\
    \            }\n        }\n        result.toList.reverse.mkString(\" \")\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzc9f8y38.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mwords\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzc9f8y38.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (isLetter(currentChar)) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      Not found: isLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzc9f8y38.scala:26:20 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m: mutable.ListBuffer[\e[35mString\e\
    [0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzc9f8y38.scala:26:53\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m: mutable.ListBuffer[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                    \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val splitSentence = sentence.split(\" \")\n\
    \        val primes = splitSentence.filter { x => x.isPrime }\n        val result\
    \ = splitSentence.filterNot(x => primes.contains(x))\n        result.sortBy(x\
    \ => x).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu_o2j157.scala:20:51 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = splitSentence.filter\
    \ { \e[36mx\e[0m => x.isPrime }\n\e[31m\e[31m   |\e[0m                       \
    \                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \              value isPrime is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659979347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val result = new collection.mutable.ListBuffer[String]()\n\
    \        for (word <- sentence.split(\" \"))\n            if (prime(word.length)\
    \ == 1)\n                result += word\n        result.toString()\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv77quhuy.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (prime(word.length) == \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val newWordsList = new mutable.LinkedList[String]()\n\
    \        for (i<-0 to (len(sentence)-1)){\n            if (isPrime(sentence(i))){\n\
    \                newWordsList.add(sentence(i))\n            }\n        }\n   \
    \     return newWordsList.toList.sorted.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptprkv_6w.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewWordsList\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptprkv_6w.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i<-\e\
    [31m0\e[0m to (len(sentence)-\e[31m1\e[0m)){\n\e[31m\e[31m   |\e[0m          \
    \            ^^^\e[0m\n\e[31m   |\e[0m                      Not found: len\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptprkv_6w.scala:21:16\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m\
    \ (isPrime(sentence(i))){\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val m = sentence.count(' ')\n        var result\
    \ = \"\"\n        var i = 0\n        val primes = mutable.ListBuffer[Int]()\n\
    \        while(i < m) {\n            if(primes.contains(sentence(i).length))\n\
    \            primes += sentence(i).length\n            i += 1\n        }\n   \
    \     var j = 0\n        while(j < primes.length) {\n            result += \"\
    \ \" + sentence.split(\" \").filter(x => x.size == primes(j))(0)\n           \
    \ j += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3n5flman.scala:19:31\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e\
    [0m = sentence.count(\e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \             ^^^\e[0m\n\e[31m   |\e[0m                               Found: \
    \   (\e[31m' '\e[0m : Char)\n\e[31m   |\e[0m                               Required:\
    \ Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3n5flman.scala:22:21\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val arr = sentence.split(\" \").map(_.toInt).toArray\n\
    \        val l = arr.length\n        val isPrime = (0 until l).filter(_ => arr(_)\
    \ % 2 == 0).forall(!arr.contains)\n        if (l == 0) {\n            \"\"\n \
    \       }\n        val newArr = arr.filterNot(_ % 2 == 0)\n        var result\
    \ = \"\"\n        val newArrLen = newArr.length\n        for (i<-0 until newArrLen){\n\
    \            result += newArr(i) + \" \" //add it back\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpnsj0z3vl.scala:21:50 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m0\e\
    [0m until l).filter(_ => arr(_) % \e[31m2\e[0m == \e[31m0\e[0m).forall(!arr.contains)\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$3 of expanded function:\n\e[31m\
    \   |\e[0m   _$3 => arr(_$3) % 2 == 0.\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpnsj0z3vl.scala:21:70 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m0\e[0m until l).filter(_\
    \ => arr(_) % \e[31m2\e[0m == \e[31m0\e[0m).forall(!arr.contains)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value unary_!\
    \ is not a member of Int => Boolean\n\e[33m\e[33m-- [E129] Potential Issue Warning:\
    \ /tmp/tmpnsj0z3vl.scala:23:12 ----------------\e[0m\e[0m\n\e[33m23 |\e[0m   \
    \         \e[31m\"\"\e[0m\n\e[33m\e[33m   |\e[0m            ^^\e[0m\n\e[33m  \
    \ |\e[0mA pure expression does nothing in statement position; you may be omitting\
    \ necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1659979348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(' ').toArray\n  \
    \      val wordsLength = words.length\n        var primes = scala.collection.mutable.ArrayBuffer(2,3,5,7,11,13,17)\n\
    \        var primeCounter = primes.count(_ == wordsLength)\n        var newString\
    \ = new StringBuilder\n        var newWord = \"\"\n        for(word <- words)\
    \ {\n            val len = word.length\n            val isPrime = primes.contains(len)\n\
    \            if(isPrime) {\n                primeCounter -= 1\n              \
    \  primes.clear()\n                primes.+=primes.last+2\n                primeCounter\
    \ -= 1\n                if(primeCounter == 0) newString += word + \" \" \n   \
    \             primeCounter += 1\n            } else {\n                newWord\
    \ += word + \" \" \n            }\n        }\n        return newString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfv8d2nyz.scala:31:31 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                primes.+=primes.last+\e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m    \
    \                           expression expected but \e[31m'.'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpfv8d2nyz.scala:31:23 -----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                primes.+=primes.last+\e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m+=\e[0m in \e[33mtrait\e\
    [0m \e[35mGrowable\e[0m with types\n\e[31m   |\e[0m (elem1: Int, elem2: Int, elems:\
    \ Int*): scala.collection.mutable.ArrayBuffer[Int]\n\e[31m   |\e[0m (elem: Int):\
    \ scala.collection.mutable.ArrayBuffer[Int]\n\e[31m   |\e[0mmatch expected type\
    \ ?{ primes: ? }\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfv8d2nyz.scala:33:51\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m                \e[33mif\e[0m(primeCounter\
    \ == \e[31m0\e[0m) newString += word + \e[31m\" \"\e[0m \n\e[31m\e[31m   |\e[0m\
    \                                                   ^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                                   Found:    String\n\e\
    [31m   |\e[0m                                                   Required: Char\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfv8d2nyz.scala:39:15\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mreturn\e[0m newString\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \     Found:    (newString : StringBuilder)\n\e[31m   |\e[0m               Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        sentence.split(\" \").map(word => primeFactors(word.length)).toSet.toList\n\
    \            .map(x => \" \" + x.mkString(\" \")).mkString(\" \")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1z_q_5en.scala:19:40 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        sentence.split(\e[31m\" \"\e[0m).map(\e[36mword\e\
    [0m => primeFactors(word.length)).toSet.toList\n\e[31m\e[31m   |\e[0m        \
    \                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                              Not found: primeFactors\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmp1z_q_5en.scala:19:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        sentence.split(\e[31m\" \"\e[0m).map(\e[36mword\e\
    [0m => primeFactors(word.length)).toSet.toList\n\e[31m\e[31m   |\e[0m        \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659979348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        var ans = \"\"\n        for (word <- sentence.split(\"\
    \\\\s+\")) {\n            val len = word.length\n            val num = PrimeNumber(len)\n\
    \            val str1 = ans + word + \" \"\n            if (num < len) ans = str1\n\
    \        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuwwuyc93.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = PrimeNumber(len)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Not found: PrimeNumber\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979347
