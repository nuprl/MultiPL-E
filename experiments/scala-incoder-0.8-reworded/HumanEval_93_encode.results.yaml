language: scala
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i\
    \ <- 0 until message.length) chars += message(i)\n        chars.distinct\n   \
    \         .map((c: Char) => {\n            val newCase = \n                (c).toLowerCase\
    \ \n                    .replaceAll(\"aeiou\", \"qwrty\")\n                  \
    \  .replaceAll(\"AEIOU\", \"QWRTY\")\n                    .replaceAll(\"i\", \"\
    k\")\n                    .replaceAll(\"I\", \"K\")\n                    .replaceAll(\"\
    u\", \"h\")\n                    .replaceAll(\"U\", \"H\")\n                 \
    \   .replaceAll(\"o\", \"l\")\n                    .replaceAll(\"O\", \"L\")\n\
    \                    .replaceAll(\"a\", \"s\")\n                    .replaceAll(\"\
    A\", \"S\")\n                    .replaceAll(\"e\", \"x\")\n                 \
    \   .replaceAll(\"E\", \"X\")\n                    .replaceAll(\"b\", \"z\")\n\
    \                    .replaceAll(\"B\", \"Z\")\n                    .replaceAll(\"\
    h\", \"s\")\n                    .replaceAll(\"H\", \"S\")\n                 \
    \   .replaceAll(\"l\", \"r\")\n                    .replaceAll(\"L\", \"R\")\n\
    \                    .replaceAll(\"s\", \"t\")\n                    .replaceAll(\"\
    S\", \"T\")\n                    .replaceAll(\"q\", \"w\")\n                 \
    \   .replaceAll(\"Q\", \"W\")\n                    .replaceAll(\"e\", \"x\")\n\
    \                    .replaceAll(\"E\", \"X\")\n                    .replaceAll(\"\
    q\", \"z\")\n                    .replaceAll(\"Q\", \"Z\")\n                 \
    \   .replaceAll(\"r\", \"y\")\n                    .replaceAll(\"R\", \"Y\")\n\
    \                    .replaceAll(\"l\", \"t\")\n                    .replaceAll(\"\
    L\", \"T\")\n                    .replaceAll(\"q\", \"y\")\n                 \
    \   .replaceAll(\"Q\", \"Y\")\n                    .replaceAll(\"t\", \"v\")\n\
    \                    .replaceAll(\"T\", \"V\")\n                    .replaceAll(\"\
    q\", \"z\")\n                    .replaceAll(\"Q\", \"Z\")\n                 \
    \   .replaceAll(\"y\", \"x\")\n                    .replaceAll(\"Y\", \"X\")\n\
    \                    .replaceAll(\"z\", \"y\")\n                    .replaceAll(\"\
    Z\", \"Y\")\n                    .replaceAll(\"h\", \"s\")\n                 \
    \   .replaceAll(\"H\", \"S\")\n                    .replaceAll(\"s\", \"r\")\n\
    \                    .replaceAll(\"S\", \"R\")\n                    .replaceAll(\"\
    s\", \"y\")\n                    .replaceAll(\"S\", \"Y\")\n                 \
    \   .replaceAll(\"r\", \"t\")\n                    .replaceAll(\"R\", \"T\")\n\
    \                    .replaceAll(\"r\", \"v\")\n                    .replaceAll(\"\
    R\", \"V\")\n                    .replaceAll(\"y\", \"x\")\n                 \
    \   .replaceAll(\"Y\", \"X\")\n                    .replaceAll(\"y\", \"z\")\n\
    \                    \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3x1jb901.scala:76:4 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp3x1jb901.scala:85:0 ----------------------------\e[0m\e[0m\n\e[31m85\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3x1jb901.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // Your code here\n        var newMessage = message\n\
    \        for(letter <- newMessage){\n            letter match {\n            \
    \    case 'a' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'b' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'c' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'd' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'e' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'f' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'g' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'h' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'i' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'j' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'k' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'l' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'm' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'n' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'o' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'p' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'q' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'r' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 's' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 't' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'u' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'v' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'w' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'x' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'y' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case 'z' => \n                    newMessage = newMessage.map(_.toUpperCase())\n\
    \                case _ => \n                    if(newMessage.indexOf(\"aeiou\"\
    ) > -1){\n                        newMessage = newMessage.map(_.toUpperCase())\n\
    \                    }else{\n                        newMessage = newMessage.map(_.toLowerCase())\n\
    \                    }\n            }\n        }\n        for(vowel <- \"aeiou\"\
    ){\n            var indexOfVowel = newMessage.indexOf(vowel)\n            if(indexOfV\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzug4ywhx.scala:82:4 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzug4ywhx.scala:92:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m92 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpzug4ywhx.scala:20:50 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m                    newMessage = newMessage.map(_.toUpperCase())\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzug4ywhx.scala:22:50\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    newMessage\
    \ = newMessage.map(_.toUpperCase())\n\e[31m\e[31m   |\e[0m                   \
    \                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                   value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpzug4ywhx.scala:24:50 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    newMessage = newMessage.map(_.toUpperCase())\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzug4ywhx.scala:26:50\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                    newMessage\
    \ = newMessage.map(_.toUpperCase())\n\e[31m\e[31m   |\e[0m                   \
    \                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                   value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpzug4ywhx.scala:28:50 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    newMessage = newMessage.map(_.toUpperCase())\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 "
  stdout: ''
  timestamp: 1659979058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val charArray = message.toCharArray.asInstanceOf[mutable.WrappedArray[Char]]\n\
    \        val vowelArray = Array('a','e','i','o','u')\n        val charMap = new\
    \ HashMap[Char, Char]\n        val charMap2 = new HashMap[Char, Char]\n\n    \
    \    for (i <- 0 to charArray.length-1) {\n          charMap(charArray(i)) = charMap2.get(charArray(i))\n\
    \          charMap2.update(charArray(i), charMap(charArray(i+1))) \n        }\n\
    \n        charMap2.toSeq.map(_.toString) mkString \"\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ubdy0sk.scala:15:57 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcharArray\e[0m = message.toCharArray.asInstanceOf[mutable.WrappedArray[\e\
    [35mChar\e[0m]]\n\e[31m\e[31m   |\e[0m                                       \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3ubdy0sk.scala:21:46 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m          charMap(charArray(i)) = charMap2.get(charArray(i))\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    Option[Char]\n\
    \e[31m   |\e[0m                                  Required: Char\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val letters = message.map(x => x.toUpperCase)\n      \
    \  val vowels = \"AEIOUaeiou\".toCharArray\n        val vowelIndices = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val currentLetter = 0\n        for (letter <- letters) {\n          \
    \  val indexOfVowel = vowels.indexOf(letter)\n            vowelIndices += indexOfVowel\n\
    \            if (indexOfVowel == currentLetter) {\n                currentLetter\
    \ += 1\n            }\n        }\n        val encodedMessage = message.map(letter\
    \ => vowels(vowelIndices(currentLetter - 1)))\n        encodedMessage.toString\
    \ + message.map(letter => vowels(vowelIndices(currentLetter + 1)))\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp20x_je8f.scala:15:41 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = message.map(\e\
    [36mx\e[0m => x.toUpperCase)\n\e[31m\e[31m   |\e[0m                          \
    \             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \   value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = scala.collection.mutable.List(\"a\",\"\
    b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"\
    o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\")\n     \
    \   val vowels = scala.collection.mutable.List(\"a\",\"e\",\"i\",\"o\",\"u\")\n\
    \        val result = new StringBuilder()\n        for( x <- message.toCharArray())\
    \ {\n           if(alphabet(x) != x) alphabet(x) := vowels(x)\n           else\
    \ alphabet(x) := alphabet(x - 2)\n        }\n        for( x <- vowels) {\n   \
    \         if(result.indexOf(x.toString()) == -1) result +:= x.toString()\n   \
    \     }\n        result.toString()\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2cvb43ua.scala:15:48 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36malphabet\e[0m = scala.collection.mutable.List(\e\
    [31m\"a\"\e[0m,\e[31m\"b\"\e[0m,\e[31m\"c\"\e[0m,\e[31m\"d\"\e[0m,\e[31m\"e\"\e\
    [0m,\e[31m\"f\"\e[0m,\e[31m\"g\"\e[0m,\e[31m\"h\"\e[0m,\e[31m\"i\"\e[0m,\e[31m\"\
    j\"\e[0m,\e[31m\"k\"\e[0m,\e[31m\"l\"\e[0m,\e[31m\"m\"\e[0m,\e[31m\"n\"\e[0m,\e\
    [31m\"o\"\e[0m,\e[31m\"p\"\e[0m,\e[31m\"q\"\e[0m,\e[31m\"r\"\e[0m,\e[31m\"s\"\e\
    [0m,\e[31m\"t\"\e[0m,\e[31m\"u\"\e[0m,\e[31m\"v\"\e[0m,\e[31m\"w\"\e[0m,\e[31m\"\
    x\"\e[0m,\e[31m\"y\"\e[0m,\e[31m\"z\"\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue List is\
    \ not a member of scala.collection.mutable - did you mean mutable.ListMap?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2cvb43ua.scala:16:46 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = scala.collection.mutable.List(\e\
    [31m\"a\"\e[0m,\e[31m\"e\"\e[0m,\e[31m\"i\"\e[0m,\e[31m\"o\"\e[0m,\e[31m\"u\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue List is not a member of scala.collection.mutable - did\
    \ you mean mutable.ListMap?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        def swapCase(s:String) : String = {\n            var newS\
    \ = \"\"\n            for(i <- 0 until s.length){\n                var c1 = s.charAt(i)\n\
    \                var c2 = s.charAt(i+1)\n                newS = newS + c2.toUpperCase\
    \ + c1.toLowerCase \n            }\n            return newS\n        }\n     \
    \   val newMessage = swapCase(message)\n        val vowels = Set(\"A\", \"E\"\
    , \"I\", \"O\", \"U\")\n        val vowelsPlusOne = vowels ++ Set(\"A\",\"E\"\
    ,\"I\",\"O\",\"U\")\n        val vowelsPlusTwo = vowelsPlusOne ++ Set(\"A\",\"\
    E\",\"I\",\"O\",\"U\")\n        val vowelsPlusThree = vowelsPlusTwo ++ Set(\"\
    A\",\"E\",\"I\",\"O\",\"U\")\n        val vowelsPlusFour = vowelsPlusThree ++\
    \ Set(\"A\",\"E\",\"I\",\"O\",\"U\")\n        val vowelsPlusFive = vowelsPlusFour\
    \ ++ Set(\"A\",\"E\",\"I\",\"O\",\"U\")\n        val vowelsPlusSix = vowelsPlusFive\
    \ ++ Set(\"A\",\"E\",\"I\",\"O\",\"U\")\n        val vowelsPlusSeven = vowelsPlusSix\
    \ ++ Set(\"A\",\"E\",\"I\",\"O\",\"U\")\n        val vowelsPlusEight = vowelsPlusSeven\
    \ ++ Set(\"A\",\"E\",\"I\",\"O\",\"U\")\n        val vowelsPlusNine = vowelsPlusEight\
    \ ++ Set(\"A\",\"E\",\"I\",\"O\",\"U\")\n        val vowelsPlusTen = vowelsPlusNine\
    \ ++ Set(\"A\",\"E\",\"I\",\"O\",\"U\")\n        val vowelsPlusEleven = vowelsPlusTen\
    \ ++ Set(\"A\",\"E\",\"I\",\"O\",\"U\")\n        val vowelsPlusTwelve = vowelsPlusEleven\
    \ ++ Set(\"A\",\"E\",\"I\",\"O\",\"U\")\n        val vowelsPlusThirteen = vowelsPlusTwelve\
    \ ++ Set(\"A\",\"E\",\"I\",\"O\",\"U\")\n        val vowelsPlusFourteen = vowelsPlusThirteen\
    \ ++ Set(\"A\",\"E\",\"I\",\"O\",\"U\")\n        val vowelsPlusFifteen = vowelsPlusFourteen\
    \ ++ Set(\"A\",\"E\",\"I\",\"O\",\"U\")\n        val vowelsPlusSixteen = vowelsPlusFifteen\
    \ ++ Set(\"A\",\"E\",\"\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppd642l2_.scala:41:65 -----------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mvowelsPlusSixteen\e[0m =\
    \ vowelsPlusFifteen ++ Set(\e[31m\"A\"\e[0m,\e[31m\"E\"\e[0m,\"\n\e[31m\e[31m\
    \   |\e[0m                                                                 ^\e\
    [0m\n\e[31m   |\e[0m                                                 unclosed\
    \ string literal\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppd642l2_.scala:20:33\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                newS = newS\
    \ + c2.toUpperCase + c1.toLowerCase \n\e[31m\e[31m   |\e[0m                  \
    \            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \  value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmppd642l2_.scala:20:50 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                newS = newS + c2.toUpperCase + c1.toLowerCase \n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppd642l2_.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var result = \"\"\n        var currentLetter = 0\n   \
    \     var i = 0\n        while (i < message.length) {\n            currentLetter\
    \ = message.charAt(i).toInt\n            if ((currentLetter == 0) || (currentLetter\
    \ == 1))\n                result += currentLetter\n            else if (currentLetter\
    \ == 2) {\n                result += message.charAt(i + 1)\n                i\
    \ = i + 2\n            }\n            else\n                result += message.charAt(i)\n\
    \            i = i + 1\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnzrxsyzy.scala:33)\n\tat Problem.main(tmpnzrxsyzy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // Create an empty string and go through the message\n\
    \        // and replace all letters 2 places ahead of the vowel\n        // with\
    \ a lower case letter of the English alphabet\n        val encMessage : String\
    \ = \"\"\n        for(i <- message) {\n            if (i == 'a') encMessage +=\
    \ \"g\"\n            else if (i == 'e') encMessage += \"q\"\n            else\
    \ if (i == 'i') encMessage += \"k\"\n            else if (i == 'o') encMessage\
    \ += \"e\"\n            else if (i == 'u') encMessage += \"j\"\n            else\
    \ if (i == 'A') encMessage += \"G\"\n            else if (i == 'E') encMessage\
    \ += \"Q\"\n            else if (i == 'I') encMessage += \"K\"\n            else\
    \ if (i == 'O') encMessage += \"E\"\n            else if (i == 'U') encMessage\
    \ += \"J\"\n            else if (i == 'B') encMessage += \"G\"\n            else\
    \ if (i == 'F') encMessage += \"Q\"\n            else if (i == 'K') encMessage\
    \ += \"K\"\n            else if (i == 'M') encMessage += \"M\"\n            else\
    \ if (i == 'P') encMessage += \"P\"\n            else if (i == 'T') encMessage\
    \ += \"T\"\n            else if (i == 'X') encMessage += \"X\"\n            else\
    \ if (i == 'Z') encMessage += \"Z\"\n            else if (i == 'c') encMessage\
    \ += \"l\"\n            else if (i == 'd') encMessage += \"m\"\n            else\
    \ if (i == 's') encMessage += \"s\"\n            else if (i == 'f') encMessage\
    \ += \"v\"\n            else if (i == 'g') encMessage += \"x\"\n            else\
    \ encMessage += i\n        }\n        encMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2j4_uyjy.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (i == \e[31m'a'\e[0m) encMessage\
    \ += \e[31m\"g\"\e[0m\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of String - did you mean\
    \ encMessage.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2j4_uyjy.scala:21:42\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (i == \e[31m'e'\e[0m) encMessage += \e[31m\"q\"\e[0m\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        value += is not a member of String - did you mean encMessage.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2j4_uyjy.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (i == \e[31m'i'\e\
    [0m) encMessage += \e[31m\"k\"\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not a member\
    \ of String - did you mean encMessage.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp2j4_uyjy.scala:23:42 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            \e[33melse\e[0m \e[33mif\e[0m (i == \e[31m'o'\e[0m) encMessage\
    \ += \e[31m\"e\"\e[0m\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of String - did you mean\
    \ encMessage.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2j4_uyjy.scala:24:42\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (i == \e[31m'u'\e[0m) encMessage += \e[31m\"j\"\e[0m\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        value += is not a member of String - did you mean encMessage.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2j4_uyjy.scala:25:42 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (i == \e[31m'A'\e\
    [0m) encMessage += \e[31m\"G\"\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is not a member\
    \ of Stri"
  stdout: ''
  timestamp: 1659979057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val upperCaseMessage = message.toUpperCase\n        val\
    \ newMessage = mutable.StringBuilder.newBuilder\n\n        for(c <- upperCaseMessage)\
    \ {\n            val index = ((upperCaseMessage.indexOf(c))+2)\n            val\
    \ replacement = englishLetter.charAt(index)\n            newMessage.append(replacement).append(c)\n\
    \        }\n\n        newMessage.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2u4c9yxz.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = mutable.StringBuilder.newBuilder\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2u4c9yxz.scala:20:30 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mreplacement\e[0m = englishLetter.charAt(index)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: englishLetter\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val message = message.toLowerCase\n        val alphabet\
    \ = Array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = Array('a','e','i','o','u')\n        val vowelPosition =\
    \ vowels.map(_.toString.length)\n        val letterPosition = Array(0,2,4,6,8)\n\
    \        val result = message.zip(alphabet)\n        val map1 = message.zip(letterPosition)\n\
    \        val map2 = message.zip(vowelPosition)\n        result.map{case (ch, pos)\
    \ => (\n            if(pos < vowelPosition(ch)) ch\n            else vowels(alphabet(map1(ch))\
    \ - vowels(alphabet(map2(ch))) + pos) })\n                .mkString(\"\")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmxcv__y2.scala:25:79 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m vowels(alphabet(map1(ch))\
    \ - vowels(alphabet(map2(ch))) + pos) })\n\e[31m\e[31m   |\e[0m              \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0m                                             ')' expected, but '}' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmxcv__y2.scala:25:80 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m vowels(alphabet(map1(ch))\
    \ - vowels(alphabet(map2(ch))) + pos) })\n\e[31m\e[31m   |\e[0m              \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0m                                             '}' expected, but ')'\
    \ found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmxcv__y2.scala:15:22 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmessage\e[0m = message.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35mmessage\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var newMessage = message\n        val vowels = \"aeiou\"\
    \n        val letters = \"bcdfghjklmnpqrstvwxyz\"\n        var i = 0\n       \
    \ while(i < newMessage.length){\n            if(letters.indexOf(newMessage(i,\
    \ 1))!=0){\n                newMessage = \n                newMessage.substring(0,i)+\n\
    \                    letters.indexOf(newMessage(i, 1))+\n                    newMessage.substring(i+1)\n\
    \            }\n            i += 1\n        }\n        newMessage\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyd883ktl.scala:20:42\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(letters.indexOf(newMessage(i,\
    \ \e[31m1\e[0m))!=\e[31m0\e[0m){\n\e[31m\e[31m   |\e[0m                      \
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                              \
    \            Found:    (Int, Int)\n\e[31m   |\e[0m                           \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpyd883ktl.scala:23:47 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                    letters.indexOf(newMessage(i, \e[31m1\e[0m))+\n\e\
    [31m\e[31m   |\e[0m                                               ^^^^\e[0m\n\e\
    [31m   |\e[0m                                               Found:    (Int, Int)\n\
    \e[31m   |\e[0m                                               Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val newMessage = message filter { ch =>\n            ch\
    \ match {\n                case c if c.toUpper == c => c.toUpper\n           \
    \     case c if c.toLower == c => c.toLower\n                case _ => c.toUpperCase\n\
    \            }\n        }\n        val letterMap = Map(\"a\" -> \"@\", \"b\" ->\
    \ \"!\", \"c\" -> \"#\", \"d\" -> \"$\", \"e\" -> \"%\", \"f\" -> \"&\", \"g\"\
    \ -> \"*\", \"h\" -> \"(\", \"i\" -> \")\", \"j\" -> \"=\", \"k\" -> \"[\", \"\
    l\" -> \"]\", \"m\" -> \"\\\\\", \"n\" -> \"<\", \"o\" -> \">\", \"p\" -> \"|\"\
    , \"q\" -> \"\\\\\", \"r\" -> \"(\", \"r\" -> \")\", \"s\" -> \"~\", \"t\" ->\
    \ \"1\", \"u\" -> \"2\", \"v\" -> \"3\", \"w\" -> \"4\", \"x\" -> \"5\", \"y\"\
    \ -> \"6\", \"z\" -> \"7\").withDefaultValue(\"\")\n        val vowelMap = Map(\"\
    a\" -> \"A\", \"b\" -> \"B\", \"c\" -> \"C\", \"d\" -> \"D\", \"e\" -> \"E\",\
    \ \"f\" -> \"F\", \"g\" -> \"G\", \"h\" -> \"H\", \"i\" -> \"I\", \"j\" -> \"\
    J\", \"k\" -> \"K\", \"l\" -> \"L\", \"m\" -> \"M\", \"n\" -> \"N\", \"o\" ->\
    \ \"O\", \"p\" -> \"P\", \"q\" -> \"Q\", \"r\" -> \"R\", \"s\" -> \"S\", \"t\"\
    \ -> \"T\", \"u\" -> \"U\", \"v\" -> \"V\", \"w\" -> \"W\", \"x\" -> \"X\", \"\
    y\" -> \"Y\", \"z\" -> \"Z\").withDefaultValue(\"\")\n        val newMessage1\
    \ = newMessage map { ch =>\n            ch match {\n                case ch if\
    \ vowelMap.contains(ch) => vowelMap(ch)\n                case ch if letterMap.contains(ch)\
    \ => letterMap(ch)\n                case _ => ch\n            }\n        }\n \
    \       newMessage1 mkString \"\"\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_ezoes7z.scala:17:46\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e\
    [0m c \e[33mif\e[0m c.toUpper == c => c.toUpper\n\e[31m\e[31m   |\e[0m       \
    \                                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                    Found:    Char\n\e[31m   |\e[0m         \
    \                                   Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_ezoes7z.scala:18:46 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m c \e[33mif\e[0m c.toLower\
    \ == c => c.toLower\n\e[31m\e[31m   |\e[0m                                   \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \        Found:    Char\n\e[31m   |\e[0m                                     \
    \       Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_ezoes7z.scala:19:26 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                \e[33mcase\e[0m _ => c.toUpperCase\n\e[31m\e[31m   |\e[0m \
    \                         ^\e[0m\n\e[31m   |\e[0m                          Not\
    \ found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_ezoes7z.scala:26:45\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e\
    [0m ch \e[33mif\e[0m vowelMap.contains(ch) => vowelMap(ch)\n\e[31m\e[31m   |\e\
    [0m                                             ^^\e[0m\n\e[31m   |\e[0m     \
    \                                        Found:    (ch : Char)\n\e[31m   |\e[0m\
    \                                             Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_ezoes7z.scala:26:61 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e[0m ch \e[33mif\e[0m vowelMap.contains(ch)\
    \ => vowelMap(ch)\n\e[31"
  stdout: ''
  timestamp: 1659979056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = Map('a'->'A','b'->'B','c'->'C','d'->'D','e'->'E','f'->'F','g'->'G','h'->'H','i'->'I','j'->'J','k'->'K','l'->'L','m'->'M','n'->'N','o'->'O','p'->'P','q'->'Q','r'->'R','s'->'S','t'->'T','u'->'U','v'->'V','w'->'W','x'->'X','y'->'Y','z'->'Z')\n\
    \        val replaced_letters = mutable.HashSet[String]()\n        for (letter\
    \ <- message)\n        {\n            if(replaced_letters.contains(letter)) \n\
    \            {\n                val index = alphabet.find(_ == letter).getOrElse(throw\
    \ new Exception(\"letter not found in alphabet: \" + letter))\n              \
    \  replaced_letters += alphabet.apply(index + 2)\n                replaced_letters\
    \ += alphabet.apply(index + 2)\n            } else replaced_letters += letter\n\
    \        }\n        val message_replaced_letters = replaced_letters.toSeq.sortBy(_).mkString(\"\
    \")\n        val replaced_vowels = mutable.HashSet[String]()\n        for (letter\
    \ <- message_replaced_letters)\n        {\n            if(replaced_vowels.contains(letter))\
    \ \n            {\n                val index = alphabet.find(_ == letter).getOrElse(throw\
    \ new Exception(\"letter not found in alphabet: \" + letter))\n              \
    \  replaced_vowels += alphabet.apply(index + 2)\n            } else replaced_vowels\
    \ += letter\n        }\n        val message_replaced_vowels = replaced_vowels.toSeq.sortBy(_).mkString(\"\
    \")\n        val replaced_letters_vowels = message_replaced_letters + message_replaced_vowels\n\
    \        val message_replaced_letters_vowels_replaced_vowels_replaced_letters\
    \ = replaced_letters_vowels.replaceAllIn(message_replaced_vowels_replaced_letters,\
    \ \"V\")\n        message_replaced_letters_vowels_replaced_vowels_replaced_letters.replace(\"\
    a\", \"A\").replace(\"b\", \"B\").replace(\"c\", \"C\").replace(\"d\", \"D\").replace(\"\
    e\", \"E\").replace(\"f\", \"F\").replace(\"g\", \"G\").replace(\"h\", \"H\").replace(\"\
    i\", \"I\").replace(\"j\", \"J\").replace(\"k\", \"K\").replace(\"l\", \"L\").replace(\"\
    m\", \"M\").replace(\"n\", \"N\").replace(\"o\", \"O\").replace(\"p\", \"P\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxldeodds.scala:39:356 ----------------------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        message_replaced_letters_vowels_replaced_vowels_replaced_letters.replace(\e\
    [31m\"a\"\e[0m, \e[31m\"A\"\e[0m).replace(\e[31m\"b\"\e[0m, \e[31m\"B\"\e[0m).replace(\e\
    [31m\"c\"\e[0m, \e[31m\"C\"\e[0m).replace(\e[31m\"d\"\e[0m, \e[31m\"D\"\e[0m).replace(\e\
    [31m\"e\"\e[0m, \e[31m\"E\"\e[0m).replace(\e[31m\"f\"\e[0m, \e[31m\"F\"\e[0m).replace(\e\
    [31m\"g\"\e[0m, \e[31m\"G\"\e[0m).replace(\e[31m\"h\"\e[0m, \e[31m\"H\"\e[0m).replace(\e\
    [31m\"i\"\e[0m, \e[31m\"I\"\e[0m).replace(\e[31m\"j\"\e[0m, \e[31m\"J\"\e[0m).replace(\e\
    [31m\"k\"\e[0m, \e[31m\"K\"\e[0m).replace(\e[31m\"l\"\e[0m, \e[31m\"L\"\e[0m).replace(\e\
    [31m\"m\"\e[0m, \e[31m\"M\"\e[0m).replace(\e[31m\"n\"\e[0m, \e[31m\"N\"\e[0m).replace(\e\
    [31m\"o\"\e[0m, \e[31m\"O\"\e[0m).replace(\e[31m\"p\"\e[0m, \"P\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                                 unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmpxldeodds.scala:41:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxldeodds.scala:16:31 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mreplaced_letters\e[0m = mutable.HashSet[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpxldeodds.scala:21:42 ------------------------------------"
  stdout: ''
  timestamp: 1659979054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var message = message\n        // We need to iterate through\
    \ all the letters in the message\n        for(i <- 0 until message.length()) {\n\
    \            var currVowel = message(i)\n            var newVowel = currVowel\n\
    \            if(i + 1 < message.length) {\n                // Now we check which\
    \ letter appears 2 letters ahead\n                // of our current letter\n \
    \               val nextVowel = message(i + 1)\n                if((nextVowel\
    \ == \"a\" || nextVowel == \"e\" || nextVowel == \"i\" || nextVowel == \"o\" ||\
    \ nextVowel == \"u\") && (currVowel == \"a\" || currVowel == \"e\" || currVowel\
    \ == \"i\" || currVowel == \"o\" || currVowel == \"u\")) {\n                 \
    \   newVowel = nextVowel\n                }\n            }\n            message\
    \ = message.replaceAll(currVowel, newVowel)\n        }\n        message\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0dw9bl1n.scala:15:22 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mmessage\e[0m = message\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvariable\e[0m \e[35mmessage\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var enc = new StringBuilder(message.length)\n        for\
    \ (i<- message.length-1) {\n            var newEnc = \"\"\n            var currentLetter\
    \ = message.charAt(i)\n            var prevLetter = message.charAt(i-1)\n    \
    \        if (isVowel(currentLetter)) {\n                enc += (currentLetter.toUpperCase)\n\
    \            } else {\n                enc += (currentLetter)\n            }\n\
    \            for (j <- 1 until prevLetter) {\n                if (currentLetter\
    \ != prevLetter) {\n                    newEnc += ((message.charAt(i-2) + message.charAt(i-1)).toUpperCase)\n\
    \                } else {\n                    newEnc += ((message.charAt(i-2)\
    \ + message.charAt(i-1))) \n                }\n            }\n            enc\
    \ += newEnc\n        }\n        return enc.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg4kg2vp4.scala:16:17 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i<- message.length-\e[31m1\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                 value foreach is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659979053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // TODO: write code here\n        val res = new StringBuilder(message)\n\
    \        for(c <- message) {\n            val index = alphabet(c) - 'a'\n    \
    \        if (index > -1) res.append(letters(index))\n        }\n        return\
    \ res.toString\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdalg_afc.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mindex\e[0m = alphabet(c)\
    \ - \e[31m'a'\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: alphabet\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdalg_afc.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (index > -\e[31m1\e[0m) res.append(letters(index))\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: letters\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var vowels = \"aeiou\"\n        var message : String =\
    \ \"\"\n        var j = 0\n        for (i<- 0 until message.length ) {\n     \
    \       val chi = message.charAt(i)\n            if (chi isLetter) {\n       \
    \         val vowel = vowels.find(_ == chi).toList\n                val newVowel\
    \ = vowel match {\n                    case Some(v) => vowels(v)\n           \
    \         case None => chi\n                }\n                val newMessage\
    \ = message.substring(0, j) + newVowel + message.substring(j + 1)\n          \
    \      j += 1\n                message = newMessage\n            }\n        }\n\
    \        return message\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4agxd5kg.scala:20:28 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (chi isLetter) {\n\e[31m\e\
    [31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m             \
    \               expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4agxd5kg.scala:23:43 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mcase\e[0m Some(v) => vowels(v)\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                                           Found:    (v : Any)\n\e[31m\
    \   |\e[0m                                           Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4agxd5kg.scala:24:25 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    \e[33mcase\e[0m None => chi\n\e[31m\e\
    [31m   |\e[0m                         ^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Found:    None.type\n\e[31m   |\e[0m                         Required:\
    \ List[Char]\n\e[31m   |\e[0m                         pattern type is incompatible\
    \ with expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // TODO: Your code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvz5ikdv7.scala:14:44\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mencode\e\
    [0m(\e[36mmessage\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                            ^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Unit\n\e[31m   |\e[0m\
    \                                            Required: String\n\e[31m15 |\e[0m\
    \        \e[34m// TODO: Your code here\e[0m\n\e[31m16 |\e[0m    }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // TODO: Fill in your code here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5nnxgdnt.scala:14:44\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mencode\e\
    [0m(\e[36mmessage\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                            ^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Unit\n\e[31m   |\e[0m\
    \                                            Required: String\n\e[31m15 |\e[0m\
    \        \e[34m// TODO: Fill in your code here\e[0m\n\e[31m16 |\e[0m    }\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val encodedMessage = \"\"\n        for(a <- message) {\n\
    \            if(a == \"a\") {\n                encodedMessage = encodedMessage\
    \ + \"g\"\n            } else if(a == \"e\") {\n                encodedMessage\
    \ = encodedMessage + \"k\"\n            } else if(a == \"i\") {\n            \
    \    encodedMessage = encodedMessage + \"g\"\n            } else if(a == \"o\"\
    ) {\n                encodedMessage = encodedMessage + \"k\"\n            } else\
    \ if(a == \"u\") {\n                encodedMessage = encodedMessage + \"s\"\n\
    \            } else if(a == \"c\") {\n                encodedMessage = encodedMessage\
    \ + \"g\"\n            } else if(a == \"d\") {\n                encodedMessage\
    \ = encodedMessage + \"k\"\n            } else if(a == \"g\") {\n            \
    \    encodedMessage = encodedMessage + \"g\"\n            } else if(a == \"h\"\
    ) {\n                encodedMessage = encodedMessage + \"h\"\n            } else\
    \ if(a == \"k\") {\n                encodedMessage = encodedMessage + \"k\"\n\
    \            } else if(a == \"l\") {\n                encodedMessage = encodedMessage\
    \ + \"g\"\n            } else if(a == \"m\") {\n                encodedMessage\
    \ = encodedMessage + \"m\"\n            } else if(a == \"n\") {\n            \
    \    encodedMessage = encodedMessage + \"n\"\n            } else if(a == \"s\"\
    ) {\n                encodedMessage = encodedMessage + \"s\"\n            } else\
    \ if(a == \"t\") {\n                encodedMessage = encodedMessage + \"t\"\n\
    \            } else if(a == \"x\") {\n                encodedMessage = encodedMessage\
    \ + \"x\"\n            } else if(a == \"y\") {\n                encodedMessage\
    \ = encodedMessage + \"y\"\n            } else if(a == \"z\") {\n            \
    \    encodedMessage = encodedMessage + \"z\"\n            } else if(a == \"A\"\
    ) {\n                encodedMessage = encodedMessage + \"A\"\n            } else\
    \ if(a == \"B\") {\n                encodedMessage = encodedMessage + \"B\"\n\
    \            } else if(a == \"C\") {\n                encodedMessage = encodedMessage\
    \ + \"C\"\n            } else if(a == \"D\") {\n                encodedMessage\
    \ = encodedMessage + \"D\"\n            } else if(a == \"E\") {\n            \
    \    encodedMessage = encodedMessage + \"E\"\n            } else if(a == \"F\"\
    ) {\n                encodedMessage = encodedMessage + \"F\"\n            } else\
    \ if(a == \"G\") {\n                encodedMessage = encodedMessage + \"G\"\n\
    \            } else if(a == \"H\") {\n                encodedMessage = encodedMessage\
    \ + \"H\"\n            } else if(a == \"I\") {\n                encodedMessage\
    \ = encodedMessage + \"I\"\n            } else if(a == \"J\") {\n            \
    \    encodedMessage = encodedMessage + \"J\"\n            } else if(a == \"K\"\
    ) {\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8jlcbb06.scala:84:0 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmp8jlcbb06.scala:17:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(a == \e[31m\"a\"\e[0m) {\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp8jlcbb06.scala:18:31 -----------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                encodedMessage = encodedMessage + \e[31m\"\
    g\"\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val encodedMessage\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmp8jlcbb06.scala:19:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(a == \e[31m\"\
    e\"\e[0m) {\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp8jlcbb06.scala:20:31 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                encodedMessage = encodedMessage + \e\
    [31m\"k\"\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val encodedMessage\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmp8jlcbb06.scala:21:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(a == \e[31m\"\
    i\"\e[0m) {\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp8jlcbb06.scala:22:31 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                encodedMessage = encode"
  stdout: ''
  timestamp: 1659979058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // Write your code here.\n        val englishMap = scala.collection.mutable.Map[Char,\
    \ Char]()\n        val vowels = List('a', 'e', 'i', 'o', 'u')\n        for (letter\
    \ <- message) {\n            englishMap += (letter, englishMap.getOrElse(letter,\
    \ vowels(messages.indexOf(letter) + 2)))\n        }\n        val result = message.mkString\n\
    \        for(vowel <- vowels) {\n            result += englishMap.get(vowel)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp13b85b3w.scala:19:71 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            englishMap += (letter, englishMap.getOrElse(letter,\
    \ vowels(messages.indexOf(letter) + \e[31m2\e[0m)))\n\e[31m\e[31m   |\e[0m   \
    \                                                                    ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                     Not found:\
    \ messages\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp13b85b3w.scala:19:27\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            englishMap += (letter,\
    \ englishMap.getOrElse(letter, vowels(messages.indexOf(letter) + \e[31m2\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                          Found:    (\e[1m\e[31mletter\e[0m\e[1m\e[31m \e[0m\e\
    [1m\e[31m:\e[0m Char)\n\e[31m   |\e[0m                           Required: (\e\
    [1m\e[32mChar\e[0m\e[1m\e[32m,\e[0m Char)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp13b85b3w.scala:23:19 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            result += englishMap.get(vowel)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of String - did you mean result.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n      val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n  \
    \    val message = message.toUpperCase\n      var buffer = \"\"\n      message\
    \ foreach {\n        c => {\n          buffer += (c == c.toLowerCase ? c.toUpperCase\
    \ : c.toLowerCase)\n        }\n      }\n      buffer.toUpperCase\n      vowels.foreach\
    \ {\n        vowel => {\n          buffer = buffer.replaceAll(vowel, vowel + 2)\n\
    \        }\n      }\n      buffer\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprom1czn6.scala:16:20 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m      \e[33mval\e[0m \e[36mmessage\e[0m = message.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mmessage\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val messageList = message.split(\" \").toList\n      \
    \  val newMessageList = mutable.ArrayBuffer.empty[String]\n        val finalList\
    \ = mutable.ArrayBuffer.empty[String]\n        messageList.foreach { elem =>\n\
    \            val firstLetter = elem.head\n            val secondLetter = elem.last\n\
    \            val secondLetterIndex = messageList.indexOf(secondLetter)\n     \
    \       var firstLetterIndex = messageList.indexOf(firstLetter)\n            if\
    \ (firstLetterIndex > secondLetterIndex) {\n                val temp = secondLetter\n\
    \                secondLetter = firstLetter\n                firstLetter = temp\n\
    \            }\n            val indexToSwapWith = secondLetterIndex + 2\n    \
    \        var tempString = \"\"\n            for (i <- firstLetterIndex to indexToSwapWith)\
    \ {\n                val firstChar = messageList(i)\n                val secondChar\
    \ = messageList(indexToSwapWith)\n                if (firstChar.equalsIgnoreCase(secondChar))\
    \ {\n                    tempString += secondChar\n                } else {\n\
    \                    tempString += firstChar\n                }\n            }\n\
    \            newMessageList += tempString\n        }\n        for (i <- newMessageList.indices){\n\
    \            finalList += newMessageList(i)\n        }\n        finalList.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_8a1ojsf.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewMessageList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_8a1ojsf.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfinalList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp_8a1ojsf.scala:25:29 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                secondLetter = firstLetter\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val secondLetter\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp_8a1ojsf.scala:26:28 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                firstLetter = temp\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val firstLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979050
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        var output\
    \ = \"\";\n        for (c <- message.toCharArray) {\n            var c = c\n \
    \           val position = alphabet.indexOf(c);\n            if (position > -1)\
    \ {\n                alphabet.updated(position, position + 1);\n             \
    \   alphabet.updated(position + 1, position);\n            }\n        }\n    \
    \    for (a <- alphabet.toSet) {\n            for (b <- alphabet.toSet) {\n  \
    \              if (vowels.contains(a) && vowels.contains(b)) {\n             \
    \       output = output + a\n                } else {\n                    output\
    \ = output + b\n                }\n            }\n        }\n        output\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8q74zjyd.scala:19:20 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mvar\e[0m \e[36mc\e[0m = c\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Recursive\
    \ \e[33mvariable\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8q74zjyd.scala:28:36 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                \e[33mif\e[0m (vowels.contains(a) &&\
    \ vowels.contains(b)) {\n\e[31m\e[31m   |\e[0m                               \
    \     ^\e[0m\n\e[31m   |\e[0m                                    Found:    (a\
    \ : Char)\n\e[31m   |\e[0m                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8q74zjyd.scala:28:58\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m                \e[33mif\e[0m\
    \ (vowels.contains(a) && vowels.contains(b)) {\n\e[31m\e[31m   |\e[0m        \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   \
    \                                                 Found:    (b : Char)\n\e[31m\
    \   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val enc = message.toCharArray.map { x =>\n           \
    \ val y = x.toUpperCase(Locale.ROOT)\n            y match {\n                case\
    \ c if c >= 'a' && c <= 'z' => (c + 2).toChar\n                case c if c >=\
    \ 'A' && c <= 'Z' => (c + 2).toChar\n                case c => c\n           \
    \ }\n        }\n        val charArray = Array(0 until enc.length).map(i => enc(i))\n\
    \        val array = new Array[String](charArray.length)\n        charArray.zipWithIndex.foreach\
    \ { case (c, i) =>\n            array(i) = c.toString\n        }\n        array.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdjfq5rjw.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = x.toUpperCase(Locale.ROOT)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdjfq5rjw.scala:16:34 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = x.toUpperCase(Locale.ROOT)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Not found: Locale\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpdjfq5rjw.scala:22:9 ------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0m         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m         where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmpdjfq5rjw.scala:23:66\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36mcharArray\e[0m = Array(\e[31m0\e[0m until enc.length).map(\e\
    [36mi\e[0m => enc(i))\n\e[31m\e[31m   |\e[0m                                 \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                      No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m                                          where:    B is a type variable\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n    val map = Map(\n      \"A\" -> \"A\", \"B\" -> \"B\", \"C\"\
    \ -> \"C\", \"D\" -> \"D\", \"E\" -> \"E\",\n      \"F\" -> \"F\", \"G\" -> \"\
    G\", \"H\" -> \"H\", \"I\" -> \"I\", \"J\" -> \"J\",\n      \"K\" -> \"K\", \"\
    L\" -> \"L\", \"M\" -> \"M\", \"N\" -> \"N\", \"O\" -> \"O\",\n      \"P\" ->\
    \ \"P\", \"Q\" -> \"Q\", \"R\" -> \"R\", \"S\" -> \"S\", \"T\" -> \"T\",\n   \
    \   \"U\" -> \"U\", \"V\" -> \"V\", \"W\" -> \"W\", \"X\" -> \"X\", \"Y\" -> \"\
    Y\",\n      \"Z\" -> \"Z\", \"a\" -> \"A\", \"b\" -> \"B\", \"c\" -> \"C\", \"\
    d\" -> \"D\", \"e\" -> \"E\",\n      \"f\" -> \"F\", \"g\" -> \"G\", \"h\" ->\
    \ \"H\", \"i\" -> \"I\", \"j\" -> \"J\",\n      \"k\" -> \"K\", \"l\" -> \"L\"\
    , \"m\" -> \"M\", \"n\" -> \"N\", \"o\" -> \"O\",\n      \"p\" -> \"P\", \"q\"\
    \ -> \"Q\", \"r\" -> \"R\", \"s\" -> \"S\", \"t\" -> \"T\",\n      \"u\" -> \"\
    U\", \"v\" -> \"V\", \"w\" -> \"W\", \"x\" -> \"X\", \"y\" -> \"Y\",\n      \"\
    z\" -> \"Z\", \"?\" -> \"?\")\n\n    message.map { ch =>\n      ch.toUpperCase\n\
    \    }.map { ch => \n      map get ch\n    }.map { ch =>\n      if (map.contains(ch))\
    \ {\n        map get ch\n      } else {\n        ch\n      }\n    }.mkString\n\
    \  }\n}\n</code>\n<|/ a |>\n<| c |>\nPlease add an explanation to your answer.\
    \ Code dumps aren't very helpful.\n<|/ c |>\n<| c |>\nThe code works, but it gives\
    \ me this output when I run it `tHKS KS C MGSSCGG`\n<|/ c |>\n<| a tags=functional-programming,scala\
    \ dscore=2 |>\nAnother solution:\n<code>\nval a = \"This is a message\"\nval b\
    \ = a.toUpperCase\nval c = b.map(c => Map(\"?\" -> \"?\", \"a\" -> \"A\", \"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmp84ggrwjp.scala:41:0 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp84ggrwjp.scala:54:47\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m54 |\e[0m\e[33mval\e\
    [0m \e[36mc\e[0m = b.map(\e[36mc\e[0m => Map(\e[31m\"?\"\e[0m -> \e[31m\"?\"\e\
    [0m, \e[31m\"a\"\e[0m -> \e[31m\"A\"\e[0m, \"\n\e[31m\e[31m   |\e[0m         \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                                unclosed string literal\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp84ggrwjp.scala:29:9 -------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m      ch.toUpperCase\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value toUpperCase is not a member of Char\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979061
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\
    \ 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')\n        var\
    \ result = \"\"\n        for (i <- 0 to message.length - 1) {\n            result\
    \ += alphabet(alphabet.indexOf(message(i)) + (message(i) + 1).hashCode) % 26\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 130\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.encode$$anonfun$1(tmpe0keti79.scala:18)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.encode(tmpe0keti79.scala:19)\n\
    \tat Problem$.main(tmpe0keti79.scala:23)\n\tat Problem.main(tmpe0keti79.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val arr = message.chars.toList\n        arr.sortBy { _\
    \ - 97 }\n        val alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toList\n     \
    \   val map = mutable.Map[Char, Int]()\n        arr.zipWithIndex.foreach { case\
    \ (v, i) =>\n            map(i + 97) = (alphabet.indexOf(v.toString) + 2)\n  \
    \      }\n        arr.zipWithIndex.map { case (v, i) =>\n            alphabet(i\
    \ + 97) + v.toString.substring(0,1)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8ss67r3p.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = message.chars.toList\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              value toList is not a member of java.util.stream.IntStream\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ss67r3p.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979062
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var newMessage = \"\"\n        for (letter <- message) {\n            val index\
    \ = alphabet.indexOf(letter)\n            if (index != 0) {\n                val\
    \ second = alphabet.charAt(index - 1)\n                val replacement = alphabet.charAt(index\
    \ + 1)\n                newMessage += (letter + (replacement + second))\n    \
    \        }\n            else {\n                newMessage += letter\n       \
    \     }\n        }\n        return newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: -2\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.encode$$anonfun$1(tmpqjk2o_am.scala:20)\n\tat Problem$.encode$$anonfun$adapted$1(tmpqjk2o_am.scala:27)\n\
    \tat scala.collection.StringOps$.foreach$extension(StringOps.scala:1044)\n\tat\
    \ Problem$.encode(tmpqjk2o_am.scala:27)\n\tat Problem$.main(tmpqjk2o_am.scala:31)\n\
    \tat Problem.main(tmpqjk2o_am.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val englishLower = Array('a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z')\n        val vowelLower = Array('A', 'a', 'E', 'e', 'I',\
    \ 'i', 'O', 'o', 'U', 'u')\n\n        // use mutable data structures for faster\
    \ lookups and to update \n        // the message in-place\n        val envowLower\
    \ = mutable.ArrayBuffer.empty[String]\n        val vowel = mutable.ArrayBuffer.empty[String]\n\
    \        val vowelEnvow = mutable.ArrayBuffer.empty[String]\n\n        // get\
    \ the english lower case letters and vowels into a mutable \n        // data structure\
    \ so that we can perform lookups quickly and \n        // update the message in-place\n\
    \        val english = message.split(\" \").map(englishLower.indexOf(_)).filter(_\
    \ > -1)\n        val vowels = message.split(\" \").map(vowelLower.indexOf(_)).filter(_\
    \ > -1)\n        val vowelEnvow = message.split(\" \").map(vowel +=_).filter(_\
    \ > -1)\n\n        // iterate over the english and vowel arrays to get \n    \
    \    // the positions in the english and vowel data structures \n        // that\
    \ correspond to the english letters and vowels\n        for (i <- 0 until english.length)\
    \ {\n            val envow = vowelEnvow.indexOf(i)\n            val vowel = vowels.indexOf(i)\n\
    \n            // if the position matches the position of the English \n      \
    \      // letter then add it to the envow array\n            if (envow != -1)\n\
    \                envowLower += english(envow)\n            // else if the position\
    \ matches the position of the \n            // vowel then add it to the vowel\
    \ array\n            else if (vowel != -1)\n                vowelLower += vowel(vowel)\n\
    \        }\n\n        // join the english letters and vowels arrays together \n\
    \        // to form the encoded string\n        val envow = envowLower.mkString(\"\
    \").trim.toUpperCase\n        val vowel = vowelLower.mkString(\"\").trim.toUpperCase\n\
    \n        // get the position of the next vowel in the english alphabet\n    \
    \    // and return the result with the vowel replaced\n        val vowelIndex\
    \ = (english.indexOf(\"a\") + english.indexOf(\"e\") + \n                english.indexOf(\"\
    i\") + english.indexOf(\"o\") + \n                english.indexOf(\"u\") + english.indexOf(\"\
    y\")) mod 26\n        val encodedString = envow.replaceAll(vowel, vowels(vowelIndex))\n\
    \        return encodedString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn_cn606y.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelEnvow\e[0m = message.split(\e\
    [31m\" \"\e[0m).map(vowel +=_).filter(_ > -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelEnvow is already defined as \e[33mvalue\e[0m \e[35mvowelEnvow\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn_cn606y.scala:51:12 ---------------------------\e[0m\e[0m\n\e\
    [31m51 |\e[0m        \e[33mval\e[0m \e[36mvowel\e[0m = vowelLower.mkString(\e\
    [31m\"\"\e[0m).trim.toUpperCase\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowel is already defined as \e[33mvalue\e[0m \e[35mvowel\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpn_cn606y.scala:20:25 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36menvowLower\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_cn606y.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowel\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpn_cn606y.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelEnvow\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            "
  stdout: ''
  timestamp: 1659979066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var letters = message match {\n            case s: String\
    \ => s.toUpperCase.split(\"\")\n            case _ => Nil\n        }\n       \
    \ \n        var vowels = \"aeiou\"\n        var vowelPositions = letters.zipWithIndex\n\
    \        \n        var result = \"\"\n        letters.foreach { letter =>\n  \
    \          vowelPositions.foreach { \n                case (vowelPosition, letterPosition)\
    \ =>\n                    if (letterPosition == vowelPosition) {\n           \
    \             vowel = vowel.take(vowelPosition)\n                    }\n     \
    \       }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc38v7em4.scala:21:37 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mvowelPositions\e[0m = letters.zipWithIndex\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            value zipWithIndex is not a member of\
    \ Object\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc38v7em4.scala:24:16\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        letters.foreach {\
    \ \e[36mletter\e[0m =>\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        value foreach is not a member of Object\n2 errors found\n"
  stdout: ''
  timestamp: 1659979063
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"AEIOUaeiou\".toCharArray\n        val replacement\
    \ = \"BbCcDdFfGgHhJjKkLlMmNnPpRrSsTtVvWwXxYyZz\".toCharArray\n        val letters\
    \ = message.map(_.toLower)\n        val messageWithVowels = new StringBuilder\n\
    \        val messageWithLetters = new StringBuilder\n        for(letter <- letters){\n\
    \            if(vowels.contains(letter)) {\n                val index = vowels.indexOf(letter)\n\
    \                messageWithVowels.append(vowels(index - 1))\n               \
    \ messageWithVowels.append(vowels(index + 1))\n            } else {\n        \
    \        messageWithLetters.append(letter)\n            }\n        }\n       \
    \ letters.foreach{letter =>\n            if(vowels.contains(letter)) {\n     \
    \           val index = vowels.indexOf(letter)\n                messageWithLetters.append(vowels(index\
    \ - 1))\n                messageWithLetters.append(vowels(index + 1))\n      \
    \      } else {\n                messageWithVowels.append(replacement(0))\n  \
    \          }\n        }\n        messageWithLetters.toString()\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz_96pmif.scala:41)\n\tat Problem.main(tmpz_96pmif.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var newMessage = message\n        for (letter <- message)\
    \ {\n            val letterValue = letter.toUpper\n            if (letterValue\
    \ == 'A' || letterValue == 'E' || letterValue == 'I' || letterValue == 'O' ||\
    \ letterValue == 'U') {\n                newMessage = newMessage.substring(0,\
    \ newMessage.length-1)\n                newMessage = newMessage + letterValue\n\
    \                newMessage = newMessage + letterValue.charAt(1)\n           \
    \ } else {\n                newMessage = newMessage + letterValue\n          \
    \  }\n        }\n        for (vowel <- newMessage) {\n            val vowelValue\
    \ = vowel.toUpper\n            if (vowelValue == 'A' || vowelValue == 'E' || vowelValue\
    \ == 'I' || vowelValue == 'O' || vowelValue == 'U') {\n                newMessage\
    \ = newMessage.substring(0, newMessage.length-1)\n                newMessage =\
    \ newMessage + vowelValue\n                newMessage = newMessage + vowelValue.charAt(1)\n\
    \            }\n        }\n        return newMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmttjmigs.scala:21:54 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                newMessage = newMessage + letterValue.charAt(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value charAt is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmttjmigs.scala:31:53\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                newMessage\
    \ = newMessage + vowelValue.charAt(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                   value charAt is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var str = \"\"\n        for (x <- message) {\n       \
    \     str = str + x.toUpperCase(Locale.ROOT)\n        }\n        var vowels =\
    \ \"AEIOUaeiou\"\n        str = str.replaceAll(vowels, \"\")\n        str = str.replaceAll(\"\
    [aeiouAEIOU]\", \"\").reverse\n        var result = \"\"\n        var placeHolder\
    \ = \"\"\n        for (x <- str) {\n            val y = x.toUpperCase(Locale.ROOT)\n\
    \            if (vowels.contains(y)) {\n                placeHolder = y\n    \
    \        }\n            if (placeHolder != \"\") {\n                result +=\
    \ placeHolder\n                placeHolder = \"\"\n            }\n        }\n\
    \        if (placeHolder != \"\") {\n            result += placeHolder\n     \
    \   }\n        return result\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr622rr_0.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            str = str + x.toUpperCase(Locale.ROOT)\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpr622rr_0.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            str = str + x.toUpperCase(Locale.ROOT)\n\e\
    [31m\e[31m   |\e[0m                                      ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                      Not found: Locale\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr622rr_0.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = x.toUpperCase(Locale.ROOT)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpr622rr_0.scala:25:34 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = x.toUpperCase(Locale.ROOT)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Not found: Locale\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val letters = message.map(x=>x.toUpperCase).mkString\n\
    \        val vowels = \"AEIOU\"\n        val encoded = letters.foldLeft(\"\")(\
    \ (result, letter) => result + letter +  vowels(vowels.indexOf(letter.toLowerCase.toLowerCase)+1)\
    \  )\n        encoded\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ec25dsl.scala:15:39 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = message.map(\e\
    [36mx\e[0m=>x.toUpperCase).mkString\n\e[31m\e[31m   |\e[0m                   \
    \                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var result = new StringBuilder\n        message foreach\
    \ { x =>\n            val l = x.toLowerCase // or x.charAt(0)\n            if\
    \ (l == 'a') result.append(l)\n            else if (!(l == 'e' || l == 'i' ||\
    \ l == 'o' || l == 'u'))\n                result.append(l.toUpperCase)\n     \
    \       else\n                result.append(x.toUpperCase.charAt(2))\n       \
    \ }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3jqwyajt.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36ml\e[0m = x.toLowerCase\
    \ \e[34m// or x.charAt(0)\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value toLowerCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3jqwyajt.scala:22:32 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                result.append(x.toUpperCase.charAt(\e\
    [31m2\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value toUpperCase is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var newString = \"\"\n        var newVowel = \"\"\n  \
    \      var newVowel2 = \"\"\n        var newVowel3 = \"\"\n        var countVowels\
    \ = 0\n        for(char <- message){\n            if(('A' <= char && char <= 'Z')\
    \ || ('a' <= char && char <= 'z')){\n                newString = newString + char\n\
    \            }else{\n                if((('a' <= char && char <= 'z') && (newVowel\
    \ == \"\"))){\n                    newVowel = char\n                    countVowels\
    \ = countVowels + 1\n                }else if((('A' <= char && char <= 'Z') &&\
    \ (newVowel2 ==\"\"))){\n                    newVowel2 = char\n              \
    \      countVowels = countVowels + 1\n                }else if((('a' <= char &&\
    \ char <= 'z') && (newVowel3 ==\"\"))){\n                    newVowel3 = char\n\
    \                    countVowels = countVowels + 1\n                }\n      \
    \      }\n        }\n        for(letter <- newString){\n            if(('A' <=\
    \ letter && letter <= 'Z')){\n                letter = letter + newVowel\n   \
    \         }else if(('a' <= letter && letter <= 'z')){\n                letter\
    \ = letter + newVowel2\n            }else if(('a' <= letter && letter <= 'z')){\n\
    \                letter = letter + newVowel3\n            }\n        }\n     \
    \   return newString\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpryznk035.scala:25:31\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    newVowel\
    \ = char\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    (char : Char)\n\e[31m   |\e\
    [0m                               Required: String\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpryznk035.scala:28:32 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    newVowel2 = char\n\e[31m\e[31m  \
    \ |\e[0m                                ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     Found:    (char : Char)\n\e[31m   |\e[0m               \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpryznk035.scala:31:32 --------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m                    newVowel3 = char\n\e[31m\e[31m   |\e[0m          \
    \                      ^^^^\e[0m\n\e[31m   |\e[0m                            \
    \    Found:    (char : Char)\n\e[31m   |\e[0m                                Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpryznk035.scala:38:25\
    \ --------------------\e[0m\e[0m\n\e[31m38 |\e[0m                letter = letter\
    \ + newVowel\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    String\n\e[31m   |\e[0m\
    \                         Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpryznk035.scala:40:25 --------------------\e[0m\e\
    [0m\n\e[31m40 |\e[0m                letter = letter + newVowel2\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                       Found:    String\n\e[31m   |\e[0m                    \
    \     Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659979066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val m = message.trim\n        val r = new StringBuilder\n\
    \        m.toLowerCase.filter(i => i >= 'a' && i <= 'z').toIterator.foreach(i\
    \ => r.append(i).append(i.toChar))\n        m.toLowerCase.filter(i => i >= 'a'\
    \ && i <= 'z').toIterator.filter(i => !(i == 'a' || i == 'e' || i == 'i' || i\
    \ == 'o' || i == 'u' || i == 'y')).foreach(i => r.append(i).append(\"A\"))\n \
    \       m.toLowerCase.filter(i => i >= 'a' && i <= 'z').toIterator.filter(i =>\
    \ i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y').foreach(i\
    \ => r.append(i).append(\"B\"))\n        m.toLowerCase.filter(i => i >= 'a' &&\
    \ i <= 'z').toIterator.filter(i => i == 'a' || i == 'e' || i == 'i' || i == 'o'\
    \ || i == 'u' || i == 'y' || i == 'i').foreach(i => r.append(i).append(\"C\"))\n\
    \        m.toLowerCase.filter(i => i >= 'a' && i <= 'z').toIterator.filter(i =>\
    \ i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y' || i ==\
    \ 'i').foreach(i => r.append(i).append(\"D\"))\n        m.toLowerCase.filter(i\
    \ => i >= 'a' && i <= 'z').toIterator.filter(i => i == 'a' || i == 'e' || i ==\
    \ 'i' || i == 'o' || i == 'u' || i == 'y' || i == 'i').foreach(i => r.append(i).append(\"\
    E\"))\n        m.toLowerCase.filter(i => i >= 'a' && i <= 'z').toIterator.filter(i\
    \ => i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y' || i\
    \ == 'i').foreach(i => r.append(i).append(\"F\"))\n        m.toLowerCase.filter(i\
    \ => i >= 'a' && i <= 'z').toIterator.filter(i => i == 'a' || i == 'e' || i ==\
    \ 'i' || i == 'o' || i == 'u' || i == 'y' || i == 'i').foreach(i => r.append(i).append(\"\
    G\"))\n        m.toLowerCase.filter(i => i >= 'a' && i <= 'z').toIterator.filter(i\
    \ => i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y' || i\
    \ == 'i').foreach(i => r.append(i\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw5661nm3.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpw5661nm3.scala:25:168 -------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \        m.toLowerCase.filter(\e[36mi\e[0m => i >= \e[31m'a'\e[0m && i <= \e[31m'z'\e\
    [0m).toIterator.filter(\e[36mi\e[0m => i == \e[31m'a'\e[0m || i == \e[31m'e'\e\
    [0m || i == \e[31m'i'\e[0m || i == \e[31m'o'\e[0m || i == \e[31m'u'\e[0m || i\
    \ == \e[31m'y'\e[0m || i == \e[31m'i'\e[0m).foreach(\e[36mi\e[0m => r.append(i\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val message = message.trim\n        val newMessage = message\
    \ + message.substring(2,message.length)\n        val vowels = \"aeiou\"\n    \
    \    val vowelsMap = vowels.toCharArray map (_.toUpperCase())\n        val vowelsMap2\
    \ = vowelsMap.toList.reverse.zipWithIndex.filter(_._2 == 0).map(_._1)\n      \
    \  val vowelsMap3 = vowelsMap2.toList.reverse.zipWithIndex.filter(_._2 == 1).map(_._1)\n\
    \        newMessage.map(c => {\n            if(c in vowels) c\n            else\
    \ if((c-1) in vowelsMap2) c+(\"2\")\n            else if((c+1) in vowelsMap3)\
    \ c+(\"3\")\n            else c\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgcccwpey.scala:15:22 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmessage\e[0m = message.trim\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35mmessage\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgcccwpey.scala:18:50 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m = vowels.toCharArray\
    \ map (_.toUpperCase())\n\e[31m\e[31m   |\e[0m                               \
    \                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \       value toUpperCase is not a member of Char\n\e[31m\e[31m-- Error: /tmp/tmpgcccwpey.scala:18:63\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \ \e[33mval\e[0m \e[36mvowelsMap\e[0m = vowels.toCharArray map (_.toUpperCase())\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659979067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var result : String = \"\"\n        for(i <- 0 to message.length-1)\
    \ {\n            if(message.charAt(i) == 'a') {\n                result += (message.charAt(i)\
    \ + message.charAt(i+1))\n            } else {\n                result += message.charAt(i)\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9y9b7pjo.scala:26)\n\tat Problem.main(tmp9y9b7pjo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\".toArray\n\
    \        val vowels = \"aeiou\".toArray\n        val twoVowel = \"AEIOU\".toArray\n\
    \n        var result = \"\"\n        var index = 0\n        var i = 0\n      \
    \  while (i < message.length) {\n            val charVal = message.charAt(i)\n\
    \            if (charVal >= 'a' && charVal <= 'z') {\n                result +=\
    \ alphabet(charVal - 'a' + 1)\n            }\n            else if (charVal >=\
    \ 'A' && charVal <= 'Z') {\n                result += alphabet(charVal - 'A' +\
    \ 1)\n            }\n            else if (charVal >= 'a' && charVal <= 'z' ||\
    \ charVal >= 'A' && charVal <= 'Z' || charVal >= '0' && charVal <= '9') {\n  \
    \              result += charVal\n            }\n            else {\n        \
    \        result += vowels(index)\n                index += 2\n            }\n\
    \            i += 1\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc3ps1xq8.scala:42)\n\tat Problem.main(tmpc3ps1xq8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val newMessage = message.map(_.toUpperCase)\n        val\
    \ vowels = ('A':'Z','a':'z')\n        var i = 0\n        var j = 0\n        var\
    \ output = new String\n        for (word <- newMessage) {\n            for(vowel\
    \ <- vowels) {\n                if(word.contains(vowel)) {\n                 \
    \   output.append((word.substring(j,j+2)).zip(vowel.zip(word.substring(j,j+2))).map(_._1).mkString)\n\
    \                    j += 2\n                }\n            }\n            j =\
    \ i\n            i += 1\n        }\n        output\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprdh4o75k.scala:15:39 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = message.map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprdh4o75k.scala:16:22\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowels\e\
    [0m = (\e[31m'A'\e[0m:\e[31m'Z'\e[0m,\e[31m'a'\e[0m:\e[31m'z'\e[0m)\n\e[31m\e\
    [31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m                 \
    \     Found:    (\e[31m'\e[1m\e[31mA\e[0m'\e[0m : Char)\n\e[31m   |\e[0m     \
    \                 Required: (\e[31m'\e[1m\e[32mZ\e[0m'\e[0m : Char)\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprdh4o75k.scala:16:30 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = (\e[31m'A'\e\
    [0m:\e[31m'Z'\e[0m,\e[31m'a'\e[0m:\e[31m'z'\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^\e[0m\n\e[31m   |\e[0m                          \
    \    Found:    (\e[31m'\e[1m\e[31ma\e[0m'\e[0m : Char)\n\e[31m   |\e[0m      \
    \                        Required: (\e[31m'\e[1m\e[32mz\e[0m'\e[0m : Char)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = List('a','e','i','o','u')\n        val consonants\
    \ = List('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x',\n\
    \        'y','z')\n        val letter = message.toLowerCase //case insensitive\n\
    \        val letterWithVowels = letter zip vowels //zip letters\n        val letterWithConsonants\
    \ = letter zip consonants //zip letters\n        val swappedLettersWithVowels\
    \ = letterWithVowels.map{case (letter, vowel) => letter.toUpperCase() }\n    \
    \    val swappedLettersWithConsonants = letterWithConsonants.map{case (letter,\
    \ consonant) => consonant.toUpperCase }\n        val swapped = swapped ++ swappedLettersWithVowels\
    \ ++ swappedLettersWithConsonants\n        swapped.mkString //join letters\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp20tzbtz7.scala:21:91 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mswappedLettersWithVowels\e\
    [0m = letterWithVowels.map{\e[33mcase\e[0m (letter, vowel) => letter.toUpperCase()\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                            value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp20tzbtz7.scala:22:106 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mswappedLettersWithConsonants\e\
    [0m = letterWithConsonants.map{\e[33mcase\e[0m (letter, consonant) => consonant.toUpperCase\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                                             ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp20tzbtz7.scala:23:22 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mswapped\e[0m = swapped ++\
    \ swappedLettersWithVowels ++ swappedLettersWithConsonants\n\e[31m\e[31m   |\e\
    [0m                      ^\e[0m\n\e[31m   |\e[0m                      Recursive\
    \ \e[33mvalue\e[0m \e[35mswapped\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val newMessage = message.toUpperCase +: \n           \
    \            (for (letter <- message.toLowerCase ; \n                        \
    \    a <- ('a' to 'z') ; \n                            b <- ('A' to 'Z') \n  \
    \                        ) yield {\n                             val index = (letter\
    \ + a).toInt\n                             if (index != index)\n             \
    \                    (letter + b.charAt(index - a)).asInstanceOf[String]\n   \
    \                         else\n                               letter \n     \
    \                    }) \n        newMessage.reverse ++ \n        (for (i <- 0\
    \ until message.length) yield \n          {\n            val vowels = \"aeiou\"\
    \n            if (vowels.indexOf(message.charAt(i)) > -1)\n               message.charAt(i)\
    \ + message.charAt(i + 1)\n            else\n               message.charAt(i)\
    \ \n          })\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfx9ccx6e.scala:22:45 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                                 (letter + b.charAt(index\
    \ - a)).asInstanceOf[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m               \
    \                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                  value charAt is not a member of Char\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpfx9ccx6e.scala:26:8 ---------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        newMessage.reverse ++ \n\e[31m\e[31m   |\e[0m    \
    \    ^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Matchable]\n\e[31m  \
    \ |\e[0m        Required: String\n\e[31m27 |\e[0m        (\e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until message.length) \e[33myield\e[0m \n\e[31m28 |\e[0m      \
    \    {\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mvowels\e[0m = \e[31m\"\
    aeiou\"\e[0m\n\e[31m30 |\e[0m            \e[33mif\e[0m (vowels.indexOf(message.charAt(i))\
    \ > -\e[31m1\e[0m)\n\e[31m31 |\e[0m               message.charAt(i) + message.charAt(i\
    \ + \e[31m1\e[0m)\n\e[31m32 |\e[0m            \e[33melse\e[0m\n\e[31m33 |\e[0m\
    \               message.charAt(i) \n\e[31m34 |\e[0m          })\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = \n            \"abcdefghijklmnopqrstuvwxyz\"\
    .toList \n            ++ \n            \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toList\n\
    \            ++ \n            \"\xC4\xC5\xC7\xC9\xD1\xD6\xDC\".toList \n     \
    \       ++ \n            \"\xDC\xC4\xDC\xC7\xC9\xC4\xC5\".toList\n           \
    \ ++ \n            \"\xD6\xD1\xDC\xDC\xDC\xC4\xC4\".toList\n\n        def chars(message\
    \ : String) : Seq[String] = {\n            var charSeq = Seq[String]()\n     \
    \       for (letter <- message) {\n                charSeq = charSeq :+ alphabet.find(letter\
    \ => letter != letter.toUpperCase)\n            }\n            charSeq\n     \
    \   }\n        def swap(charSeq : Seq[String], i : Int, j : Int) : Seq[String]\
    \ = {\n            charSeq match {\n                case Seq() => Seq()\n    \
    \            case Seq(last, first) => \n                    last +: (first swap\
    \ i + 2, j swap i + 2)\n                case other =>\n                    other\n\
    \            }\n        }\n        def replace(message : String, i : Int, j :\
    \ Int, letter : String, \n                    swapFunc : ((Seq[String], Int, Int)\
    \ => (Seq[String], Int, Int)) \n                    ) : Seq[String] = {\n    \
    \        val newSeq = swapFunc(chars(message), i, j)\n            newSeq match\
    \ {\n                case Seq() => Seq()\n                case Seq(first, second)\
    \ =>\n                    first :+ letter\n                    replace(message,\
    \ second, i, letter, swapFunc)\n                case other => other\n        \
    \    }\n        }\n        replace(message, 0, 0, message.charAt(0), swap)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsg9h53wm.scala:29:78 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                charSeq = charSeq :+ alphabet.find(\e\
    [36mletter\e[0m => letter != letter.toUpperCase)\n\e[31m\e[31m   |\e[0m      \
    \                                                                 ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsg9h53wm.scala:37:35\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m                    last\
    \ +: (first swap i + \e[31m2\e[0m, j swap i + \e[31m2\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ swap is not a member of String - did you mean first.strip?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpsg9h53wm.scala:37:49 ------------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m                    last +: (first swap i + \e[31m2\e[0m,\
    \ j swap i + \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \                   ^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \          value swap is not a member of Int\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpsg9h53wm.scala:49:26 ------------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m                    first :+ letter\n\e[31m\e[31m   |\e[0m           \
    \         ^^^^^^^^\e[0m\n\e[31m   |\e[0m      value :+ is not a member of A$2.\n\
    \e[31m   |\e[0m      An extension method was tried, but could not be fully constructed:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m          genericArrayOps[\e[35mT\e[0m](first)\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsg9h53wm.scala:50:37 --------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                    replace(message, second, i, letter,\
    \ swapFunc)\n\e[31m\e[31m   |\e[0m                                     ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    (second : A$2)\n\
    \e[31m   |\e[0m                                     Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsg9h53wm.scala:51"
  stdout: ''
  timestamp: 1659979073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val chars = message.toCharArray\n        val letters =\
    \ message.chars.toList\n        val newChars = mutable.Buffer.empty[Char]\n  \
    \      for (i <- 0 until chars.length) {\n            if (letters.contains(chars(i)))\
    \ {\n                val firstLetter = chars(i).toUpper\n                val secondLetter\
    \ = chars(i + 1).toUpper\n                if (chars.contains(firstLetter) && chars.contains(secondLetter))\
    \ {\n                    newChars += firstLetter //swap the letters\n        \
    \            newChars += secondLetter\n                }\n                newChars\
    \ += chars(i)\n                newChars += chars(i + 1)\n            } else {\n\
    \                newChars += chars(i)\n            }\n        }\n        newChars.toString.toUpperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8i9m7jpz.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = message.chars.toList\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m              value toList is not a member of java.util.stream.IntStream\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8i9m7jpz.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnewChars\e[0m = mutable.Buffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var newString = \"\"\n        var vowels = \"aeiouAEIOU\"\
    \n        for ( i <- 0 until message.length ) {\n            val letter = message.charAt(i)\n\
    \            if ( vowels.contains(letter) ) {\n                val beforeVowel\
    \ = message.charAt(i - 1)\n                newString += if ( vowels.contains(beforeVowel)\
    \ ) {\n                    message.charAt(i - 1) + beforeVowel\n             \
    \   } else letter\n            } else newString += letter\n        }\n       \
    \ return newString\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprq6scyif.scala:21:29 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                newString += \e[33mif\e[0m ( vowels.contains(beforeVowel)\
    \ ) {\n\e[31m\e[31m   |\e[0m                             ^^\e[0m\n\e[31m   |\e\
    [0m                             expression expected but \e[31mif\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = scala.collection.mutable.List(\"a\", \"e\"\
    , \"i\", \"o\", \"u\")\n        val replaced = message.foldLeft(\"\") { (result,\
    \ char) =>\n            val index = vowels.indexOf(char.toLowerCase)\n       \
    \     if (index != -1) {\n                val a = vowels(index - 1)\n        \
    \        val b = vowels(index)\n                val c = vowels(index + 1)\n  \
    \              result + (if (char == a) b else c) + char\n            } else {\n\
    \                result + char\n            }\n        }\n        replaced.toLowerCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2namta1h.scala:15:46 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = scala.collection.mutable.List(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue List is not a member of scala.collection.mutable - did\
    \ you mean mutable.ListMap?\n1 error found\n"
  stdout: ''
  timestamp: 1659979073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n      val result = new StringBuilder()\n      var i = 0\n    \
    \  while (i < message.length) {\n        var c = message.charAt(i)\n        if\
    \ (c.isUpperCase || c.isLowerCase || c.isDigit) {\n          result = result.append(c)\n\
    \        } else {\n          val r = c.toUpperCase\n          val l = c.toLowerCase\n\
    \          var j = 0\n          var prev = i + 1\n          while (j < l.length)\
    \ {\n            var next = prev + 1\n            while (next < l.length) {\n\
    \              val x = l.charAt(next)\n              if (x == 'A' || x == 'E'\
    \ || x == 'I' || x == 'O' || x == 'U') {\n                next = next+1\n    \
    \            break\n              }\n              next = next+1\n           \
    \ }\n            val y = l.charAt(next)\n            if (prev > 0) {\n       \
    \       val x = l.charAt(prev-1)\n              if (x == 'A' || x == 'E' || x\
    \ == 'I' || x == 'O' || x == 'U') {\n                result.append((r + y).swapcase)\n\
    \                break\n              }\n            }\n            if (prev <\
    \ message.length-1) {\n              val x = l.charAt(prev+1)\n              if\
    \ (x == 'A' || x == 'E' || x == 'I' || x == 'O' || x == 'U') {\n             \
    \   result.append((r + y).swapcase)\n                break\n              }\n\
    \            }\n            prev = prev+1\n          }\n        }\n        i =\
    \ i+1\n      }\n      result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphl1gmbxa.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (c.isUpperCase || c.isLowerCase\
    \ || c.isDigit) {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value isUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmphl1gmbxa.scala:20:17 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m          result = result.append(c)\n\e[31m\e[31m   |\e\
    [0m          ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          Reassignment\
    \ to val result\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphl1gmbxa.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m          \e[33mval\e[0m\
    \ \e[36mr\e[0m = c.toUpperCase\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphl1gmbxa.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m          \e[33mval\e[0m \e[36ml\e[0m = c.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \               value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphl1gmbxa.scala:32:16 ------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m                break\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphl1gmbxa.scala:41:16 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphl1gmbxa.scala:48:16 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                "
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowelSet = mutable.HashSet[Char]('a', 'e', 'i', 'o',\
    \ 'u')\n        var newMessage = message\n        var currentVowel = 'a'\n   \
    \     for(i <- 0 until message.length) {\n            val char = message.charAt(i)\n\
    \            if(vowelSet.contains(char)) {\n                newMessage = newMessage.replace(char.toUpperCase,\
    \ vowelSet.apply(currentVowel))\n                currentVowel = char.toUpperCase\n\
    \            }\n        }\n        newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6tvdq76b.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mvowelSet\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m](\e[31m'a'\e[0m, \e[31m'e'\e[0m, \e[31m'i'\e[0m, \e[31m'o'\e[0m,\
    \ \e[31m'u'\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp6tvdq76b.scala:21:53 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                newMessage = newMessage.replace(char.toUpperCase,\
    \ vowelSet.apply(currentVowel))\n\e[31m\e[31m   |\e[0m                       \
    \                         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                  value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp6tvdq76b.scala:22:36 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                currentVowel = char.toUpperCase\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val newMessage = message.map(x=>{\n            if(x.toLowerCase.contains(\"\
    a\")){\n                x.toLowerCase.swapCase\n            }else{\n         \
    \       x\n            }\n        }).map(x=>{\n            val vowels = \"aeiou\"\
    \n            var count = 0\n            var result = \"\"\n            for(i\
    \ <- 0 to x.toCharArray.length -1){\n                if(vowels.contains(x.toCharArray(i))){\n\
    \                    result += x.toCharArray(i).swapCase\n                   \
    \ count += 1\n                }\n            }\n            if(count >= 2){\n\
    \                x.toCharArray(i).swapCase\n            }else{\n             \
    \   x\n            }\n        })\n        newMessage.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbokwr1_v.scala:16:17 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(x.toLowerCase.contains(\e[31m\"\
    a\"\e[0m)){\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m               value toLowerCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbokwr1_v.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                x.toLowerCase.swapCase\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpbokwr1_v.scala:25:28 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m            \e[33mfor\e[0m(i <- \e[31m0\e[0m to x.toCharArray.length -\e[31m1\e\
    [0m){\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value toCharArray is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbokwr1_v.scala:26:37 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mif\e[0m(vowels.contains(x.toCharArray(i))){\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value toCharArray is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbokwr1_v.scala:27:27\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    result\
    \ += x.toCharArray(i).swapCase\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did you mean\
    \ String.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbokwr1_v.scala:27:32\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    result\
    \ += x.toCharArray(i).swapCase\n\e[31m\e[31m   |\e[0m                        \
    \      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              value\
    \ toCharArray is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpbokwr1_v.scala:32:18 ------------------------\e[0m\e[0m\n\e[31m32 |\e\
    [0m                x.toCharArray(i).swapCase\n\e[31m\e[31m   |\e[0m          \
    \    "
  stdout: ''
  timestamp: 1659979077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val result = message.foldLeft(\"\"){ (result,c) => \n\
    \            if(c.toUpper == c.toLowerCase) result += c.toUpper\n            else\
    \ if((c.toUpper == 'a' || c.toUpper == 'e' || c.toUpper == 'i' || c.toUpper ==\
    \ 'o' || c.toUpper == 'u')) {\n                val pos = getVowelPosition(c) \n\
    \                result += c.substring(0, pos)\n                result += c.substring(pos,c.getLength)\n\
    \            }\n            else result += c\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkvvupl8c.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(c.toUpper == c.toLowerCase)\
    \ result += c.toUpper\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkvvupl8c.scala:16:50\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(c.toUpper\
    \ == c.toLowerCase) result += c.toUpper\n\e[31m\e[31m   |\e[0m               \
    \                            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean result.!=?\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpkvvupl8c.scala:18:26 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mpos\e[0m = getVowelPosition(c)\
    \ \n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: getVowelPosition\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkvvupl8c.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                result += c.substring(\e[31m0\e[0m, pos)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   value += is not a member of String - did you mean result.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpkvvupl8c.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                result += c.substring(\e[31m0\e[0m, pos)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value substring is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkvvupl8c.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result += c.substring(pos,c.getLength)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   value += is not a member of String - did you mean result.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpkvvupl8c.scala:20:28 -"
  stdout: ''
  timestamp: 1659979078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var newMessage = \"\"\n        for (letter1 <- message)\
    \ {\n            for (letter2 <- message) {\n                if (letter1 != letter2)\
    \ {\n                    newMessage += letter2.toLowerCase().charAt(letter2.indexOf((letter1.toLowerCase()))).\n\
    \                        toString().toUpperCase()\n                }\n       \
    \     }\n        }\n        return newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk4_2puq4.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    newMessage += letter2.toLowerCase().charAt(letter2.indexOf((letter1.toLowerCase()))).\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           value += is not a member of String - did you mean String.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpk4_2puq4.scala:19:42 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    newMessage += letter2.toLowerCase().charAt(letter2.indexOf((letter1.toLowerCase()))).\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        def charToNum(c: Char): Int = {\n            c.toUpper\
    \ - 'A'.toUpper\n        }\n        val messageAsArray = message.toCharArray.asInstanceOf[Array[Char]]\n\
    \        val n = messageAsArray.length\n        val vowelsMap = new mutable.HashMap[Char,\
    \ Int]()\n        for (i <- 0 until n) {\n            if (messageAsArray(i) ==\
    \ 'A') {\n                vowelsMap += ('A' -> 0)\n            } else if (messageAsArray(i)\
    \ == 'E') {\n                vowelsMap += ('E' -> 1)\n            } else if (messageAsArray(i)\
    \ == 'I') {\n                vowelsMap += ('I' -> 2)\n            } else if (messageAsArray(i)\
    \ == 'O') {\n                vowelsMap += ('O' -> 3)\n            } else if (messageAsArray(i)\
    \ == 'U') {\n                vowelsMap += ('U' -> 4)\n            } else if (messageAsArray(i)\
    \ == 'Y') {\n                vowelsMap += ('Y' -> 5)\n            } else if (messageAsArray(i)\
    \ == 'a') {\n                vowelsMap += ('a' -> 6)\n            } else if (messageAsArray(i)\
    \ == 'e') {\n                vowelsMap += ('e' -> 7)\n            } else if (messageAsArray(i)\
    \ == 'i') {\n                vowelsMap += ('i' -> 8)\n            } else if (messageAsArray(i)\
    \ == 'o') {\n                vowelsMap += ('o' -> 9)\n            } else if (messageAsArray(i)\
    \ == 'u') {\n                vowelsMap += ('u' -> 10)\n            } else if (messageAsArray(i)\
    \ == 'y') {\n                vowelsMap += ('y' -> 11)\n            }\n       \
    \ }\n        var result = \"\"\n        for (i <- 0 until n) {\n            if\
    \ (vowelsMap.contains(messageAsArray(i))) {\n                result += messageAsArray(i).swapCase\n\
    \            } else {\n                result += messageAsArray(i)\n         \
    \   }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnf4_vjdz.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpnf4_vjdz.scala:51:23 ------------------------\e[0m\e[0m\n\e[31m51 |\e\
    [0m                result += messageAsArray(i).swapCase\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of String - did you mean String.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpnf4_vjdz.scala:51:44 ------------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m                result += messageAsArray(i).swapCase\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          value swapCase is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659979077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        def vowel(a: String) : Int = {\n            def b(a: String,\
    \ i: Int) : Int = {\n                if (i >= a.length) 0\n                else\
    \ if (a.charAt(i) == a.charAt(i - 1)) 1\n                else {\n            \
    \        b(a = a.substring(0,i), i + 1)\n                }\n            }\n  \
    \          b(a, 0)\n        }\n        def count(a : String) : Int = {\n     \
    \       def c(a: String): Int = {\n                val b = a.length\n        \
    \        var i = 0\n                while (i<b){\n                    if (a.charAt(i)\
    \ == a.charAt(i + 1)) i + 1 else c(a = a.substring(0,i) + a.substring(i + 1))\n\
    \                    i += 1\n                }\n                i\n          \
    \  }\n            c(message)\n        }\n        val r = message.mkString\n  \
    \      var i = 0\n        while (i<r.length){\n            if (vowel(r.charAt(i)))\
    \ r.charAt(i) match {\n                case a if a == r.charAt(i) =>\n       \
    \             r = r.substring(0,i) + r.substring(i+1,i+2) + \"A\"\n          \
    \      case a if a == r.charAt(i) =>\n                    r = r.substring(0,i)\
    \ + r.substring(i+1,i+2) + \"B\"\n                case a if a == r.charAt(i) =>\n\
    \                    r = r.substring(0,i) + r.substring(i+1,i+2) + \"C\"\n   \
    \             case a if a == r.charAt(i) =>\n                    r = r.substring(0,i)\
    \ + r.substring(i+1,i+2) + \"D\"\n                case a if a == r.charAt(i) =>\n\
    \                    r = r.substring(0,i) + r.substring(i+1,i+2) + \"E\"\n   \
    \             case a if a == r.charAt(i) =>\n                    r = r.substring(0,i)\
    \ + r.substring(i+1,i+2) + \"F\"\n                case a if a == r.charAt(i) =>\n\
    \                    r = r.substring(0,i) + r.substring(i+1,i+2) + \"G\"\n   \
    \             case a if a == r.charAt(i) =>\n                    r = r.substring(0,i)\
    \ + r.substring(i+1,i+2) + \"H\"\n                case a if a == r.charAt(i) =>\n\
    \                    r = r.substring(0,i) + r.substring(i+1,i+2) + \"I\"\n   \
    \             case a if a == r.charAt(i) =>\n                    r = r.substring(0,i)\
    \ + r.substring(i+1,i+2) + \"J\"\n                case a if a == r.charAt(i) =>\n\
    \                    r = r.substring(0,i) + r.substring(i+1,i+2) + \"K\"\n   \
    \             case a if a == r.charAt(i) =>\n                    r = r.substring(0,i)\
    \ + r.substring(i+1,i+2) + \"L\"\n                case a if a == r.charAt(i) =>\n\
    \                    r = r.substring(0,i) + r.substring(i+1,i+2) + \"M\"\n   \
    \             case a if a == r.charAt(i) =>\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpen071j50.scala:78:0 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpen071j50.scala:40:30\
    \ --------------------\e[0m\e[0m\n\e[31m40 |\e[0m            \e[33mif\e[0m (vowel(r.charAt(i)))\
    \ r.charAt(i) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Char\n\e[31m   |\e[0m    \
    \                  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpen071j50.scala:42:22 -----------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m                    r = r.substring(\e[31m0\e[0m,i) + r.substring(i+\e\
    [31m1\e[0m,i+\e[31m2\e[0m) + \e[31m\"A\"\e[0m\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Reassignment to val r\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpen071j50.scala:44:22 -----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m                    r = r.substring(\e[31m0\e[0m,i) +\
    \ r.substring(i+\e[31m1\e[0m,i+\e[31m2\e[0m) + \e[31m\"B\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val r\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpen071j50.scala:46:22 -----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m                    r = r.substring(\e[31m0\e[0m,i) +\
    \ r.substring(i+\e[31m1\e[0m,i+\e[31m2\e[0m) + \e[31m\"C\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val r\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpen071j50.scala:48:22 ------------------"
  stdout: ''
  timestamp: 1659979078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val replaceVowels = new mutable.StringBuilder\n      \
    \  var i = 0\n        for(letter <- message) {\n            if (letter == ' ')\
    \ {\n                replaceVowels.append(\"\")\n                i++\n       \
    \     } else {\n                val firstLetter =\n                    if (i ==\
    \ 0) 'z' \n                    else if (letter == message.charAt(i - 1)) 'z'\n\
    \                    else letter\n\n                val secondLetter =\n     \
    \               if (i == 1) 'z' \n                    else if (letter == message.charAt(i\
    \ - 2)) 'z'\n                    else letter\n\n                val thirdLetter\
    \ =\n                    if (i == 2) 'z' \n                    else if (letter\
    \ == message.charAt(i - 3)) 'z'\n                    else letter\n\n         \
    \       val fourthLetter =\n                    if (i == 3) 'z' \n           \
    \         else if (letter == message.charAt(i - 4)) 'z'\n                    else\
    \ letter\n\n                val fithLetter =\n                    if (i == 4)\
    \ 'z' \n                    else if (letter == message.charAt(i - 5)) 'z'\n  \
    \                  else letter\n\n                val sixthLetter =\n        \
    \            if (i == 6) 'z' \n                    else if (letter == message.charAt(i\
    \ - 6)) 'z'\n                    else letter\n\n                val seventhLetter\
    \ =\n                    if (i == 7) 'z' \n                    else if (letter\
    \ == message.charAt(i - 7)) 'z'\n                    else letter\n\n         \
    \       val eighthLetter =\n                    if (i == 8) 'z' \n           \
    \         else if (letter == message.charAt(i - 8)) 'z'\n                    else\
    \ letter\n\n                val ninthLetter =\n                    if (i == 9)\
    \ 'z' \n                    else if (letter == message.charAt(i - 9)) 'z'\n  \
    \                  else letter\n\n                val tenthLetter =\n        \
    \            if (i == 10) 'z' \n                    else if (letter == message.charAt(i\
    \ - 10)) 'z'\n                    else letter\n\n                val firstLetter2PlaceAhead\
    \ =\n                    if (i == 1) 'A' \n                    else if (letter\
    \ == message.charAt(i - 1)\n                    && letter != message.charAt(i\
    \ - 2)) 'A'\n                    else letter\n\n                val secondLetter2PlaceAhead\
    \ =\n                    if (i == 2) 'A' \n                    else if (letter\
    \ == message.charAt(i - 2)\n                    && letter != message.charAt(i\
    \ - 3)) 'A'\n                    else letter\n\n                val thirdLetter2PlaceAhead\
    \ =\n                    if (i == 3) 'A' \n                    else if (letter\
    \ == message.charAt(i - 3)\n                    && letter != message.charAt(i\
    \ - 4)) 'A'\n                    else letter\n\n                val fourthLetter2PlaceAhead\
    \ =\n                    if (i == 4) '\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1_rxk3bo.scala:20:19 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                i++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp1_rxk3bo.scala:91:32\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m91 |\e[0m       \
    \             \e[33mif\e[0m (i == \e[31m4\e[0m) '\n\e[31m\e[31m   |\e[0m     \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \      unclosed character literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1_rxk3bo.scala:102:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m102 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1_rxk3bo.scala:15:32 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mreplaceVowels\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                             \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp1_rxk3bo.scala:93:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m93 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmp1_rxk3bo.scala:92:4 -----------------\e\
    [0m\e[0m\n\e[33m91 |\e[0m                    \e[33mif\e[0m (i == \e[31m4\e[0m)\
    \ '\n\e[33m92 |\e[0m    }\n\e[33m\e[33m   |\e[0m                             \
    \    ^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement position;\
    \ you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 warnings found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val lettersOnly = message.replaceAll(\"\
    [^a-zA-Z]\", \"\")\n\n        val firstLetters = lettersOnly.substring(0,lettersOnly.indexOf(\"\
    a\"))\n        val secondLetters = lettersOnly.substring(lettersOnly.indexOf(\"\
    a\"),lettersOnly.indexOf(\"e\"))\n        val thirdLetters = lettersOnly.substring(lettersOnly.indexOf(\"\
    e\"),lettersOnly.indexOf(\"i\"))\n        val fourthLetters = lettersOnly.substring(lettersOnly.indexOf(\"\
    i\"),lettersOnly.indexOf(\"o\"))\n        val fifthLetters = lettersOnly.substring(lettersOnly.indexOf(\"\
    o\"),lettersOnly.indexOf(\"u\"))\n\n        val firstVowels = firstLetters.replaceAll(vowels,\"\
    a\")\n        val secondVowels = secondLetters.replaceAll(vowels,\"a\")\n    \
    \    val thirdVowels = thirdLetters.replaceAll(vowels,\"a\")\n        val fourthVowels\
    \ = fourthLetters.replaceAll(vowels,\"a\")\n        val fifthVowels = fifthLetters.replaceAll(vowels,\"\
    a\")\n\n        val firstLettersOnTheLeft = firstVowels.replaceAll(\"a\",firstLetters)\n\
    \        val secondLettersOnTheLeft = secondVowels.replaceAll(\"a\",secondLetters)\n\
    \        val thirdLettersOnTheLeft = thirdVowels.replaceAll(\"a\",thirdLetters)\n\
    \        val fourthLettersOnTheLeft = fourthVowels.replaceAll(\"a\",fourthLetters)\n\
    \        val fifthLettersOnTheLeft = fifthVowels.replaceAll(\"a\",fifthLetters)\n\
    \n        val firstLettersOnTheRight = firstLettersOnTheLeft.replaceAll(\"e\"\
    ,secondLetters)\n        val secondLettersOnTheRight = secondLettersOnTheLeft.replaceAll(\"\
    e\",secondLetters)\n        val thirdLettersOnTheRight = thirdLettersOnTheLeft.replaceAll(\"\
    e\",secondLetters)\n        val fourthLettersOnTheRight = fourthLettersOnTheLeft.replaceAll(\"\
    e\",secondLetters)\n        val fifthLettersOnTheRight = fifthLettersOnTheLeft.replaceAll(\"\
    e\",secondLetters)\n\n        val firstLettersOnTheLeftAndRight = firstLettersOnTheLeft\
    \ + secondLettersOnTheRight + thirdLettersOnTheRight + fourthLetters\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpid_9272k.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // TODO: write your code here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjz310pku.scala:14:44\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mencode\e\
    [0m(\e[36mmessage\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                            ^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Unit\n\e[31m   |\e[0m\
    \                                            Required: String\n\e[31m15 |\e[0m\
    \        \e[34m// TODO: write your code here\e[0m\n\e[31m16 |\e[0m    }\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n      val alphabet = \n        List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z').toList\n\
    \      val vowels = List('e','i','o','u','y').toList\n      val message = message.map(c\
    \ => \n          if (alphabet.contains(c.toLowerCase)) c else \n            if\
    \ (vowels.contains(c)) c.toUpperCase.charAt(0) + c.toUpperCase.charAt(1) else\
    \ \n              (c))\n      val encodedString = message.reduceLeft(_ + _)\n\
    \      encodedString.reverse\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5nw16oyq.scala:18:20 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m \e[36mmessage\e[0m = message.map(\e\
    [36mc\e[0m => \n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e\
    [0m                    Recursive \e[33mvalue\e[0m \e[35mmessage\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n         \n         val vowels = \"aeiouAEIOU\"\n         val\
    \ lettersOnly = message.replaceAll(\"[^A-Z]\", \"\")\n         val vowelIndices\
    \ = lettersOnly.map(_.toChar).filter(c => vowels.indexOf(c) >= 0).zipWithIndex.toMap\n\
    \         val replacedLetters = lettersOnly.map(letter =>\n         {\n      \
    \       if(vowelIndices.contains(letter)) \n                 vowelIndices(letter)\n\
    \             else \n                 letter\n         })\n         val twoAheadIndices\
    \ = lettersOnly.zipWithIndex.filter(\n             i => vowelIndices.getOrElse(i._2,\
    \ letters.size) === letters.size).map(_._2)\n         val newLetters = replacedLetters.map(letter\
    \ => vowelIndices(letter))\n         twoAheadIndices.foreach(i => newLetters(i)\
    \ = newLetters(i)+\"a\")\n         newLetters.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpijz4ktj2.scala:27:43\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m             \e[36mi\e[0m =>\
    \ vowelIndices.getOrElse(i._2, letters.size) === letters.size).map(_._2)\n\e[31m\e\
    [31m   |\e[0m                                         ^^^^\e[0m\n\e[31m   |\e\
    [0m                                         Found:    Int\n\e[31m   |\e[0m   \
    \                                      Required: Char\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpijz4ktj2.scala:27:47 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m             \e[36mi\e[0m => vowelIndices.getOrElse(i._2,\
    \ letters.size) === letters.size).map(_._2)\n\e[31m\e[31m   |\e[0m           \
    \                                    ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                    Not found: letters\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpijz4ktj2.scala:27:65 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m             \e[36mi\e[0m => vowelIndices.getOrElse(i._2,\
    \ letters.size) === letters.size).map(_._2)\n\e[31m\e[31m   |\e[0m           \
    \                                                      ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                                      Not found: letters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpijz4ktj2.scala:28:69\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m         \e[33mval\e[0m \e[36mnewLetters\e\
    [0m = replacedLetters.map(\e[36mletter\e[0m => vowelIndices(letter))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                                           \
    \  Found:    (letter : AnyVal)\n\e[31m   |\e[0m                              \
    \               Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpijz4k"
  stdout: ''
  timestamp: 1659979080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val messageAsList = message.toLowerCase.split(\" \").map(_.toLowerCase)\n\
    \        val messageAsMap = (for (letter <- messageAsList) yield letter -> letter)\n\
    \        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"i\", \"\
    o\", \"a\")\n        val swappedLetters = messageAsList.map(letter => {\n    \
    \        val replacement = vowels.foldLeft(letter)((a, e) => \n              \
    \      if (a.charAt(0) == e.charAt(0)) a else e.charAt(0) + a)\n            val\
    \ twoAheadLetter = vowels(vowels.indexOf(letter) + 1)\n            (replacement\
    \ -> twoAheadLetter)\n        })\n        val replacedLetters = vowels.flatMap(vowel\
    \ => \n                messageAsList.map(letter => \n                    letter\
    \ -> \n                    swappedLetters.find(_._1 == vowel)._2.toString).flatten)\n\
    \        replacedLetters.foldLeft(messageAsList)((a, letter) => a + letter)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9tjv52va.scala:27:55 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    swappedLetters.find(_._1 == vowel)._2.toString).flatten)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value _2 is not a member of Option[(String,\
    \ String)]\n\e[31m\e[31m-- Error: /tmp/tmp9tjv52va.scala:27:75 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    swappedLetters.find(_._1 == vowel)._2.toString).flatten)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                   ^\e[0m\n\e[31m   |\e[0mno given instance of type ((String,\
    \ Nothing)) => IterableOnce[B] was found for parameter asIterable of \e[33mmethod\e\
    [0m \e[35mflatten\e[0m in \e[33mclass\e[0m \e[35mArrayOps\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mwhere:    B is a type variable\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp9tjv52va.scala:28:65 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        replacedLetters.foldLeft(messageAsList)((\e[36ma\e[0m, \e[36mletter\e\
    [0m) => a + letter)\n\e[31m\e[31m   |\e[0m                                   \
    \                            ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of Array[String], but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val chars = message.chars.toList\n        val vowels =\
    \ \"aeiou\".toList\n        val output = new StringBuilder\n\n        for (i <-\
    \ 0 until chars.size) {\n            val currentChar = chars(i)\n\n          \
    \  if (vowels.contains(currentChar)) {\n                for (j <- i + 1 until\
    \ chars.size) {\n                    val currentChar2 = chars(j)\n           \
    \         if (vowels.contains(currentChar2)) {\n                        val replacementChar\
    \ = vowels.zip(vowels.tail).find(_._1 == currentChar2)._2\n                  \
    \      output.append(replacementChar)\n                    }\n               \
    \     else {\n                        output.append(currentChar2)\n          \
    \          }\n                }\n            }\n            else {\n         \
    \       output.append(currentChar)\n            }\n        }\n\n        output.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjvy6ovss.scala:15:34 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = message.chars.toList\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              value toList is not a member of java.util.stream.IntStream\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpjvy6ovss.scala:26:97 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                        \e[33mval\e[0m \e[36mreplacementChar\e\
    [0m = vowels.zip(vowels.tail).find(_._1 == currentChar2)._2\n\e[31m\e[31m   |\e\
    [0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value _2 is not a member of Option[(Char,\
    \ Char)]\n2 errors found\n"
  stdout: ''
  timestamp: 1659979079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var messageLetters = message.toCharArray\n        var\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var newMessage = message\
    \ //start with original message\n        for(i <- 0 to messageLetters.length-1){\n\
    \            if(vowels(messageLetters(i))){\n                for(j <- i+1 to messageLetters.length-1){\n\
    \                    if(!vowels(messageLetters(j))){\n                       \
    \ var index = messageLetters.indexOf(messageLetters(i));\n                   \
    \     messageLetters = messageLetters.updated(index, messageLetters(j))\n    \
    \                }\n                }\n                newMessage = newMessage.replaceAll(messageLetters(i),\
    \ messageLetters(i+1))\n            }\n        }\n        newMessage = newMessage.replaceAll(\"\
    \\\\W\", \"\")\n        return newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp90m4ygng.scala:19:36\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m(vowels(messageLetters(i))){\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Found:    Char\n\e[31m   |\e[0m                     \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp90m4ygng.scala:21:45\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    \e[33mif\e\
    [0m(!vowels(messageLetters(j))){\n\e[31m\e[31m   |\e[0m                      \
    \         ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \   Found:    Char\n\e[31m   |\e[0m                               Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp90m4ygng.scala:26:65\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                newMessage =\
    \ newMessage.replaceAll(messageLetters(i), messageLetters(i+\e[31m1\e[0m))\n\e\
    [31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    Char\n\e[31m   |\e[0m                                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp90m4ygng.scala:26:84\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                newMessage =\
    \ newMessage.replaceAll(messageLetters(i), messageLetters(i+\e[31m1\e[0m))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                                 Found:    Char\n\e[31m   |\e[0m            \
    \                                            Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659979080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val input = message.split(\"\")\n        val output =\
    \ new StringBuilder\n        var vowels = \"aeiouAEIOU\".toList\n        for ((index,\
    \ element) <- input.zipWithIndex) {\n            if(vowels.contains(element))\
    \ {\n                var first = vowels.head\n                var second = vowels.last\n\
    \                val secondPlace = vowels.indexWhere(vowels.contains(element))\n\
    \                for (i <- index+1 to index+2) {\n                    if(vowels.contains(element))\
    \ {\n                        second = vowels(secondPlace+1)\n                \
    \    }\n                    output.append(vowels(first).toLowerCase)\n       \
    \             output.append(vowels(second).toLowerCase)\n                    output.append(element)\n\
    \                }\n            } else {\n                output.append(element)\n\
    \            }\n        }\n        output.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ea8t1fx.scala:22:67\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m\
    \ \e[36msecondPlace\e[0m = vowels.indexWhere(vowels.contains(element))\n\e[31m\e\
    [31m   |\e[0m                                                    ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Found:    Boolean\n\
    \e[31m   |\e[0m                                               Required: \e[1m\e\
    [32mChar\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e\
    [0mBoolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ea8t1fx.scala:23:37\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mfor\e[0m\
    \ (i <- index+\e[31m1\e[0m to index+\e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m   \
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Found:    String\n\e[31m   |\e[0m                           Required:\
    \ scala.collection.Factory[Char, Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val enc = message.map(c => (if (c.isLetter) c.toUpperCase\
    \ else c)).map(c => (if (c.isLetter) c.toUpperCase else c)).map(c => (if (c.isLetter)\
    \ c.toUpperCase else c)).map(c => (if (c.isLetter) c.toUpperCase else c)).map(c\
    \ => (if (c.isLetter) c.toUpperCase else c)).map(c => (if (c.isLetter) c.toUpperCase\
    \ else c)).map(c => (if (c.isLetter) c.toUpperCase else c)).map(c => (if (c.isLetter)\
    \ c.toUpperCase else c)).map(c => (if (c.isLetter) c.toUpperCase else c)).map(c\
    \ => (if (c.isLetter) c.toUpperCase else c)).map(c => (if (c.isLetter) c.toUpperCase\
    \ else c)).map(c => (if (c.isLetter) c.toUpperCase else c)).map(c => (if (c.isLetter)\
    \ c.toUpperCase else c)).map(c => (if (c.isLetter) c.toUpperCase else c)).map(c\
    \ => (if (c.isLetter) c.toUpperCase else c)).map(c => (if (c.isLetter) c.toUpperCase\
    \ else c)).map(c => (if (c.isLetter) c.toUpperCase else c)).map(c => (if (c.isLetter)\
    \ c.toUpperCase else c)).map(c => (if (c.isLetter) c.toUpperCase else c)).map(c\
    \ => (if (c.isLetter) c.toUpperCase else c)).map(c => (if (c.isLetter) c.toUpperCase\
    \ else c)).map(c => (if (c.isLetter) c.toUpperCase else c)).map(c => (if (c.isLetter)\
    \ c.toUpperCase else c)).map(c => (if (c.isLetter) c.toUpperCase else c)).map(c\
    \ => (if (c.isLetter) c.toUpperCase else c)).map(c => (if (c.isLetter) c.toUpperCase\
    \ else c)).map(c => (if (c.isLetter) c.toUpperCase else c)).map(c => (if (c.isLetter)\
    \ c.toUpperCase else c)).map(c => (if (c.isLetter) c.toUpperCase else c)).map(c\
    \ => (if (c.isLetter) c.toUpperCase else c)).map(c => (if (c.isLetter) c.toUpperCase\
    \ else c)).map(c => (if (c.isLetter) c.toUpperCase else c)).map(c => (if (c.isLetter)\
    \ c.toUpperCase else c)).map(c => (if (c.isLetter) c.toUpperCase \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprmrnbl7_.scala:16:4 ----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprmrnbl7_.scala:15:54\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36menc\e[0m = message.map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0m (c.isLetter) c.toUpperCase\
    \ \e[33melse\e[0m c)).map(\e[36mc\e[0m => (\e[33mif\e[0"
  stdout: ''
  timestamp: 1659979081
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var newMessage : String = message \n        var charCounts\
    \ : mutable.Map[Char, Int] = mutable.Map[Char, Int]()\n        var newCharCounts\
    \ : mutable.Map[Char, Int] = mutable.Map[Char, Int]()\n        for (c <- message)\
    \ { \n            charCounts(c) += 1\n            newCharCounts(c) = charCounts(c)\
    \ + 1\n        }\n\n        // Swap case of each character in the message and\
    \ replace vowels\n        for (c <- message) {\n            if (charCounts(c)\
    \ > 1) {\n                val newChar = newCharCounts(c) - 2\n               \
    \ val newChar = newChar.toChar\n                val newCharCounts = charCounts\
    \ - 2\n                newCharCounts(c) = newCharCounts(c).toChar\n          \
    \      charCounts(c) = newChar\n                newCharCounts(newChar) = newCharCounts\n\
    \            }\n        }\n        return newMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqcc872yb.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mcharCounts\e[0m : mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m] = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpqcc872yb.scala:16:50 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mcharCounts\e[0m : mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m] = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqcc872yb.scala:17:28\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e\
    [36mnewCharCounts\e[0m : mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m] = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqcc872yb.scala:17:53\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e\
    [36mnewCharCounts\e[0m : mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m] = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var vowels = \"AEIOU\"\n        var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        var result = \"\"\n        for ((index, letter) <- message.zipWithIndex)\
    \ {\n            if ((index % 2) == 0) {\n                for (i <- 0 until vowels.length)\
    \ result += alphabet.charAt(vowels.charAt(i) + alphabet.indexOf(letter.charAt(i))\
    \ + 1)\n                result += \"G\"\n            } else {\n              \
    \  result += \"S\"\n            }\n        }\n        return result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_v2wcc8x.scala:20:56 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mfor\e[0m (i <- \e[31m0\e[0m until\
    \ vowels.length) result += alphabet.charAt(vowels.charAt(i) + alphabet.indexOf(letter.charAt(i))\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of String - did you mean String.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp_v2wcc8x.scala:20:118 -----------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                \e[33mfor\e[0m (i <- \e[31m0\e[0m until vowels.length) result\
    \ += alphabet.charAt(vowels.charAt(i) + alphabet.indexOf(letter.charAt(i)) + \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                                                                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value charAt is not a\
    \ member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659979082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var result = \"\"\n        for(char <- message) {\n  \
    \          val swap = char.swapCase\n            val vowels = Set.of('A','E','I','O','U')\n\
    \            val replacement = vowels.indexOf(char.charAt(1)) % 26\n         \
    \   result += (swap + replacement)\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkrgsjl5a.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mswap\e[0m = char.swapCase\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       value swapCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpkrgsjl5a.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mvowels\e[0m = Set.of(\e\
    [31m'A'\e[0m,\e[31m'E'\e[0m,\e[31m'I'\e[0m,\e[31m'O'\e[0m,\e[31m'U'\e[0m)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \    value of is not a member of object scala.collection.mutable.Set\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val s = message.mkString\n        val m = s.toUpperCase\n\
    \        val v = \"AEIOU\"\n        val m = m.replaceAllIn(m, m => v contains\
    \ m.toUpperCase)\n        val l = m.length\n        var i = 0\n        val s =\
    \ new StringBuilder\n        while (i < l) {\n            if (m.charAt(i) == m.charAt(i+1))\
    \ {\n                s.append(v)\n            } else {\n                s.append(m.charAt(i))\n\
    \            }\n            i += 1\n        }\n        s.append(m)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmgcq7u1k.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.replaceAllIn(m,\
    \ \e[36mm\e[0m => v contains m.toUpperCase)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmgcq7u1k.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = \e[33mnew\e[0m \e[35mStringBuilder\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0ms is already defined as \e[33mvalue\e[0m \e[35ms\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmgcq7u1k.scala:24:18\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                s.append(v)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      value append is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpmgcq7u1k.scala:26:18 ------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                s.append(m.charAt(i))\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value append is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmgcq7u1k.scala:30:10\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        s.append(m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        value append is not\
    \ a member of String\n5 errors found\n"
  stdout: ''
  timestamp: 1659979083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\".toList\n\
    \        val vowels = \"aeiou\".toList\n        val enc = new mutable.StringBuilder\n\
    \        message.foreach{ x =>\n            if(x == ' ') {\n                enc.append('\
    \ ')\n            }\n            else {\n                x match {\n         \
    \           case 'a' -> enc.append('z')\n                    case 'e' -> enc.append('z')\n\
    \                    case 'i' -> enc.append('z')\n                    case 'o'\
    \ -> enc.append('z')\n                    case 'u' -> enc.append('z')\n      \
    \              case 'A' -> enc.append('Z')\n                    case 'E' -> enc.append('Z')\n\
    \                    case 'I' -> enc.append('Z')\n                    case 'O'\
    \ -> enc.append('Z')\n                    case 'U' -> enc.append('Z')\n      \
    \              case c =>\n                        x match {\n                \
    \            case vowels(0) if (x == 'a') =>\n                               \
    \ enc.append('z')\n                            case vowels(0) if (x == 'e') =>\n\
    \                                enc.append('z')\n                           \
    \ case vowels(0) if (x == 'i') =>\n                                enc.append('z')\n\
    \                            case vowels(0) if (x == 'o') =>\n               \
    \                 enc.append('z')\n                            case vowels(0)\
    \ if (x == 'u') =>\n                                enc.append('z')\n        \
    \                    case x => enc.append(alphabet(alphabet.indexOf(x))+1)\n \
    \                       }\n                }\n            }\n        }\n     \
    \   enc.toString\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6owi2hqj.scala:25:20 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    \e[33mcase\e[0m \e[31m'e'\e[0m ->\
    \ enc.append(\e[31m'z'\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^\e\
    [0m\n\e[31m   |\e[0m                    '=>' expected, but 'case' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmp6owi2hqj.scala:27:20 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    \e[33mcase\e[0m \e[31m'o'\e[0m ->\
    \ enc.append(\e[31m'z'\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^\e\
    [0m\n\e[31m   |\e[0m                    '=>' expected, but 'case' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmp6owi2hqj.scala:29:20 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    \e[33mcase\e[0m \e[31m'A'\e[0m ->\
    \ enc.append(\e[31m'Z'\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^\e\
    [0m\n\e[31m   |\e[0m                    '=>' expected, but 'case' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmp6owi2hqj.scala:31:20 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    \e[33mcase\e[0m \e[31m'I'\e[0m ->\
    \ enc.append(\e[31m'Z'\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^\e\
    [0m\n\e[31m   |\e[0m                    '=>' expected, but 'case' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmp6owi2hqj.scala:33:20 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    \e[33mcase\e[0m \e[31m'U'\e[0m ->\
    \ enc.append(\e[31m'Z'\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^\e\
    [0m\n\e[31m   |\e[0m                    '=>' expected, but 'case' found\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp6owi2hqj.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36menc\e[0m = \e[33mnew\e[0m\
    \ mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    6 errors found\n"
  stdout: ''
  timestamp: 1659979083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n      val buffer = new mutable.Buffer[Char]\n      val vowels\
    \ = \"aeiouAEIOU\"\n      message match {\n        case letter if letter == 'a'\
    \ =>\n          buffer.append(letter)\n          letter\n        case letter if\
    \ letter == 'e' =>\n          buffer.append(letter)\n          letter\n      \
    \  case letter if letter == 'i' =>\n          buffer.append(letter)\n        \
    \  letter\n        case letter if letter == 'o' =>\n          buffer.append(letter)\n\
    \          letter\n        case letter if letter == 'u' =>\n          buffer.append(letter)\n\
    \          letter\n        case letter => letter\n      }\n      buffer.toString.replaceAll(vowels.toSeq.tail.mkString,\
    \ \"$1\")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ksw_if2.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mbuffer\e[0m = \e[33mnew\e\
    [0m mutable.Buffer[\e[35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                   \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp4ksw_if2.scala:18:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mcase\e[0m letter \e[33mif\e[0m letter ==\
    \ \e[31m'a'\e[0m =>\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp4ksw_if2.scala:21:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mcase\e[0m letter \e[33mif\e[0m letter ==\
    \ \e[31m'e'\e[0m =>\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp4ksw_if2.scala:24:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mcase\e[0m letter \e[33mif\e[0m letter ==\
    \ \e[31m'i'\e[0m =>\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp4ksw_if2.scala:27:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mcase\e[0m letter \e[33mif\e[0m letter ==\
    \ \e[31m'o'\e[0m =>\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp4ksw_if2.scala:30:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mcase\e[0m letter \e[33mif\e[0m letter ==\
    \ \e[31m'u'\e[0m =>\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n6 errors found\n"
  stdout: ''
  timestamp: 1659979087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val result = new mutable.ArrayBuffer[String]\n       \
    \ val alphabet = new mutable.ArrayBuffer[Char]('A'\n            ++ ('a' - 'A')\
    \ ++ (('A' - 'a') to 'z') ++ (('a' - 'A') to 'z'\n                ++ ('A' - 'a')\
    \ to 'z') ++ (('A' - 'A') to 'z') ++ (\n                    ('a' - 'A') to 'z')\
    \ ++ (('A' - 'a') to 'z'))\n        val vowels = \"aeiou\"\n        val map =\
    \ new mutable.Map[Char, Int]()\n        for(c <- message) if(alphabet.contains(c))\
    \ map.put(c.toUpperCase, map.getOrElse(c.toUpperCase, 0) + 1)\n        for (a\
    \ <- alphabet) if(map.contains(a)) map.put(a -> map.getOrElse(a -> 1, 0) + 1)\n\
    \        for ((a, b) <- map) \n            a -> b\n        .foreach { case (k,\
    \ v) => result += ((k)(v) -> ((k)((v) - 1) + (alphabet.get((v) + 1))) :: result)\
    \ }\n        result += ((k)(v) -> ((k)((v) - 1) + (alphabet.get((v) + 1))) ::\
    \ result)\n        result mkString \"\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm9_y0rqq.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm9_y0rqq.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36malphabet\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mChar\e[0m](\e[31m'A'\e\
    [0m\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpm9_y0rqq.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979082
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ message.length){\n            if(message.charAt(i) == 'a') {\n             \
    \   result.append(message.charAt(i)).append('A')\n            }\n            else\
    \ if(message.charAt(i) == 'e') {\n                result.append(message.charAt(i)).append('E')\n\
    \            }\n            else if(message.charAt(i) == 'i') {\n            \
    \    result.append(message.charAt(i)).append('I')\n            }\n           \
    \ else if(message.charAt(i) == 'o') {\n                result.append(message.charAt(i)).append('O')\n\
    \            }\n            else if(message.charAt(i) == 'u') {\n            \
    \    result.append(message.charAt(i)).append('U')\n            }\n           \
    \ else if(message.charAt(i) == 'A') {\n                result.append(message.charAt(i)).append('A')\n\
    \            }\n            else if(message.charAt(i) == 'E') {\n            \
    \    result.append(message.charAt(i)).append('E')\n            }\n           \
    \ else if(message.charAt(i) == 'I') {\n                result.append(message.charAt(i)).append('I')\n\
    \            }\n            else if(message.charAt(i) == 'O') {\n            \
    \    result.append(message.charAt(i)).append('O')\n            }\n           \
    \ else if(message.charAt(i) == 'U') {\n                result.append(message.charAt(i)).append('U')\n\
    \            }\n            else if(message.charAt(i) == 'a') {\n            \
    \    result.append(message.charAt(i)).append('A')\n            }\n           \
    \ else if(message.charAt(i) == 'e') {\n                result.append(message.charAt(i)).append('E')\n\
    \            }\n            else if(message.charAt(i) == 'i') {\n            \
    \    result.append(message.charAt(i)).append('I')\n            }\n           \
    \ else if(message.charAt(i) == 'o') {\n                result.append(message.charAt(i)).append('O')\n\
    \            }\n            else if(message.charAt(i) == 'u') {\n            \
    \    result.append(message.charAt(i)).append('U')\n            }\n        }\n\
    \        return result.toString()\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpftcd7g79.scala:66)\n\tat Problem.main(tmpftcd7g79.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // Write your code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptitwxky6.scala:14:44\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mencode\e\
    [0m(\e[36mmessage\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                            ^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Unit\n\e[31m   |\e[0m\
    \                                            Required: String\n\e[31m15 |\e[0m\
    \        \e[34m// Write your code here\e[0m\n\e[31m16 |\e[0m    }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979086
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var result = new StringBuilder\n        var currentVowel\
    \ = 0\n        var letterIndex = 0\n        var vowels = List( 'a', 'e', 'i',\
    \ 'o', 'u' )\n        val characters = message.toCharArray\n        val characterSet\
    \ = Set(characters.toSeq: _*)\n        for (c <- characters) {\n            val\
    \ currentChar = c.toUpperCase\n            if (currentChar in characterSet) {\n\
    \                val currentCharPosition = characterSet.toList.indexOf(currentChar)\n\
    \                if (vowels.contains(currentChar)) {\n                    result.append((c\
    \ -> vowels(currentCharPosition)))\n                    vowels(currentCharPosition)\
    \ = currentChar\n                } else {\n                    vowels(currentCharPosition)\
    \ = currentChar\n                }\n            } else {\n                result.append((c\
    \ -> letterIndex))\n                letterIndex = letterIndex + 1\n          \
    \  }\n        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpha7g38n8.scala:22:32 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mcurrentChar\e[0m = c.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpha7g38n8.scala:27:20 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    vowels(currentCharPosition) = currentChar\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update\
    \ is not a member of List[Char] - did you mean List[Char].updated?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpha7g38n8.scala:29:20 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    vowels(currentCharPosition) = currentChar\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update\
    \ is not a member of List[Char] - did you mean List[Char].updated?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val vowels = \"aeiou\"\n        var new_message = \"\"\n\n        // Write\
    \ code here!\n        for (letter <- message) {\n            val x = alphabet.indexOf(letter)\n\
    \            val y = alphabet.indexOf((alphabet.charAt(x+1) + alphabet.charAt(x)))\n\
    \            val z = alphabet.indexOf((alphabet.charAt(x-1) + alphabet.charAt(y)))\n\
    \            val c = alphabet.charAt(z)\n            val temp = alphabet.charAt(x)\n\
    \            alphabet.charAt(x) = alphabet.charAt(y)\n            alphabet.charAt(y)\
    \ = alphabet.charAt(z)\n            alphabet.charAt(z) = c\n            alphabet.charAt(x)\
    \ = temp\n            new_message += alphabet\n        }\n        new_message\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo3ycz48t.scala:26:12 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            alphabet.charAt(x) = alphabet.charAt(y)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     value update is not a member of Int => Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpo3ycz48t.scala:27:12 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m            alphabet.charAt(y) = alphabet.charAt(z)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value update is\
    \ not a member of Int => Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo3ycz48t.scala:28:12\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            alphabet.charAt(z)\
    \ = c\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value update is not a member of Int => Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpo3ycz48t.scala:29:12 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m            alphabet.charAt(x) = temp\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value update is\
    \ not a member of Int => Char\n4 errors found\n"
  stdout: ''
  timestamp: 1659979089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val\
    \ letters = Array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n    \
    \    val newMessage = message.map(x => (x match {\n            case 'a' => \"\
    t\"\n            case 'b' => \"g\"\n            case 'c' => \"k\"\n          \
    \  case 'd' => \"h\"\n            case 'e' => \"j\"\n            case 'f' => \"\
    g\"\n            case 'g' => \"g\"\n            case 'h' => \"h\"\n          \
    \  case 'i' => \"k\"\n            case 'j' => \"k\"\n            case 'k' => \"\
    k\"\n            case 'l' => \"m\"\n            case 'm' => \"m\"\n          \
    \  case 'n' => \"n\"\n            case 'o' => \"p\"\n            case 'p' => \"\
    p\"\n            case 'q' => \"q\"\n            case 'r' => \"q\"\n          \
    \  case 's' => \"s\"\n            case 't' => \"s\"\n            case 'u' => \"\
    v\"\n            case 'v' => \"v\"\n            case 'w' => \"w\"\n          \
    \  case 'x' => \"x\"\n            case 'y' => \"y\"\n            case 'z' => \"\
    z\"\n            case _ => x\n        })).mkString\n        val newMessageWithLetter2\
    \ = newMessage match {\n            case x if vowels.contains(x) => (x match {\n\
    \                case 'a' => \"t\"\n                case 'e' => \"j\"\n      \
    \          case 'i' => \"k\"\n                case 'o' => \"p\"\n            \
    \    case 'u' => \"v\"\n                case _ => x\n            })\n        \
    \    case x if letters.contains(x) => (x match {\n                case 'a' =>\
    \ \"h\"\n                case 'b' => \"g\"\n                case 'c' => \"k\"\n\
    \                case 'd' => \"j\"\n                case 'e' => \"g\"\n      \
    \          case 'f' => \"g\"\n                case 'g' => \"g\"\n            \
    \    case 'h' => \"h\"\n                case 'i' => \"k\"\n                case\
    \ 'j' => \"k\"\n                case 'k' => \"k\"\n                case 'l' =>\
    \ \"m\"\n                case 'm' => \"m\"\n                case 'n' => \"n\"\n\
    \                case 'o' => \"p\"\n                case 'p' => \"p\"\n      \
    \          case 'q' => \"q\"\n                case 'r' => \"q\"\n            \
    \    case 's' => \"s\"\n                case 't' => \"s\"\n                case\
    \ 'u' => \"v\"\n                case 'v' => \"v\"\n                case 'w' =>\
    \ \"w\"\n                case 'x' => \"x\"\n                case 'y' => \"y\"\n\
    \                case 'z' => \"z\"\n                case _ => x\n            })\n\
    \            case x if letters.contains(x) \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc89k5xyf.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc89k5xyf.scala:95:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m95 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpc89k5xyf.scala:47:38 --------------------\e[0m\e[0m\n\
    \e[31m47 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m vowels.contains(x)\
    \ => (x \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                            \
    \          ^\e[0m\n\e[31m   |\e[0m                                      Found:\
    \    (x : String)\n\e[31m   |\e[0m                                      Required:\
    \ Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpc89k5xyf.scala:48:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m                \e[33mcase\e[0m \e[31m'a'\e[0m => \e\
    [31m\"t\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpc89k5xyf.scala:49:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m                \e[33mcase\e[0m \e[31m'e'\e[0m => \e\
    [31m\"j\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpc89k5xyf.scala:50:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                \e[33mcase\e[0m \e[31m'i'\e[0m => \e\
    [31m\"k\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpc89k5xyf.scala:51:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m                \e[33mcase\e[0m \e[31m'o'\e[0m => \e\
    [31m\"p\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be c"
  stdout: ''
  timestamp: 1659979094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var message : String = \"\"\n        var vowel = \"AEIOUaeiou\"\
    \n        var lower = \"abcdefghijklmnopqrstuvwxyz\"\n        var upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        for( letters <- message) {\n            message += letter match {\n\
    \                case letter if letter in vowel => letter match {\n          \
    \          case letter if letter in vowel => lower match {\n                 \
    \       case letter if lower ( index <- lower.indexOf(lower)) => lower(index)\
    \ + lower(index + 1) + letter\n                        case letter if lower index\
    \ > lower.indexOf(letter) => lower(index - 1) + letter\n                     \
    \   case letter => lower(index)\n                    }\n                    case\
    \ letter if lower index > lower.indexOf(letter) => lower match {\n           \
    \             case letter if lower ( index <- lower.indexOf(lower)) => lower(index)\
    \ + lower(index + 1) + letter\n                        case letter if lower index\
    \ > lower.indexOf(letter) => lower(index - 1) + letter\n                     \
    \   case letter => lower match {\n                            case letter if lower\
    \ ( index <- lower.indexOf(lower)) => lower + lower + letter\n               \
    \             case letter if lower index > lower.indexOf(letter) => lower + lower(index\
    \ - 1) + letter\n                            case letter => lower (index)\n  \
    \                      }\n                    }\n                    case letter\
    \ if lower index > lower.indexOf(letter) => lower match {\n                  \
    \      case letter if lower ( index <- lower.indexOf(lower)) => lower + lower\
    \ + letter\n                        case letter if lower index > lower.indexOf(letter)\
    \ => lower + lower(index - 1) + letter\n                        case letter =>\
    \ lower (index)\n                    }\n                }\n                case\
    \ letter if lower index > lower.indexOf(letter) => lower match {\n           \
    \         case letter if lower ( index <- lower.indexOf(lower)) => lower + lower\
    \ + letter\n                    case letter if lower index > lower.indexOf(letter)\
    \ => lower + lower(index - 1) + letter\n                    case letter => lower\
    \ (index)\n                }\n            }\n        }\n        message\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgxaumx5q.scala:23:53 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                        \e[33mcase\e[0m letter \e[33mif\e\
    [0m lower ( index <- lower.indexOf(lower)) => lower(index) + lower(index + \e\
    [31m1\e[0m) + letter\n\e[31m\e[31m   |\e[0m                                  \
    \                   ^^\e[0m\n\e[31m   |\e[0m                                 \
    \           ')' expected, but '<-' found\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpgxaumx5q.scala:24:58 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                        \e[33mcase\e[0m letter \e[33mif\e[0m lower index\
    \ > lower.indexOf(letter) => lower(index - \e[31m1\e[0m) + letter\n\e[31m\e[31m\
    \   |\e[0m                                                          ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgxaumx5q.scala:27:54\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    \e\
    [33mcase\e[0m letter \e[33mif\e[0m lower index > lower.indexOf(letter) => lower\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                                  \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \      expression expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmpgxaumx5q.scala:42:50 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m                \e[33mcase\e[0m letter \e[33mif\e[0m\
    \ lower index > lower.indexOf(letter) => lower \e[33mmatch\e[0m {\n\e[31m\e[31m\
    \   |\e[0m                                                  ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'.'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgxaumx5q.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            message += letter\
    \ \e[33m"
  stdout: ''
  timestamp: 1659979091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // Write your code here\n        val vowels = \"aeiou\"\
    \n        val eng_vowels = \"AEIOU\"\n        var messageWithEncVowels = message\n\
    \        var message = messageWithEncVowels.toUpperCase\n\n        val newMessage\
    \ = for (charA <- message) yield {\n            if (charA.isLower) charA\n   \
    \         else charA.toLowerCase\n        }\n        val newMessageWithEncVowels\
    \ = for (charA <- newMessage) yield {\n            if (vowels.contains(charA))\
    \ charA\n            else eng_vowels.indexOf(charA) + 2\n        }\n        messageWithEncVowels\
    \ = newMessageWithEncVowels.toUpperCase\n\n        messageWithEncVowels\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphyiyh1dj.scala:19:22 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mmessage\e[0m = messageWithEncVowels.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvariable\e[0m \e[35mmessageWithEncVowels\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        def replaceVowel(index : Int) : String = {\n         \
    \   val currentChar = message(i)\n            val nextChar = message(i + 1)\n\
    \            if (currentChar == 'a') 'b'\n            else if (currentChar ==\
    \ 'e') 'f'\n            else if (currentChar == 'i') 'g'\n            else if\
    \ (currentChar == 'o') 'h'\n            else if (currentChar == 'u') 'j'\n   \
    \         else nextChar\n        }\n\n        def replaceLetter(index : Int) :\
    \ String = {\n            val currentChar = message(i)\n            val nextChar\
    \ = message(i + 1)\n            if (currentChar == 'a') 'b'\n            else\
    \ if (currentChar == 'e') 'f'\n            else if (currentChar == 'i') 'g'\n\
    \            else if (currentChar == 'o') 'h'\n            else if (currentChar\
    \ == 'u') 'j'\n            else nextChar\n        }\n\n        val alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n        val vowels = \"aeiou\"\n        val\
    \ newMessage = message.map(replaceLetter).map(replaceVowel)\n        val newAlphabet\
    \ = alphabet.map(replaceLetter).map(replaceVowel)\n        newMessage.zip(newAlphabet).map\
    \ {\n            case (newString, newLetter) => newLetter + newString\n      \
    \  }.toList\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3kxad17c.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mcurrentChar\e[0m = message(i)\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      Not found: i\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp3kxad17c.scala:17:35 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mnextChar\e[0m = message(i\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                   ^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: i\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3kxad17c.scala:18:36 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (currentChar == \e[31m'a'\e\
    [0m) \e[31m'b'\e[0m\n\e[31m\e[31m   |\e[0m                                   \
    \ ^^^\e[0m\n\e[31m   |\e[0m                                    Found:    (\e[31m'b'\e\
    [0m : Char)\n\e[31m   |\e[0m                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3kxad17c.scala:19:41\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33melse\e[0m \e\
    [33mif\e[0m (currentChar == \e[31m'e'\e[0m) \e[31m'f'\e[0m\n\e[31m\e[31m   |\e\
    [0m                                         ^^^\e[0m\n\e[31m   |\e[0m        \
    \                                 Found:    (\e[31m'f'\e[0m : Char)\n\e[31m  \
    \ |\e[0m                                         Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3kxad17c.scala:20:41 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (currentChar\
    \ == \e[31m'i'\e[0m) \e[31m'g'\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \                      ^^^\e[0m\n\e[31m   |\e[0m                    "
  stdout: ''
  timestamp: 1659979092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = scala.collection.mutable.List('a' to 'z')\n\
    \        val vowels = \"aeiouAEIOU\"\n        val letterMap = scala.collection.mutable.Map[String,String]()\n\
    \        message.foreach {\n            letter =>\n            val index = alphabet.indexOf(letter)\n\
    \            letterMap(letter) = alphabet(index+1)\n            alphabet.updated(index+1,letter)\n\
    \        }\n        val newMessage = message.map(letter => letterMap(letter))\n\
    \        val result = newMessage.toString.replaceAllIn(vowels, letterMap(\"a\"\
    ))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpafprns29.scala:15:48 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36malphabet\e[0m = scala.collection.mutable.List(\e\
    [31m'a'\e[0m to \e[31m'z'\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue List is not a member of scala.collection.mutable - did\
    \ you mean mutable.ListMap?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpafprns29.scala:21:22\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            letterMap(letter)\
    \ = alphabet(index+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    (letter : Char)\n\e[31m  \
    \ |\e[0m                      Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpafprns29.scala:24:57 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = message.map(\e\
    [36mletter\e[0m => letterMap(letter))\n\e[31m\e[31m   |\e[0m                 \
    \                                        ^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                       Found:    (letter : Char)\n\e[31m   |\e\
    [0m                                               Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpafprns29.scala:25:41 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = newMessage.toString.replaceAllIn(vowels,\
    \ letterMap(\e[31m\"a\"\e[0m))\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue replaceAllIn is not a member of String - did you mean\
    \ String.replaceAll?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val letters = message.filter(_ > 'A' && _ < 'Z').toList\n\
    \        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val alphabet = letters\
    \ zip vowels\n        message.map(l => alphabet(alphabet.indexOf(l)+1))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp7t7rt_py.scala:15:37 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = message.filter(_\
    \ > \e[31m'A'\e[0m && _ < \e[31m'Z'\e[0m).toList\n\e[31m\e[31m   |\e[0m      \
    \                               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7t7rt_py.scala:18:20 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        message.map(\e[36ml\e[0m => alphabet(alphabet.indexOf(l)+\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Found:    Char => \e[1m\e[31m(\e[0m\e\
    [1m\e[31mChar\e[0m\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0mChar\e[1m\e[31m)\e[0m\n\e\
    [31m   |\e[0m                    Required: Char => Char\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var result = new StringBuilder(message)\n        for(i\
    \ <- 0 until result.length()) {\n            val letter = result.charAt(i)\n \
    \           val vowelIndex = i\n            val vowel = vowels.indexOf(letter)\n\
    \            if(vowel != -1) {\n                val aLetter = vowel + 2\n    \
    \            val aLetter = chars.indexOf(aLetter)\n                val replacement\
    \ = chars(aLetter)\n                result.setCharAt(i, replacement)\n       \
    \     }\n        }\n        return result.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyfo5a3hc.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mvowel\e[0m = vowels.indexOf(letter)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                    Not found: vowels\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyfo5a3hc.scala:22:30 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36maLetter\e[0m = chars.indexOf(aLetter)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              Not found: chars\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyfo5a3hc.scala:23:34 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mreplacement\e[0m\
    \ = chars(aLetter)\n\e[31m\e[31m   |\e[0m                                  ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: chars\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','i','o','u')\n        val res = message\n     \
    \   // We first replace all vowels in the message with the letter that appears\
    \ 2 places ahead of them in the alphabet\n        res = res.replaceAllIn(vowels,alphabet(alphabet.indexOf(vowels(alphabet.indexOf(vowels.indexOf(\"\
    e\"))+1))+2))\n        val letters = message.split(\"\")\n        val res = letters.foldLeft(List[String]())((list,c)\
    \ => {\n            var l = list\n            if(c matches vowels)\n         \
    \   l = c match {\n                case 'e' -> alphabet(alphabet.indexOf(\"e\"\
    )+1)\n                case 'i' -> alphabet(alphabet.indexOf(\"i\")+1)\n      \
    \          case 'o' -> alphabet(alphabet.indexOf(\"o\")+1)\n                case\
    \ 'u' -> alphabet(alphabet.indexOf(\"u\")+1)\n                case _ -> c\n  \
    \          }\n            if(l.length==2)\n            l :+ alphabet(alphabet.indexOf(l.last)+2)\n\
    \            else\n            list\n        })\n        res = res.reverse.foldRight[String](res)(_.concat(_))\n\
    \        res\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2y0qv_3r.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e[0m \e[31m'i'\e[0m -> alphabet(alphabet.indexOf(\e\
    [31m\"i\"\e[0m)+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\
    \e[31m   |\e[0m                '=>' expected, but 'case' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp2y0qv_3r.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                \e[33mcase\e[0m \e[31m'u'\e[0m -> alphabet(alphabet.indexOf(\e\
    [31m\"u\"\e[0m)+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\
    \e[31m   |\e[0m                '=>' expected, but 'case' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp2y0qv_3r.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            '=>' expected, but '}' found\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp2y0qv_3r.scala:19:18 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        res = res.replaceAllIn(vowels,alphabet(alphabet.indexOf(vowels(alphabet.indexOf(vowels.indexOf(\e\
    [31m\"e\"\e[0m))+\e[31m1\e[0m))+\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m        \
    \      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue replaceAllIn is not a member\
    \ of String - did you mean res.replaceAll?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2y0qv_3r.scala:23:25 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            \e[33mif\e[0m(c matches vowels)\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (vowels : List[Char])\n\e[31m   |\e[0m                         Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2y0qv_3r.scala:25:58\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e\
    [0m \e[31m'e'\e[0m -> alphabet(alphabet.indexOf(\e[31m\"e\"\e[0m)+\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                                                   \
    \       Not found: +\n\e[31m   |"
  stdout: ''
  timestamp: 1659979093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toList\n        val consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\".toList\n        val replacements = consonants zip\
    \ vowels\n        message.zipWithIndex.map { case(letter, i) => if (letter !=\
    \ ' ') letter else replacements(i)(letter - 2) }.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9p5h7_h6.scala:21)\n\tat Problem.main(tmp9p5h7_h6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val englishAlphabet = List('a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z');\n        val englishVowels = List('a', 'e', 'i', 'o', 'u')\n\
    \        val initialMessage = message filter { x => x.toUpper == x } map { x =>\
    \ x.toUpper } mkString \"\"\n        val initialMessageLength = initialMessage.length\n\
    \        var i = 0;\n        while (i < initialMessageLength) {\n            val\
    \ initialChar = initialMessage.charAt(i);\n            if (englishAlphabet.contains(initialChar))\
    \ {\n                val position = englishAlphabet.indexOf(initialChar);\n  \
    \              if (position != 0) {\n                    val after = initialMessage.charAt(position\
    \ + 1);\n                    val afterChar = after.toUpper\n                 \
    \   if (englishVowels.contains(afterChar)) {\n                        val replace\
    \ = englishAlphabet(position);\n                        initialMessage = initialMessage\
    \ replace initialChar replace\n                    } else {\n                \
    \        initialMessage = initialMessage replace initialChar initialChar\n   \
    \                 }\n                }\n            }\n            i += 1\n  \
    \      }\n        initialMessage\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmdvtlhf8.scala:29:83 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                        initialMessage = initialMessage\
    \ replace initialChar replace\n\e[31m\e[31m   |\e[0m                         \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmdvtlhf8.scala:31:87\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                     \
    \   initialMessage = initialMessage replace initialChar initialChar\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \         expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmpmdvtlhf8.scala:29:56 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                        initialMessage = initialMessage\
    \ replace initialChar replace\n\e[31m\e[31m   |\e[0m                         \
    \                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mreplace\e[0m in \e[33mclass\e[0m \e\
    [35mString\e[0m with types\n\e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence):\
    \ String\n\e[31m   |\e[0m (x$0: Char, x$1: Char): String\n\e[31m   |\e[0mmatch\
    \ arguments ((initialChar : Char))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpmdvtlhf8.scala:31:56\
    \ -----------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                   \
    \     initialMessage = initialMessage replace initialChar initialChar\n\e[31m\e\
    [31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mreplace\e[0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e\
    [0m (x$0: CharSequence, x$1: CharSequence): String\n\e[31m   |\e[0m (x$0: C"
  stdout: ''
  timestamp: 1659979090
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var result: String = \"\";\n        for(i <- 0 until message.length){\n\
    \            if((message.charAt(i)).equals(\"a\")) result += message.charAt(i).toUpper;\n\
    \            if((message.charAt(i)).equals(\"e\")) result += message.charAt(i).toUpper;\n\
    \            if((message.charAt(i)).equals(\"i\")) result += message.charAt(i).toUpper;\n\
    \            if((message.charAt(i)).equals(\"o\")) result += message.charAt(i).toUpper;\n\
    \            if((message.charAt(i)).equals(\"u\")) result += message.charAt(i).toUpper;\n\
    \            if((message.charAt(i)).equals(\"A\")) result += message.charAt(i).toUpper;\n\
    \            if((message.charAt(i)).equals(\"E\")) result += message.charAt(i).toUpper;\n\
    \            if((message.charAt(i)).equals(\"I\")) result += message.charAt(i).toUpper;\n\
    \            if((message.charAt(i)).equals(\"O\")) result += message.charAt(i).toUpper;\n\
    \            if((message.charAt(i)).equals(\"U\")) result += message.charAt(i).toUpper;\n\
    \            result += message.charAt(i);\n            result += message.charAt(i).toUpper;\n\
    \            result += message.charAt(i).toUpper;\n            result += message.charAt(i).toUpper;\n\
    \            result += message.charAt(i).toUpper;\n            result += message.charAt(i).toUpper;\n\
    \            result += message.charAt(i).toUpper;\n            result += message.charAt(i).toUpper;\n\
    \            result += message.charAt(i).toUpper;\n        }\n        return result;\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbjfdoigo.scala:40)\n\tat Problem.main(tmpbjfdoigo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val result: List[String] = message map {letter =>\n  \
    \          if (letter == 't') letter.toUpperCase \n            else letter match{\n\
    \                case 'a' => letter.toUpperCase + letter.toLowerCase \n      \
    \          case 'e' => letter.toUpperCase + letter.toLowerCase \n            \
    \    case 'i' => letter.toUpperCase + letter.toLowerCase \n                case\
    \ 'o' => letter.toUpperCase + letter.toLowerCase \n                case 'u' =>\
    \ letter.toUpperCase + letter.toLowerCase \n                case _ => letter\n\
    \            }\n        }\n        result.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbt88158c.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (letter == \e[31m't'\e[0m)\
    \ letter.toUpperCase \n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbt88158c.scala:18:35\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e\
    [0m \e[31m'a'\e[0m => letter.toUpperCase + letter.toLowerCase \n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpbt88158c.scala:19:35 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m \e[31m'e'\e[0m => letter.toUpperCase\
    \ + letter.toLowerCase \n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value toUpperCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbt88158c.scala:20:35\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e\
    [0m \e[31m'i'\e[0m => letter.toUpperCase + letter.toLowerCase \n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpbt88158c.scala:21:35 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m \e[31m'o'\e[0m => letter.toUpperCase\
    \ + letter.toLowerCase \n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value toUpperCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbt88158c.scala:22:35\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e\
    [0m \e[31m'u'\e[0m => letter.toUpperCase + letter.toLowerCase \n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        "
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val vowelMap: mutable.Map[Char, Char] = mutable.Map(a -> 'b', e -> 'f',\
    \ i -> 'g', o -> 'h', u -> 'j')\n        message\n            .map(l => vowelMap.get(l))\n\
    \            .map(v => v.head + (v.tail * 2))\n            .map(cs => cs.mkString)\n\
    \            .map(cs => cs.map(c => vowels(c)).mkString())\n            .mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp80rwjon9.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowelMap\e[0m: mutable.Map[\e\
    [35mChar\e[0m, \e[35mChar\e[0m] = mutable.Map(a -> \e[31m'b'\e[0m, e -> \e[31m'f'\e\
    [0m, i -> \e[31m'g'\e[0m, o -> \e[31m'h'\e[0m, u -> \e[31m'j'\e[0m)\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp80rwjon9.scala:16:48 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelMap\e[0m: mutable.Map[\e[35mChar\e[0m, \e\
    [35mChar\e[0m] = mutable.Map(a -> \e[31m'b'\e[0m, e -> \e[31m'f'\e[0m, i -> \e\
    [31m'g'\e[0m, o -> \e[31m'h'\e[0m, u -> \e[31m'j'\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n      // The solution to this is quite simple. We iterate over\
    \ the string and \n      // for each letter we keep track of the position it appears\
    \ \n      // in the english alphabet (in a Map). Each time we see a letter, we\
    \ \n      // can swap the letter to the position 2 places ahead of that letter\
    \ in \n      // the alphabet (we know that this is 2 letters because of the fact\
    \ that\n      // the letter we are replacing is the next letter of the alphabet).\
    \ \n      // After we have iterated over the string and have swapped the letters,\
    \ we \n      // simply rebuild the string from the Map and return the result \n\
    \      (message +: message.dropWhile(_ == '.').map { c => \n        (english.get(c.toLowerCase())\
    \ - (english.get(c.toLowerCase()) + 2).toString) \n        + \" \" \n        +\
    \ (english.get(c.toLowerCase()) + 2).toString\n      }).mkString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprw1l71__.scala:24:9 -------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        (english.get(c.toLowerCase()) - (english.get(c.toLowerCase())\
    \ + \e[31m2\e[0m).toString) \n\e[31m\e[31m   |\e[0m         ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m         Not found: english\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n      val newMessage = message.foldLeft(\"\"){ (acc, letter) =>\
    \ \n        val indexedLetter = letter.toString.toUpperCase.indexOf\n        val\
    \ firstLetter = indexedLetter % 26\n        val secondLetter = indexedLetter /\
    \ 26\n        val firstVowelIndex = firstLetter % 5\n        val secondVowelIndex\
    \ = firstLetter / 5\n        acc + (if (firstVowelIndex == 0 && secondVowelIndex\
    \ > 1) secondLetter else \n        ((if (firstVowelIndex > 0) firstLetter else\
    \ \n        ((if (secondVowelIndex > 0) secondLetter else firstLetter) + 1))))\n\
    \      }\n      newMessage\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E051] Reference Error: /tmp/tmprrqzfzi9.scala:16:56 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mindexedLetter\e[0m = letter.toString.toUpperCase.indexOf\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mindexOf\e[0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m\
    \   |\e[0m (x$0: String, x$1: Int): Int\n\e[31m   |\e[0m (x$0: String): Int\n\e\
    [31m   |\e[0m (x$0: Int, x$1: Int): Int\n\e[31m   |\e[0m (x$0: Int): Int\n\e[31m\
    \   |\e[0mall match expected type <?>\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = \"a\",\"e\",\"i\",\"o\",\"u\",\"y\"\n        val messageArr\
    \ = message.toList\n        val outputString = \"\"\n\n        for(i<-0 until\
    \ messageArr.size){\n            val curr = messageArr(i)\n            val newCase\
    \ = alphabet(alphabet.indexOf(curr))\n            outputString += newCase\n  \
    \          outputString += alphabet(alphabet.indexOf(messageArr(i + 1)) + 2)\n\
    \        }\n        outputString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0uchc02y.scala:16:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = \e[31m\"a\"\
    \e[0m,\e[31m\"e\"\e[0m,\e[31m\"i\"\e[0m,\e[31m\"o\"\e[0m,\e[31m\"u\"\e[0m,\e[31m\"\
    y\"\e[0m\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m\
    \                        end of statement expected but ',' found\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp0uchc02y.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            outputString += newCase\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value += is not a member\
    \ of String - did you mean outputString.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0uchc02y.scala:24:25 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m            outputString += alphabet(alphabet.indexOf(messageArr(i + \e[31m1\e\
    [0m)) + \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m      value += is not a member of String - did you mean outputString.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979094
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val vowelIndex = List(1,2,3,4,5,6,7,8,9,0).zipWithIndex.filter{\
    \ case (s,i) => vowels.contains(s) }.map(_._2)\n        val newMessage = message\n\
    \            .toCharArray\n            .map { c =>\n                c match {\n\
    \                    case vowels(1) =>\n                        vowels(0)\n  \
    \                  case vowels(2) =>\n                        vowels(1)\n    \
    \                case vowels(3) =>\n                        vowels(2)\n      \
    \              case vowels(4) =>\n                        vowels(3)\n        \
    \            case vowels(5) =>\n                        vowels(4)\n          \
    \          case vowels(6) =>\n                        vowels(5)\n            \
    \        case vowels(7) =>\n                        vowels(6)\n              \
    \      case vowels(8) =>\n                        vowels(7)\n                \
    \    case vowels(9) =>\n                        vowels(8)\n                  \
    \  case vowels(0) =>\n                        vowels(9).head\n               \
    \ }\n            }\n            .toString\n        newMessage\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk6e7igkc.scala:40:34 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                        vowels(\e[31m9\e[0m).head\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        value head is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphaSet = scala.collection.mutable.Set(\"A\",\"B\"\
    ,\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\"\
    ,\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\")\n        val\
    \ vowelSet = scala.collection.mutable.Set(\"a\",\"e\",\"i\",\"o\",\"u\")\n   \
    \     val messageArray = message.toCharArray.map(_.toUpperCase)\n        val swapped\
    \ = messageArray.zip(messageArray.reverse)\n        val encoded = swapped.map(c\
    \ => {\n            if(alphaSet.contains(c))\n                c\n            else\
    \ if(vowelSet.contains(c))\n                alphaSet(messageArray.indexOf(c) +\
    \ 1)\n            else\n                c\n        })\n        encoded.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfkg_sdqd.scala:17:53 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageArray\e[0m = message.toCharArray.map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmpfkg_sdqd.scala:17:65 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageArray\e[0m = message.toCharArray.map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^\e[0m\n\e[31m   |\e[0m                                          No\
    \ ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                 \
    \                         where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659979095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = ('A' -> 'A', 'T' -> 'T', 'G' -> 'G', 'C'\
    \ -> 'C' ,'M' ->'M', 'R' -> 'R')\n        var res = \"\"\n        for (i <- message.indices)\
    \ {\n            res = res + alphabet(message.charAt(i)) + alphabet(message.charAt(i-1))\
    \ \n        }\n        return res\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 84 is out of bounds (min 0, max 5)\n\
    \tat scala.Product6.productElement(Product6.scala:47)\n\tat scala.Product6.productElement$(Product6.scala:40)\n\
    \tat scala.Tuple6.productElement(Tuple6.scala:28)\n\tat scala.runtime.Tuples$.apply(Tuples.scala:515)\n\
    \tat Problem$.encode$$anonfun$1(tmpqryr2b10.scala:18)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.encode(tmpqryr2b10.scala:19)\n\
    \tat Problem$.main(tmpqryr2b10.scala:23)\n\tat Problem.main(tmpqryr2b10.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels =  List(\"a\",\"e\",\"i\",\"o\",\"u\")\n  \
    \      val caps = List(\"A\",\"E\",\"I\",\"O\",\"U\")\n        val swaps = vowels\
    \ zip caps\n        val swapped = message flatMap { charToNum(c) => swaps.find(_._1\
    \ == charToNum(c))._2 }\n        swapped map numToChar\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbn_gv9v4.scala:18:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mswapped\e[0m = message flatMap\
    \ { charToNum(c) => swaps.find(_._1 == charToNum(c))._2 }\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                        not a legal formal parameter\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbn_gv9v4.scala:18:75 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mswapped\e[0m = message flatMap\
    \ { charToNum(c) => swaps.find(_._1 == charToNum(c))._2 }\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                            \
    \        Not found: charToNum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbn_gv9v4.scala:18:85 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mswapped\e[0m = message flatMap { charToNum(c)\
    \ => swaps.find(_._1 == charToNum(c))._2 }\n\e[31m\e[31m   |\e[0m            \
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \   Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val res = message.map(letter => {\n            val index\
    \ = letter.indexOf\n            (\n                if (index > -1 && index ==\
    \ 0 || index == 2 || index == 4) letter.charAt(index) \n                else if\
    \ (letter.indexOf(\"aeiou\") > -1) letter.charAt(letter.length)\n            \
    \    else letter\n            )\n        })\n        \"\"+res.mkString(\"\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk3_8r5ia.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mindex\e[0m = letter.indexOf\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        value indexOf is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpk3_8r5ia.scala:18:81 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m (index > -\e[31m1\e[0m\
    \ && index == \e[31m0\e[0m || index == \e[31m2\e[0m || index == \e[31m4\e[0m)\
    \ letter.charAt(index) \n\e[31m\e[31m   |\e[0m                               \
    \                                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                    value charAt is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpk3_8r5ia.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (letter.indexOf(\e\
    [31m\"aeiou\"\e[0m) > -\e[31m1\e[0m) letter.charAt(letter.length)\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                   value indexOf is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpk3_8r5ia.scala:19:62 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (letter.indexOf(\e\
    [31m\"aeiou\"\e[0m) > -\e[31m1\e[0m) letter.charAt(letter.length)\n\e[31m\e[31m\
    \   |\e[0m                                                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value charAt is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk3_8r5ia.scala:19:76\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33melse\e\
    [0m \e[33mif\e[0m (letter.indexOf(\e[31m\"aeiou\"\e[0m) > -\e[31m1\e[0m) letter.charAt(letter.length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \        value length is not a member of Char\n5 errors found\n"
  stdout: ''
  timestamp: 1659979100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // Write your code here\n        val vowelSet = scala.collection.mutable.HashSet[Char]()\n\
    \        val vowels = \"aeiouAEIOU\"\n        for(x <- message) vowelSet.add(x)\
    \ \n        for(x <- vowels) { \n            val vowels2 =  vowels.indexOf(x)\
    \ + 2\n            val vowels2 = vowels2 % vowels.length\n            val charToBeReplaced\
    \ = message.charAt(vowels2)\n            val result = charToBeReplaced \n    \
    \        for(i <- 1 to vowels2) result += message.charAt(i)\n            val resultSet\
    \ = scala.collection.mutable.Set[Char]()\n            resultSet.add(result)\n\
    \            vowelSet.remove(x)\n            vowelSet.add(result)\n        }\n\
    \        resultSet.mkString.toUpperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0m1bmr_g.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mvowels2\e[0m = vowels2\
    \ % vowels.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowels2 is already defined as \e[33mvalue\e[0m \e[35mvowels2\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp0m1bmr_g.scala:24:42 ------------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m            \e[33mfor\e[0m(i <- \e[31m1\e[0m to vowels2) result\
    \ += message.charAt(i)\n\e[31m\e[31m   |\e[0m                                \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value += is not a member of Char\
    \ - did you mean result.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0m1bmr_g.scala:30:8\
    \ -------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        resultSet.mkString.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ resultSet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val charArray = message.split(\"\")\n        var newMessage\
    \ : String = \"\"\n        val vowelSet = scala.collection.mutable.Set(\"A\",\
    \ \"E\", \"I\", \"O\", \"U\")\n        val consonantSet = scala.collection.mutable.Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n\n      \
    \  for (c <- charArray) {\n            val charArrayIndexOfVowel = vowelSet.indexOf(c)\n\
    \            val charArrayIndexOfConsonant = consonantSet.indexOf(c)\n       \
    \     if (charArrayIndexOfVowel > -1 && charArrayIndexOfConsonant > -1) {\n  \
    \              val swappedCharArrayIndexOfVowel = charArrayIndexOfVowel + 2\n\
    \                val swappedCharArrayIndexOfConsonant = charArrayIndexOfConsonant\
    \ + 2\n                if (swappedCharArrayIndexOfVowel > vowelSet.size || swappedCharArrayIndexOfConsonant\
    \ > consonantSet.size) {\n                    throw new IllegalArgumentException\n\
    \                }\n                if (charArrayIndexOfVowel < charArrayIndexOfConsonant)\
    \ {\n                    newMessage += vowelSet(swappedCharArrayIndexOfVowel)\n\
    \                } else {\n                    newMessage += consonantSet(swappedCharArrayIndexOfConsonant)\n\
    \                }\n            }\n        }\n        newMessage\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6pyjuoc7.scala:21:49 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mcharArrayIndexOfVowel\e\
    [0m = vowelSet.indexOf(c)\n\e[31m\e[31m   |\e[0m                             \
    \           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value indexOf is not a member\
    \ of scala.collection.mutable.Set[String]\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp6pyjuoc7.scala:22:57 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            \e[33mval\e[0m \e[36mcharArrayIndexOfConsonant\e[0m = consonantSet.indexOf(c)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m   value indexOf is not a member of scala.collection.mutable.Set[String]\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val l = message.length\n        var i = 0\n        var\
    \ k = 0\n        var result = \"\"\n        for (x <- message) {\n           \
    \ if (x < 'a' || x > 'z') {\n                result += x.toString\n          \
    \  } else {\n                if (i < (l - 1)) {\n                    if (message(chars(i))\
    \ >= 'a' && message(chars(i)) <= 'z') {\n                        result += message(chars(i))\
    \ + message(chars(i + 1))\n                        i += 2\n                  \
    \  } else {\n                        result += message(chars(i))\n           \
    \             i += 1\n                    }\n                } else {\n      \
    \              result += message(chars(i))\n                    i += 1\n     \
    \           }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5u_g73je.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    \e[33mif\e[0m (message(chars(i))\
    \ >= \e[31m'a'\e[0m && message(chars(i)) <= \e[31m'z'\e[0m) {\n\e[31m\e[31m  \
    \ |\e[0m                                ^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                      Not found: chars\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5u_g73je.scala:24:60 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                    \e[33mif\e[0m (message(chars(i)) >= \e\
    [31m'a'\e[0m && message(chars(i)) <= \e[31m'z'\e[0m) {\n\e[31m\e[31m   |\e[0m\
    \                                                            ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                        Not found: chars\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5u_g73je.scala:25:31\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                        result\
    \ += message(chars(i)) + message(chars(i + \e[31m1\e[0m))\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp5u_g73je.scala:25:42 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m                        result += message(chars(i)) + message(chars(i\
    \ + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                    \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                                          Not\
    \ found: chars\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5u_g73je.scala:25:62\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                        result\
    \ += message(chars(i)) + message(chars(i + \e[31m1\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                        Not found:\
    \ chars"
  stdout: ''
  timestamp: 1659979103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val messageLowerCase = message.toLowerCase()\n       \
    \ val encodedString = new mutable.StringBuilder\n        var index = 0\n     \
    \   while (index < messageLowerCase.length){\n            var isVowel = false\n\
    \            var isUpper = false\n            var currentLetter = messageLowerCase(index)\n\
    \            var currentVowel = currentLetter match {\n                case c:\
    \ \"a\" | \"e\" | \"i\" | \"o\" | \"u\" => c\n                case _ => \"a\"\n\
    \            }\n            index += 1\n            while (index < messageLowerCase.length){\n\
    \                val nextLetter = messageLowerCase(index)\n                nextLetter\
    \ match {\n                    case \"a\" => \"b\"\n                    case \"\
    b\" => \"a\"\n                    case \"c\" => \"d\"\n                    case\
    \ \"d\" => \"c\"\n                    case \"e\" => \"f\"\n                  \
    \  case \"f\" => \"e\"\n                    case \"g\" => \"h\"\n            \
    \        case \"h\" => \"g\"\n                    case \"i\" => \"j\"\n      \
    \              case \"j\" => \"i\"\n                    case \"k\" => \"l\"\n\
    \                    case \"l\" => \"k\"\n                    case \"m\" => \"\
    n\"\n                    case \"n\" => \"m\"\n                    case \"o\" =>\
    \ \"p\"\n                    case \"p\" => \"o\"\n                    case \"\
    q\" => \"r\"\n                    case \"r\" => \"q\"\n                    case\
    \ \"s\" => \"t\"\n                    case \"t\" => \"s\"\n                  \
    \  case \"u\" => \"v\"\n                    case \"v\" => \"u\"\n            \
    \        case \"w\" => \"x\"\n                    case \"x\" => \"w\"\n      \
    \              case \"y\" => \"z\"\n                    case \"z\" => \"y\"\n\
    \                    case \"A\" => \"B\"\n                    case \"B\" => \"\
    A\"\n                    case \"C\" => \"D\"\n                    case \"D\" =>\
    \ \"C\"\n                    case \"E\" => \"F\"\n                    case \"\
    F\" => \"E\"\n                    case \"G\" => \"H\"\n                    case\
    \ \"H\" => \"G\"\n                    case \"I\" => \"J\"\n                  \
    \  case \"J\" => \"I\"\n                    case \"K\" => \"L\"\n            \
    \        case \"L\" => \"K\"\n                    case \"M\" => \"N\"\n      \
    \              case \"N\" => \"M\"\n                    case \"O\" => \"P\"\n\
    \                    case \"P\" => \"O\"\n                    case \"Q\" => \"\
    R\"\n                    case \"R\" => \"Q\"\n                    case \"S\" =>\
    \ \"T\"\n                    case \"T\" => \"S\"\n                    case \"\
    U\" => \"V\"\n                    case \"V\" => \"U\"\n                    case\
    \ \"W\" => \"X\"\n                    case \"X\" => \"W\"\n                  \
    \  case \"Y\" => \"Z\"\n                    \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpos9v8l7e.scala:92:0 ----------------------------\e\
    [0m\e[0m\n\e[31m92 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpos9v8l7e.scala:16:32\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mencodedString\e[0m = \e[33mnew\e[0m mutable.StringBuilder\n\e[31m\e[31m  \
    \ |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E024] Syntax Error: /tmp/tmpos9v8l7e.scala:23:21 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m c: \e[31m\"a\"\e[0m |\
    \ \e[31m\"e\"\e[0m | \e[31m\"i\"\e[0m | \e[31m\"o\"\e[0m | \e[31m\"u\"\e[0m =>\
    \ c\n\e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                   Illegal variable c in pattern alternative\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpos9v8l7e.scala:23:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m c: \e[31m\"a\"\e[0m |\
    \ \e[31m\"e\"\e[0m | \e[31m\"i\"\e[0m | \e[31m\"o\"\e[0m | \e[31m\"u\"\e[0m =>\
    \ c\n\e[31m\e[31m   |\e[0m                              ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpos9v8l7e.scala:23:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m c: \e[31m\"a\"\e[0m |\
    \ \e[31m\"e\"\e[0m | \e[31m\"i\"\e[0m | \e[31m\"o\"\e[0m | \e[31m\"u\"\e[0m =>\
    \ c\n\e[31m\e[31m   |\e[0m                                    ^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpos9v8l7e.scala:23:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m c: \e[31m\"a\"\e[0m |\
    \ \e[31m\"e\"\e[0m | \e[31m\"i\"\e[0m | \e[31m\"o\"\e[0m | \e[31m\"u\"\e[0m =>\
    \ c\n\e[31m\e[31m   |\e[0m                                          ^^^\e[0m"
  stdout: ''
  timestamp: 1659979106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val result = \"\"\n        for(i <- 0 to message.length-1){\n\
    \            val char1 = message.charAt(i)\n            if(char1 != 'a' && char1\
    \ != 'e' && char1 != 'i' && char1 != 'o' && char1 != 'u')\n                result\
    \ += char1\n        }\n        val arr = result.split(\"\")\n        for(i <-\
    \ 0 to arr.length-1){\n            val arr = result.split(\"\")\n            val\
    \ index = arr.indexWhere(_ == arr(i))\n            if(arr.length <= 2)\n     \
    \           result += arr(i)\n            else\n                result += arr(i).swapCase.charAt(index)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplu3km0cm.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                result += char1\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of String - did you mean result.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmplu3km0cm.scala:26:23 ------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                result += arr(i)\n\e[31m\e[31m   |\e[0m              \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of String\
    \ - did you mean result.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplu3km0cm.scala:28:23\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                result +=\
    \ arr(i).swapCase.charAt(index)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did you mean\
    \ result.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplu3km0cm.scala:28:33\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                result +=\
    \ arr(i).swapCase.charAt(index)\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value swapCase\
    \ is not a member of String\n4 errors found\n"
  stdout: ''
  timestamp: 1659979103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val letters = message.split('')\n        val vowels =\
    \ \"aeiou\"\n        val map = Map('a'->\"A\", 'e'->\"E\", 'i'->\"I\", 'o'->\"\
    O\", 'u'->\"U\")\n        val map2 = Map('e'->\"E\", 'i'->\"I\", 'o'->\"O\", 'u'->\"\
    U\", 'a'->\"A\", 'i'->\"I\", 'o'->\"O\", 'u'->\"U\", 'A'->\"A\", 'i'->\"I\", 'o'->\"\
    O\", 'u'->\"U\")\n        var res = new Array[Char](letters.length)\n        for\
    \ (i <- 0 to letters.length-1){\n            if(letters(i) == vowels(0)){\n  \
    \              for(j <- 0 to i-1){\n                    if(vowels(j) == letters(j)){\n\
    \                        letters(j) = map2(vowels(j))\n                    }\n\
    \                }\n                letters(i) = map(vowels(i))\n            }\n\
    \            for(j <- 0 to i-1){\n                letters(j) = map2(letters(j))\n\
    \            }\n            res = res :+ letters(i)\n        }\n        val ans\
    \ = new String(res)\n        return res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4hlwjo2g.scala:15:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = message.split('')\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    empty character literal\n\e[31m\e[31m--\
    \ [E018] Syntax Error: /tmp/tmp4hlwjo2g.scala:16:19 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = \e[31m\"aeiou\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m       \
    \            expression expected but \e[31m=\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4hlwjo2g.scala:16:8 -------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = \e[31m\"aeiou\"\
    \e[0m\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ 'val\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hlwjo2g.scala:21:29\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(letters(i)\
    \ == vowels(\e[31m0\e[0m)){\n\e[31m\e[31m   |\e[0m                           \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found: vowels\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hlwjo2g.scala:23:23\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    \e[33mif\e\
    [0m(vowels(j) == letters(j)){\n\e[31m\e[31m   |\e[0m                       ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: vowels\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hlwjo2g.scala:24:42 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                        letters(j) = map2(vowels(j))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Not found: vow"
  stdout: ''
  timestamp: 1659979102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val newmessage = message.toLowerCase\n        var newmessage\
    \ = message.toLowerCase\n        var index = 0\n        while(index != newmessage.length){\n\
    \            if(newmessage(index) == \"a\"){\n                newmessage = newmessage.replaceAll(\"\
    a\",\"A\")\n            }\n            if(newmessage(index) == \"e\"){\n     \
    \           newmessage = newmessage.replaceAll(\"e\",\"E\")\n            }\n \
    \           if(newmessage(index) == \"i\"){\n                newmessage = newmessage.replaceAll(\"\
    i\",\"I\")\n            }\n            if(newmessage(index) == \"o\"){\n     \
    \           newmessage = newmessage.replaceAll(\"o\",\"O\")\n            }\n \
    \           if(newmessage(index) == \"u\"){\n                newmessage = newmessage.replaceAll(\"\
    u\",\"U\")\n            }\n            if(newmessage(index) == \"A\"){\n     \
    \           newmessage = newmessage.replaceAll(\"A\",\"a\")\n            }\n \
    \           if(newmessage(index) == \"E\"){\n                newmessage = newmessage.replaceAll(\"\
    E\",\"e\")\n            }\n            if(newmessage(index) == \"I\"){\n     \
    \           newmessage = newmessage.replaceAll(\"I\",\"i\")\n            }\n \
    \           if(newmessage(index) == \"O\"){\n                newmessage = newmessage.replaceAll(\"\
    O\",\"o\")\n            }\n            if(newmessage(index) == \"U\"){\n     \
    \           newmessage = newmessage.replaceAll(\"U\",\"u\")\n            }\n \
    \           index += 1\n        }\n        newmessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoxvkyv64.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mnewmessage\e[0m = message.toLowerCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnewmessage is already defined as \e[33mvalue\e[0m \e[35mnewmessage\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpoxvkyv64.scala:19:15\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \     \e[33mif\e[0m(newmessage(index) == \e[31m\"a\"\e[0m){\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpoxvkyv64.scala:20:27 -----------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                newmessage = newmessage.replaceAll(\e[31m\"\
    a\"\e[0m,\e[31m\"A\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val newmessage\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpoxvkyv64.scala:22:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m(newmessage(index) == \e[31m\"\
    e\"\e[0m){\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpoxvkyv64.scala:23:27 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                newmessage = newmessage.replaceAll(\e\
    [31m\"e\"\e[0m,\e[31m\"E\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val newmessage\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpoxvkyv64.scala:25:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[3"
  stdout: ''
  timestamp: 1659979104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val englishLetters = Array('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')\n\
    \        val vowels = Array('a','e','i','o','u')\n        val encoded = message\n\
    \            .foldLeft(\"\")( (acc,letter) => \n                acc + (if (englishLetters.contains(letter))\
    \ letter else \n                        vowels.contains(acc) match { case true\
    \ => letter + englishLetters.indexOf(vowels.indexOf(acc)) else letter }) )\n \
    \       encoded\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnvgs8_pf.scala:20:119 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                        vowels.contains(acc) \e[33mmatch\e\
    [0m { \e[33mcase\e[0m \e[31mtrue\e[0m => letter + englishLetters.indexOf(vowels.indexOf(acc))\
    \ \e[33melse\e[0m letter }) )\n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \                  ^^^^\e[0m\n\e[31m   |\e[0m                              end\
    \ of statement expected but 'else' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnvgs8_pf.scala:20:40 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                        vowels.contains(acc) \e[33mmatch\e[0m { \e[33mcase\e\
    [0m \e[31mtrue\e[0m => letter + englishLetters.indexOf(vowels.indexOf(acc)) \e\
    [33melse\e[0m letter }) )\n\e[31m\e[31m   |\e[0m                             \
    \           ^^^\e[0m\n\e[31m   |\e[0m                                        Found:\
    \    (acc : String)\n\e[31m   |\e[0m                                        Required:\
    \ Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnvgs8_pf.scala:20:113\
    \ -------------------\e[0m\e[0m\n\e[31m20 |\e[0m                        vowels.contains(acc)\
    \ \e[33mmatch\e[0m { \e[33mcase\e[0m \e[31mtrue\e[0m => letter + englishLetters.indexOf(vowels.indexOf(acc))\
    \ \e[33melse\e[0m letter }) )\n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \            ^^^\e[0m\n\e[31m   |\e[0m                                       \
    \         Found:    (acc : String)\n\e[31m   |\e[0m                          \
    \                      Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n      var output = \"\"\n      for (i <- 0 until message.length)\n\
    \      {\n          output += message.charAt(i).swapCase.charAt(0).toUpperCase\n\
    \          output += message.charAt(i).swapCase.charAt(1).toUpperCase\n      }\n\
    \      output\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppjaoexnb.scala:18:17 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m          output += message.charAt(i).swapCase.charAt(\e\
    [31m0\e[0m).toUpperCase\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m          value += is not a member of String - did you mean String.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppjaoexnb.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m          output += message.charAt(i).swapCase.charAt(\e\
    [31m0\e[0m).toUpperCase\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value swapCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppjaoexnb.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m          output += message.charAt(i).swapCase.charAt(\e\
    [31m1\e[0m).toUpperCase\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m          value += is not a member of String - did you mean String.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppjaoexnb.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m          output += message.charAt(i).swapCase.charAt(\e\
    [31m1\e[0m).toUpperCase\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value swapCase is not a member of Char\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659979104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val letters = message.map(_.toUpperCase)\n        val letterCounts =\
    \ letters.map(letter => letter -> letter.count(letter => vowels.contains(letter)))\n\
    \        var res = \"\"\n        for(letter <- letters) {\n            val index\
    \ = letterCounts.findIndex(letterCounts => (letterCounts._1 == letter))\n    \
    \        if(index != -1) res += letterCounts(letter)\n            else res +=\
    \ letter\n        }\n        return res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj6z7yf45.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = message.map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        var finalString = \"\"\n        for ( word <- message){\n           \
    \ finalString += word.toUpperCase.takeWhile(c => alphabet.contains(c)).mkString(\"\
    \") +\n            word.takeWhile(c => alphabet.contains(c)).mkString(\"\") +\
    \ \n            word.dropWhile(c => alphabet.contains(c)).mkString(\"\") + \n\
    \            word.drop(word.lastIndexOf(word.toUpperCase.takeWhile(c => alphabet.contains(c)))).mkString(\"\
    \") + \n            word.drop(word.lastIndexOf(word.toUpperCase.takeWhile(c =>\
    \ alphabet.contains(c))))\n        }\n        finalString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzb_er42f.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            finalString += word.toUpperCase.takeWhile(\e\
    [36mc\e[0m => alphabet.contains(c)).mkString(\e[31m\"\"\e[0m) +\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpzb_er42f.scala:18:32 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m            finalString += word.toUpperCase.takeWhile(\e[36mc\e\
    [0m => alphabet.contains(c)).mkString(\e[31m\"\"\e[0m) +\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                value toUpperCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val messageList = message.toLowerCase.split(\" \").filter(_.length()\
    \ > 0)\n        var result = \"\"\n        var index = 0\n        for(i <- 0 until\
    \ messageList.length){\n            if(messageList(i).length() > 1){\n       \
    \         result += messageList(i).toChar.swapCase().toString.replaceAll(\"[^A-Z]\"\
    , messageList(i).toChar)\n                index++\n            }else{\n      \
    \          result += messageList(i).toChar\n                index++\n        \
    \    }\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe6sg0o5l.scala:21:23 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                index++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpe6sg0o5l.scala:24:23 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                index++\n\e[31m\e[31m   |\e[0m                       ^\e\
    [0m\n\e[31m   |\e[0m                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe6sg0o5l.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                result +=\
    \ messageList(i).toChar.swapCase().toString.replaceAll(\e[31m\"[^A-Z]\"\e[0m,\
    \ messageList(i).toChar)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value += is not a member of String - did you mean String.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe6sg0o5l.scala:20:41 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result += messageList(i).toChar.swapCase().toString.replaceAll(\e\
    [31m\"[^A-Z]\"\e[0m, messageList(i).toChar)\n\e[31m\e[31m   |\e[0m           \
    \               ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \        value toChar is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpe6sg0o5l.scala:23:23 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                result += messageList(i).toChar\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of String - did you mean String.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpe6sg0o5l.scala:23:41 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                result += messageList(i).toChar\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                   value toChar is not a member of Strin"
  stdout: ''
  timestamp: 1659979106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n      // Add your code here\n      return message;\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn3jp7ejr.scala:19)\n\tat Problem.main(tmpn3jp7ejr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var result = \"\"\n        for(char <- message) {\n  \
    \          if(char.matches(\"[a-zA-Z]\"))\n                result += char.toUpperCase().replace('a','A').replace('e','E')\n\
    \            else\n                result += char\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxclqjetw.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(char.matches(\e[31m\"[a-zA-Z]\"\
    \e[0m))\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               value matches is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpxclqjetw.scala:18:23 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m                result += char.toUpperCase().replace(\e[31m'a'\e\
    [0m,\e[31m'A'\e[0m).replace(\e[31m'e'\e[0m,\e[31m'E'\e[0m)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpxclqjetw.scala:18:31 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m                result += char.toUpperCase().replace(\e[31m'a'\e[0m,\e\
    [31m'A'\e[0m).replace(\e[31m'e'\e[0m,\e[31m'E'\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \            value toUpperCase is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659979106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var i = 0\n        var messageToEncode : String = \"\"\
    \n        for (c <- message) {\n            if(i>0) messageToEncode += (c.toUpperCase)\n\
    \            else {\n                val vowels = \"AEIOUaeiou\"\n           \
    \     var counter = 0\n                for (v <- vowels) {\n                 \
    \   if(v == c) {\n                        counter += 2\n                    }\n\
    \                }\n                if(counter>0) messageToEncode += (v.charAt(counter))\n\
    \            }\n            i += 1\n        }\n        \n        // Now apply\
    \ the algorithm to the message\n        val alphabet : Array[Char] = Array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        var messageDecoded : String = \"\"\n        var j = 0\n        for (c\
    \ <- messageToEncode) {\n            val a = alphabet(j)\n            var b =\
    \ 0\n            for (v <- vowels) {\n                if(v == c) {\n         \
    \           b += 1\n                }\n            }\n            if(j==0) {\n\
    \                messageDecoded += a\n                j = 1\n            } else\
    \ if(j==1) {\n                if(b==0) {\n                    messageDecoded +=\
    \ a\n                    j = 2\n                } else {\n                   \
    \ messageDecoded += a.charAt(b-1)\n                    j = 2\n               \
    \ }\n            } else {\n                if(b==0) {\n                    messageDecoded\
    \ += a\n                    j = 0\n                } else {\n                \
    \    messageDecoded += a.charAt(b-1)\n                    j = 0\n            \
    \    }\n            }\n        }\n        \n        // Return the encoded message\n\
    \        return messageDecoded\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3p80bdfi.scala:18:36 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m(i>\e[31m0\e[0m) messageToEncode\
    \ += (c.toUpperCase)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did you mean\
    \ String.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3p80bdfi.scala:18:42\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m(i>\e\
    [31m0\e[0m) messageToEncode += (c.toUpperCase)\n\e[31m\e[31m   |\e[0m        \
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                      value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp3p80bdfi.scala:27:46 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m(counter>\e[31m0\e[0m) messageToEncode\
    \ += (v.charAt(counter))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did you mean\
    \ String.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3p80bdfi.scala:27:50\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e\
    [0m(counter>\e[31m0\e[0m) messageToEncode += (v.charAt(counter))\n\e[31m\e[31m\
    \   |\e[0m                                                  ^\e[0m\n\e[31m   |\e\
    [0m                                                  Not found: v\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3p80bdfi.scala:39:22 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            \e[33mfor\e[0m (v <- vowels) {\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: vowels\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3p80bdfi.scala:52:35 ------------------------\e[0m\e[0m\n\e[31m52 |\e\
    [0m                    messageDecoded += a.charAt(b-\e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0"
  stdout: ''
  timestamp: 1659979108
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val list = message.map { \n            case x => (x.toUpperCase\
    \ + x.toLowerCase) \n        }.toList\n        val map = list.groupBy(x => (x.charAt(0)/2))\n\
    \        val result = map.map { case (c,list) => \n            val index = list.indexOf(c._1)\n\
    \            if (index > 0) {\n                val prev = list[index-1]\n    \
    \            val next = list[index+1]\n                val replaced = c._2.map(x\
    \ => (x._1 + prev.toUpperCase + x._2.toLowerCase)).mkString\n                next\
    \ + replaced + prev\n            } else {\n                c._2.map(x => (x._1\
    \ + x._2.toLowerCase)).mkString\n            }\n        }.mkString\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ambrhqx.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m x => (x.toUpperCase + x.toLowerCase)\
    \ \n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var newMessage = message\n        var position = 1\n \
    \       // If there are less than 2 positions \n        // ahead of the current\
    \ letter, \n        // then that letter is swapped with the \n        // 2 position\
    \ ahead letter.\n        if(newMessage.count(_ == 'A') - 1 == 2)\n           \
    \ newMessage =\n                newMessage.map((x => {\n                    if(x.toLower.equals('a'))\n\
    \                        return x.toUpper\n                    else\n        \
    \                return x.toLower\n                }))\n        // Otherwise,\
    \ we need to swap the vowels in the message.\n        else if(newMessage.count(_\
    \ == 'A') - 1 > 2)\n            newMessage =\n                newMessage.map((x\
    \ => {\n                    if(x.toLower.equals('a'))\n                      \
    \  return x.toLower\n                    else\n                        return\
    \ x.toUpper\n                }))\n        // If the current letter is A, then\
    \ we need to \n        // find two adjacent letters in the english alphabet \n\
    \        // that share the same vowel. \n        else if(newMessage.count(_ ==\
    \ 'A') - 1 == 1)\n            newMessage =\n                newMessage.map((x\
    \ => {\n                    if(x.toLower.equals('a'))\n                      \
    \  return x.toUpper\n                    else {\n                        val positionAround\
    \ = position + 1\n                        position += 2\n                    \
    \    val positionAround2 = positionAround + 1\n                        position\
    \ += 2\n                        if(positionAround == newMessage.count(_ == 'A'))\n\
    \                            return x.toUpper\n                        else if(positionAround2\
    \ == newMessage.count(_ == 'A'))\n                            return x.toLower\n\
    \                        else\n                            return x.toUpper\n\
    \                    }\n                }))\n        newMessage\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwx7b7nz0.scala:25:33\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                        \e[33mreturn\e\
    [0m x.toUpper\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    Char\n\e[31m   |\e\
    [0m                               Required: String\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpwx7b7nz0.scala:27:33 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                        \e[33mreturn\e[0m x.toLower\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               Found:    Char\n\e[31m   |\e[0m            \
    \                   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpwx7b7nz0.scala:34:33 --------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m                        \e[33mreturn\e[0m x.toLower\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Found:    Char\n\e[31m   |\e[0m                \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwx7b7nz0.scala:36:33 --------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m                        \e[33mreturn\e[0m x.toUpper\n\e[31m\e[31m   |\e\
    [0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Found:    Char\n\e[31m   |\e[0m                          \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwx7b7nz0.scala:45:33\
    \ --------------------\e[0m\e[0m\n\e[31m45 |\e[0m                        \e[33mreturn\e\
    [0m x.toUpper\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    Char\n\e[31m   |\e\
    [0m                   "
  stdout: ''
  timestamp: 1659979107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var s = message \n        val vowels = \"AEIOUaeiou\"\
    .toCharArray\n        val indexes = new mutable.ListBuffer[Int]()\n        for\
    \ (i <- 0 to s.length-1) {\n            if (vowels(i)==' ') {\n              \
    \  indexes += i\n            }\n        }\n        for (i1 <- 0 to indexes.length-1)\
    \ {\n            val index = indexes(i1)\n            val letter = s(index)\n\
    \            s = s.replaceAll(letter, s(index+2))\n        }\n        return s\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9lf1p7se.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mindexes\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9lf1p7se.scala:26:29\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            s = s.replaceAll(letter,\
    \ s(index+\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                             ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    (letter : Char)\n\e\
    [31m   |\e[0m                             Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9lf1p7se.scala:26:38 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            s = s.replaceAll(letter, s(index+\e[31m2\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    Char\n\e[31m\
    \   |\e[0m                                     Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979108
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYz\"\
    \n        val encoded = message.toLowerCase.zip(alphabet).foldLeft(\"\") {\n \
    \           case (acc, (c,a)) => acc + (a(c.toUpperCase) match {\n           \
    \     case \"a\" => \"t\"\n                case \"b\" => \"h\"\n             \
    \   case \"c\" => \"k\"\n                case \"d\" => \"s\"\n               \
    \ case \"e\" => \"g\"\n                case \"f\" => \"h\"\n                case\
    \ \"g\" => \"h\"\n                case \"h\" => \"s\"\n                case \"\
    i\" => \"j\"\n                case \"j\" => \"j\"\n                case \"k\"\
    \ => \"l\"\n                case \"l\" => \"l\"\n                case \"m\" =>\
    \ \"n\"\n                case \"n\" => \"n\"\n                case \"o\" => \"\
    p\"\n                case \"p\" => \"p\"\n                case \"q\" => \"q\"\n\
    \                case \"r\" => \"r\"\n                case \"s\" => \"s\"\n  \
    \              case \"t\" => \"t\"\n                case \"u\" => \"v\"\n    \
    \            case \"v\" => \"v\"\n                case \"w\" => \"x\"\n      \
    \          case \"x\" => \"x\"\n                case \"y\" => \"y\"\n        \
    \        case \"z\" => \"z\"\n                case _ => c)\n            }).toUpperCase\
    \ + acc\n        }\n        encoded\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2pi5qn4d.scala:44:27 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m                \e[33mcase\e[0m _ => c)\n\e[31m\e[31m\
    \   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m                 \
    \          '}' expected, but ')' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2pi5qn4d.scala:45:13\
    \ ---------------------------\e[0m\e[0m\n\e[31m45 |\e[0m            }).toUpperCase\
    \ + acc\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m           \
    \  '}' expected, but ')' found\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp2pi5qn4d.scala:17:40\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e\
    [0m (acc, (c,a)) => acc + (a(c.toUpperCase) \e[33mmatch\e[0m {\n\e[31m\e[31m \
    \  |\e[0m                                        ^\e[0m\n\e[31m   |\e[0m     \
    \                                   \e[33mvalue\e[0m \e[35ma\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2pi5qn4d.scala:17:44\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e\
    [0m (acc, (c,a)) => acc + (a(c.toUpperCase) \e[33mmatch\e[0m {\n\e[31m\e[31m \
    \  |\e[0m                                          ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n4 errors found\n"
  stdout: ''
  timestamp: 1659979107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var output = message.toCharArray.mkString\n        val\
    \ vowels = \"aeiouAEIOU\".toCharArray\n        for (x<-1 to message.length-1)\
    \ {\n            if (vowels(x) == message(x)) {\n                output = output.substring(0,\
    \ x) + output.substring(x+1, x+2).toUpperCase()\n            }\n        }\n  \
    \      return output\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptg3cf3ad.scala:25)\n\tat Problem.main(tmptg3cf3ad.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val s = message.foldLeft(\"\")(_ + _)\n        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val messageList = message.split(\"\")\n   \
    \     val vowelIndex = messageList.foldLeft(0)((c, _) => c + 1)\n        val vowelIndex\
    \ = messageList.foldLeft(0)((c, _) => c + 1)\n        val newList = messageList.map(x\
    \ => x.toUpperCase)\n        val upperCaseIndexed = newList.zipWithIndex.filter(x\
    \ => x % 2 == 0)\n        val firstVowelIndex = upperCaseIndexed.foldLeft(0)((c,\
    \ _) => c + 1)\n        val firstVowelIndex = upperCaseIndexed.foldLeft(0)((c,\
    \ _) => c + 1)\n        val newUpperCaseIndexed = upperCaseIndexed.map(x => x._1\
    \ + x._2)\n        val newUpperIndexed = newUpperCaseIndexed.zipWithIndex.filter(x\
    \ => x % 2 == 0)\n        val newList2 = newUpperIndexed.map(x => x._1 + x._2)\n\
    \        val newString2 = newList2.zipWithIndex.filter(x => x % 2 == 0)\n    \
    \    val first2Indexed = newString2.foldLeft(0)((c, _) => c + 1)\n        val\
    \ first2Indexed = newString2.foldLeft(0)((c, _) => c + 1)\n        val newString3\
    \ = newString2.map(x => x._1 + x._2)\n        val newString4 = newString3.zipWithIndex.filter(x\
    \ => x % 2 == 0)\n        val first3Indexed = newString4.foldLeft(0)((c, _) =>\
    \ c + 1)\n        val first3Indexed = newString4.foldLeft(0)((c, _) => c + 1)\n\
    \        val newString5 = newString4.map(x => x._1 + x._2)\n        val first4Indexed\
    \ = newString5.foldLeft(0)((c, _) => c + 1)\n        val first4Indexed = newString5.foldLeft(0)((c,\
    \ _) => c + 1)\n        val newString6 = newString5.map(x => x._1 + x._2)\n  \
    \      val first5Indexed = newString6.foldLeft(0)((c, _) => c + 1)\n        val\
    \ first5Indexed = newString6.foldLeft(0)((c, _) => c + 1)\n        val newString7\
    \ = newString6.map(x => x._1 + x._2)\n        val first6Indexed = newString7.foldLeft(0)((c,\
    \ _\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0g3so7di.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0g3so7di.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelIndex\e[0m = messageList.foldLeft(\e[31m0\e[0m)((\e[36mc\e[0m, _)\
    \ => c + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0g3so7di.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfirstVowelIndex\e[0m = upperCaseIndexed.foldLeft(\e\
    [31m0\e[0m)((\e[36mc\e[0m, _) => c + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfirstVowelIndex is already defined as \e[33mvalue\e[0m \e[35mfirstVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0g3so7di.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mfirst2Indexed\e[0m = newString2.foldLeft(\e\
    [31m0\e[0m)((\e[36mc\e[0m, _) => c + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfirst2Indexed is already defined as \e[33mvalue\e[0m \e[35mfirst2Indexed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0g3so7di.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mfirst3Indexed\e[0m = newString4.foldLeft(\e\
    [31m0\e[0m)((\e[36mc\e[0m, _) => c + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659979111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // write your code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4kgs7xpp.scala:14:44\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mencode\e\
    [0m(\e[36mmessage\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                            ^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Unit\n\e[31m   |\e[0m\
    \                                            Required: String\n\e[31m15 |\e[0m\
    \        \e[34m// write your code here\e[0m\n\e[31m16 |\e[0m    }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var index = 0\n        var result = \"\"\n        while\
    \ (index < message.length){\n            val vowels = \"AEIOU\"\n            val\
    \ characterIndex  = vowels.indexOf(message.charAt(index))\n            val characterIndex2\
    \ = vowels.indexOf(message.charAt(index))\n            if (characterIndex != characterIndex2){\n\
    \                result += message.charAt(index) \n            } else {\n    \
    \            val swapCase = message.substring(index + 1, message.length)\n   \
    \             result += swapCase.toUpperCase()\n                index += 2\n \
    \           }\n            index += 1\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn4iv4m77.scala:33)\n\tat Problem.main(tmpn4iv4m77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var output = message\n        val vowels = \"aeiou\"\n\
    \        val indexMap = new mutable.HashMap[String,Int]()\n        for (i <- 0\
    \ until output.length) {\n            val c = output(i).toChar\n            val\
    \ lowerCaseC = c\n            if (vowels.contains(lowerCaseC)) {\n           \
    \     indexMap.setValue(lowerCaseC,indexMap.getOrElse(lowerCaseC,0)+1)\n     \
    \       }\n        }\n        val orderedVowels = vowels.toList.sortWith(_.compareTo(_)\
    \ <= 0)\n        for (i <- 0 until orderedVowels.length) {\n            val vowelIndex\
    \ = orderedVowels(i)\n            val vowelValue = indexMap.getOrElse(vowelIndex,0)\n\
    \            val newVowelIndex = vowelValue + 2\n            val replacement =\
    \ vowels.charAt(newVowelIndex)\n            output = output.replaceFirst(vowels.charAt(i),\
    \ replacement)\n        }\n        output\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpftp1kep3.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mindexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpftp1kep3.scala:31:54 --------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m            output = output.replaceFirst(vowels.charAt(i), replacement)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         Found:    Char\n\e\
    [31m   |\e[0m                                         Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpftp1kep3.scala:31:59 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            output = output.replaceFirst(vowels.charAt(i),\
    \ replacement)\n\e[31m\e[31m   |\e[0m                                        \
    \                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                  Found:    (replacement : Char)\n\e[31m   |\e[0m           \
    \                               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        def swapped(letter : String) : String = {\n          \
    \  def nextLetter(letter : String) : String = {\n                if (letter.length\
    \ != 1) letter\n                else letter.toLowerCase() + letter.substring(0,1)\n\
    \            }\n            val firstVowel = letter.toLowerCase() + letter.substring(1)\n\
    \            val nextVowel = nextLetter(firstVowel)\n            val letterToSwap\
    \ = if (letter == firstVowel) firstVowel\n            else nextVowel\n       \
    \     (letterToSwap + nextVowel)\n        }\n        def repaired(string : String)\
    \ : String = {\n            string.map { letter =>\n                swapped(letter)\n\
    \            }.mkString(\"\")\n        }\n        repaired(message)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7z_or0xv.scala:28:24\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m                swapped(letter)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                    Found:    (letter : Char)\n\e[31m   |\e[0m              \
    \          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var message = message.toLowerCase\n        var messageArray\
    \ = message.split(\"\")\n        messageArray = messageArray.map(char => {\n \
    \           val index = char.charAt(0).toInt\n            if (char.charAt(0) ==\
    \ 'a') return \"g\"\n            if (char.charAt(0) == 'e') return \"f\"\n   \
    \         if (char.charAt(0) == 'i') return \"j\"\n            if (char.charAt(0)\
    \ == 'o') return \"m\"\n            if (char.charAt(0) == 'u') return \"h\"\n\
    \            if (char.charAt(0) == 'y') return \"k\"\n            if (char.charAt(0)\
    \ == 'i') return \"l\"\n            if (char.charAt(0) == 'A') return \"G\"\n\
    \            if (char.charAt(0) == 'E') return \"F\"\n            if (char.charAt(0)\
    \ == 'I') return \"J\"\n            if (char.charAt(0) == 'O') return \"M\"\n\
    \            if (char.charAt(0) == 'U') return \"H\"\n            if (char.charAt(0)\
    \ == 'Y') return \"K\"\n            if (char.charAt(0) == 'I') return \"L\"\n\
    \            return char.charAt(0)\n        })\n        var swappedArray = messageArray.zipWithIndex.filter(_._2\
    \ % 2 != 0).map {\n        case (word, index) => word.swapCase\n        }\n  \
    \      var newArray = swappedArray.zip(messageArray).filter(_._1 != _._2).map\
    \ {\n        case (word, index) => word.replaceAll(\"[aeiouAEIOUY]\", (_: String)\
    \ => {\n            val index = index.toInt + 1\n            val charToInsert\
    \ = messageArray.get(index - 1).charAt(0)\n            val charToRemove = messageArray.get(index).charAt(0)\n\
    \            charToRemove\n        }) \n        }\n        newArray.toList.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzcpd8jc_.scala:15:22 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mmessage\e[0m = message.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvariable\e[0m \e[35mmessage\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var message =  message.toLowerCase\n        val alphabet\
    \ = List('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n        for(letter\
    \ <- alphabet) {\n            val index = alphabet.indexOf(letter)\n         \
    \   if(message.contains(letter)) {\n                message = message.replaceAll(letter,\
    \ alphabet(index+1))\n            }\n        }\n        val vowels = List('a',\
    \ 'e', 'i', 'o', 'u')\n        for(vowel <- vowels) {\n            val index =\
    \ vowels.indexOf(vowel)\n            if(message.contains(vowel)) {\n         \
    \       message = message.replaceAll(vowel, alphabet(index+2))\n            }\n\
    \        }\n        message\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqwbbvca3.scala:15:23 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mmessage\e[0m =  message.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m          \
    \             Recursive \e[33mvariable\e[0m \e[35mmessage\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var messageList = message.toLowerCase.split(\"\")\n  \
    \      var charCounts = messageList.map(char => char.toChar)\n        val vowels\
    \ = \"aeiouAEIOU\".toCharArray\n        charCounts.foldLeft(Map[Char,Int]()){\n\
    \            case (accumulator,charCount) =>\n                val currentVowel\
    \ = vowels(charCount % vowels.length)\n                if(accumulator.contains(currentVowel)){\n\
    \                    accumulator + (currentVowel -> (accumulator(currentVowel)-1))\n\
    \                } else {\n                    accumulator + (currentVowel ->\
    \ (vowels.length-1))\n                }\n        }\n        .map{ case (k,v) =>\n\
    \            val currentVowel = vowels(v % vowels.length)\n            val newVowel\
    \ = vowels(v + 2)\n            val newCount = v + 2\n            currentVowel\
    \ -> newVowel\n        }.foldLeft((\"\")){\n            case (accumulator,(k,v))\
    \ =>\n                accumulator + k + v\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7as5h3p2.scala:16:54 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mcharCounts\e[0m = messageList.map(\e\
    [36mchar\e[0m => char.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \               value toChar is not a member of String\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp7as5h3p2.scala:16:61 -----------------------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mcharCounts\e[0m = messageList.map(\e\
    [36mchar\e[0m => char.toChar)\n\e[31m\e[31m   |\e[0m                         \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var result = \"\"\n        var vowels = \"AEIOUaeiou\"\
    \n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        for (letter <-\
    \ message){\n            result += letter.swapCase()\n            for (i <- 1\
    \ to vowels.length){\n                result += alphabet(vowels.charAt(i) + alphabet.indexOf((vowels.charAt(i)\
    \ + vowels.charAt(i - 1)) % 26))\n            }\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp07p0ct90.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            result += letter.swapCase()\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp07p0ct90.scala:19:29 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            result += letter.swapCase()\n\e[31m\e[31m   |\e[0m       \
    \               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value\
    \ swapCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var result: String = message \n        for (i <- 0 to\
    \ message.length - 2) {\n            if (message(i) >= 'a' && message(i) <= 'z')\
    \ {\n                result += ((message(i) + message(i + 1)).toUpperCase)\n \
    \           } else {\n                result += message(i)\n            }\n  \
    \      }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwn67ftqn.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                result += ((message(i) + message(i +\
    \ \e[31m1\e[0m)).toUpperCase)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did you mean\
    \ String.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwn67ftqn.scala:18:57\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                result +=\
    \ ((message(i) + message(i + \e[31m1\e[0m)).toUpperCase)\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           value toUpperCase is not a member of Int\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // Your code here\n        var newMessage = message\n\
    \        var vowels = \"aeiouAEIOU\"\n        var letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val countLetters = message.count(x => letters.contains(x))\n       \
    \ val countVowels = message.count(x => vowels.contains(x))\n        val countVowelsAhead\
    \ = message.count(x => vowels.indexOf(x.charAt(2)) == 2)\n        println(newMessage)\n\
    \        newMessage.replace(vowels, letter => {\n            val idx = letters.indexOf(letter)\n\
    \            val idx2 = vowels.indexOf(vowels(idx))\n            val idx3 = vowels.indexOf(vowels(idx2))\n\
    \            if (idx3 == -1) {\n                if (idx == 2) {\n            \
    \        val idx4 = letters.indexOf(letters.substring(idx + 2, idx))\n       \
    \             val idx5 = letters.indexOf(letters.substring(idx2 + 1, idx2))\n\
    \                    val idx6 = letters.indexOf(letters.substring(idx5 + 1, idx4))\n\
    \                    val idx7 = letters.indexOf(letters.substring(idx6 + 1, idx5))\n\
    \                    val idx8 = letters.indexOf(letters.substring(idx7 + 1, idx6))\n\
    \                    if (idx8 != -1) {\n                        idx8\n       \
    \             } else {\n                        idx5\n                    } \n\
    \                } else if (idx == 2) {\n                    idx\n           \
    \     } else {\n                    idx\n                }\n            } else\
    \ {\n                idx2\n            }\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwpv9d94b.scala:21:67 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcountVowelsAhead\e[0m =\
    \ message.count(\e[36mx\e[0m => vowels.indexOf(x.charAt(\e[31m2\e[0m)) == \e[31m2\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \     value charAt is not a member of Char\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmpwpv9d94b.scala:23:19 -----------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        newMessage.replace(vowels, \e[36mletter\e[0m => {\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mreplace\e[0m in \e[33mclass\e[0m \e\
    [35mString\e[0m with types\n\e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence):\
    \ String\n\e[31m   |\e[0m (x$0: Char, x$1: Char): String\n\e[31m   |\e[0mmatch\
    \ arguments ((vowels : String), <?> => <?>)\n2 errors found\n"
  stdout: ''
  timestamp: 1659979115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val lowercase = message.map {x => x.toLowerCase()}\n \
    \       val vowels = mutable.List(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n\
    \        val encodedString = mutable.ListBuffer.empty[String]\n        for (letter\
    \ <- lowercase) {\n            val letterCount = vowels.count(_ == letter)\n \
    \           if(letterCount == 0)\n                encodedString += letter\n  \
    \          else if(letterCount > 2)\n                encodedString += vowels(letterCount\
    \ - 1)\n            else {\n                val position = (vowels.indexOf(letter)\
    \ + 1) % vowels.size\n                encodedString += vowels(position)\n    \
    \        }\n        }\n        encodedString.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp73ruq_3o.scala:15:44 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlowercase\e[0m = message.map\
    \ {\e[36mx\e[0m => x.toLowerCase()}\n\e[31m\e[31m   |\e[0m                   \
    \                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \             value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp73ruq_3o.scala:16:21 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = mutable.List(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m, \e[31m\"y\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp73ruq_3o.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mencodedString\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n      val letters = new mutable.StringBuilder\n      for (x <-\
    \ message) {\n        val pos = x.indexOf(\"a\")\n        if (pos < 0) { letters\
    \ += x }\n        else {\n          val l = if (pos == 1) \"z\" else \"a\"\n \
    \         val p = x.indexOf(\"a\")\n          if (p > -1 && (p + 1 == x.length))\
    \ letters += l\n          else letters += l + x.charAt(p + 1)\n        }\n   \
    \   }\n      letters.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps5n554o2.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mletters\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmps5n554o2.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpos\e[0m = x.indexOf(\e\
    [31m\"a\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value indexOf is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmps5n554o2.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m          \e[33mval\e[0m \e[36mp\e[0m = x.indexOf(\e\
    [31m\"a\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value indexOf is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659979116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // Code here \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj8wmtvyg.scala:14:44\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mencode\e\
    [0m(\e[36mmessage\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                            ^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Unit\n\e[31m   |\e[0m\
    \                                            Required: String\n\e[31m15 |\e[0m\
    \        \e[34m// Code here \e[0m\n\e[31m16 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // your code here\n        val vowels: mutable.Set[String]\
    \ = new mutable.HashSet(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"); \n        val\
    \ alphabet: mutable.Set[String] = new mutable.HashSet(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"); \n        val newMessage = mutable.StringBuilder(message); \n        for\
    \ (i <- 0 until message.size){\n            val currentChar = message(i)\n   \
    \         val position = alphabet.indexOf(currentChar)\n            if (position\
    \ != -1) {\n                if (vowels.contains(currentChar)) {\n            \
    \        newMessage.setCharAt(i, \"a\" * position + \"e\" * (position + 1)) \n\
    \                }\n                else {\n                    newMessage.setCharAt(i,\
    \ \"a\" * position + \"e\" * (position + 1)) \n                }\n           \
    \ }\n        }\n        newMessage.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa6915acb.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m: mutable.Set[\e\
    [35mString\e[0m] = \e[33mnew\e[0m mutable.HashSet(\e[31m\"a\"\e[0m, \e[31m\"e\"\
    \e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m, \e[31m\"y\"\e[0m);\
    \ \n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpa6915acb.scala:16:46 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m: mutable.Set[\e[35mString\e\
    [0m] = \e[33mnew\e[0m mutable.HashSet(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m, \e[31m\"y\"\e[0m); \n\e[31m\e[31m\
    \   |\e[0m                                              ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                              Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa6915acb.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36malphabet\e[0m: mutable.Set[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.HashSet(\e\
    [31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e[31m\"d\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"h\"\e[0m, \e[31m\"i\"\e\
    [0m, \e[31m\"j\"\e[0m, \e[31m\"k\"\e[0m, \e[31m\"l\"\e[0m, \e[31m\"m\"\e[0m, \e\
    [31m\"n\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"p\"\e[0m, \e[31m\"q\"\e[0m, \e[31m\"\
    r\"\e[0m, \e[31m\"s\"\e[0m, \e[31m\"t\"\e[0m, \e[31m\"u\"\e[0m, \e[31m\"v\"\e\
    [0m, \e[31m\"w\"\e[0m, \e[31m\"x\"\e[0m, \e[31m\"y\"\e[0m, \e[31m\"z\"\e[0m);\
    \ \n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpa6915acb.scala:17:48 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36malphabet\e[0m: mutable.Set[\e\
    [35mString\e[0m] = \e[33mnew\e[0m mutable.HashSet(\e[31m\"a\"\e[0m, \e[31m\"b\"\
    \e[0m, \e[31m\"c\"\e[0m"
  stdout: ''
  timestamp: 1659979114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val replaceMap = new mutable.HashMap[String,String]()\n\
    \        replaceMap += \"a\" -> \"A\"\n        replaceMap += \"b\" -> \"B\"\n\
    \        replaceMap += \"c\" -> \"C\"\n        replaceMap += \"d\" -> \"D\"\n\
    \        replaceMap += \"e\" -> \"E\"\n        replaceMap += \"f\" -> \"F\"\n\
    \        replaceMap += \"g\" -> \"G\"\n        replaceMap += \"h\" -> \"H\"\n\
    \        replaceMap += \"i\" -> \"I\"\n        replaceMap += \"j\" -> \"J\"\n\
    \        replaceMap += \"k\" -> \"K\"\n        replaceMap += \"l\" -> \"L\"\n\
    \        replaceMap += \"m\" -> \"M\"\n        replaceMap += \"n\" -> \"N\"\n\
    \        replaceMap += \"o\" -> \"O\"\n        replaceMap += \"p\" -> \"P\"\n\
    \        replaceMap += \"q\" -> \"Q\"\n        replaceMap += \"r\" -> \"R\"\n\
    \        replaceMap += \"s\" -> \"S\"\n        replaceMap += \"t\" -> \"T\"\n\
    \        replaceMap += \"u\" -> \"U\"\n        replaceMap += \"v\" -> \"V\"\n\
    \        replaceMap += \"w\" -> \"W\"\n        replaceMap += \"x\" -> \"X\"\n\
    \        replaceMap += \"y\" -> \"Y\"\n        replaceMap += \"z\" -> \"Z\"\n\
    \        replaceMap += \"A\" -> \"a\"\n        replaceMap += \"B\" -> \"b\"\n\
    \        replaceMap += \"C\" -> \"c\"\n        replaceMap += \"D\" -> \"d\"\n\
    \        replaceMap += \"E\" -> \"e\"\n        replaceMap += \"F\" -> \"f\"\n\
    \        replaceMap += \"G\" -> \"g\"\n        replaceMap += \"H\" -> \"h\"\n\
    \        replaceMap += \"I\" -> \"i\"\n        replaceMap += \"J\" -> \"j\"\n\
    \        replaceMap += \"K\" -> \"k\"\n        replaceMap += \"L\" -> \"l\"\n\
    \        replaceMap += \"M\" -> \"m\"\n        replaceMap += \"N\" -> \"n\"\n\
    \        replaceMap += \"O\" -> \"o\"\n        replaceMap += \"P\" -> \"p\"\n\
    \        replaceMap += \"Q\" -> \"q\"\n        replaceMap += \"R\" -> \"r\"\n\
    \        replaceMap += \"S\" -> \"s\"\n        replaceMap += \"T\" -> \"t\"\n\
    \        replace\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp81pwepd.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mreplaceMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m,\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpp81pwepd.scala:62:8 -------------------------\e[0m\e[0m\n\e[31m62 |\e\
    [0m        replace\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Not found: replace\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val lowercase = message.toLowerCase\n        val vowels\
    \ = mutable.Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val translated = mutable.Set[String]()\n\
    \        for(letter <- lowercase){\n            if(vowels.contains(letter)){\n\
    \                translated += translateLetter((letter + vowels.size - 1) % vowels.size)\n\
    \            }\n            else {\n                translated += translateLetter(letter)\n\
    \            }\n        }\n        translated.toString.toUpperCase\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgfwfd2zd.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = mutable.Set(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpgfwfd2zd.scala:17:25 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mtranslated\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n      val lowercase = message.toLowerCase\n      val vowels =\
    \ mutable.Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n      val alphabet =\
    \ mutable.List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\",\
    \ \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n      val alphabetLetters: Array[String]\
    \ = alphabet.toArray\n      val alphabetIndex: Array[Int] = alphabet.toArray.zipWithIndex.toArray\n\
    \      val vowelIndex: Array[Int] = vowels.toArray.zipWithIndex.toArray\n    \
    \  var messageIndex : Int = 0\n      var newMessageIndex : Int = 0\n      \n \
    \     lowercase.foldLeft(\"\"){ \n        case(\"\", messageIndex) => (messageIndex\
    \ % 26).toChar + alphabetLetters((messageIndex / 26) - 1) \n      }\n      \n\
    \      val alphabetLettersLength: Int = alphabetLetters.length\n      val vowelsLength:\
    \ Int = vowels.length\n      \n      lowercase.foldLeft(\"\"){ \n        case(\"\
    \", messageIndex) => (messageIndex % 26).toChar + alphabetLetters((messageIndex\
    \ / 26) - 1) \n      }\n      \n      for(i <- 0 until message.length){\n    \
    \    newMessageIndex = \n          if(vowels(messageIndex) ne \"y\") \n      \
    \    vowelIndex(alphabetIndex(messageIndex)) else\n          vowelIndex(alphabetIndex(messageIndex\
    \ + 1))\n          \n        if(messageIndex == 0){\n          newMessageIndex\
    \ = 26\n          messageIndex = newMessageIndex\n          messageIndex % = 1\n\
    \          messageIndex = messageIndex.abs % 26\n        } else {\n          messageIndex\
    \ = newMessageIndex\n          messageIndex % = 1\n        }\n        \n     \
    \   newMessageIndex = \n          if(vowels(messageIndex) ne \"y\") \n       \
    \   vowelIndex(alphabetIndex(messageIndex)) else\n          vowelIndex(alphabetIndex(messageIndex\
    \ - 1))\n          \n        if(messageIndex == 0){\n          newMessageIndex\
    \ = 26\n          messageIndex = newMessageIndex\n          messageIndex % = 1\n\
    \          messageIndex = messageIndex.abs % 26\n        } else {\n          messageIndex\
    \ = newMessageIndex\n          messageIndex % = 1\n        }\n      }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8fo3d74l.scala:44:25 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m          messageIndex % = \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                   \
    \      expression expected but \e[31m=\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E018] Syntax Error: /tmp/tmp8fo3d74l.scala:48:25 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m          messageIndex % = \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                   \
    \      expression expected but \e[31m=\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E018] Syntax Error: /tmp/tmp8fo3d74l.scala:59:25 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m          messageIndex % = \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                   \
    \      expression expected but \e[31m=\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E018] Syntax Error: /tmp/tmp8fo3d74l.scala:63:25 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m          messageIndex % = \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                   \
    \      expression expected but \e[31m=\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8fo3d74l.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m      \e[33mval\e[0m \e[36mvowels\e[0m = mutable.Set(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m, \e[31m\"y\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8fo3d74l.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m      \e[33mval\e[0m \e[36malphabet\e[0m = "
  stdout: ''
  timestamp: 1659979116
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // TODO: Write your implementation here. \n        \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdbboqcqb.scala:19)\n\tat Problem.main(tmpdbboqcqb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until message.length)\n\
    \            result += swapCase(message(i)) + swapCase(message.charAt(i + 1))\
    \ + \n                swapCase(message.charAt(i + 2)) + swapCase(message.charAt(i\
    \ + 3))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn71uxgv8.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            result += swapCase(message(i)) + swapCase(message.charAt(i\
    \ + \e[31m1\e[0m)) + \n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value += is not a member of String - did you mean String.!=?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn71uxgv8.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            result += swapCase(message(i)) + swapCase(message.charAt(i\
    \ + \e[31m1\e[0m)) + \n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: swapCase\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n         val vowel = \"AEIOUaeiou\"\n         val alphabet = message.toCharArray\n\
    \         val messageLength = alphabet.length\n         var index = messageLength\n\
    \         var outputMessage = message\n\n         while(index >= 0) {\n      \
    \      var newPosition = index\n            var newOutput = outputMessage\n  \
    \          while(newPosition >= 0) {\n               val ch = alphabet(newPosition)\n\
    \               val upperCase = if (ch >= 'A' && ch <= 'Z') ch - ('A' - 'a') else\
    \ ch\n               val lowerCase = if (ch >= 'a' && ch <= 'z') ch - ('a' - 'A')\
    \ else ch\n               val newChar = if (upperCase == lowerCase) upperCase\
    \ else lowerCase\n               newOutput = newOutput.replaceAll(vowel, newChar)\n\
    \               newPosition -= 1\n            }\n            outputMessage = newOutput\n\
    \            index -= 1\n         }\n         outputMessage\n      }\n   }\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=scala |>\nHere's a solution using your initial solution\
    \ with a slight twist - it uses the fact that all characters in the English alphabet\
    \ have an offset of 0, and that every vowel has an offset of 1.\n<code>\ndef convert(message:\
    \ String): String = {\n  val vowel = \"AEIOUaeiou\".toCharArray\n  val alphabet\
    \ = message.toCharArray\n  val messageLength = alphabet.length\n  var index =\
    \ messageLength\n  var outputMessage = message\n\n  while (index >= 0) {\n   \
    \ val newPosition = index\n    val newOutput = outputMessage\n    while (newPosition\
    \ >= 0) {\n      val ch = alphabet(newPosition)\n      val upperCase = if (ch\
    \ >= 'A' && ch <= 'Z') ch - ('a' - 'A') else ch\n      val lowerCase = if (ch\
    \ >= 'a' && ch <= 'z') ch - ('a' - 'A') else ch\n      val newChar = if (upperCase\
    \ == lowerCase) upperCase else lowerCase\n      newOutput = newOutput.replaceAll(vowel,\
    \ newChar)\n      newPosition -= 1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpfjjp5qy1.scala:38:0 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpfjjp5qy1.scala:70:0 ----------------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfjjp5qy1.scala:29:55 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m               newOutput = newOutput.replaceAll(vowel,\
    \ newChar)\n\e[31m\e[31m   |\e[0m                                            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \        Found:    (newChar : AnyVal)\n\e[31m   |\e[0m                       \
    \                     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpfjjp5qy1.scala:58:39 --------------------\e[0m\e\
    [0m\n\e[31m58 |\e[0m      newOutput = newOutput.replaceAll(vowel, newChar)\n\e\
    [31m\e[31m   |\e[0m                                       ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                       Found:    (vowel : Array[Char])\n\
    \e[31m   |\e[0m                                       Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfjjp5qy1.scala:58:46 --------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m      newOutput = newOutput.replaceAll(vowel, newChar)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                            Found:    (newChar\
    \ : AnyVal)\n\e[31m   |\e[0m                                            Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfjjp5qy1.scala:59:18\
    \ ------------------------\e[0m\e[0m\n\e[31m59 |\e[0m"
  stdout: ''
  timestamp: 1659979120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // Your code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5q4en2gj.scala:14:44\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mencode\e\
    [0m(\e[36mmessage\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                            ^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Unit\n\e[31m   |\e[0m\
    \                                            Required: String\n\e[31m15 |\e[0m\
    \        \e[34m// Your code here\e[0m\n\e[31m16 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val enc = new mutable.ListBuffer[String]()\n        var\
    \ index = 0\n        for (char1 <- message) {\n            if (char1.isUpper)\
    \ {\n                val replacement = math.ceil(index/26)\n                enc.append(alphabet(replacement))\n\
    \                index %= 26\n            }\n            enc.append(char1)\n \
    \       }\n        enc.toString()\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzllqdtb1.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36menc\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var result : String = \"\"\n        // Create all possible\
    \ mappings\n        // TODO: write function for all mappings \n        // and\
    \ add them into result with String.format \n        // as done in encodeLetter\n\
    \        val mappings = (0 to 26).map( x => x -> x % 26 )\n        val allMappings\
    \ : mutable.Map[String, String] = mutable.Map(\n            \"A\"->\"B\",\n  \
    \          \"B\"->\"C\",\n            \"C\"->\"D\",\n            \"D\"->\"E\"\
    ,\n            \"E\"->\"F\",\n            \"F\"->\"G\",\n            \"G\"->\"\
    H\",\n            \"H\"->\"I\",\n            \"I\"->\"J\",\n            \"J\"\
    ->\"K\",\n            \"K\"->\"L\",\n            \"L\"->\"M\",\n            \"\
    M\"->\"N\",\n            \"N\"->\"O\",\n            \"O\"->\"P\",\n          \
    \  \"P\"->\"Q\",\n            \"Q\"->\"R\",\n            \"R\"->\"S\",\n     \
    \       \"S\"->\"T\",\n            \"T\"->\"U\",\n            \"U\"->\"V\",\n\
    \            \"V\"->\"W\",\n            \"W\"->\"X\",\n            \"X\"->\"Y\"\
    ,\n            \"Y\"->\"Z\",\n            \"Z\"->\"0\"\n        )\n        //\
    \ Iterate all mappings, swap case and replace all vowels with \n        // the\
    \ letter that appears 2 places ahead of the vowel \n        mappings.foreach(\
    \ ( (key, value) ) => {\n            val newValue = allMappings(key)\n       \
    \     val newCase = key.toUpperCase\n            val newString = (newCase + newValue).replaceAll(findVowel(newValue),\
    \ value)\n            result += newString\n        })\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptpb8i7td.scala:51:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        mappings.foreach( ( (key, value) ) => {\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                          not a legal formal parameter\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmptpb8i7td.scala:21:26 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mallMappings\e[0m : mutable.Map[\e\
    [35mString\e[0m, \e[35mString\e[0m] = mutable.Map(\n\e[31m\e[31m   |\e[0m    \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptpb8i7td.scala:21:56\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mallMappings\e[0m : mutable.Map[\e[35mString\e[0m, \e[35mString\e[0m] = mutable.Map(\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptpb8i7td.scala:53:26\
    \ ------------------------\e[0m\e[0m\n\e[31m53 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnewCase\e[0m = key.toUpperCase\n\e[31m\e[31m   |\e[0m                \
    \          ^^^\e[0m\n\e[31m   |\e[0m                          Not found: key\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // write code here\n        val newMessage = message.toLowerCase\n\
    \        val vowels = \"aeiouAEIOU\"\n        val charArray = Array(vowels, newMessage)\n\
    \        val pairs = charArray.toSet\n        val pairArray = pairs.toArray\n\
    \        val pairSet = mutable.HashSet[Pair[String, String]]()\n        pairArray.foreach{pair\
    \ => pairSet += pair}\n        val vowelSet = mutable.HashSet[String]()\n    \
    \    pairSet.foreach{pair => vowelSet += pair.left}\n        val newMessageToEncode\
    \ = newMessage.toUpperCase\n        val newMessageWithVowelsSwapped = newMessageToEncode.replaceAll(vowels,\
    \ \"\")\n        val pairArray = Array(vowelSet, newMessageWithVowelsSwapped)\n\
    \        val pairSet = mutable.HashSet[Pair[String, String]]()\n        pairArray.foreach{pair\
    \ => pairSet += pair}\n        val pairSetArray = pairSet.toArray\n        val\
    \ pairArray = pairSetArray.toSet\n        val pairArray = pairArray.toSet\n  \
    \      val pairSet = mutable.HashSet[Pair[String, String]]()\n        pairArray.foreach{pair\
    \ => pairSet += pair}\n        val pairSetArray = pairSet.toArray\n        val\
    \ pairArray = pairSetArray.toSet\n        val pairArray = pairArray.toSet\n  \
    \      val pairArray = pairArray.toSet\n        val pairArray = pairArray.toSet\n\
    \        val pairArray = pairArray.toSet\n        val pairArray = pairArray.toSet\n\
    \        val pairArray = pairArray.toSet\n        val pairArray = pairArray.toSet\n\
    \        val pairArray = pairArray.toSet\n        val pairArray = pairArray.toSet\n\
    \        val pairArray = pairArray.toSet\n        val pairArray = pairArray.toSet\n\
    \        val pairArray = pairArray.toSet\n        val pairArray = pairArray.toSet\n\
    \        val pairArray = pairArray.toSet\n        val pairArray = pairArray.toSet\n\
    \        val pairArray = pairArray.toSet\n        val pairArray = pairArray.toSet\n\
    \        val pairArray = pairArray.toSet\n        val pairArray = pairArray.toSet\n\
    \        val pairArray = pairArray.toSet\n        val pairArray = pairArray.toSet\n\
    \        val pairArray = pairArray.toSet\n        val pairArray = pairArray.toSet\n\
    \        val pair\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmperiz8qyo.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmperiz8qyo.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mpairArray\e[0m = Array(vowelSet, newMessageWithVowelsSwapped)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mpairArray is already defined as \e[33mvalue\e[0m \e[35mpairArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmperiz8qyo.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mpairSet\e[0m = mutable.HashSet[\e[35mPair\e\
    [0m[\e[35mString\e[0m, \e[35mString\e[0m]]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mpairSet is already defined as \e[33mvalue\e[0m \e[35mpairSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmperiz8qyo.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mpairArray\e[0m = pairSetArray.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mpairArray is already defined as \e[33mvalue\e[0m \e[35mpairArray\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmperiz8qyo.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mpairArray\e[0m = pairArray.toSet\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mpairArray\
    \ is already defined as \e[33mvalue\e[0m \e[35mpairArray\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1659979122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    var result = \"\"\n        for (c <- message) {\n            val index =\
    \ alphabet.indexOf(c)\n            if (index != -1)\n                result =\
    \ result + alphabet(index - 2)\n        }\n        \n        val vowels = \"aeiou\"\
    \n        for (c <- message.split(\"\")) {\n            val index = vowels.indexOf(c)\n\
    \            if (index != -1)\n                result = result + alphabet(index)\n\
    \        }\n        \n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp49hbt8rn.scala:33)\n\tat Problem.main(tmp49hbt8rn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val result = new StringBuilder\n        var vowels = \"\
    \"\n        for (c <- message) {\n            if (c.toUpper == 'A')\n        \
    \        vowels = c\n            else \n                if (vowels.length <= 1)\n\
    \                    result.append(vowels)\n                else\n           \
    \         result.append(vowels.charAt(2))\n                vowels = \"\"\n   \
    \         result.append(c.toUpper)\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqxwd4xgd.scala:19:25\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                vowels = c\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (c : Char)\n\e[31m   |\e[0m                        \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqxwd4xgd.scala:28:8\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : StringBuilder)\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        //your code goes here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpal_7qq6g.scala:14:44\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mencode\e\
    [0m(\e[36mmessage\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                            ^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Unit\n\e[31m   |\e[0m\
    \                                            Required: String\n\e[31m15 |\e[0m\
    \        \e[34m//your code goes here\e[0m\n\e[31m16 |\e[0m    }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var message : String = \"\"\n        var index = 0\n \
    \       while (index <= message.length) {\n            var letter = message.charAt(index)\n\
    \            var vowelCount = message.count(letter)\n            if (vowelCount\
    \ > 1) {\n                var currentVowel = letter // keep this in case you want\
    \ to use later\n                message += currentVowel\n                message\
    \ += letter // add the first vowel to the message\n                for (i <- 1\
    \ to vowelCount) {\n                    // now look for the 2nd vowel before this\
    \ one in the alphabet\n                    currentVowel = message.charAt(index\
    \ + i)\n                    // if it exists, replace it with the letter that appears\
    \ 2 places before\n                    // this vowel\n                    if (currentVowel\
    \ == 'e' || currentVowel == 'i' || currentVowel == 'o' || currentVowel == 'u')\
    \ {\n                        message += alphabet(currentVowel)\n             \
    \       } else {\n                        message += currentVowel\n          \
    \          }\n                }\n            } else {\n                message\
    \ += letter\n            }\n            index += 1\n        }\n        message\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3wr_vokq.scala:19:43\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mvar\e[0m \e\
    [36mvowelCount\e[0m = message.count(letter)\n\e[31m\e[31m   |\e[0m           \
    \                                ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                           Found:    (letter : Char)\n\e[31m   |\e[0m       \
    \                                    Required: Char => Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp3wr_vokq.scala:30:32 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                        message += alphabet(currentVowel)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value += is not a member of String - did you mean String.!=?\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3wr_vokq.scala:30:35 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                        message += alphabet(currentVowel)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   Not found: alphabet\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val chars = message.map(c => (c.toUpperCase))\n      \
    \  val vowels = mutable.List(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val vowelChars\
    \ = mutable.List(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val resultList =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until message.length) {\n \
    \           val subMessage = message.substring(0, i)\n            val subChars\
    \ = subMessage.map(c => (c.toUpperCase))\n            for(j <- 0 until vowels.length)\
    \ {\n                val vowel = vowels(j)\n                val vowelChar = vowelChars(j)\n\
    \                if(vowel.isDefined) {\n                    if(subChars.contains(vowel))\
    \ {\n                        resultList += subChars.take(vowel.asInstanceOf[Int]).mkString(vowelChar)\n\
    \                    }\n                }\n            }\n            resultList\
    \ += subMessage.substring(i, i+1)\n        }\n        resultList.mkString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppy2s0uy9.scala:15:40 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = message.map(\e\
    [36mc\e[0m => (c.toUpperCase))\n\e[31m\e[31m   |\e[0m                        \
    \              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmppy2s0uy9.scala:16:21 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = mutable.List(\e[31m\"A\"\e\
    [0m, \e[31m\"E\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"O\"\e[0m, \e[31m\"U\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppy2s0uy9.scala:17:25 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelChars\e[0m = mutable.List(\e[31m\"A\"\e[0m,\
    \ \e[31m\"E\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"O\"\e[0m, \e[31m\"U\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmppy2s0uy9.scala:18:25 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresultList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppy2s0uy9.scala:21:50 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36msubChars\e[0m = subMessage.map(\e\
    [36mc\e[0m => (c.toUpperCase))\n\e[31m\e[31m   |\e[0m                        \
    \                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \              value toUpperCase is not a member of Char\n5 errors found\n"
  stdout: ''
  timestamp: 1659979124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // TODO: Write code here!\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeon1txtg.scala:14:44\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mencode\e\
    [0m(\e[36mmessage\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                            ^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Unit\n\e[31m   |\e[0m\
    \                                            Required: String\n\e[31m15 |\e[0m\
    \        \e[34m// TODO: Write code here!\e[0m\n\e[31m16 |\e[0m    }\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val swap = (x: Char) => if(x == 'a') 'b' else 'a'\n  \
    \      val replaceVowel = (x: Char) => if(x == 'a') 'z' else 'a'\n        val\
    \ mapVowels = (x : Char) => {\n            val y = x.toUpperCase()\n         \
    \   if(y == \"AEIOU\") \"V\"\n            else y\n        }\n        val mapLetters\
    \ = (x : Char) => {\n            val y = x.toUpperCase()\n            if(y ==\
    \ \"QWERTYUIO\") \"L\"\n            else y\n        }\n        val mapVowelsAndLetters\
    \ = (x : Char) => {\n            val y = x.toUpperCase()\n            if(y ==\
    \ \"AEIOU\") \"Z\"\n            else y\n        }\n        val mapLettersAndVowels\
    \ = (x : Char) => {\n            val y = x.toUpperCase()\n            if(y ==\
    \ \"QWERTYUIO\") \"L\"\n            else y\n        }\n        val vowels = message.map(_).toSet\n\
    \        val letters = message.map(_).toSet\n        var result = \"\"\n     \
    \   for(x <- message) {\n            result += (if(x != 'a') x else swap(x))\n\
    \        }\n        for(x <- letters) {\n            result += (if(vowels.contains(x))\
    \ mapVowels(x) \n            else mapLetters(x))\n        }\n        for(x <-\
    \ vowels) {\n            result += (if(vowels.contains(x)) mapVowelsAndLetters(x)\
    \ \n            else mapLettersAndVowels(x))\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps2bvlwtu.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = x.toUpperCase()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmps2bvlwtu.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = x.toUpperCase()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmps2bvlwtu.scala:28:22 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = x.toUpperCase()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmps2bvlwtu.scala:33:22 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = x.toUpperCase()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmps2bvlwtu.scala:37:33 -----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = message.map(_).toSet\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   _$1 =>\
    \ message.map(_$1).toSet.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmps2bvlwtu.scala:38:34\
    \ -----------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e\
    [0m \e[36mletters\e[0m = message.map(_).toSet\n\e[31m\e[31m   |\e[0m         \
    \                         ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m   |\e[0m   _$2 => message.map(_$2).toSet.\n6 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val messages = message.split(\"\\\\s+\") // split into\
    \ individual words\n        val result = new StringBuilder(messages.length * 3\
    \ + \"T\")\n\n        for(i <- 0 until messages.length)\n            result.append(message(i)).append(i)\n\
    \        for(i <- 0 until messages.length)\n            result.append(message(i)).append(i\
    \ - 1)\n        return result.toString()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpooio6s6s.scala:25)\n\tat Problem.main(tmpooio6s6s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        message.foldLeft(\"\")((accum, char) =>\n            char.map\
    \ {\n                case c if (c.isUpper) => (c + (alphabet.indexOf((alphabet.indexOf(c)\
    \ + 2).asInstanceOf[Char]))).asInstanceOf[Char]\n                case c if (c.isUpper)\
    \ => alphabet.indexOf((alphabet.indexOf(c) + 1).asInstanceOf[Char])\n        \
    \        case c if !c.isUpper => c\n            }.foldLeft(accum.concat(char))((accum,\
    \ char) => accum ++ char))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_ukg8hil.scala:16:17 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            char.map {\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value map is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val list = message.toList\n        val swapped = list.map(x\
    \ => (if (x.toUpper == \"A\") \"Z\" else \"A\") + x).map(x => x.drop(1)).map(x\
    \ => x.take(1) + x.drop(1))\n        val vowels = scala.collection.mutable.Set(\"\
    A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n \
    \       swapped ++ vowels.map(x => swapped.indexWhere(_ == x))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpclfkc93h.scala:16:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mswapped\e[0m = list.map(\e\
    [36mx\e[0m => (\e[33mif\e[0m (x.toUpper == \e[31m\"A\"\e[0m) \e[31m\"Z\"\e[0m\
    \ \e[33melse\e[0m \e[31m\"A\"\e[0m) + x).map(\e[36mx\e[0m => x.drop(\e[31m1\e\
    [0m)).map(\e[36mx\e[0m => x.take(\e[31m1\e[0m) + x.drop(\e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                         ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpclfkc93h.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        swapped ++ vowels.map(\e\
    [36mx\e[0m => swapped.indexWhere(_ == x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[Matchable]\n\e[31m   |\e[0m       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = scala.collection.mutable.Set(\"a\",\"b\"\
    ,\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\"\
    ,\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\")\n        val\
    \ vowels = scala.collection.mutable.Set(\"a\",\"e\",\"i\",\"o\",\"u\")\n     \
    \   val message = message.toLowerCase\n        val result = new StringBuilder()\n\
    \        var counter = 0\n        while (counter < message.length)\n        {\n\
    \            val c = message.charAt(counter)\n            if (alphabet.contains(c))\n\
    \            {\n                alphabet.remove(c)\n                result.append(alphabet)\n\
    \                counter += 1\n            }\n            else if (vowels.contains(c))\n\
    \            {\n                val pos = alphabet.indexOf(c) + 1\n          \
    \      result.append(alphabet.substring(pos, pos))\n                counter +=\
    \ 1\n            }\n            else\n            {\n                result.append(c)\n\
    \                counter += 1\n            }\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpamdpf52e.scala:17:22 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessage\e[0m = message.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35mmessage\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpamdpf52e.scala:31:35 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                \e[33mval\e[0m \e[36mpos\e[0m = alphabet.indexOf(c)\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m   value indexOf is not a member of scala.collection.mutable.Set[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpamdpf52e.scala:32:39 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                result.append(alphabet.substring(pos,\
    \ pos))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m value substring is not a member of scala.collection.mutable.Set[String]\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var msgChars = mutable.ArrayBuffer(message.toLowerCase.map(_.toChar))\n\
    \        var encoded = \"\"\n        var vowels = \"aeiou\"\n        for(i <-\
    \ 1 to message.length-1){\n            val firstVowel = msgChars.head.indexOfAt(vowels,\
    \ 0)\n            val secondVowel = msgChars.head.indexOfAt(vowels, 1)\n     \
    \       val firstLetter = msgChars.head.charAt(firstVowel)\n            val secondLetter\
    \ = msgChars.head.charAt(secondVowel)\n            msgChars = msgChars.tail.take(2).flatMap(x\
    \ => ArrayBuffer(x.charAt(0), x.charAt(1))).distinct\n            encoded += firstLetter\
    \ + secondLetter\n        }\n        encoded\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa7g83ikd.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mmsgChars\e[0m = mutable.ArrayBuffer(message.toLowerCase.map(_.toChar))\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val replaced = message.toLowerCase \n        val chars\
    \ = mutable.ListBuffer.empty[Char]\n        var currentIndex = 0\n        var\
    \ currentLetter = replaced.charAt(currentIndex)\n        while (currentIndex <\
    \ replaced.length) {\n            val nextLetter = replaced.charAt(currentIndex\
    \ + 1)\n            if (currentLetter == 'A' || currentLetter == 'E' || \n   \
    \             currentLetter == 'I' || currentLetter == 'O' || \n             \
    \   currentLetter == 'U' || currentLetter == 'a'){\n                if (nextLetter\
    \ == 'A' || nextLetter == 'E' || \n                    nextLetter == 'I' || nextLetter\
    \ == 'O' || \n                    nextLetter == 'U' || nextLetter == 'a'){\n \
    \                   chars.append(nextLetter)\n                } else {\n     \
    \               chars.append(currentLetter)\n                }\n             \
    \   currentIndex += 1\n                currentLetter = replaced.charAt(currentIndex)\n\
    \            } else if (currentLetter == 'B' || currentLetter == 'C' || \n   \
    \             currentLetter == 'D' || currentLetter == 'F' || \n             \
    \   currentLetter == 'G' || currentLetter == 'h' || \n                currentLetter\
    \ == 'j' || currentLetter == 'k' || \n                currentLetter == 'l' ||\
    \ currentLetter == 'm' || \n                currentLetter == 'n' || currentLetter\
    \ == 'p' || \n                currentLetter == 'q' || currentLetter == 'r' ||\
    \ \n                currentLetter == 's' || currentLetter == 't' || \n       \
    \         currentLetter == 'v' || currentLetter == 'w' || \n                currentLetter\
    \ == 'y') {\n                if (nextLetter == 'B' || nextLetter == 'C' || \n\
    \                    nextLetter == 'D' || nextLetter == 'F' || \n            \
    \        nextLetter == 'G' || nextLetter == 'h' || \n                    nextLetter\
    \ == 'j' || nextLetter == 'k' || \n                    nextLetter == 'l' || nextLetter\
    \ == 'm' || \n                    nextLetter == 'n' || nextLetter == 'p' || \n\
    \                    nextLetter == 'q' || nextLetter == 'r' || \n            \
    \        nextLetter == 's' || nextLetter == 't' || \n                    nextLetter\
    \ == 'v' || nextLetter == 'w' || \n                    nextLetter == 'y'){\n \
    \                   chars.append(nextLetter)\n                } else {\n     \
    \               chars.append(currentLetter)\n                }\n             \
    \   currentIndex += 1\n                currentLetter = replaced.charAt(currentIndex)\n\
    \            } else if (currentLetter == 'C' || currentLetter == 'D' || \n   \
    \             currentLetter == 'F' || currentLetter == 'G' || \n             \
    \   currentLetter == 'h' || currentLetter == 'j' || \n                currentLetter\
    \ == 'k' || currentLetter == 'l' || \n                currentLetter == 'm' ||\
    \ currentLetter == 'n' || \n                currentLetter == 'p' || currentLetter\
    \ == 'q' || \n                currentLetter == 'r' || currentLetter == 's' ||\
    \ \n                currentLetter\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_8wykyts.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_8wykyts.scala:77:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m77 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp_8wykyts.scala:16:20 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_8wykyts.scala:66:16 --------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m                currentLetter\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:   \
    \ (currentLetter : Char)\n\e[31m   |\e[0m                Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8wykyts.scala:76:1\
    \ ---------------------\e[0m\e[0m\n\e[31m76 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp_8wykyts.scala:68:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m68 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659979128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var buffer = new mutable.StringBuilder()\n        var\
    \ pos = 1\n        for(char <- message.toCharArray) {\n            if(Character.isLetter(char))\
    \ {\n                while(pos < message.length && Character.isLetter(message.charAt(pos)))\
    \ {\n                    pos = pos + 1\n                }\n                buffer.append(message.substring(0,pos)\
    \ + \n                               (if(message.charAt(pos) == 'A') 'B' \n  \
    \                                  else if(message.charAt(pos) == 'E') 'F' \n\
    \                                    else if(message.charAt(pos) == 'I') 'J' \n\
    \                                    else if(message.charAt(pos) == 'O') 'P' \n\
    \                                    else if(message.charAt(pos) == 'U') 'T' \n\
    \                                    else 'A'))\n                buffer.append(message.substring(pos,pos\
    \ + 1))\n                pos = pos + 1\n            }\n        }\n        if(buffer.length()\
    \ > 0)\n            buffer.append(message.substring(0,pos))\n        buffer.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_njsec63.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mbuffer\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val s = mutable.StringBuilder(message) \n        for(i\
    \ <- 0 until s.length) { \n            val c = s.charAt(i) \n            if( c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U' ) {\n                s.insert(i, c.toUpperCase)\
    \ \n            }\n            if( c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' ) {\n                s.insert(i, c.toLowerCase) \n            }\n\
    \        }\n        s.toString()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6w6g41gl.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = mutable.StringBuilder(message)\
    \ \n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        //Define a list that has the english alphabet and all\
    \ vowels\n        var list = List(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"\
    H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"\
    U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"\
    h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"\
    u\",\"v\",\"w\",\"x\",\"y\",\"z\")\n        //Define a list that contains the\
    \ vowels in the message\n        var vowels = List(\"a\",\"e\",\"i\",\"o\",\"\
    u\")\n        var res = \"\"\n        //Loop through each character in the message\n\
    \        for (i <- 0 until message.length) {\n            //If the character is\
    \ a vowel\n            if (vowels.contains(message.charAt(i))) {\n           \
    \     //Set the result to an empty string\n                res = \"\"\n      \
    \          //Loop through each character in the english alphabet\n           \
    \     for (j <- 0 until list.length) {\n                    //If the character\
    \ is equal or greater by 2 with the vowel\n                    if (message.charAt(i)\
    \ == list(j)) {\n                        //Add the character at the location j\
    \ + 1 in the result\n                        res += list(j + 1)\n            \
    \        //If the character is equal or less by 2 with the vowel\n           \
    \         } else if (message.charAt(i) < list(j)) {\n                        //Add\
    \ the character at the location j - 2 in the result\n                        res\
    \ += list(j - 2)\n                    }\n                }\n                //Append\
    \ the result to the result\n                res += \" \"\n            } else {\n\
    \                //Append the character to the result\n                res +=\
    \ message.charAt(i)\n            }\n        }\n        //Return the result\n \
    \       res\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmph5u5dwcb.scala:29:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    \e[33mif\e[0m (message.charAt(i)\
    \ == list(j)) {\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmph5u5dwcb.scala:33:49\
    \ -----------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                   \
    \ } \e[33melse\e[0m \e[33mif\e[0m (message.charAt(i) < list(j)) {\n\e[31m\e[31m\
    \   |\e[0m                               ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m<\e[0m in \e\
    [33mclass\e[0m \e[35mChar\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\
    \e[31m   |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m\
    \   |\e[0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e\
    [0m (x: Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch\
    \ arguments (String)\n2 errors found\n"
  stdout: ''
  timestamp: 1659979128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val m = message.toLowerCase().filter(x => x.isLetter)\n\
    \        val a = m.filter(_ == 'a')\n        val b = m.filter(_ == 'b')\n    \
    \    val c = m.filter(_ == 'c')\n        val d = m.filter(_ == 'd')\n        val\
    \ e = m.filter(_ == 'e')\n        val f = m.filter(_ == 'f')\n        val g =\
    \ m.filter(_ == 'g')\n        val h = m.filter(_ == 'h')\n        val i = m.filter(_\
    \ == 'i')\n        val j = m.filter(_ == 'j')\n        val k = m.filter(_ == 'k')\n\
    \        val l = m.filter(_ == 'l')\n        val m = m.filter(_ == 'm')\n    \
    \    val n = m.filter(_ == 'n')\n        val o = m.filter(_ == 'o')\n        val\
    \ p = m.filter(_ == 'p')\n        val q = m.filter(_ == 'q')\n        val r =\
    \ m.filter(_ == 'r')\n        val s = m.filter(_ == 's')\n        val t = m.filter(_\
    \ == 't')\n        val u = m.filter(_ == 'u')\n        val v = m.filter(_ == 'v')\n\
    \        val w = m.filter(_ == 'w')\n        val x = m.filter(_ == 'x')\n    \
    \    val y = m.filter(_ == 'y')\n        val z = m.filter(_ == 'z')\n        val\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\".toCharArray\n        var c = 0\n \
    \       var i = 2\n        var l = m.size\n        while(i < l) {\n          \
    \  c += m(i).toString.length\n            i += 1\n        }\n        var res =\
    \ \"\"\n        while(c > 0) {\n            if(c % 2 != 0) {\n               \
    \ res += alphabet[c(0) - 1]\n            }\n            c -= 1\n        }\n  \
    \      while(c > 0) {\n            if(c % 2 == 0) {\n                res += alphabet[c(0)\
    \ - 1]\n            }\n            c -= 1\n        }\n        res = res.reverse\n\
    \        res = m.filter(x => !x.isLetter).mkString(\"\") + res\n        res.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz36gi9ti.scala:53:33 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m                res += alphabet[\e[35mc\e[0m(\e[31m0\e\
    [0m) - \e[31m1\e[0m]\n\e[31m\e[31m   |\e[0m                                 ^\e\
    [0m\n\e[31m   |\e[0m                                 ']' expected, but '(' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz36gi9ti.scala:59:33 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m                res += alphabet[\e[35mc\e[0m(\e[31m0\e\
    [0m) - \e[31m1\e[0m]\n\e[31m\e[31m   |\e[0m                                 ^\e\
    [0m\n\e[31m   |\e[0m                                 ']' expected, but '(' found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz36gi9ti.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.filter(_ == \e\
    [31m'm'\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz36gi9ti.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mc\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mc is already defined as \e[33mvalue\e[0m \e[35mc\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz36gi9ti.scala:44:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mi\e[0m = \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mi is already defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz36gi9ti.scala:45:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mvar\e[0m\
    \ \e[36ml\e[0m = m.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0ml is already defined as \e[33mvalue\e[0m \e[35ml"
  stdout: ''
  timestamp: 1659979131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n      val messageChars = message.toList\n      val vowels = \"\
    aeiouAEIOU\".toList\n      val vowelsIndexes = vowels.zipWithIndex.toMap\n   \
    \   val vowelsAhead = \"aeiou\".zipWithIndex.filter(x => x._2 > 0).map(_._1).reverse.map(vowelsIndexes.get).flatten.filter(x\
    \ => x != -1).map(vowelsIndexes.get).flatten.map(x => x + (x-1))\n      val replacementMap\
    \ = vowelsAhead.zip(vowelsIndexes.map(_._2)).groupBy(x => x).mapValues(x => x(0))\n\
    \      messageChars.map( c => replacementMap.get(c).map(_ => c).reduceLeft((x,y)\
    \ => x.toChar + y.toChar) ).mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4qey097o.scala:18:141\
    \ -------------------\e[0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m \e[36mvowelsAhead\e\
    [0m = \e[31m\"aeiou\"\e[0m.zipWithIndex.filter(\e[36mx\e[0m => x._2 > \e[31m0\e\
    [0m).map(_._1).reverse.map(vowelsIndexes.get).flatten.filter(\e[36mx\e[0m => x\
    \ != -\e[31m1\e[0m).map(vowelsIndexes.get).flatten.map(\e[36mx\e[0m => x + (x-\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \                                                                            \
    \                       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                             Found:    \e[1m\e[31mChar\e[0m => Option[Int]\n\e\
    [31m   |\e[0m                                           Required: \e[1m\e[32mInt\e\
    [0m => Option[Int]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4qey097o.scala:20:48\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m      messageChars.map( \e[36mc\e\
    [0m => replacementMap.get(c).map(_ => c).reduceLeft((\e[36mx\e[0m,\e[36my\e[0m)\
    \ => x.toChar + y.toChar) ).mkString\n\e[31m\e[31m   |\e[0m                  \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                         Found:    (c : Char)\n\e[31m   |\e[0m              \
    \                                  Required: (Int, Int)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4qey097o.scala:20:83 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      messageChars.map( \e[36mc\e[0m => replacementMap.get(c).map(_\
    \ => c).reduceLeft((\e[36mx\e[0m,\e[36my\e[0m) => x.toChar + y.toChar) ).mkString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                                  Found:    Int\n\e[31m   |\e\
    [0m                                                          Required: Char\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling w"
  stdout: ''
  timestamp: 1659979132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toList\n        val consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\".toList\n        val vowelsAndConsonants = vowels.map(_\
    \ -> consonants)\n        val vowelsAndConsonantsMap = vowelsAndConsonants.toMap\n\
    \        val consonantsAndVowels = consonants.map(_ -> vowels)\n        val consonantsAndVowelsMap\
    \ = consonantsAndVowels.toMap\n        val translatedMessage = message.flatMap(chars\
    \ => chars.map(c => (c, consonantsAndVowelsMap(c)))).groupBy(_._2).mapValues(_.map(_._1)).mapValues(_.map(_._2))\n\
    \        val translatedMessageMap = translatedMessage.toMap\n        translatedMessage.map(_.map\
    \ { \n            case \"a\" -> vowelsAndConsonantsMap(\"a\"); \n            case\
    \ \"e\" -> vowelsAndConsonantsMap(\"e\"); \n            case \"i\" -> vowelsAndConsonantsMap(\"\
    i\");\n            case \"o\" -> vowelsAndConsonantsMap(\"o\");\n            case\
    \ \"u\" -> vowelsAndConsonantsMap(\"u\");\n            case \"A\" -> vowelsAndConsonantsMap(\"\
    A\");\n            case \"E\" -> vowelsAndConsonantsMap(\"E\");\n            case\
    \ \"I\" -> vowelsAndConsonantsMap(\"I\");\n            case \"O\" -> vowelsAndConsonantsMap(\"\
    O\");\n            case \"U\" -> vowelsAndConsonantsMap(\"U\");\n            case\
    \ _ -> consonantsAndVowelsMap(_)\n        }).mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpymgqgdor.scala:24:51 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m \e[31m\"a\"\e[0m -> vowelsAndConsonantsMap(\e\
    [31m\"a\"\e[0m); \n\e[31m\e[31m   |\e[0m                                     \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \     '=>' expected, but ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpymgqgdor.scala:25:51\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mcase\e\
    [0m \e[31m\"e\"\e[0m -> vowelsAndConsonantsMap(\e[31m\"e\"\e[0m); \n\e[31m\e[31m\
    \   |\e[0m                                                   ^\e[0m\n\e[31m  \
    \ |\e[0m                                            '=>' expected, but ';' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpymgqgdor.scala:26:51 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mcase\e[0m \e[31m\"i\"\e[0m -> vowelsAndConsonantsMap(\e\
    [31m\"i\"\e[0m);\n\e[31m\e[31m   |\e[0m                                      \
    \             ^\e[0m\n\e[31m   |\e[0m                                        \
    \    '=>' expected, but ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpymgqgdor.scala:27:51\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mcase\e\
    [0m \e[31m\"o\"\e[0m -> vowelsAndConsonantsMap(\e[31m\"o\"\e[0m);\n\e[31m\e[31m\
    \   |\e[0m                                                   ^\e[0m\n\e[31m  \
    \ |\e[0m                                            '=>' expected, but ';' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpymgqgdor.scala:28:51 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mcase\e[0m \e[31m\"u\"\e[0m -> vowelsAndConsonantsMap(\e\
    [31m\"u\"\e[0m);\n\e[31m\e[31m   |\e[0m                                      \
    \             ^\e[0m\n\e[31m   |\e[0m                                        \
    \    '=>' expected, but ';' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpymgqgdor.scala:29:51\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mcase\e\
    [0m \e[31m\"A\"\e[0m -> vowelsAndConsonantsMap(\e[31m\"A\"\e[0m);\n\e[31m\e[31m\
    \   |\e[0m                                                   ^\e[0m\n\e[31m  \
    \ |\e[0m "
  stdout: ''
  timestamp: 1659979130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val m = message\n        val newmessage = m.map(x => x.toLowerCase)\n\
    \        val newmessage = newmessage.map(x => x.replaceAll(\"a\", \"@\"))\n  \
    \      val newmessage = newmessage.map(x => x.replaceAll(\"A\", \"a\"))\n    \
    \    val newmessage = newmessage.map(x => x.replaceAll(\"b\", \"@\"))\n      \
    \  val newmessage = newmessage.map(x => x.replaceAll(\"B\", \"b\"))\n        val\
    \ newmessage = newmessage.map(x => x.replaceAll(\"c\", \"@\"))\n        val newmessage\
    \ = newmessage.map(x => x.replaceAll(\"C\", \"c\"))\n        val newmessage =\
    \ newmessage.map(x => x.replaceAll(\"d\", \"@\"))\n        val newmessage = newmessage.map(x\
    \ => x.replaceAll(\"D\", \"d\"))\n        val newmessage = newmessage.map(x =>\
    \ x.replaceAll(\"e\", \"@\"))\n        val newmessage = newmessage.map(x => x.replaceAll(\"\
    E\", \"e\"))\n        val newmessage = newmessage.map(x => x.replaceAll(\"f\"\
    , \"@\"))\n        val newmessage = newmessage.map(x => x.replaceAll(\"F\", \"\
    f\"))\n        val newmessage = newmessage.map(x => x.replaceAll(\"g\", \"@\"\
    ))\n        val newmessage = newmessage.map(x => x.replaceAll(\"G\", \"g\"))\n\
    \        val newmessage = newmessage.map(x => x.replaceAll(\"h\", \"@\"))\n  \
    \      val newmessage = newmessage.map(x => x.replaceAll(\"H\", \"h\"))\n    \
    \    val newmessage = newmessage.map(x => x.replaceAll(\"i\", \"@\"))\n      \
    \  val newmessage = newmessage.map(x => x.replaceAll(\"I\", \"i\"))\n        val\
    \ newmessage = newmessage.map(x => x.replaceAll(\"j\", \"@\"))\n        val newmessage\
    \ = newmessage.map(x => x.replaceAll(\"J\", \"j\"))\n        val newmessage =\
    \ newmessage.map(x => x.replaceAll(\"k\", \"@\"))\n        val newmessage = newmessage.map(x\
    \ => x.replaceAll(\"K\", \"k\"))\n        val newmessage = newmessage.map(x =>\
    \ x.replaceAll(\"l\", \"@\"))\n        val newmessage = newmessage.map(x => x.replaceAll(\"\
    L\", \"l\"))\n        val newmessage = newmessage.map(x => x.replaceAll(\"m\"\
    , \"@\"))\n        val newmessage = newmessage.map(x => x.replaceAll(\"M\", \"\
    m\"))\n        val newmessage = newmessage.map(x => x.replaceAll(\"n\", \"@\"\
    ))\n        val newmessage = newmessage.map(x => x.replaceAll(\"N\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmplqyltdb1.scala:44:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mnewmessage\e[0m = newmessage.map(\e\
    [36mx\e[0m => x.replaceAll(\"N\n\e[31m\e[31m   |\e[0m                        \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                              unclosed string literal\n\e[31m\e[31m-- Error:\
    \ /tmp/tmplqyltdb1.scala:46:34 -----------------------------------------\e[0m\e\
    [0m\n\e[31m46 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                           \
    \       ^\e[0m\n\e[31m   |\e[0m                                 end of statement\
    \ expected but '=' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplqyltdb1.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewmessage\e[0m = newmessage.map(\e[36mx\e[0m => x.replaceAll(\e[31m\"\
    a\"\e[0m, \e[31m\"@\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewmessage is already defined as \e[33mvalue\e[0m \e[35mnewmessage\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplqyltdb1.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnewmessage\e[0m = newmessage.map(\e\
    [36mx\e[0m => x.replaceAll(\e[31m\"A\"\e[0m, \e[31m\"a\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewmessage is already defined as \e[33mvalue\e[0m \e[35mnewmessage\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplqyltdb1.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnewmessage\e[0m = newmessage.map(\e\
    [36mx\e[0m => x.replaceAll(\e[31m\"b\"\e[0m, \e[31m\"@\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659979130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        if (message.length <= 1) message\n        else message(0)\
    \ match {\n            case 'a' => encode(message.tail.map(_.toLowerCase).getOrElse(\"\
    a\"))\n            case 'e' => encode(message.tail.map(_.toUpperCase).getOrElse(\"\
    e\"))\n            case 'i' => encode(message.tail.map(_.toUpperCase).getOrElse(\"\
    i\"))\n            case 'o' => encode(message.tail.map(_.toLowerCase).getOrElse(\"\
    o\"))\n            case 'u' => encode(message.tail.map(_.toUpperCase).getOrElse(\"\
    u\"))\n            case 'A' => encode(message.tail.map(_.toLowerCase).getOrElse(\"\
    A\"))\n            case 'E' => encode(message.tail.map(_.toUpperCase).getOrElse(\"\
    E\"))\n            case 'I' => encode(message.tail.map(_.toUpperCase).getOrElse(\"\
    I\"))\n            case 'O' => encode(message.tail.map(_.toLowerCase).getOrElse(\"\
    O\"))\n            case 'U' => encode(message.tail.map(_.toUpperCase).getOrElse(\"\
    U\"))\n            case '!' => encode(message.tail.map(_.toLowerCase).getOrElse(\"\
    !\"))\n            case _ => \n                message.zipWithIndex.map { \n \
    \                   case (c, i) => \n                        if(i % 2 != 0) c.toLowerCase\n\
    \                        else c.toUpperCase\n                }.mkString(\"\")\
    \ \n        }\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmputqt2aow.scala:17:50 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m \e[31m'a'\e[0m => encode(message.tail.map(_.toLowerCase).getOrElse(\e\
    [31m\"a\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmputqt2aow.scala:18:50 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            \e[33mcase\e[0m \e[31m'e'\e[0m => encode(message.tail.map(_.toUpperCase).getOrElse(\e\
    [31m\"e\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmputqt2aow.scala:19:50 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            \e[33mcase\e[0m \e[31m'i'\e[0m => encode(message.tail.map(_.toUpperCase).getOrElse(\e\
    [31m\"i\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmputqt2aow.scala:20:50 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            \e[33mcase\e[0m \e[31m'o'\e[0m => encode(message.tail.map(_.toLowerCase).getOrElse(\e\
    [31m\"o\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmputqt2aow.scala:21:50 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            \e[33mcase\e[0m \e[31m'u'\e[0m => encode(message.tail.map(_.toUpperCase).getOrElse(\e\
    [31m\"u\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmputqt2aow.scala:22:50 ------------------------\e[0m\e[0m\n\e[31m22 |"
  stdout: ''
  timestamp: 1659979133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val messageWords = message.split(\" \").map(_.toLowerCase).toList\n\
    \        val codeWords = messageWords.map(word => {\n            val codeWord\
    \ = word.map(letter => {\n                val position = letter.toInt - 1\n  \
    \              val codeIndex = math.max(0, position)\n                val codeWord\
    \ = if (codeIndex == 0) letter else codeWord(codeIndex - 1) + letter\n       \
    \         codeWord\n            })\n            codeWord.mkString(\"\")\n    \
    \    })\n        codeWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz7k76g1m.scala:20:63 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36mcodeWord\e[0m =\
    \ \e[33mif\e[0m (codeIndex == \e[31m0\e[0m) letter \e[33melse\e[0m codeWord(codeIndex\
    \ - \e[31m1\e[0m) + letter\n\e[31m\e[31m   |\e[0m                            \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                   Recursive \e[33mvalue\e[0m \e[35mcodeWord\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // Split the message into characters\n        val letters\
    \ = message.chars\n        // Iterate through each character and swap case\n \
    \       for (c <- letters) {\n            val char1 = c.toUpper\n            val\
    \ char2 = c.toLower\n            val newChar = char1.toChar + (2 * char2.toChar)\n\
    \            letters = letters.updated(c, newChar)\n        }\n        // Combine\
    \ with vowel\n        letters + \"V\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp2_s1h4z.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (c <- letters) {\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue foreach is not\
    \ a member of java.util.stream.IntStream - did you mean letters.forEach?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpp2_s1h4z.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        letters + \e[31m\"V\"\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of java.util.stream.IntStream,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val map = mutable.HashMap.empty[Char, String]\n      \
    \  for (ch <- message) {\n            val mappedChar = ch.toUpperCase\n      \
    \      val firstLetter = mappedChar.charAt(0)\n            val secondLetter =\
    \ mappedChar.charAt(1)\n            if (map.contains(firstLetter)) {\n       \
    \         map += firstLetter -> map.get(firstLetter) + secondLetter\n        \
    \    } else {\n                map += firstLetter -> mappedChar\n            }\n\
    \        }\n        val result = new StringBuilder\n        for (entry <- map.toIterable.sorted)\
    \ {\n            result.append(entry._2)\n            result.append(entry._1)\n\
    \        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv8ji_yih.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.HashMap.empty[\e\
    [35mChar\e[0m, \e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpv8ji_yih.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mmappedChar\e[0m = ch.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             value toUpperCase is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var result = \"\"\n        for (letter <- message) {\n\
    \            result += (letter.toString.toLowerCase().replace(vowels, \"X\")\n\
    \                     + vowels.zip(vowels.tail).map(x => x._1 + \"X\" + x._2).mkString(\"\
    \") + letter)\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgo6z8u7y.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            result += (letter.toString.toLowerCase().replace(vowels,\
    \ \e[31m\"X\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            value += is not a member of String - did you mean String.!=?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgo6z8u7y.scala:17:61 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            result += (letter.toString.toLowerCase().replace(vowels,\
    \ \e[31m\"X\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                          ^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                                 Not found: vowels\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgo6z8u7y.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                     + vowels.zip(vowels.tail).map(\e\
    [36mx\e[0m => x._1 + \e[31m\"X\"\e[0m + x._2).mkString(\e[31m\"\"\e[0m) + letter)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                  Not found: vowels\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val newMessage = message.replaceAll(\"\\\\p{L}\", \"\"\
    ) //remove all letters from message\n        newMessage.replaceAll(\"a|e|i|o|u|y\"\
    , \"$0\") //replace vowels with nothing\n        val alphabet = List(\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\")\n        val newMessageArray = newMessage.split(\"\").toArray\n\
    \        val letterCounts = mutable.Map[Char,Int]()\n        for (letter <- newMessageArray)\
    \ {\n            if (alphabet.contains(letter)) { //letter exists in alphabet\n\
    \                if (letterCounts.getOrElse(letter, 0) == 0) letterCounts += (letter\
    \ -> (letterCounts.getOrElse(letter, 0) + 1)) //add first occurrence of this letter\n\
    \                else if (letterCounts.getOrElse(letter, 0) == 2) letterCounts\
    \ += (letter -> (letterCounts.getOrElse(letter, 1) - 1)) //remove second occurrence\
    \ of this letter\n                else {\n                    letterCounts +=\
    \ (letter -> (letterCounts.getOrElse(letter, 0) + 1)) //add second occurrence\
    \ of this letter\n                }\n            }\n        }\n        var res\
    \ = \"\"\n        for (letter <- letterCounts.keys) {\n            res += alphabet.take(letterCounts(letter))(letterCounts(letter))\
    \ + letter\n        }\n        res\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxr66hc81.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mletterCounts\e[0m = mutable.Map[\e\
    [35mChar\e[0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n       var result = message\n       val vowels = \"aeiouAEIOU\"\
    \n       val aIndex = vowels.indexOf(\"a\")\n       val oIndex = vowels.indexOf(\"\
    o\")\n       val uIndex = vowels.indexOf(\"u\")\n       val resultList = message.split(\"\
    \").map(_.toUpperCase)\n       var count = 1\n       val vowelCount = message.split(\"\
    \").count(x => vowels.contains(x))\n       val vowelIndex = (message.split(\"\"\
    ).count(x => vowels.contains(x)) to vowelCount)\n       val firstVowel = vowelIndex.take(vowelIndex.size\
    \ +1)\n       firstVowel.foreach{x =>\n          val firstLetter = message.substring(vowelIndex.indexOf(x)\
    \ + vowelIndex.indexOf(x) + 1,aIndex)\n          val secondLetter = message.substring(vowelIndex.indexOf(x)\
    \ + vowelIndex.indexOf(x) + 1,oIndex)\n          val thirdLetter = message.substring(vowelIndex.indexOf(x)\
    \ + vowelIndex.indexOf(x) + 1,uIndex)\n          result = result.replaceAll(vowels,firstLetter)\n\
    \          result = result.replaceAll(vowels,secondLetter)\n          result =\
    \ result.replaceAll(vowels,thirdLetter)\n          count += 1\n        }\n   \
    \     result = result.replace(\" \",\"\")\n        result = result.toUpperCase\n\
    \        return result + \" \" + count + \" \" + vowelCount + \" \" + vowelIndex.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 4\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.encode$$anonfun$1(tmpczkebkw5.scala:26)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.encode(tmpczkebkw5.scala:32)\n\
    \tat Problem$.main(tmpczkebkw5.scala:39)\n\tat Problem.main(tmpczkebkw5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"AEIOU\"\n        val lower = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelIndexes = lower\n            .map(v => (v, vowels.indexOf(v)))\n\
    \            .toMap\n        val message = message.toLowerCase\n        var output\
    \ = new StringBuilder\n        var vowelIndex = 0\n        for (i <- 0 until message.length){\n\
    \            val char = message.charAt(i)\n            // Swap the case of all\
    \ letters in the message\n            var c = char.toLowerCase\n            var\
    \ pos = 0\n            var newChar = char\n            for (j <- 0 until vowelIndexes.length){\n\
    \                val v = vowelIndexes.getOrElse(j,-1)\n                if (v ==\
    \ pos && newChar.equals(vowels)){\n                    newChar = vowels.charAt(v)\n\
    \                }\n                pos = v\n            }\n            output\
    \ += newChar\n            vowelIndex += 1\n        }\n        return output.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc0gihu1h.scala:20:22 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmessage\e[0m = message.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvalue\e[0m \e[35mmessage\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc0gihu1h.scala:29:43 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m until vowelIndexes.length){\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          value length is not a member of Map[Char,\
    \ Int]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc0gihu1h.scala:30:47\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m                \e[33mval\e[0m\
    \ \e[36mv\e[0m = vowelIndexes.getOrElse(j,-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                         Found:    (j : Int)\n\e[31m   |\e[0m\
    \                                               Required: Char\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n      \
    \  val vowels = \"AEIOU\"\n\n        var newMessage = \"\"\n\n        for (letter\
    \ <- message) {\n            val index = alphabet.indexOf(letter)\n          \
    \  if (index != -1) {\n                val letter1 = alphabet(index - 2)\n   \
    \             val letter2 = alphabet(index - 1)\n                newMessage +=\
    \ (letter1 + \"2\" + letter2)\n            } else {\n                newMessage\
    \ += letter\n            }\n        }\n        for (v <- vowels) {\n         \
    \   newMessage = newMessage.replaceAll(v, \"a\")\n        }\n        return newMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzq8fpdy8.scala:31:47\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            newMessage = newMessage.replaceAll(v,\
    \ \e[31m\"a\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \            ^\e[0m\n\e[31m   |\e[0m                                         \
    \      Found:    (v : Char)\n\e[31m   |\e[0m                                 \
    \              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var encodedMessage : String = \"\"\n        message foreach\
    \ {\n           letter =>\n            if (letter ==='A' || letter ==='a') encodedMessage\
    \ += \"T\"\n            if (letter ==='B' || letter ==='b') encodedMessage +=\
    \ \"K\"\n            if (letter ==='C' || letter ==='c') encodedMessage += \"\
    S\"\n            if (letter ==='D' || letter ==='d') encodedMessage += \"H\"\n\
    \            if (letter ==='E' || letter ==='e') encodedMessage += \"A\"\n   \
    \         if (letter ==='F' || letter ==='f') encodedMessage += \"B\"\n      \
    \      if (letter ==='G' || letter ==='g') encodedMessage += \"V\"\n         \
    \   if (letter ==='H' || letter ==='h') encodedMessage += \"D\"\n            if\
    \ (letter ==='I' || letter ==='i') encodedMessage += \"E\"\n            if (letter\
    \ ==='J' || letter ==='j') encodedMessage += \"G\"\n            if (letter ==='K'\
    \ || letter ==='k') encodedMessage += \"C\"\n            if (letter ==='L' ||\
    \ letter ==='l') encodedMessage += \"I\"\n            if (letter ==='M' || letter\
    \ ==='m') encodedMessage += \"F\"\n            if (letter ==='N' || letter ==='n')\
    \ encodedMessage += \"J\"\n            if (letter ==='O' || letter ==='o') encodedMessage\
    \ += \"H\"\n            if (letter ==='P' || letter ==='p') encodedMessage +=\
    \ \"N\"\n            if (letter ==='Q' || letter ==='q') encodedMessage += \"\
    O\"\n            if (letter ==='R' || letter ==='r') encodedMessage += \"P\"\n\
    \            if (letter ==='S' || letter ==='s') encodedMessage += \"B\"\n   \
    \         if (letter ==='T' || letter ==='t') encodedMessage += \"A\"\n      \
    \      if (letter ==='U' || letter ==='u') encodedMessage += \"H\"\n         \
    \   if (letter ==='V' || letter ==='v') encodedMessage += \"G\"\n            if\
    \ (letter ==='W' || letter ==='w') encodedMessage += \"V\"\n            if (letter\
    \ ==='X' || letter ==='x') encodedMessage += \"N\"\n            if (letter ==='Y'\
    \ || letter ==='y') encodedMessage += \"T\"\n            if (letter ==='Z' ||\
    \ letter ==='z') encodedMessage += \"K\"\n        }\n        encodedMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpep2te6c2.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (letter ===\e[31m'A'\e[0m ||\
    \ letter ===\e[31m'a'\e[0m) encodedMessage += \e[31m\"T\"\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value ===\
    \ is not a member of Char - did you mean letter.==?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpep2te6c2.scala:19:23 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m            \e[33mif\e[0m (letter ===\e[31m'B'\e[0m || letter ===\e\
    [31m'b'\e[0m) encodedMessage += \e[31m\"K\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value === is not a member\
    \ of Char - did you mean letter.==?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpep2te6c2.scala:20:23\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m\
    \ (letter ===\e[31m'C'\e[0m || letter ===\e[31m'c'\e[0m) encodedMessage += \e\
    [31m\"S\"\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m             value === is not a member of Char - did you mean letter.==?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpep2te6c2.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (letter ===\e[31m'D'\e[0m ||\
    \ letter ===\e[31m'd'\e[0m) encodedMessage += \e[31m\"H\"\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value ===\
    \ is not a member of Char - did you mean letter.==?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpep2te6c2.scala:22:23 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m            \e[33mif\e[0m (letter ===\e[31m'E'\e[0m || letter ===\e\
    [31m'e'\e[0m) encodedMessage += \e[31m\"A\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value === is not a member\
    \ of Char - did you mean letter.==?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpep2te6c2.scala:23:23\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m\
    \ (letter ===\e[31m'F'\e[0m || letter ===\e[31m'f'\e[0m) encodedMessage += \e\
    [31m\"B\"\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m   "
  stdout: ''
  timestamp: 1659979139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowel = \"AEIOUaeiou\"\n        val replacements =\
    \ List(\"A\" -> \"E\", \"E\" -> \"A\", \"I\" -> \"O\", \"O\" -> \"I\")\n     \
    \   val newMessage = for (letter <- message) yield letter match {\n          \
    \  case c if vowel.contains(c) => replacements.getOrElse(c, c)\n            case\
    \ c => c\n        }\n        return newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiixlfmk3.scala:18:56 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m c \e[33mif\e[0m vowel.contains(c)\
    \ => replacements.getOrElse(c, c)\n\e[31m\e[31m   |\e[0m                     \
    \                      ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \     value getOrElse is not a member of List[(String, String)]\n1 error found\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val messageLength = message.length\n        if (messageLength\
    \ == 0) {\n            \"\"\n        } else {\n            def vowelMap : mutable.Map[String,\
    \ String] = mutable.HashMap(\"a\" -> \"B\", \"e\" -> \"E\", \"i\" -> \"I\", \"\
    o\" -> \"O\", \"u\" -> \"U\", \"y\" -> \"Y\")\n            val mapVowels = message.zip(vowelMap)\n\
    \            def swapChars(s : String) : String = {\n                s.toList.foldLeft(\"\
    \") { (c, c2) =>\n                    if (c != c2._1) {\n                    \
    \    c + \"-\" + c2._2\n                    } else {\n                       \
    \ c\n                    }\n                }\n            }\n            val\
    \ vowelMap2 = mapVowels.toList.zip(mapVowels.toList).map(t => t._1 + t._2).map(swapChars)\n\
    \            val alphabet = Map(1 -> \"A\", 2 -> \"B\", 3 -> \"C\", 4 -> \"D\"\
    , 5 -> \"E\", 6 -> \"F\", 7 -> \"G\", 8 -> \"H\", 9 -> \"I\", 10 -> \"J\", 11\
    \ -> \"K\", 12 -> \"L\", 13 -> \"M\", 14 -> \"N\", 15 -> \"O\", 16 -> \"P\", 17\
    \ -> \"Q\", 18 -> \"R\", 19 -> \"S\", 20 -> \"T\", 21 -> \"U\", 22 -> \"V\", 23\
    \ -> \"W\", 24 -> \"X\", 25 -> \"Y\", 26 -> \"Z\")\n            val alphabet2\
    \ = Map(1 -> \"a\", 2 -> \"b\", 3 -> \"c\", 4 -> \"d\", 5 -> \"e\", 6 -> \"f\"\
    , 7 -> \"g\", 8 -> \"h\", 9 -> \"i\", 10 -> \"j\", 11 -> \"k\", 12 -> \"l\", 13\
    \ -> \"m\", 14 -> \"n\", 15 -> \"o\", 16 -> \"p\", 17 -> \"q\", 18 -> \"r\", 19\
    \ -> \"s\", 20 -> \"t\", 21 -> \"u\", 22 -> \"v\", 23 -> \"w\", 24 -> \"x\", 25\
    \ -> \"y\", 26 -> \"z\")\n            def decode(s2 : String) : String = {\n \
    \               s2.toList.foldLeft(\"\") { (c, c2) => {\n                    if\
    \ (c == \"-\") {\n                        c\n                    } else {\n  \
    \                      val index = c2.toInt - 1\n                        if (alphabet2.containsKey(index))\
    \ {\n                            c + alphabet2(index)\n                      \
    \  } else {\n                            c\n                        }\n      \
    \              }\n                }}\n            }\n            val \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpozvfdxue.scala:47:15 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpozvfdxue.scala:58:0 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpozvfdxue.scala:19:27\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mdef\e[0m\
    \ \e[36mvowelMap\e[0m : mutable.Map[\e[35mString\e[0m, \e[35mString\e[0m] = mutable.HashMap(\e\
    [31m\"a\"\e[0m -> \e[31m\"B\"\e[0m, \e[31m\"e\"\e[0m -> \e[31m\"E\"\e[0m, \e[31m\"\
    i\"\e[0m -> \e[31m\"I\"\e[0m, \e[31m\"o\"\e[0m -> \e[31m\"O\"\e[0m, \e[31m\"u\"\
    \e[0m -> \e[31m\"U\"\e[0m, \e[31m\"y\"\e[0m -> \e[31m\"Y\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpozvfdxue.scala:19:57 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            \e[33mdef\e[0m \e[36mvowelMap\e[0m : mutable.Map[\e[35mString\e\
    [0m, \e[35mString\e[0m] = mutable.HashMap(\e[31m\"a\"\e[0m -> \e[31m\"B\"\e[0m,\
    \ \e[31m\"e\"\e[0m -> \e[31m\"E\"\e[0m, \e[31m\"i\"\e[0m -> \e[31m\"I\"\e[0m,\
    \ \e[31m\"o\"\e[0m -> \e[31m\"O\"\e[0m, \e[31m\"u\"\e[0m -> \e[31m\"U\"\e[0m,\
    \ \e[31m\"y\"\e[0m -> \e[31m\"Y\"\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                                 Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpozvfdxue.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mif\e[0m (c != c2._1) {\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                           value _1 is not a member of Char\n\e["
  stdout: ''
  timestamp: 1659979140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // Code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxg94n979.scala:14:44\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mencode\e\
    [0m(\e[36mmessage\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                            ^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Unit\n\e[31m   |\e[0m\
    \                                            Required: String\n\e[31m15 |\e[0m\
    \        \e[34m// Code here\e[0m\n\e[31m16 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n       message.map(x => x.toUpperCase)\n          .replaceAll(\"\
    [AEIOUaeiou]\",\"\")\n          .replaceAll(\"[aeiou]\",x => x.charAt(0) + x.charAt(1))\n\
    \          .replaceAll(\"[aeiouAEIOU]\",\"\")\n          .toUpperCase\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmouv1zfp.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m       message.map(\e[36mx\e[0m => x.toUpperCase)\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // Initialize a list to hold the new letters\n       \
    \ var newLetters : List[String] = Nil\n        // Iterate over the message\n \
    \       for (i <- 0 until message.length) {\n            // If the character is\
    \ a letter\n            if (Character.isLetter(message.charAt(i))) {\n       \
    \         // Initialize a mutable set to hold the vowels so far\n            \
    \    var vowels : mutable.Set[Char] = mutable.Set('a', 'e', 'i', 'o', 'u')\n \
    \               // Iterate over the vowels, checking each against the character\n\
    \                for (j <- 0 until vowels.size) {\n                    // If the\
    \ vowel is the same as the current character\n                    if (vowels(j)\
    \ == message.charAt(i)) {\n                        // Add it back to the vowels\
    \ set\n                        vowels += message.charAt(i + 1)\n             \
    \       }\n                }\n                // Append the vowels to the list\n\
    \                newLetters = newLetters :+ vowels.mkString\n            }\n \
    \       }\n        // Return the new letters list\n        newLetters.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptn831x_q.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mvar\e[0m \e[36mvowels\e[0m : mutable.Set[\e\
    [35mChar\e[0m] = mutable.Set(\e[31m'a'\e[0m, \e[31m'e'\e[0m, \e[31m'i'\e[0m, \e\
    [31m'o'\e[0m, \e[31m'u'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptn831x_q.scala:22:49\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mvar\e\
    [0m \e[36mvowels\e[0m : mutable.Set[\e[35mChar\e[0m] = mutable.Set(\e[31m'a'\e\
    [0m, \e[31m'e'\e[0m, \e[31m'i'\e[0m, \e[31m'o'\e[0m, \e[31m'u'\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                 ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                 Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a' to 'z', 'A' to 'Z')\n        val\
    \ vowels = List('a', 'e', 'i', 'o', 'u')\n        val replacement = List('b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'z')\n        val swapped = message map (ch => \n            if (ch\
    \ in vowels) ch \n            else (if (ch in alphabet) replacement\n        \
    \        else (if (ch == 'a') 'b' \n                    else if (ch == 'e') 'c'\
    \ \n                    else if (ch == 'i') 'd' \n                    else if\
    \ (ch == 'o') 'f' \n                    else if (ch == 'u') 'g' \n           \
    \         else if (ch == 'A') 'B' \n                    else if (ch == 'E') 'C'\
    \ \n                    else if (ch == 'I') 'D' \n                    else if\
    \ (ch == 'O') 'F' \n                    else if (ch == 'U') 'G' \n           \
    \         else (if (ch == 'a') 'h' \n                    else if (ch == 'e') 'j'\
    \ \n                    else if (ch == 'i') 'k' \n                    else if\
    \ (ch == 'o') 'l' \n                    else if (ch == 'u') 'm' \n           \
    \         else if (ch == 'A') 'H' \n                    else if (ch == 'E') 'J'\
    \ \n                    else if (ch == 'I') 'K' \n                    else if\
    \ (ch == 'O') 'L' \n                    else if (ch == 'U') 'M' \n           \
    \         else (if (ch == 'a') 'n' \n                    else if (ch == 'e') 'p'\
    \ \n                    else if (ch == 'i') 'q' \n                    else if\
    \ (ch == 'o') 'r' \n                    else if (ch == 'u') 's' \n           \
    \         else if (ch == 'A') 'N' \n                    else if (ch == 'E') 'P'\
    \ \n                    else if (ch == 'I') 'Q' \n                    else if\
    \ (ch == 'O') 'R' \n                    else if (ch == 'U') 'S' \n           \
    \         else ch)))\n\n        swapped mkString \"\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz6j5yzx8.scala:53:25 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        swapped mkString \e[31m\"\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                   \
    \      ')' expected, but string literal found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpz6j5yzx8.scala:19:19 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            \e[33mif\e[0m (ch in vowels) ch \n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                value in is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz6j5yzx8.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33melse\e\
    [0m (\e[33mif\e[0m (ch in alphabet) replacement\n\e[31m\e[31m   |\e[0m       \
    \               ^^^^^\e[0m\n\e[31m   |\e[0m                      value in is not\
    \ a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz6j5yzx8.scala:53:8\
    \ -------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33melse\e\
    [0m (\e[33mif\e[0m (ch == \e[31m'a'\e[0m) \e[31m'b'\e[0m \n\e[31m22 |\e[0m   \
    \                 \e[33melse\e[0m \e[33mif\e[0m (ch == \e[31m'e'\e[0m) \e[31m'c'\e\
    [0m \n\e[31m23 |\e[0m                    \e[33melse\e[0m \e[33mif\e[0m (ch ==\
    \ \e[31m'i'\e[0m) \e[31m'd'\e[0m \n\e[31m24 |\e[0m                    \e[33melse\e\
    [0m \e[33mif\e[0m (ch == \e[31m'o'\e[0m) \e[31m'f'\e[0m \n\e[31m25 |\e[0m    \
    \                \e[33melse\e[0m \e[33mif\e[0m (ch == \e[31m'u'\e[0m) \e[31m'g'\e\
    [0m \n\e[31m26 |\e[0m                    \e[33melse\e[0m \e[33mif\e[0m (ch ==\
    \ \e[31m'A'\e[0m) \e[31m'B'\e[0m \n\e[31m27 |\e[0m                    \e[33melse\e\
    [0m \e[33mif\e[0m (ch == \e[31m'E'\e[0m) \e[31m'C'\e[0m \n\e[31m28 |\e[0m    \
    \                \e[33melse\e[0m \e[33mif\e[0m (ch == \e[31m'I'\e[0m) \e[31m'D'\e\
    [0m \n\e[31m29 |\e[0m                    \e[33melse\e[0m \e[33mif\e[0m (ch ==\
    \ \e[31m'O'\e[0m) \e[31m'F'\e[0m \n\e[31m30 |\e[0m                    \e[33melse\e\
    [0m \e[33mif\e[0m (ch == \e[31m'U'\e[0m) \e[31m'G'\e[0m \n\e[31m31 |\e[0m    \
    \                \e[33melse\e[0m (\e[33mif\e[0m (ch == \e[31m'a'\e[0m) \e[31m'h'\e\
    [0m \n\e[31m32 |\e[0m                    \e[33melse\e[0m \e[33mif\e[0m (ch ==\
    \ \e[31m'e'\e[0m) \e[3"
  stdout: ''
  timestamp: 1659979139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"AEIOUaeiou\"\n        var msg = \"\"\n\
    \        for(i <- 0 until message.length){\n            msg += (message(i))\n\
    \        }\n        val result = msg.foldLeft(\"\")((a, b) => a + b.toLowerCase())\n\
    \        val swapped = result.foldLeft((\"\", \"\"))((a, b) => b + a.replace(vowels,\
    \ b.toLowerCase))\n        val alphabet = swapped._1\n        val vowel = swapped._2\n\
    \        var currentVowel = \"\"\n        var currentLetter = \"\"\n        for(i\
    \ <- 0 until result.length){\n            currentLetter = alphabet(i)\n      \
    \      if((i + 1) < result.length){\n                currentVowel = vowel(i+1)\n\
    \            }\n            if(currentVowel == \"\"){\n                result\
    \ += currentLetter\n            }\n            if(currentLetter == \"\"){\n  \
    \              result += currentVowel\n            }\n            else{\n    \
    \            result += currentLetter + vowel(currentVowel.length)\n          \
    \  }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1sa44yh3.scala:20:54 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = msg.foldLeft(\e\
    [31m\"\"\e[0m)((\e[36ma\e[0m, \e[36mb\e[0m) => a + b.toLowerCase())\n\e[31m\e\
    [31m   |\e[0m                                                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1sa44yh3.scala:21:64\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mswapped\e[0m = result.foldLeft((\e[31m\"\"\e[0m, \e[31m\"\"\e[0m))((\e[36ma\e\
    [0m, \e[36mb\e[0m) => b + a.replace(vowels, b.toLowerCase))\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       value replace is not a member of (String,\
    \ String)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1sa44yh3.scala:21:82\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mswapped\e[0m = result.foldLeft((\e[31m\"\"\e[0m, \e[31m\"\"\e[0m))((\e[36ma\e\
    [0m, \e[36mb\e[0m) => b + a.replace(vowels, b.toLowerCase))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toLowerCase is not a member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1sa44yh3.scala:27:36 --------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \            currentLetter = alphabet(i)\n\e[31m\e[31m   |\e[0m              \
    \              ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            Found:\
    \    Char\n\e[31m   |\e[0m                            Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1sa44yh3.scala:29:36 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                currentVowel = vowel(i+\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                               Found:    Char\n\e[31m   |\e[0m       \
    \                    "
  stdout: ''
  timestamp: 1659979142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','i','o','u')\n        val messageList = message.split('')\n\
    \        val encoded = new StringBuilder(messageList.length)\n        messageList.foreach(x\
    \ => encoded.append(alphabet.indexOf(x) + vowels.indexOf(x)).asInstanceOf[String])\n\
    \        encoded.toString()\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0lr5u1se.scala:17:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageList\e[0m = message.split('')\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                        empty character literal\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmp0lr5u1se.scala:18:20 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mencoded\e[0m = \e[33mnew\e\
    [0m \e[35mStringBuilder\e[0m(messageList.length)\n\e[31m\e[31m   |\e[0m      \
    \              ^\e[0m\n\e[31m   |\e[0m                    expression expected\
    \ but \e[31m=\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0lr5u1se.scala:18:8 -------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mencoded\e[0m = \e[33mnew\e[0m \e[35mStringBuilder\e\
    [0m(messageList.length)\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m\
    \        Not found: 'val\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0lr5u1se.scala:19:33 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        messageList.foreach(\e[36mx\e[0m => encoded.append(alphabet.indexOf(x)\
    \ + vowels.indexOf(x)).asInstanceOf[\e[35mString\e[0m])\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                   Not found: encoded\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp0lr5u1se.scala:20:8 -------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        encoded.toString()\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: encoded\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val result = new StringBuilder()\n        val vowels =\
    \ \"aeiou\"\n        for (i <- 0 to message.length - 1){\n            val currentChar\
    \ = message.charAt(i)\n            if (vowels.contains(currentChar)) {\n     \
    \           val nextChar = message.charAt(i+1)\n                val replacement\
    \ = nextChar + Character.toUpperCase(currentChar) - Character.toUpperCase(nextChar)\n\
    \                result.append(replacement)\n                i = i + 2\n     \
    \       }\n            result.append(currentChar)\n        }\n        return result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpl1beecxk.scala:23:18 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                i = i + \e[31m2\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = message.map(c => c.toUpperCase()).map(c\
    \ => c.toLowerCase + (if (c =:= \"a\") \"n\" else \"A\"))\n        val vowels\
    \ = \"AEIOU\"\n        val encodedMessage = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until message.length)\n        {\n            val letter\
    \ = message(i)\n            for (j <- 0 until vowels.length)\n            {\n\
    \                if (vowels(j) == letter)\n                {\n               \
    \     encodedMessage += alphabet(j)\n                }\n            }\n      \
    \      encodedMessage += letter\n        }\n        encodedMessage.toString.toLowerCase()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiacnrm9a.scala:15:42 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36malphabet\e[0m = message.map(\e\
    [36mc\e[0m => c.toUpperCase()).map(\e[36mc\e[0m => c.toLowerCase + (\e[33mif\e\
    [0m (c =:= \e[31m\"a\"\e[0m) \e[31m\"n\"\e[0m \e[33melse\e[0m \e[31m\"A\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiacnrm9a.scala:17:29\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mencodedMessage\e[0m = mutable.ArrayBuffer.empty[\e[35mChar\e[0m]\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = new mutable.LinkedHashSet[Char](\"abcdefghijklmnopqrstuvwxyz\"\
    .toCharArray)\n        val vowels = new mutable.LinkedHashSet[Char](\"aeiou\"\
    .toCharArray)\n        val twoLetters = new mutable.LinkedHashSet[Char](\"bcdfghjklmnpqrstvwxyz\"\
    .toCharArray)\n        val swap = new mutable.LinkedHashSet[Char]()\n        val\
    \ newMessage = new mutable.LinkedHashSet[Char]()\n        val messageLength =\
    \ message.length\n        for(i <- 0 until messageLength){\n            val letter\
    \ = message.charAt(i)\n            val index = alphabet.indexOf(letter)\n    \
    \        if(index != -1){\n                swap.add(index)\n            }else{\n\
    \                val vowel = vowels.indexOf(letter)\n                if(vowel\
    \ != -1){\n                    swap.add(vowel)\n                }else{\n     \
    \               val twoLetter = twoLetters.indexOf(letter)\n                 \
    \   if(twoLetter != -1){\n                        swap.add(twoLetter)\n      \
    \              }else{\n                        newMessage.add(letter)\n      \
    \              }\n                }\n            }\n        }\n        swap.foreach(letter\
    \ => alphabet.add(letter))\n        swap.clear()\n        for(letter <- alphabet){\n\
    \            val index = newMessage.indexOf(letter)\n            if(index != -1){\n\
    \                swap.add(index)\n            }else{\n                newMessage.add(letter)\n\
    \            }\n        }\n        swap.foreach(letter => alphabet.add(letter))\n\
    \        swap.clear()\n        for(letter <- alphabet){\n            val index\
    \ = newMessage.indexOf(letter)\n            if(index != -1){\n               \
    \ swap.add(index)\n            }else{\n                newMessage.add(letter)\n\
    \            }\n        }\n        swap.foreach(letter => alphabet.add(letter))\n\
    \        swap.clear()\n        for(letter <- alphabet){\n            val index\
    \ = newMessage.indexOf(letter)\n            if(index != -1){\n               \
    \ swap.add(index)\n            }else{\n                newMessage.add(letter)\n\
    \            }\n        }\n        swap.foreach(letter => alphabet.add(letter))\n\
    \        swap.clear()\n        for(letter <- alphabet){\n            val index\
    \ = newMessage.indexOf(letter)\n            if(index != -1){\n               \
    \ swap.add(index)\n            }else{\n                newMessage.add(letter)\n\
    \            }\n        }\n        swap.foreach(letter => alphabet.add(letter))\n\
    \        swap.clear()\n        for(letter <- alphabet){\n            val index\
    \ = newMessage.indexOf(letter)\n            if(index != -1){\n               \
    \ swap.add(index)\n            }else{\n                newMessage.add(letter)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsmbsg0qf.scala:99:0 ----------------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsmbsg0qf.scala:15:27\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36malphabet\e[0m = \e[33mnew\e[0m mutable.LinkedHashSet[\e[35mChar\e[0m](\e[31m\"\
    abcdefghijklmnopqrstuvwxyz\"\e[0m.toCharArray)\n\e[31m\e[31m   |\e[0m        \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsmbsg0qf.scala:16:25\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mvowels\e[0m = \e[33mnew\e[0m mutable.LinkedHashSet[\e[35mChar\e[0m](\e[31m\"\
    aeiou\"\e[0m.toCharArray)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsmbsg0qf.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mtwoLetters\e[0m = \e[33mnew\e\
    [0m mutable.LinkedHashSet[\e[35mChar\e[0m](\e[31m\"bcdfghjklmnpqrstvwxyz\"\e[0m.toCharArray)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsmbsg0qf.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mswap\e[0m = \e[33mnew\e\
    [0m mutable.LinkedHashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsmbsg0qf.scala:19:29\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33m"
  stdout: ''
  timestamp: 1659979139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // Your code goes here\n        val list = message.split(\"\
    \ \").toList\n        var i = 0\n        var newMessage = message\n\n        val\
    \ vowels = List('a', 'e', 'i', 'o', 'u')\n        val result = mutable.ListBuffer.empty[String]\n\
    \        while(i < list.size) {\n            var nextVowel = vowels(i % 6)\n \
    \           if (i + 1 < list.size) {\n                if (vowels(i + (list.size\
    \ - 1)) == nextVowel)\n                    nextVowel = vowels(i + (list.size -\
    \ 2))\n            }\n            val letter = list(i).toChar\n            if\
    \ (vowels.contains(letter))\n                newMessage = newMessage.substring(0,\
    \ i) + nextVowel + newMessage.substring(i + 1).toLowerCase\n            i += 1\n\
    \        }\n        result foreach { x => newMessage = newMessage + x }\n    \
    \    newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpysge6p24.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpysge6p24.scala:28:33 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mletter\e[0m = list(i).toChar\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         value toChar is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659979142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val l = message.length\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var a = 0\n        var str = \"\"\n      \
    \  while (i < l) {\n            str += message.charAt(i)\n            i += 1\n\
    \        }\n        str = str.toUpperCase\n        str = str.replaceAll((\"a\"\
    , \"A\"), (\"A\"))\n        str = str.replaceAll((\"e\", \"E\"), (\"E\"))\n  \
    \      str = str.replaceAll((\"i\", \"I\"), (\"I\"))\n        str = str.replaceAll((\"\
    o\", \"O\"), (\"O\"))\n        str = str.replaceAll((\"u\", \"U\"), (\"U\"))\n\
    \        str = str.replaceAll((\"y\", \"T\"), (\"T\"))\n        str = str.replaceAll((\"\
    a\", \"A\"), (\"A\"))\n        str = str.replaceAll((\"e\", \"E\"), (\"E\"))\n\
    \        str = str.replaceAll((\"i\", \"I\"), (\"I\"))\n        str = str.replaceAll((\"\
    o\", \"O\"), (\"O\"))\n        str = str.replaceAll((\"u\", \"U\"), (\"U\"))\n\
    \        str = str.replaceAll((\"y\", \"T\"), (\"T\"))\n        str = str.replaceAll((\"\
    1\", \"!\"), (\"!\"))\n        str = str.replaceAll((\"2\", \"!\"), (\"!\"))\n\
    \        str = str.replaceAll((\"3\", \"!\"), (\"!\"))\n        str = str.replaceAll((\"\
    4\", \"!\"), (\"!\"))\n        str = str.replaceAll((\"5\", \"!\"), (\"!\"))\n\
    \        str = str.replaceAll((\"6\", \"!\"), (\"!\"))\n        str = str.replaceAll((\"\
    7\", \"!\"), (\"!\"))\n        str = str.replaceAll((\"8\", \"!\"), (\"!\"))\n\
    \        str = str.replaceAll((\"9\", \"!\"), (\"!\"))\n        str = str.replaceAll((\"\
    0\", \"!\"), (\"!\"))\n        var j = 0\n        var k = 0\n        var a = 0\n\
    \        while (j < l) {\n            a += 1\n            k = str.indexOf(\"A\"\
    , j)\n            while (k > -1) {\n                val tempStr = str.substring(k,\
    \ k + 2)\n                str = str.substring(0, k) + tempStr + str.substring(k\
    \ + 2)\n                k += 1\n            }\n            j = k\n        }\n\
    \        str += str\n        str\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp61nmq_v1.scala:48:12 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mvar\e[0m \e[36mj\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mj is already defined\
    \ as \e[33mvariable\e[0m \e[35mj\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp61nmq_v1.scala:49:12 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mvar\e[0m \e[36mk\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined\
    \ as \e[33mvariable\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp61nmq_v1.scala:50:12 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mvar\e[0m \e[36ma\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0ma is already defined\
    \ as \e[33mvariable\e[0m \e[35ma\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp61nmq_v1.scala:26:29 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        str = str.replaceAll((\e[31m\"a\"\e[0m, \e[31m\"\
    A\"\e[0m), (\e[31m\"A\"\e[0m))\n\e[31m\e[31m   |\e[0m                        \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             Found:    \e\
    [1m\e[31m(\e[0m\e[1m\e[31mString\e[0m\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0mString\e\
    [1m\e[31m)\e[0m\n\e[31m   |\e[0m                             Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp61nmq_v1.scala:27:29\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        str = str.replaceAll((\e\
    [31m\"e\"\e[0m, \e[31m\"E\"\e[0m), (\e[31m\"E\"\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \              Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mString\e[0m\e[1m\e[31m,\e\
    [0m\e[1m\e[31m \e[0mString\e[1m\e[3"
  stdout: ''
  timestamp: 1659979146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        def charAtered(c : String) : Int = {\n            c match\
    \ {\n                case letter if letter.isLetter => \n                    c.toInt.toChar\n\
    \                case _ => 0\n            }\n        }\n        val newMessage\
    \ = message.toList\n        val newMessageToSwap = newMessage.map(c => charAtered(c)\
    \ - charAtered(c.charAt(0)))\n        val vowels = List('a', 'e', 'i', 'o', 'u')\n\
    \        val newMessageToChange = newMessageToSwap.map(c => vowels.indexOf(c))\n\
    \        newMessageToChange.zip(vowels).map(c => (c().toInt - c().toInt.toChar))\n\
    \        newMessageToChange.zipWithIndex.map { case (c, index) => \n         \
    \   index match {\n                case 0 => c.toChar\n                case 1\
    \ => c.toChar\n                case 2 => c.toChar\n                case 3 => c.toChar\n\
    \                case 4 => c.toChar\n                case 5 => c.toChar\n    \
    \            case 6 => c.toChar\n                case 7 => c.toChar\n        \
    \        case _ => c.toChar\n            }\n        }.mkString(\"\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq1ruzfdh.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m letter \e[33mif\e[0m\
    \ letter.isLetter => \n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq1ruzfdh.scala:23:62\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnewMessageToSwap\e\
    [0m = newMessage.map(\e[36mc\e[0m => charAtered(c) - charAtered(c.charAt(\e[31m0\e\
    [0m)))\n\e[31m\e[31m   |\e[0m                                                \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \             Found:    (c : Char)\n\e[31m   |\e[0m                          \
    \                          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpq1ruzfdh.scala:23:80 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnewMessageToSwap\e[0m =\
    \ newMessage.map(\e[36mc\e[0m => charAtered(c) - charAtered(c.charAt(\e[31m0\e\
    [0m)))\n\e[31m\e[31m   |\e[0m                                                \
    \                              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                    value charAt is not a member of Char\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpq1ruzfdh.scala:26:50 -----------------------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        newMessageToChange.zip(vowels).map(\e[36mc\e[0m =>\
    \ (c().toInt - c().toInt.toChar))\n\e[31m\e[31m   |\e[0m                     \
    \                            ^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter\
    \ n of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mtrait\e[0m \e[35mNonEmptyTuple\e\
    [0m: (n: Int): Tuple.Elem[This, n.type]\n4 errors found\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toList.map(_.toLowerCase())\n\
    \        val vowelMap: mutable.Map[String, String] = mutable.HashMap.empty[String,\
    \ String]\n        vowels.foreach(vowelMap add _)\n        message.foldLeft(\"\
    \") { (result, x) => \n            val before = result.head\n            val beforeVowel\
    \ = before.toLowerCase \n            val afterVowel = vowelMap.get(beforeVowel)\
    \ \n            val after = afterVowel match {\n                case Some(afterVowel)\
    \ => after.head\n                case None => x\n            }\n            result\
    \ += after\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd8_o2xoq.scala:15:47 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mvowels\e[0m = \e[31m\"aeiouAEIOU\"\
    \e[0m.toList.map(_.toLowerCase())\n\e[31m\e[31m   |\e[0m                     \
    \                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \              value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpd8_o2xoq.scala:16:22 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowelMap\e[0m: mutable.Map[\e\
    [35mString\e[0m, \e[35mString\e[0m] = mutable.HashMap.empty[\e[35mString\e[0m,\
    \ \e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpd8_o2xoq.scala:16:52 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowelMap\e[0m: mutable.Map[\e\
    [35mString\e[0m, \e[35mString\e[0m] = mutable.HashMap.empty[\e[35mString\e[0m,\
    \ \e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m                                  \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpd8_o2xoq.scala:20:37 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mbeforeVowel\e[0m = before.toLowerCase\
    \ \n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                              value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpd8_o2xoq.scala:23:41 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m Some(afterVowel) => after.head\n\
    \e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e[31m \
    \  |\e[0m                                        Recursive \e[33mvalue\e[0m \e\
    [35mafter\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explana"
  stdout: ''
  timestamp: 1659979144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n         // Write your code here\n         val vowels = List('a','e','i','o','u')\n\
    \         val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \         val lowerMessage = message.toLowerCase()\n         val newMessage =\
    \ lowerMessage.foldLeft(\"\")( (res, letter) => res + letter.charAt(1) + alphabet.indexOf(letter.charAt(2))\
    \ + alphabet.indexOf(letter.charAt(3)) + alphabet.indexOf(letter.charAt(4)) +\
    \ alphabet.indexOf(letter.charAt(5)) + alphabet.indexOf(letter.charAt(6))) \n\
    \         newMessage\n         }\n}\n</code>\nI solved this problem in a very\
    \ convoluted manner, first I thought the problem was coming from my logic in the\
    \ fold, which I did not understand. But I realized that the problem was coming\
    \ from my code in the foldLeft, as I was not using the accumulator correctly.\n\
    Here is what my code does:\n<code>\nval lowerMessage = message.toLowerCase()\n\
    </code>\nThis line takes the string message, and makes it lower case, so that\
    \ we can use it to check the characters in the english alphabet. We will do this\
    \ later in the function.\n<code>\nval newMessage = lowerMessage.foldLeft(\"\"\
    )( (res, letter) => res + letter.charAt(1) + alphabet.indexOf(letter.charAt(2))\
    \ + alphabet.indexOf(letter.charAt(3)) + alphabet.indexOf(letter.charAt(4)) +\
    \ alphabet.indexOf(letter.charAt(5)) + alphabet.indexOf(letter.charAt(6))) \n\
    </code>\nfoldLeft is used to go through the string, starting with a blank (\"\"\
    ). \nThe first argument is the initial value of the accumulator variable, (the\
    \ blank). \nThe second argument is the function that will run to update the accumulator\
    \ value for each character in the string in the foldLeft. The first argument is\
    \ a character in the string, and the second is the current accumulator. \nThe\
    \ function will take the letter as a parameter and concatenate it to the accumulator\
    \ variable with the position of the corresponding character in the english alphabet.\
    \ \nI understand how foldLeft works. But how does the second argument work? When\
    \ we call foldLeft, the second argument is (acc, letter) => res + letter.charAt(1)\
    \ + alphabet.indexOf(letter.charAt(2)) + alphabet.indexOf(letter.charAt(3)) +\
    \ alphabet.indexOf(letter.charAt(4)) + alphabet.indexOf(letter.charAt(5)) + alphabet.indexOf(letter.charAt(6))\n\
    acc is the initial value of the accumulator variable. Lets take a look at the\
    \ first character in the string. \nLets say that the current character \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpg4wvfs4a.scala:23:0 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E103] Syntax Error:\
    \ /tmp/tmpg4wvfs4a.scala:28:0 ----------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal start of\
    \ toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpg4wvfs4a.scala:32:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m32 |\e[0m</code>\n\e[31m\e[31m\
    \   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal start of toplevel definition\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg4wvfs4a.scala:49:0 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected,\
    \ but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg4wvfs4a.scala:19:83\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m         \e[33mval\e[0m \e\
    [36mnewMessage\e[0m = lowerMessage.foldLeft(\e[31m\"\"\e[0m)( (\e[36mres\e[0m,\
    \ \e[36mletter\e[0m) => res + letter.charAt(\e[31m1\e[0m) + alphabet.indexOf(letter.charAt(\e\
    [31m2\e[0m)) + alphabet.indexOf(letter.charAt(\e[31m3\e[0m)) + alphabet.indexOf(letter.charAt(\e\
    [31m4\e[0m)) + alphabet.indexOf(letter.charAt(\e[31m5\e[0m)) + alphabet.indexOf(letter.charAt(\e\
    [31m6\e[0m))) \n\e[31m\e[31m   |\e[0m                                        \
    \                                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                               value charAt is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpg4wvfs4a.scala:19:119 -----------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m         \e[33mval\e[0m \e[36mnewMessage\e[0m = lowerMessage.foldLeft(\e\
    [31m\"\"\e[0m)( (\e[36mres\e[0m, \e[36mletter\e[0m) => res + letter.charAt(\e\
    [31m1\e[0m) + alphabet.indexOf(letter.charAt(\e[31m2\e[0m)) + alphabet.indexOf(letter."
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val newMessage = message.replace(\" \", \"\")\n      \
    \  val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val chars =\
    \ newMessage.toCharArray\n        chars.foreach {\n            char =>\n     \
    \       val pos = chars.indexOf(char) + 1\n            chars.updated(pos, chars.apply(pos))\n\
    \        }\n        chars.toList.map {\n            char => vowels.indexOf(char)\
    \ + vowels.indexOf(char) + 1\n        }.toList.zipWithIndex.map {\n          \
    \  pair =>\n            val i = pair._2\n            val firstChar = chars(i)\n\
    \            val secondChar = chars(i + 1)\n            firstChar + secondChar\n\
    \        }.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9bhk4i8j.scala:24:35\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[36mchar\e[0m =>\
    \ vowels.indexOf(char) + vowels.indexOf(char) + \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                                   ^^^^\e[0m\n\e[31m   |\e[0m             \
    \                      Found:    (char : Char)\n\e[31m   |\e[0m              \
    \                     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9bhk4i8j.scala:24:58 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            \e[36mchar\e[0m => vowels.indexOf(char) + vowels.indexOf(char)\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                              \
    \                   Found:    (char : Char)\n\e[31m   |\e[0m                 \
    \                                Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = Array(\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"\
    s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\")\n        val vowels = Array(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"A\",\"E\",\"I\",\"O\",\"U\",\"Y\")\n     \
    \   val swapped = message.map { x =>\n            if (x == x.toUpperCase())\n\
    \                x.toUpperCase\n            else if (x == x.toLowerCase())\n \
    \               x.toLowerCase\n            else \n                x.toUpperCase\n\
    \        }\n        val result = swapped flatMap { x =>\n            x.toCharArray.toList\
    \ map (x => (x -> alphabet.indexOf(x.toLowerCase) - vowels.indexOf(x.toLowerCase).toInt)).toMap\n\
    \        }.map { x => alphabet(x._1) + x._2 }.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9row2kws.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (x == x.toUpperCase())\n\e\
    [31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                   value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9row2kws.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                x.toUpperCase\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value toUpperCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9row2kws.scala:20:28\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (x == x.toLowerCase())\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value\
    \ toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp9row2kws.scala:21:18 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                x.toLowerCase\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value toLowerCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9row2kws.scala:23:18 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                x.toUpperCase\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value toUpperCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9row2kws.scala:28:5\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1659979147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val charSet = scala.collection.mutable.HashSet[String](\n\
    \            \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\",\n \
    \           \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"\
    D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\",\n        \
    \    \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"\
    X\", \"Y\", \"Z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\",\n            \"6\"\
    , \"7\", \"8\", \"9\"\n        )\n\n        for (c <- message) {\n           \
    \ if (charSet.contains(c)) {\n                charSet += c\n            }\n  \
    \      }\n\n        val vowels = scala.collection.mutable.HashSet[String](\n \
    \           \"a\", \"e\", \"i\", \"o\", \"u\"\n        )\n\n        val messageToEncode\
    \ = message.toString.replaceAll(\"[^a-zA-Z]\", \"\")\n\n        // Now replace\
    \ vowels with letters 2 places ahead of them in the alphabet\n        for (v <-\
    \ vowels) {\n            messageToEncode = messageToEncode.replaceAll(v, v.substring(0,\
    \ 2))\n        }\n\n        charSet.toString + messageToEncode\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjdig69x9.scala:23:33\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (charSet.contains(c))\
    \ {\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e\
    [0m                                 Found:    (c : Char)\n\e[31m   |\e[0m    \
    \                             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjdig69x9.scala:24:27 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                charSet += c\n\e[31m\e[31m   |\e[0m \
    \                          ^\e[0m\n\e[31m   |\e[0m                           Found:\
    \    (c : Char)\n\e[31m   |\e[0m                           Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpjdig69x9.scala:36:28 -----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            messageToEncode = messageToEncode.replaceAll(v,\
    \ v.substring(\e[31m0\e[0m, \e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val messageToEncode\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979146
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  val encodedString = message.map(letter => \n            val index = alphabet.indexOf(letter)\n\
    \            if (index > 0) \n                alphabet(index - 1)\n          \
    \  else letter\n        ).mkString\n        encodedString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0vv6pf7m.scala:25)\n\tat Problem.main(tmp0vv6pf7m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var message = message\n        var result = \"\"\n   \
    \     for (i <- 0 until message.length){\n            var pos = message.indexOf(i)\n\
    \            if (pos !=0){\n                result += message.charAt(pos-1)\n\
    \                if (message.charAt(pos)==\"a\"){\n                    result\
    \ += message.charAt(pos + 1)\n                }\n                result += message.charAt(pos)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9vi_k7gq.scala:15:22 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mmessage\e[0m = message\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           Recursive \e[33mvariable\e[0m \e[35mmessage\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        // Your code goes here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp835vmw1x.scala:14:44\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mencode\e\
    [0m(\e[36mmessage\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e\
    [31m   |\e[0m                                            ^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Unit\n\e[31m   |\e[0m\
    \                                            Required: String\n\e[31m15 |\e[0m\
    \        \e[34m// Your code goes here\e[0m\n\e[31m16 |\e[0m    }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979146
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var ret = \"\"\n        for (i <- 0 until message.length)\
    \ {\n            val currentChar = message.charAt(i)\n            // if all letters\
    \ then return\n            if (currentChar <= 'z' && currentChar >= 'a') return\
    \ message\n            // if vowel\n            val vowels = \"aeiou\"\n     \
    \       val index = vowels.indexOf(currentChar)\n            if (index >= 0) ret\
    \ += message.charAt(i) \n            else {\n                // count number of\
    \ vowels 2 places after\n                val c = message.charAt(i) + message.charAt(i\
    \ + 1)\n                if (c >= 'a' && c <= 'z') ret += c\n                else\
    \ ret += currentChar\n            }\n        }\n        ret\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 4\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.encode$$anonfun$1(tmpe9kv2dq7.scala:26)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.encode(tmpe9kv2dq7.scala:30)\n\
    \tat Problem$.main(tmpe9kv2dq7.scala:34)\n\tat Problem.main(tmpe9kv2dq7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val letters = message map (_.toUpperCase) toList\n   \
    \     val vowels = letters.filter(letter => letter.toString.toLowerCase.contains(\"\
    aeiou\"))\n        val reordered = letters.map{letter =>\n          val position\
    \ = vowels.indexOf(letter) + 1\n          val replacement = if (position < 3)\
    \ \"T\" else if (position < 3 and position >= 2) \"G\" else \"C\"\n          letter.replace(letter,\
    \ replacement)\n        }\n        reordered.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpr0_yj5on.scala:15:56 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = message map\
    \ (_.toUpperCase) toList\n\e[31m\e[31m   |\e[0m                              \
    \                          ^\e[0m\n\e[31m   |\e[0m                          expression\
    \ expected but \e[31mend of statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpr0_yj5on.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = message map\
    \ (_.toUpperCase) toList\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toUpperCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val messageArray = message.split(\"\")\n        val encoded\
    \ = messageArray.foldLeft(List[String]()) { (list, letter) => \n            val\
    \ newList = list.toList\n            newList(0) = if (newList(0).toChar == 'A')\n\
    \                    ('A' + letter).toChar\n                else if (newList(0).toChar\
    \ == 'E')\n                    ('E' + letter).toChar\n                else if\
    \ (newList(0).toChar == 'I')\n                    ('I' + letter).toChar\n    \
    \            else if (newList(0).toChar == 'O')\n                    ('O' + letter).toChar\n\
    \                else if (newList(0).toChar == 'U')\n                    ('U'\
    \ + letter).toChar\n                else\n                    letter\n       \
    \     list :+ newList.mkString\n        }\n        encoded.reverse\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpld30ni5j.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            newList(\e[31m0\e[0m) = \e[33mif\e[0m (newList(\e\
    [31m0\e[0m).toChar == \e[31m'A'\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue update is not a member of List[String] - did you mean\
    \ newList.updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpld30ni5j.scala:18:40\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            newList(\e[31m0\e\
    [0m) = \e[33mif\e[0m (newList(\e[31m0\e[0m).toChar == \e[31m'A'\e[0m)\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                             value toChar is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpld30ni5j.scala:19:35 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    (\e[31m'A'\e[0m + letter).toChar\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    value toChar is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpld30ni5j.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (newList(\e\
    [31m0\e[0m).toChar == \e[31m'E'\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value\
    \ toChar is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpld30ni5j.scala:21:35\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    (\e[31m'E'\e\
    [0m + letter).toChar\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value toChar is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpld30ni5j.scala:22:36 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (newList(\e\
    [31m0\e[0m).toChar == \e[31m'I'\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value\
    \ toChar is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpld30ni5j.scala:23:35\
    \ --------------"
  stdout: ''
  timestamp: 1659979147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        var index = 0;\n        var result = '';\n        for(i\
    \ <- 0 until message.length){\n            if(message.charAt(i) == ' ') {\n  \
    \              result += ' ';\n                index = i+1;\n            } else\
    \ {\n                result += message.charAt(i).toUpper;\n                result\
    \ += message.charAt(i + 1).toUpper;\n            }\n        }\n        index =\
    \ 0;\n        for(i <- 0 until result.length){\n            if(result.charAt(i)\
    \ == 'A') {\n                result += message.charAt(index).toUpper;\n      \
    \          index += 1\n            } else if(result.charAt(i) == 'E') {\n    \
    \            result += message.charAt(index).toUpper;\n                index +=\
    \ 1\n            } else if(result.charAt(i) == 'I') {\n                result\
    \ += message.charAt(index).toUpper;\n                index += 1\n            }\
    \ else if(result.charAt(i) == 'O') {\n                result += message.charAt(index).toUpper;\n\
    \                index += 1\n            } else if(result.charAt(i) == 'U') {\n\
    \                result += message.charAt(index).toUpper;\n                index\
    \ += 1\n            } else if(result.charAt(i) == 'Y') {\n                result\
    \ += message.charAt(index).toUpper;\n                index += 1\n            }\
    \ else if(result.charAt(i) == 'a') {\n                result += message.charAt(index).toUpper;\n\
    \                index += 1\n            } else if(result.charAt(i) == 'e') {\n\
    \                result += message.charAt(index).toUpper;\n                index\
    \ += 1\n            } else if(result.charAt(i) == 'i') {\n                result\
    \ += message.charAt(index).toUpper;\n                index += 1\n            }\
    \ else if(result.charAt(i) == 'o') {\n                result += message.charAt(index).toUpper;\n\
    \                index += 1\n            } else if(result.charAt(i) == 'u') {\n\
    \                result += message.charAt(index).toUpper;\n                index\
    \ += 1\n            } else if(result.charAt(i) == 'y') {\n                result\
    \ += message.charAt(index).toUpper;\n                index += 1\n            }\
    \ else {\n                result += message.charAt(i)\n            }\n       \
    \ }\n        return result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzig5zc05.scala:16:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mresult\e[0m = '';\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ empty character literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzig5zc05.scala:17:14\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i\
    \ <- \e[31m0\e[0m until message.length){\n\e[31m\e[31m   |\e[0m              ^^\e\
    [0m\n\e[31m   |\e[0m              ')' expected, but '<-' found\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzig5zc05.scala:17:8 -------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until message.length){\n\
    \e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: 'for\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzig5zc05.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i\
    \ <- \e[31m0\e[0m until message.length){\n\e[31m\e[31m   |\e[0m            ^\e\
    [0m\n\e[31m   |\e[0m            Not found: i\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzig5zc05.scala:18:30 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m(message.charAt(i) == \e[31m'\
    \ '\e[0m) {\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: i\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpzig5zc05.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                result += \e[31m' '\e[0m;\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Null - did you mean Null.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpzig5zc05.scala:20:24 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m                index = i+\e[31m1\e[0m;\n\e[31m\e[31m   |\e[0m\
    \                        ^\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659979149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageCopy = message\n\
    \        val messageLengthCopy = messageCopy.length\n        val encoded = mutable.ListBuffer[String]()\n\
    \        var i = 0\n        while (i < messageLengthCopy) {\n            val firstLetter\
    \ = messageCopy(i).toLowerCase()\n            val secondLetter = messageCopy(i+1).toLowerCase()\n\
    \            val encodedLetter = if (alphabet.contains(firstLetter) && alphabet.contains(secondLetter))\
    \ {\n                val pos = alphabet.indexOf(firstLetter)\n               \
    \ alphabet(pos) \n            }\n            else {\n                val pos =\
    \ alphabet.indexOf(firstLetter)\n                alphabet(pos) \n            }\n\
    \            val encodedLetter2 = if (alphabet.contains(firstLetter) && alphabet.contains(secondLetter))\
    \ {\n                val pos2 = alphabet.indexOf(secondLetter)\n             \
    \   alphabet(pos2)\n            }\n            else {\n                val pos2\
    \ = alphabet.indexOf(secondLetter)\n                alphabet(pos2)\n         \
    \   }\n            encoded.append(encodedLetter+secondLetter)\n            i +=\
    \ 2\n        }\n        encoded.toString.replace(\"[\", \"\").replace(\"]\", \"\
    \").replace(\",\", \"\").replace(\"'\", \"\").replace(\"{\", \"\").replace(\"\
    }\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkzs1yw_.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mencoded\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpgkzs1yw_.scala:22:45 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mfirstLetter\e[0m = messageCopy(i).toLowerCase()\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgkzs1yw_.scala:23:48\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36msecondLetter\e[0m = messageCopy(i+\e[31m1\e[0m).toLowerCase()\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659979147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n      val vowels = \"AEIOUaeiou\"\n      val newMessage = message.toLowerCase\n\
    \      val newChars = new mutable.ListBuffer[Char]()\n      val numVowels = newMessage.count(vowels)\n\
    \      val vowelIndex = 0\n      val vowelIndexToEncode = numVowels - 1\n    \
    \  val swaps = newMessage.count(c => vowels.indexOf(c) >= 0)\n      val vowelToSwap\
    \ = newMessage.charAt(vowelIndexToEncode)\n      val vowelIndexToSwap = vowelIndexToEncode\
    \ + 1\n\n      for(i <- 0 until newMessage.length)\n        if(vowels.indexOf(newMessage.charAt(i))\
    \ >= 0) {\n          newChars += newMessage.charAt(i)\n          newChars += vowelToSwap\n\
    \          newChars += newMessage.charAt(i)\n          vowelIndex += 1\n     \
    \   } else if(vowels.indexOf(newMessage.charAt(i)) < 0) {\n          newChars\
    \ += newMessage.charAt(i)\n          if(vowelIndex != vowelIndexToSwap) {\n  \
    \          newChars += vowelToSwap\n          }\n          newChars += newMessage.charAt(i)\n\
    \        }\n\n      newChars.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1vx9j5tp.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m      \e[33mval\e[0m \e[36mnewChars\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1vx9j5tp.scala:18:39\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m      \e[33mval\e[0m \e[36mnumVowels\e\
    [0m = newMessage.count(vowels)\n\e[31m\e[31m   |\e[0m                        \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \      Found:    (vowels : String)\n\e[31m   |\e[0m                          \
    \             Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp1vx9j5tp.scala:30:21 ------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m          vowelIndex += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value += is not a member\
    \ of Int - did you mean vowelIndex.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979148
