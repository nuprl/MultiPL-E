language: scala
name: HumanEval_90_next_smallest
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val min = lst.minBy(_)\n        lst.find(_ == min)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpithg3x26.scala:16:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = lst.minBy(_)\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0mNo implicit\
    \ Ordering defined for Any..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m    scala.math.Ordering.ordered[\e[35mAny\e[0m](\n\e[31m   |\e[0m  \
    \    /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\e[31m   |\e\
    [0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were found that\
    \ match type scala.math.Ordering.AsComparable[Any].\n1 error found\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  lst.minBy(lst => {\n            val temp = lst.min\n            if (temp >\
    \ lst.max) temp else lst.max\n        })._2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxsmca1l6.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (temp > lst.max) temp \e[33melse\e\
    [0m lst.max\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ > is not a member of Long => Long, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpxsmca1l6.scala:19:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        })._2\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\
    \e[31m   |\e[0mNo implicit Ordering defined for (Long => Long)..\n\e[31m   |\e\
    [0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35m(Long => Long)\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Long\
    \ => Long]]\n\e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit\
    \ values were found that match type java.util.Comparator[Long => Long].\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val mn = lst.min\n        if(mn == -1) return None\n        if(mn < 1) return\
    \ None\n        val pos = lst.indexOf(mn)\n        if(pos == 0) return None\n\
    \        val mndx = lst.lastIndexOf(mn)\n        if(mndx == lst.length - 1) return\
    \ None\n        val res = lst(mndx - 1)\n        lst.update(pos, mn)\n       \
    \ Some(res)\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdey8_xrg.scala:24:12 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        lst.update(pos, mn)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value update is not a member of List[Long]\
    \ - did you mean lst.updated?\n1 error found\n"
  stdout: ''
  timestamp: 1660028709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val n = lst.size\n        if (n <= 1) {\n            None\n        } else if\
    \ (n <= 2) {\n            lst.headOption\n        } else {\n            val mid\
    \ = n/2\n            val m2 = lst.slice(0,mid).foldLeft(Some(lst.headOption))((i,v)\
    \ =>\n                if (i < mid) {\n                    Some(v)\n          \
    \      } else if (i > mid) {\n                    None\n                } else\
    \ {\n                    i.get + v\n                }\n            )\n       \
    \     Some(m2.get)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyms5r4fm.scala:24:22 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m (i < mid) {\n\e[31m\e[31m\
    \   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member\
    \ of Some[Option[Long]], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyms5r4fm.scala:25:25 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    Some(v)\n\e[31m\e[31m   |\e[0m  \
    \                       ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (v : Long)\n\e[31m   |\e[0m                         Required: Option[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyms5r4fm.scala:26:29\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                } \e[33melse\e\
    [0m \e[33mif\e[0m (i > mid) {\n\e[31m\e[31m   |\e[0m                         \
    \  ^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of Some[Option[Long]], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m\
    \   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyms5r4fm.scala:27:20 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    None\n\e[31m\e[31m   |\e[0m     \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                    Found:    None.type\n\
    \e[31m   |\e[0m                    Required: Some[Option[Long]]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyms5r4fm.scala:29:26 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m             "
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      lst.head\
    \ match {\n        case x :: Nil  => None\n        case x :: tail => if (tail.head\
    \ < x) Some(tail.head) else None\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppjw07x8r.scala:18:40 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mcase\e[0m x :: tail => \e[33mif\e[0m (tail.head\
    \ < x) Some(tail.head) \e[33melse\e[0m None\n\e[31m\e[31m   |\e[0m           \
    \                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of\
    \ Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppjw07x8r.scala:18:55 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mcase\e[0m x :: tail => \e[33mif\e[0m (tail.head\
    \ < x) Some(tail.head) \e[33melse\e[0m None\n\e[31m\e[31m   |\e[0m           \
    \                                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                            Found:    Any\n\e[31m   |\e[0m  \
    \                                                Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  // The 2nd smallest element is the first element in the list that is smaller.\n\
    \        // The first element in the list is the smallest element and is the first\
    \ element in the list\n        // so that is what we will return.\n        var\
    \ smallest = lst(0)\n        var secondSmallest = lst(0)\n        for (amount\
    \ <- lst.tail) {\n            if (amount < smallest) {\n                secondSmallest\
    \ = smallest\n                smallest = amount\n            } else if (amount\
    \ < secondSmallest) {\n                secondSmallest = amount\n            }\n\
    \        }\n        Option(smallest)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81y24qzy.scala:32)\n\tat Problem.main(tmp81y24qzy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.isEmpty) None\n        else if(lst.size == 1) Some(lst(1))\n       \
    \ else {\n            val smallest = lst(1).min\n            lst.view.flatMap\
    \ { e =>\n                if(e > smallest) Some(e)\n                else None\n\
    \            }.headOption\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpnuw1pfou.scala:21:21 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m(e > smallest) Some(e)\n\
    \e[31m\e[31m   |\e[0m                   ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m>\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\e[31m   |\e[0m (x: Float):\
    \ Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\
    \e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x: Short): Boolean\n\e[31m\
    \   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments ((smallest : Long\
    \ => Long))\n1 error found\n"
  stdout: ''
  timestamp: 1660028706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      val\
    \ list = lst.sortBy(_.toLong)\n      if(list.size == 0) None\n      else if(list.size\
    \ == 1) Some(list.headOption.getOrElse(Long.MaxValue))\n      else list.tail.find(_._2\
    \ <= list.head).getOrElse(list.head)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpycg39kvs.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33melse\e[0m list.tail.find(_._2 <= list.head).getOrElse(list.head)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m    \
    \                 value _2 is not a member of Long @uncheckedVariance\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var smallest = lst.head\n        val next_smallest = lst.tail.head\n      \
    \  for (a <- lst.tail) {\n            if (a < smallest) {\n                smallest\
    \ = a\n            }\n        }\n        if (smallest == next_smallest) Some(smallest)\n\
    \        else None\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19khk3c3.scala:27)\n\tat Problem.main(tmp19khk3c3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val smallest = lst.min\n        val index    = lst.indexOf(smallest)\n    \
    \    if(index < 0) None\n        else Some(lst(index + 1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfk8o041s.scala:22)\n\tat Problem.main(tmpfk8o041s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val arr = lst.sortBy(-_)\n        arr.headOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxhtxi69v.scala:20)\n\tat Problem.main(tmpxhtxi69v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  def next_smallest(lst : List[Long]) : Option[Long] = {\n            val head\
    \ = lst.head\n            val tail = lst.tail\n            tail.map(_.compare(head)\
    \ < 0 ? head : tail.map(_.compare(head) < 0 ? _ : _)).headOption.getOrElse(None)\n\
    \        }\n        \n        val smallest = next_smallest(lst.sortBy(_))\n  \
    \      \n        smallest.filterNot(_.equals(lst.sortBy(_).head))\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2mk2b2uv.scala:19:58 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            tail.map(_.compare(head) < \e[31m0\e[0m ?\
    \ head : tail.map(_.compare(head) < \e[31m0\e[0m ? _ : _)).headOption.getOrElse(None)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                                             ')' expected,\
    \ but '(' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2mk2b2uv.scala:19:41\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            tail.map(_.compare(head)\
    \ < \e[31m0\e[0m ? head : tail.map(_.compare(head) < \e[31m0\e[0m ? _ : _)).headOption.getOrElse(None)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^\e[0m\n\e[31m \
    \  |\e[0m                                       value ? is not a member of Int\n\
    \e[31m\e[31m-- Error: /tmp/tmp2mk2b2uv.scala:22:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msmallest\e[0m = next_smallest(lst.sortBy(_))\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0mNo implicit Ordering defined for Any..\n\e[31m   |\e[0mI found:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[Any].\n\e[31m\e[31m-- [E081] Type\
    \ Error: /tmp/tmp2mk2b2uv.scala:24:47 -----------------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m        smallest.filterNot(_.equals(lst.sortBy(_).head))\n\e[31m\e\
    [31m   |\e[0m                                               ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$4 of expanded function:\n\e[31m   |\e[0m   _$4 =>\
    \ lst.sortBy(_$4).head.\n\e[31m\e[31m-- Error: /tmp/tmp2mk2b2uv.scala:24:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        smallest.filterNot(_.equals(lst.sortBy(_).head))\n\
    \e[31m\e[31m   |\e[0m                       "
  stdout: ''
  timestamp: 1660028709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      if\
    \ (lst.isEmpty) {\n        None\n      } else {\n        val minVal = lst(0)\n\
    \        val nextVal = lst.head\n        val minIndex = lst.indexOf(minVal)\n\
    \        val nextIndex = lst.indexOf(nextVal)\n        val nextMin = lst(lst.indexOf(lst.min))\n\
    \        if (nextIndex < minIndex) {\n          Some(nextMin)\n        } else\
    \ {\n          None\n        }\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0b2jkvhb.scala:32)\n\tat Problem.main(tmp0b2jkvhb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.nonEmpty) {\n            lst.drop(1).minBy(_ > lst.last).map(_ - 1)\n\
    \        }\n        else {\n            None\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_o721xll.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            lst.drop(\e[31m1\e[0m).minBy(_ > lst.last).map(_\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660028709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val min = lst.foldLeft((Long.MaxValue/2, List[Long]())) {\n            case\
    \ ((acc, cur), curLong) => (curLong > acc._1) match {\n                case true\
    \ => (cur, curLong)\n                case false => (acc, cur)\n            }\n\
    \        }._1\n        lst.foldLeft((min, List[Long]())) {\n            case ((acc,\
    \ cur), curLong) => (curLong < acc._1) match {\n                case true => (acc,\
    \ cur)\n                case false => ((cur, curLong), cur)\n            }\n \
    \       }._2\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa6qi4hfq.scala:17:57 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m ((acc, cur), curLong) =>\
    \ (curLong > acc._1) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m               \
    \                                      ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                              value _1 is not a member of Long\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpa6qi4hfq.scala:18:30 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m \e[31mtrue\e[0m => (cur,\
    \ curLong)\n\e[31m\e[31m   |\e[0m                              ^^^\e[0m\n\e[31m\
    \   |\e[0m                              Found:    (cur : List[Long])\n\e[31m \
    \  |\e[0m                              Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpa6qi4hfq.scala:18:35 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m \e[31mtrue\e[0m => (cur,\
    \ curLong)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    (curLong : Long)\n\
    \e[31m   |\e[0m                                   Required: List[Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa6qi4hfq.scala:23:57 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m ((acc, cur), curLong) =>\
    \ (curLong < acc._1) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m               \
    \                                      ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                              value _1 is not a member of Long\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpa6qi4hfq.scala:25:31 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e[0m \e[31mfalse\e[0m => ((cur,\
    \ curLong), cur)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    (List[Long], Long)\n\
    \e[31m   |\e[0m                               Required: Long\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.isEmpty) None\n        else {\n            val sortedList = lst.sort\n\
    \            var smallest = sortedList(0)\n            var secondSmallest = sortedList(1)\n\
    \            for(i <- 2 to sortedList.length-1) {\n                if(sortedList(i)\
    \ < smallest) {\n                    smallest = sortedList(i)\n              \
    \  } else if(sortedList(i) < secondSmallest) {\n                    secondSmallest\
    \ = sortedList(i)\n                }\n            }\n            Some(secondSmallest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm7gg36k9.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36msortedList\e[0m = lst.sort\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m     value sort is not a member of List[Long] - did you mean lst.sortBy?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else {\n            var smallest = lst.head\n\
    \            for (i <- lst.drop(1)) {\n                if (i < smallest) {\n \
    \                   smallest = i\n                }\n            }\n         \
    \   Some(smallest)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpofviv07w.scala:28)\n\tat Problem.main(tmpofviv07w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  def helper(lst: List[Long], smallest: Long) : Option[Long] = {\n          \
    \  if (lst == null || lst.isEmpty) None else lst.head match {\n              \
    \  case 1l => Some(smallest)\n                case x => helper(lst.tail, smallest)\n\
    \            }\n        }\n        helper(lst, 0l)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3752_vbz.scala:25)\n\tat Problem.main(tmp3752_vbz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  lst.sortWith((x, y) => x < y) match {\n            case Nil => None\n     \
    \       case x :: xs => Some(xs.last)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmp1dnp32.scala:22)\n\tat Problem.main(tmpmp1dnp32.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  // First sort\n        lst.sortWith((a,b) => a.compare(b) < 0)\n        //\
    \ Now take 2\n        if (lst.length < 2) {\n            None\n        } else\
    \ {\n            val i = lst.length\n            val small = lst(i-1)\n      \
    \      val big = lst(i)\n            if (big < small) Some(big)\n            else\
    \ Some(small)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.nextSmallest(tmpthbz8xkv.scala:24)\n\tat Problem$.main(tmpthbz8xkv.scala:30)\n\
    \tat Problem.main(tmpthbz8xkv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.isEmpty)\n            None\n        else\n            Some(lst.dropWhile(_\
    \ < lst.min()).last)\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpih_2afjc.scala:19:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Some(lst.dropWhile(_ < lst.min()).last)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmissing argument for parameter ord of \e[33mmethod\e[0m \e[35mmin\e\
    [0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m: (\e[33mimplicit \e[0mord:\
    \ Ordering[B]): Long\n1 error found\n"
  stdout: ''
  timestamp: 1660028706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val m = lst.min\n        lst.flatMap(x => if (x == m) Some(m)\n           \
    \     else if ((x < m) || (m==0L)) None\n                else Some(x))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp872n5iwv.scala:17:19\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        lst.flatMap(\e[36mx\e\
    [0m => \e[33mif\e[0m (x == m) Some(m)\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e\
    [31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m[Long]\n\e[31m   |\e[0m   \
    \     Required: \e[1m\e[32mOption\e[0m[Long]\n\e[31m18 |\e[0m                \e\
    [33melse\e[0m \e[33mif\e[0m ((x < m) || (m==\e[31m0L\e[0m)) None\n\e[31m19 |\e\
    [0m                \e[33melse\e[0m Some(x))\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val smallest_vals = lst.sorted\n        smallest_vals(1) match {\n        \
    \    case (smallest_val) => Some(smallest_val)\n            case _ => None\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo6uc3djt.scala:23)\n\tat Problem.main(tmpo6uc3djt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.isEmpty) None\n        else lst.headOption.toSeq.sorted(Ordering[Long].reverse).filter(_.isDefined).headOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpquhs0ymm.scala:17:74 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m lst.headOption.toSeq.sorted(Ordering[Long].reverse).filter(_.isDefined).headOption\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      value isDefined is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660028716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var smallest1 = lst(0)\n        var smallest2 = lst(0)\n        var smaller1\
    \ = 0\n        var smaller2 = 0\n        for(i <- 0 until lst.size) {\n      \
    \      smallest1 <- smallest2\n            smallest2 <- smallest1\n          \
    \  smaller1 <- smaller2\n            smaller2 <- smaller1\n        }\n       \
    \ if(smaller1 < smallest1 && smaller2 < smallest2) Some(smallest2)\n        else\
    \ None\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmplck60umt.scala:21:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            smallest1 <- smallest2\n\e[31m\e[31m   |\e\
    [0m                      ^^\e[0m\n\e[31m   |\e[0m                      end of\
    \ statement expected but '<-' found\n\e[31m\e[31m-- Error: /tmp/tmplck60umt.scala:22:22\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \     smallest2 <- smallest1\n\e[31m\e[31m   |\e[0m                      ^^\e\
    [0m\n\e[31m   |\e[0m                      end of statement expected but '<-' found\n\
    \e[31m\e[31m-- Error: /tmp/tmplck60umt.scala:23:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            smaller1 <- smaller2\n\e[31m\e[31m   |\e\
    [0m                     ^^\e[0m\n\e[31m   |\e[0m                     end of statement\
    \ expected but '<-' found\n\e[31m\e[31m-- Error: /tmp/tmplck60umt.scala:24:21\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \     smaller2 <- smaller1\n\e[31m\e[31m   |\e[0m                     ^^\e[0m\n\
    \e[31m   |\e[0m                     end of statement expected but '<-' found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty)\n            Some(None)\n        else {\n            // Find\
    \ the smallest element\n            val smallest = lst.min\n            // Find\
    \ the smallest element of the tail\n            val tail = lst.tail\n        \
    \    // Check if the smallest element of the tail is smaller than the smallest\
    \ element of the list\n            if (tail.exists(_ < smallest))\n          \
    \      // If so, just consider the tail\n                Some(tail.find(_ < smallest))\n\
    \            else\n                // Else return smallest element of the list.\n\
    \                Some(smallest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp599i5rd9.scala:17:17\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Some(None)\n\e[31m\e\
    [31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m                 Found:\
    \    None.type\n\e[31m   |\e[0m                 Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp599i5rd9.scala:26:30 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                Some(tail.find(_ < smallest))\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Found:    Option[Long]\n\e[31m   |\e[0m                \
    \     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var smallest = lst.head\n        var count = 1\n\n        for(i <- lst.tail)\
    \ {\n            if (smallest < i) {\n                smallest = i\n         \
    \       count += 1\n            }\n        }\n\n        if(smallest==lst.head)\
    \ return Some(smallest)\n        if(smallest==lst.last) return Some(smallest)\n\
    \        if(count>1) return Some(smallest)\n        else None\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0bc7_k34.scala:32)\n\tat Problem.main(tmp0bc7_k34.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val sorted = lst.sorted\n        if (sorted == null || sorted.length == 0)\n\
    \            None\n        else\n            Some(sorted.head)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd6z_man9.scala:23)\n\tat Problem.main(tmpd6z_man9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  lst.head match {\n            case 1l => Some(lst.last)\n            case 2l\
    \ => Some(lst.last)\n            case 3l => Some(lst.last)\n            case 4l\
    \ => Some(lst.last)\n            case 5l => Some(lst.last)\n            case _\
    \ => None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4tdeaaks.scala:26)\n\tat Problem.main(tmp4tdeaaks.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val sortedList = lst.sortWith(_ < _)\n        val first = sortedList(0)\n \
    \       val second = sortedList(1)\n        if (first < second) {\n          \
    \  return Some(second)\n        } else {\n            return Some(first)\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvyg1zbi5.scala:26)\n\tat Problem.main(tmpvyg1zbi5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val minSet = lst.groupBy(x => x).map(t => (t._1, t.size)).toMap\n        minSet.minBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw2vv_n75.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        minSet.minBy(_._2)._1\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   Found:    Long\n\e[31m   |\e[0m        Required: Option[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else {\n            val min = lst.min\n    \
    \        val max = lst.max\n            if (min == max) min\n            else\
    \ {\n                if (lst.contains(min + 1)) Some(min)\n                else\
    \ {\n                    if (lst.contains(max - 1)) Some(max)\n              \
    \      else None\n                }\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmv6f_z61.scala:20:28\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (min\
    \ == max) min\n\e[31m\e[31m   |\e[0m                            ^^^\e[0m\n\e[31m\
    \   |\e[0m                            Found:    (min : Long)\n\e[31m   |\e[0m\
    \                            Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      if(lst.isEmpty)\
    \ None\n      else if(lst.size == 1) Some(lst.head)\n      else Some(lst(lst.indexOf(lst.minBy(_\
    \ < lst(0))) + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpul16smwr.scala:21)\n\tat Problem.main(tmpul16smwr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.size == 0) {\n            None\n        } else if (lst.size == 1) {\n\
    \            Some(lst.head)\n        } else {\n            val smallerList = lst.filter(e\
    \ => e < lst.head)\n            val secondSmallest = smallerList.take(2)\n   \
    \         val smallestList = lst.filter(e => e > secondSmallest.head).take(2)\n\
    \            if (smallestList.size == 0) {\n                None\n           \
    \ } else {\n                val smallest = smallestList.head\n               \
    \ val nextSmallest = secondSmallest.head \n                Some(smallest + nextSmallest)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.$anonfun$2(tmp8cquy7co.scala:23)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.nextSmallest(tmp8cquy7co.scala:23)\n\
    \tat Problem$.main(tmp8cquy7co.scala:34)\n\tat Problem.main(tmp8cquy7co.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else {\n            val min_idx = lst.indexOf(lst.min.asInstanceOf[Long])\n\
    \            val new_lst = lst.slice(1, min_idx + 1)\n            Some(lst.min.asInstanceOf[Long])\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqwvcu7ns.scala:24)\n\tat Problem.main(tmpqwvcu7ns.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.isEmpty){\n            None\n        }else{\n            val smallest\
    \ = lst.head\n            val rest = lst.tail\n            if(rest.sorted){\n\
    \                Some(rest.sorted.head)\n            }else{\n                Some(smallest)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ns5vezz.scala:21:15\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(rest.sorted){\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \       Found:    List[Long]\n\e[31m   |\e[0m               Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val pairs = lst.map(x => (x, lst.indexOf(x)))\n        pairs.minBy(_._2)._1.getOrElse(None)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkjuae_ht.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        pairs.minBy(_._2)._1.getOrElse(None)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    value getOrElse is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  // TODO: your solution here\n        val min2ndElem = lst.maxBy(x=>x).orElse(None)\n\
    \        if(min2ndElem.isDefined) Some(min2ndElem.get) else None\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp51monqqo.scala:17:41 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmin2ndElem\e[0m = lst.maxBy(\e\
    [36mx\e[0m=>x).orElse(None)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value orElse is not a member of Long\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val sorted = lst.sorted\n        if (sorted.isEmpty) None\n        else Some(sorted.last)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmhza0pka.scala:21)\n\tat Problem.main(tmpmhza0pka.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.nonEmpty) {\n            if(lst.head < lst.last) {\n               \
    \ lst.last\n            } else {\n                lst.head + 1\n            }\n\
    \        } else {\n            None\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi3jy0pav.scala:18:20\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                lst.last\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    Found:    Long\n\e[31m   |\e[0m                Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi3jy0pav.scala:20:16\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                lst.head + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Found:    Long\n\e[31m   |\e[0m                Required: Option[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.isEmpty)\n            None\n        else\n            Some(lst(lst.length-1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9qv9m_gj.scala:22)\n\tat Problem.main(tmp9qv9m_gj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val smallest = lst.sortBy(_.toLong)\n        if(smallest.tail.length < smallest.length)\
    \ None\n        else Some(smallest.drop(1).last)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6s8wfeyy.scala:21)\n\tat Problem.main(tmp6s8wfeyy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val smallest = lst.min\n        if (smallest < lst(2))\n            Some(lst(2))\n\
    \        else if (smallest < lst(3)) \n            Some(lst(3))\n        else\
    \ if (smallest < lst(4))\n            Some(lst(4))\n        else if (smallest\
    \ < lst(5))\n            Some(lst(5))\n        else\n            None\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4xwlkoer.scala:29)\n\tat Problem.main(tmp4xwlkoer.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.isEmpty) None\n        else lst.tail match {\n            case _::Nil\
    \ => Some(Nil)\n            case _::xs => val y = xs.toSet.filter(_ > lst.head).last\n\
    \                        if(y > lst.head) Some(y)\n                        else\
    \ nextSmallest(xs)\n            case _ => None\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyo4qbwea.scala:18:32\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m _::Nil\
    \ => Some(Nil)\n\e[31m\e[31m   |\e[0m                                ^^^\e[0m\n\
    \e[31m   |\e[0m                                Found:    collection.immutable.Nil.type\n\
    \e[31m   |\e[0m                                Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  // return None if list empty\n        if(lst.isEmpty) None\n        else {\n\
    \            // find the 2nd smallest number\n            var smallest  = lst.head\n\
    \            var secondSmallest = lst.head\n            for(i <- lst.tail) if(i\
    \ < smallest) smallest = i\n            for(i <- lst.tail) if(i < secondSmallest)\
    \ secondSmallest = i\n            Some(secondSmallest)\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2yx8913p.scala:28)\n\tat Problem.main(tmp2yx8913p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  lst.sortWith((x,y) => x < y)\n        if (lst.isEmpty) None\n        else {\n\
    \            val min = lst(1)\n            val rest = lst.filterNot(x => x ==\
    \ min)\n            if (rest.size > 2) Some(rest)\n            else None\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa0gfu9m1.scala:21:36\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (rest.size\
    \ > \e[31m2\e[0m) Some(rest)\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                                    Found:\
    \    (rest : List[Long])\n\e[31m   |\e[0m                                    Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      val\
    \ sorted = lst.sortWith((a, b) => a < b)\n      if (sorted.size == 0) None\n \
    \     else if (sorted.size == 1) Some(sorted.head)\n      else Some(sorted.tail.head)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbig7_2j5.scala:22)\n\tat Problem.main(tmpbig7_2j5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else lst.sortWith((x : Long, y : Long) => x.toLong\
    \ < y.toLong).dropRight(1).head\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2q84xz2o.scala:17:84\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m lst.sortWith((x\
    \ : Long, y : Long) => x.toLong < y.toLong).dropRight(\e[31m1\e[0m).head\n\e[31m\e\
    [31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Long\n\e[31m   |\e[0m             Required:\
    \ Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028726
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val smallest = lst.minOption\n        smallest.map(_ + 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkq3d_0qr.scala:20)\n\tat Problem.main(tmpkq3d_0qr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) return None\n        val first = lst(0)\n        lst match\
    \ {\n            case Nil => Some(first)\n            case x :: Nil => Some(x)\n\
    \            case x :: xs => if (x < first) Some(x) else None\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp92mjhuxv.scala:25)\n\tat Problem.main(tmp92mjhuxv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var smallest: Long = lst(0)\n        var smallest_idx = 0\n        for ((index,\
    \ value) <- lst.view.zipWithIndex.filter(_._1 < smallest).reverse) {\n       \
    \     smallest = value\n            smallest_idx = index\n        }\n        smallest_idx\
    \ match {\n            case 0 => None\n            case 1 => Some(lst(smallest_idx))\n\
    \            case _ => nextSmallest(lst.take(smallest_idx).reverse)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcri3vavc.scala:18:77 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m ((index, value) <- lst.view.zipWithIndex.filter(_._1\
    \ < smallest).reverse) {\n\e[31m\e[31m   |\e[0m                              \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of scala.collection.View[(Long, Int)] - did you mean\
    \ scala.collection.View[(Long, Int)].reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1660028731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else if (lst.size == 1) Some(lst.head)\n   \
    \     else lst.tail.minBy { a =>\n            var i = 0\n            while (i<lst.size\
    \ && a<lst(i)) i += 1\n            lst(i)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjlxhoeaj.scala:18:13\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m lst.tail.minBy\
    \ { a =>\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m          \
    \   Found:    Long\n\e[31m   |\e[0m             Required: Option[Long]\n\e[31m19\
    \ |\e[0m            \e[33mvar\e[0m i = \e[31m0\e[0m\n\e[31m20 |\e[0m         \
    \   \e[33mwhile\e[0m (i<lst.size && a<lst(i)) i += \e[31m1\e[0m\n\e[31m21 |\e\
    [0m            lst(i)\n\e[31m22 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.isEmpty) None\n        else lst.minBy(_.toInt).asInstanceOf[Option[Long]].getOrElse(None)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1s69lrbu.scala:17:68\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m lst.minBy(_.toInt).asInstanceOf[Option[Long]].getOrElse(None)\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Matchable\n\e[31m   |\e[0m        \
    \     Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  // The 1st smallest element is the 1st element of the list, so check if the\
    \ first element is the first smallest element.\n        if(lst.headOption.contains(lst.head))\n\
    \            lst.headOption.get\n        else {\n            // If there are no\
    \ such element, then return the 2nd smallest element.\n            // If the list\
    \ has only 1 element (no list at all), then the 2nd smallest element is the element\
    \ itself.\n            if(!lst.isEmpty) lst(lst.indexOf(lst.min)).tail.headOption.get\n\
    \            else lst.headOption.get\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgqkbp8bc.scala:18:27\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            lst.headOption.get\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \        Found:    Long\n\e[31m   |\e[0m            Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgqkbp8bc.scala:22:55\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m(!lst.isEmpty)\
    \ lst(lst.indexOf(lst.min)).tail.headOption.get\n\e[31m\e[31m   |\e[0m       \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                           value tail is not a member of Long\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpgqkbp8bc.scala:23:32 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m lst.headOption.get\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \          Found:    Long\n\e[31m   |\e[0m                 Required: Option[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var min = 0\n        var max = 0\n        var index = 0\n        var current\
    \ = lst(0)\n        while(index<lst.length-1){\n            if(current<lst(index+1))\
    \ index = index + 1\n            else if(current>lst(index+1)) index = index +\
    \ 1\n            else return None\n        }\n        if (current==lst(index+1))\
    \ return Some(lst(index+1))\n        else return None\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.nextSmallest(tmpyf3ee_4q.scala:25)\n\tat Problem$.main(tmpyf3ee_4q.scala:29)\n\
    \tat Problem.main(tmpyf3ee_4q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  def loop(current : Option[Long], prev : Option[Long], i : Int) : Option[Long]\
    \ = {\n            if (i==lst.size)\n                current.orElse(None)\n  \
    \          else {\n                val nxt = lst(i+1)\n                if (nxt.lt(prev))\n\
    \                    loop(current.orElse(None), nxt, i+1)\n                else\
    \ {\n                    val prev = current.orElse(None)\n                   \
    \ loop(current.orElse(None), nxt, i)\n                }\n            }\n     \
    \   }\n        loop(None.to[Long], None.to[Long], 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcy9a0ak9.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m (nxt.lt(prev))\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \    value lt is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpcy9a0ak9.scala:22:47 --------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \                    loop(current.orElse(None), nxt, i+\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                               ^^^\e[0m\n\e[31m \
    \  |\e[0m                                               Found:    (nxt : Long)\n\
    \e[31m   |\e[0m                                               Required: Option[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcy9a0ak9.scala:25:47\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    loop(current.orElse(None),\
    \ nxt, i)\n\e[31m\e[31m   |\e[0m                                             \
    \  ^^^\e[0m\n\e[31m   |\e[0m                                               Found:\
    \    (nxt : Long)\n\e[31m   |\e[0m                                           \
    \    Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcy9a0ak9.scala:29:13 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        loop(None.to[\e[35mLong\e[0m], None.to[\e[35mLong\e[0m], \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \           Found:    scala.collection.Factory[Nothing, Long] => Long\n\e[31m\
    \   |\e[0m             Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcy9a0ak9.scala:29:28 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        loop(None.to[\e[35mLong\e[0m], None.to[\e[35mLong\e\
    [0m], \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Found:    scala.collection.Factory[Nothing,\
    \ Lon"
  stdout: ''
  timestamp: 1660028733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val n = lst.size\n        if (n < 2) None\n        else lst.tail.filter(_ <\
    \ lst.head).getOrElse(None)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1wg748ub.scala:18:43 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m lst.tail.filter(_ < lst.head).getOrElse(None)\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m             value getOrElse is not a member of List[Long]\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var smallest = lst(0)\n        var smaller = 0\n        for (i in 1 until lst.size)\
    \ {\n            val currentNumber = lst(i)\n            if (currentNumber < smallest)\
    \ {\n                smallest = currentNumber\n                smaller = i\n \
    \           }\n        }\n        if (smallest == lst(0)) {\n            None\n\
    \        } else {\n            Some(lst(smaller))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb5y3vu4_.scala:18:36 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i in \e[31m1\e[0m until lst.size)\
    \ {\n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m \
    \  |\e[0m                                    '<-' expected, but '{' found\n\e\
    [31m\e[31m-- [E020] Syntax Error: /tmp/tmpb5y3vu4_.scala:27:10 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        } \e[33melse\e[0m {\n\e[31m\e[31m   |\e[0m  \
    \        ^^^^\e[0m\n\e[31m   |\e[0m          \e[33myield\e[0m or \e[33mdo\e[0m\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb5y3vu4_.scala:24:9\
    \ -------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue withFilter is not a member of\
    \ Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  lst.toList.sorted.tail(2).lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoeu9rgc0.scala:16:34 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        lst.toList.sorted.tail(\e[31m2\e[0m).lastOption\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        value lastOption is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val sorted = lst.sortWith(_ < _)\n        if (sorted.isEmpty) {\n         \
    \   None\n        } else {\n            Some(sorted.last)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoc1yc1rn.scala:24)\n\tat Problem.main(tmpoc1yc1rn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.size < 2) {\n            None\n        } else {\n            lst.sortWith(_\
    \ < _).take(2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp97nsm0wk.scala:19:36\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            lst.sortWith(_ <\
    \ _).take(\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    \e[1m\e[31mList\e[0m[Long]\n\e[31m \
    \  |\e[0m            Required: \e[1m\e[32mOption\e[0m[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.size == 0) None\n        else if(lst.size == 1) Some(lst.head)\n   \
    \     else lst.tail.min match {\n            case None => None\n            case\
    \ Some(i) => Some(lst.head + i)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7728beco.scala:19:17\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m None\
    \ => None\n\e[31m\e[31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m  \
    \               Found:    None.type\n\e[31m   |\e[0m                 Required:\
    \ Long\n\e[31m   |\e[0m                 pattern type is incompatible with expected\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp7728beco.scala:20:42\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e\
    [0m Some(i) => Some(lst.head + i)\n\e[31m\e[31m   |\e[0m                     \
    \            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0m (x: String): String\n\e[31m   |\e[0mmatch arguments ((i : Any))\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.size <= 1)\n            None\n        else {\n            val min =\
    \ lst(0)\n            val nextMin = lst(1)\n            if(nextMin < min)\n  \
    \              Some(nextMin)\n            else\n                nextSmallest(std.dropRight(2).map(x\
    \ => (x, min)).toList)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp44xihoko.scala:24:29 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                nextSmallest(std.dropRight(\e[31m2\e\
    [0m).map(\e[36mx\e[0m => (x, min)).toList)\n\e[31m\e[31m   |\e[0m            \
    \                 ^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ std\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      lst.sortWith((a,\
    \ b) => (a < b) ? -1 : 1).head // Sorting the list based on its first element\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplo6cnla2.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m      lst.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => (a\
    \ < b) ? -\e[31m1\e[0m : \e[31m1\e[0m).head \e[34m// Sorting the list based on\
    \ its first element\e[0m\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value ? is not a member of Boolean\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  // write your function here\n        \n        val smallest = lst.head\n  \
    \      \n        if(smallest.isZero || lst.isEmpty) None\n        else {\n   \
    \     val rest = lst.tail\n        \n        rest.filter( i => i <  smallest)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpef8206uw.scala:37:0 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpef8206uw.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(smallest.isZero\
    \ || lst.isEmpty) None\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m           value isZero is not a member of Long\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpef8206uw.scala:36:1 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpef8206uw.scala:26:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m26 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660028734
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  lst.filter(x => x < lst.last).sortWith(_ < _).headOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplo586vez.scala:19)\n\tat Problem.main(tmplo586vez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  lst.sortWith(_ < _).takeWhile(_ < lst(1)).headOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzopijiwr.scala:19)\n\tat Problem.main(tmpzopijiwr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val l = lst.foldLeft((None, 0L)) { case ((n, m), i) => (if (n < i) (n, m) else\
    \ (i, m))}\n        Some(l._2)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqybkdrgn.scala:16:70 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = lst.foldLeft((None,\
    \ \e[31m0L\e[0m)) { \e[33mcase\e[0m ((n, m), i) => (\e[33mif\e[0m (n < i) (n,\
    \ m) \e[33melse\e[0m (i, m))}\n\e[31m\e[31m   |\e[0m                         \
    \                                           ^^^\e[0m\n\e[31m   |\e[0mvalue < is\
    \ not a member of object None, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqybkdrgn.scala:16:88 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = lst.foldLeft((None,\
    \ \e[31m0L\e[0m)) { \e[33mcase\e[0m ((n, m), i) => (\e[33mif\e[0m (n < i) (n,\
    \ m) \e[33melse\e[0m (i, m))}\n\e[31m\e[31m   |\e[0m                         \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (i : Long)\n\
    \e[31m   |\e[0m                                                    Required: None.type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.isEmpty) None\n        else {\n            val sorted = lst.sorted\n\
    \            val start = sorted.head\n            val end = sorted.last\n    \
    \        if(start < end) {\n                Some(sorted.find(_ < start).map(_.toLong))\n\
    \            } else {\n                Some(sorted.find(_ > end).map(_.toLong))\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp59n4ew7.scala:22:47\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                Some(sorted.find(_\
    \ < start).map(_.toLong))\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Option[Long]\n\e[31m   |\e\
    [0m                     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpp59n4ew7.scala:24:45 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                Some(sorted.find(_ > end).map(_.toLong))\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Option[Long]\n\e[31m   |\e\
    [0m                     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val n = lst.size\n        val l = lst.take(n)\n        val m = lst.drop(n).min\n\
    \        if (l != m) Some(m) else None\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_jtubt3a.scala:19:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (l != m) Some(m) \e[33melse\e[0m\
    \ None\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m    Values\
    \ of types List[Long] and Long cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660028737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var smallest = lst.head\n        for (x <- lst.tail) {\n            if (x <\
    \ smallest) {\n                smallest = x\n            }\n        }\n      \
    \  smallest\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoak58p_p.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        smallest\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (smallest :\
    \ Long)\n\e[31m   |\e[0m        Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028737
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.size>1) {\n            val min1 = lst.head\n            val min2 = lst.last\n\
    \            if(min1 > min2) {\n                lst :+ min2\n                Some(min2)\n\
    \            } else if(min2 > min1) {\n                lst :+ min1\n         \
    \       Some(min1)\n            } else None\n        } else {\n            None\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmposw4x18_.scala:31)\n\tat Problem.main(tmposw4x18_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else if (lst.size < 2) None\n        else if\
    \ (lst.size == 2) lst(0)\n        else {\n            val minValue = lst(0)\n\
    \            val listWithMinValue = lst.drop(1)\n            val minIndex = listWithMinValue.indexWhere\
    \ { case i => i == minValue }\n            Option(listWithMinValue(minIndex))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdk_o8r6o.scala:18:35\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (lst.size == \e[31m2\e[0m) lst(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                          ^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          Found:    Long\n\e[31m   |\e[0m                                Required:\
    \ Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028741
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.nonEmpty) Some(lst.minBy(_.toLong))\n        else None\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp91l1ajbe.scala:20)\n\tat Problem.main(tmp91l1ajbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var smallest = Option(lst(0))\n        for {\n            x <- lst\n      \
    \  } while (smallest.isEmpty || x < smallest.get) {\n            smallest = Option(x)\n\
    \        }\n        smallest\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps4zmvsfr.scala:25)\n\tat Problem.main(tmps4zmvsfr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val minNum = lst.min\n        if (minNum == lst(0) || minNum == lst(1).max(0)\
    \ || minNum == lst(2).max(0))\n            None\n        else\n            Some(minNum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuxt8sfxh.scala:23)\n\tat Problem.main(tmpuxt8sfxh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      val\
    \ n = lst.length\n      var smallest : Option[Long] = Option(lst.head)\n     \
    \ for (i <- 1 until n) {\n        if (smallest.isDefined) break\n        smallest\
    \ = lst.minBy { a => math.min(a) }\n      }\n      smallest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_r9l134p.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (smallest.isDefined) break\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E134] Type Error: /tmp/tmp_r9l134p.scala:20:41 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        smallest = lst.minBy { \e[36ma\e[0m => math.min(a)\
    \ }\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e\
    [0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e\
    [31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\
    \e[31m   |\e[0mmatch arguments ((a : Long))\n\e[31m\e[31m-- Error: /tmp/tmp_r9l134p.scala:20:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ smallest = lst.minBy { \e[36ma\e[0m => math.min(a) }\n\e[31m\e[31m   |\e[0m\
    \                                                 ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter cmp of \e[33mmethod\e\
    [0m \e[35mminBy\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val smallest = lst.min\n        lst match {\n            case Nil => None\n\
    \            case x :: y => if(x < smallest) Some(x) else nextSmallest(y) \n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.min\n\tat scala.collection.IterableOnceOps.min(IterableOnce.scala:914)\n\
    \tat scala.collection.IterableOnceOps.min$(IterableOnce.scala:912)\n\tat scala.collection.AbstractIterable.min(Iterable.scala:926)\n\
    \tat Problem$.nextSmallest(tmpkhwqimd9.scala:16)\n\tat Problem$.main(tmpkhwqimd9.scala:23)\n\
    \tat Problem.main(tmpkhwqimd9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val min = lst(0)\n        val ans = lst.tail.map { x =>\n            if (x\
    \ < min) min else x\n        }\n        if (ans.isEmpty) return None\n       \
    \ val max = ans.last\n        lst.dropWhile(_ < min) match {\n            case\
    \ x :: xs => Some(xs.reduceLeft(max)) { case (acc, y) => if (y > acc) y else acc\
    \ }\n            case _ => None\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_cdlt4pn.scala:23:47\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m x\
    \ :: xs => Some(xs.reduceLeft(max)) { \e[33mcase\e[0m (acc, y) => \e[33mif\e[0m\
    \ (y > acc) y \e[33melse\e[0m acc }\n\e[31m\e[31m   |\e[0m                   \
    \                            ^^^\e[0m\n\e[31m   |\e[0m                       \
    \                   Found:    (max : Long)\n\e[31m   |\e[0m                  \
    \                        Required: (Long, Long) => Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val smallest = lst.sortBy(_ < lst(0))\n        if(smallest.length == 1) Some(smallest(0))\n\
    \        else Some(smallest.drop(1).min)(smallest.length < 2L)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpcvt4tx6b.scala:18:17 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m Some(smallest.drop(\e[31m1\e\
    [0m).min)(smallest.length < \e[31m2L\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \e[33mmethod\e\
    [0m \e[35mapply\e[0m in \e[33mobject\e[0m \e[35mSome\e[0m does not take more parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.size < 2) None\n        else {\n            val a = lst\n          \
    \  val b = lst.sortBy(-_)\n            val c = b.head\n            val d = b.tail\n\
    \            val smallest = d\n            val smaller = b\n            val smaller_1\
    \ = smaller.filter(_ > c)\n            val smallest_1 = smaller.filter(_ < c)\n\
    \            smallest_1 match {\n                case head :: tail => smallest\n\
    \                case _ => smaller_1 match {\n                    case head ::\
    \ tail => smallest\n                    case _ => smaller_1 match {\n        \
    \                case head :: tail => smallest\n                        case _\
    \ => smaller_1 match {\n                            case head :: tail => smallest\n\
    \                            case _ => smaller_1 match {\n                   \
    \             case head :: tail => smallest\n                                case\
    \ _ => smaller_1 match {\n                                    case head :: tail\
    \ => smallest\n                                    case _ => smaller_1 match {\n\
    \                                        case head :: tail => smallest\n     \
    \                                   case _ => smaller_1 match {\n            \
    \                                case head :: tail => smallest\n             \
    \                               case _ => smaller_1 match {\n                \
    \                                case head :: tail => smallest\n             \
    \                                   case _ => smaller_1 match {\n            \
    \                                        case head :: tail => smallest\n     \
    \                                               case _ => smaller_1 match {\n\
    \                                                        case head :: tail =>\
    \ smallest\n                                                        case _ =>\
    \ smaller_1 match {\n                                                        \
    \    case head :: tail => smallest\n                                         \
    \                   case _ => smaller_1 match {\n                            \
    \                                    case head :: tail => smallest\n         \
    \                                                       case _ => smaller_1 match\
    \ {\n                                                                    case\
    \ head :: tail => smallest\n                                                 \
    \                   case _ => smaller_1 match {\n                            \
    \                                            case head :: tail => smallest\n \
    \                                                                       case _\
    \ => smaller_1 match {\n                                                     \
    \                       case head :: tail => smallest\n                      \
    \                                                      case _ => smaller_1 match\
    \ {\n                                                                        \
    \        case head :: tail => smallest\n                                     \
    \                                           case _ => smaller_1 match {\n    \
    \                                                                            \
    \    case head :: tail => smallest\n                                         \
    \                                           case _ => smaller_1 match {\n    \
    \                                                                            \
    \        case head :: tail => smallest\n                                     \
    \                                                   case _ => smaller_1 match\
    \ {\n                                                                        \
    \                    case head :: tail => smallest\n                         \
    \                                                                   case _ =>\
    \ smaller_1 match {\n                                                        \
    \                                        case head :: tail => smallest\n     \
    \                                                                            \
    \               case _ => smaller_1 match {\n                                \
    \                                                                    case head\
    \ :: \n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpf7i6q2dl.scala:69:112 --------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m                                                    \
    \                                                \e[33mcase\e[0m head :: \n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                                        pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf7i6q2dl.scala:82:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m82 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpf7i6q2dl.scala:27:37 --------------------\e[0m\e[0m\n\
    \e[31m27 |\e[0m                \e[33mcase\e[0m head :: tail => smallest\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                     Found:    (smallest : List[Long])\n\e\
    [31m   |\e[0m                                     Required: Option[Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf7i6q2dl.scala:29:41 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    \e[33mcase\e[0m head :: tail => smallest\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                       Found:    (smallest : List[Long])\n\
    \e[31m   |\e[0m                                       Required: Option[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf7i6q2dl.scala:31:45\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m                        \e[33mcase\e\
    [0m head :: tail => smallest\n\e[31m\e[31m   |\e[0m                          \
    \                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \            Found:    (smallest : List[Long])\n\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1660028747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val maxLen = lst.foldLeft(1l)(max(_, _))\n        lst.map(v => if (v < maxLen)\
    \ v else maxLen + v)\n            .foldLeft(None)(_ + _)\n            .find(v\
    \ => v > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7hq_lb_c.scala:18:30 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            .foldLeft(None)(_ + _)\n\e[31m\e[31m   |\e\
    [0m                            ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of object None, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp7hq_lb_c.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            .find(v => v > \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                       ^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member\
    \ of Nothing, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\e[31m\
    \   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660028745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.size < 2) None\n        else {\n            lst.sortWith(_ < _)\n  \
    \          lst.last\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyhdorwrj.scala:19:16\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            lst.last\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\
    \e[31m   |\e[0m            Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val l = lst.toList\n        if (l.isEmpty)\n            None\n        else\
    \ {\n            val m = l.min\n            val j = l.indexOf(m) + 1\n       \
    \     l.take(j - 1).find(x => x < m).getOrElse(m)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptpcies3p.scala:22:52\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            l.take(j - \e[31m1\e\
    [0m).find(\e[36mx\e[0m => x < m).getOrElse(m)\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \    Found:    Long\n\e[31m   |\e[0m            Required: Option[Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var smallest = lst.head\n        var counter = 1\n        for(i <- 1 until\
    \ lst.length) {\n            val current = lst(i)\n            if(current < smallest\
    \ || (smallest == current && i != counter))\n                smallest = current\n\
    \            counter += 1\n        }\n        \n        if(smallest != lst.last)\n\
    \            Some(smallest)\n        else\n            None\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1y_h2i3u.scala:31)\n\tat Problem.main(tmp1y_h2i3u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  def helper(lst : List[Long], i : Int, smallest_num : Long, found_num : Long)\
    \ : Option[Long] = {\n            if (lst.isEmpty) None\n            else {\n\
    \                if (lst(i) < smallest_num) {\n                    found_num +=\
    \ 1\n                    if (found_num >= 2) {\n                        val new_min\
    \ = lst(i)\n                        val new_found_num = found_num\n          \
    \              helper(lst.tail, i, smallest_num, new_found_num)\n            \
    \        } else None\n                } else helper(lst.tail, i, smallest_num,\
    \ found_num)\n            }\n        }\n        helper(lst, 0, smallest = lst(0),\
    \ found = 1)\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj53l6dde.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    found_num += \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \ value += is not a member of Long - did you mean found_num.!=?\n\e[31m\e[31m--\
    \ Error: /tmp/tmpj53l6dde.scala:29:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        helper(lst, \e[31m0\e[0m, smallest = lst(\e[31m0\e\
    [0m), found = \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m\e[33mmethod\e[0m \e[35mhelper\e[0m: (lst: List[Long], i:\
    \ Int, smallest_num: Long, found_num: Long): Option[Long] does not have a parameter\
    \ smallest\n\e[31m\e[31m-- Error: /tmp/tmpj53l6dde.scala:29:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        helper(lst, \e[31m0\e[0m, smallest = lst(\e[31m0\e\
    [0m), found = \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\e[33mmethod\e[0m \e[35mhelper\e\
    [0m: (lst: List[Long], i: Int, smallest_num: Long, found_num: Long): Option[Long]\
    \ does not have a parameter found\n3 errors found\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val smallest = lst.min\n        if (smallest < lst.min) {\n            smallest\n\
    \        } else {\n            lst.find( _ < smallest )\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpck59x2he.scala:18:12\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            smallest\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (smallest\
    \ : Long)\n\e[31m   |\e[0m            Required: Option[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val mSet = mutable.TreeSet[Long]()\n        lst.foreach(x => mSet.add(x))\n\
    \        val l2 = mSet.map(mSet(_))\n        val l3 = mSet.filter(_ == l2.min).toList.size\n\
    \        val l4 = mSet.filter(x => x == l2.min).toList.size\n        if (l3 ==\
    \ 0) {\n            None\n        }\n        else if (l3 == 1) {\n           \
    \ l2.min\n        }\n        else if (l3 == 2) {\n            l2.min\n       \
    \ }\n        else if (l3 == 3) {\n            l2.min\n        }\n        else\
    \ if (l4 == 0) {\n            None\n        }\n        else if (l4 == 1) {\n \
    \           mSet.min\n        }\n        else if (l4 == 2) {\n            mSet.min\n\
    \        }\n        else if (l4 == 3) {\n            mSet.min\n        }\n   \
    \     else {\n            None\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwazk8oyh.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmSet\e[0m = mutable.TreeSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.isEmpty) None\n        else {\n            val n = lst.head\n      \
    \      val m = lst.drop(1).min\n            val result = n if m > n else m\n \
    \           if(lst.isEmpty) None else Some(result)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpv9rpyuq0.scala:20:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m = n \e[33mif\e\
    [0m m > n \e[33melse\e[0m m\n\e[31m\e[31m   |\e[0m                           ^^\e\
    [0m\n\e[31m   |\e[0m                           end of statement expected but 'if'\
    \ found\n1 error found\n"
  stdout: ''
  timestamp: 1660028742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val (smallest, second) = lst.span(_ < lst.min) match {\n            case (x\
    \ :: xs, y :: ys) => (x, y)\n            case _ => (None, None)\n        }\n \
    \       if (smallest.forall(_.isDefined)) {\n            second.headOption\n \
    \       }\n        else {\n            None\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr_jyni_2.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (smallest.forall(_.isDefined))\
    \ {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \          value forall is not a member of Matchable\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpr_jyni_2.scala:21:19 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            second.headOption\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value headOption is not\
    \ a member of Matchable\n2 errors found\n"
  stdout: ''
  timestamp: 1660028745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val smallest = lst.min\n        val twoSmallest = lst.filter(x => x < smallest).min\n\
    \        if (twoSmallest < smallest)\n            Some(twoSmallest)\n        else\n\
    \            None\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.min\n\tat scala.collection.IterableOnceOps.min(IterableOnce.scala:914)\n\
    \tat scala.collection.IterableOnceOps.min$(IterableOnce.scala:912)\n\tat scala.collection.AbstractIterable.min(Iterable.scala:926)\n\
    \tat Problem$.nextSmallest(tmpg7om0tjo.scala:17)\n\tat Problem$.main(tmpg7om0tjo.scala:24)\n\
    \tat Problem.main(tmpg7om0tjo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.isEmpty)\n            None\n        else {\n            val index =\
    \ lst.indexOf(lst.min)\n            if((index + 1) == lst.size)\n            \
    \    lst.min\n            else nextSmallest(lst.drop(index+1))\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcfa7yxy2.scala:21:16\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                lst.min\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    Long\n\e[31m   |\e[0m                Required: Option[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) {\n            None\n        } else {\n            val smallest\
    \ = lst.min\n            val rest = lst.filterNot(_ == smallest)\n           \
    \ val smallestInRest = rest.min\n            if (smallestInRest < smallest) {\n\
    \                Some(smallestInRest)\n            } else {\n                None\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0c3dnu6b.scala:30)\n\tat Problem.main(tmp0c3dnu6b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val ordered = lst.sorted\n        if (ordered.isEmpty)\n            None\n\
    \        else {\n            var smallest = ordered.head\n            var index\
    \ = ordered.indexOfFirst { elem =>\n                if (elem < smallest)\n   \
    \                 smallest = elem\n                else\n                    false\n\
    \            }\n            if (index > 0) smallest = ordered(index - 1)\n   \
    \         else smallest = None\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0yie78mn.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mvar\e[0m \e[36mindex\e[0m = ordered.indexOfFirst\
    \ { \e[36melem\e[0m =>\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value indexOfFirst is not a member\
    \ of List[Long]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0yie78mn.scala:27:36\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (index\
    \ > \e[31m0\e[0m) smallest = ordered(index - \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    Unit\n\e[31m   |\e[0m                \
    \           Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0yie78mn.scala:28:28 --------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m            \e[33melse\e[0m smallest = None\n\e[31m\e[31m   |\e[0m   \
    \                         ^^^^\e[0m\n\e[31m   |\e[0m                         \
    \   Found:    None.type\n\e[31m   |\e[0m                            Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028749
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val n = lst.size\n        if(n > 0) {\n            val m = lst.min\n      \
    \      if(m > lst.last.asInstanceOf[Long]){\n                nextSmallest(lst.filter(_\
    \ < m))\n            }\n            else if(m == lst.last.asInstanceOf[Long]){\n\
    \                Some(m)\n            }\n            else {\n                nextSmallest(lst.filter(_\
    \ < m).map(_ + 1))\n            }\n        }\n        else None\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpztq742i_.scala:32)\n\tat Problem.main(tmpztq742i_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028752
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val smallest = lst.min\n        val nextSmallest = lst.filter(x => x < smallest).min\n\
    \        if (nextSmallest != smallest) Some(nextSmallest)\n        else None\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.min\n\tat scala.collection.IterableOnceOps.min(IterableOnce.scala:914)\n\
    \tat scala.collection.IterableOnceOps.min$(IterableOnce.scala:912)\n\tat scala.collection.AbstractIterable.min(Iterable.scala:926)\n\
    \tat Problem$.nextSmallest(tmpgr4admv6.scala:17)\n\tat Problem$.main(tmpgr4admv6.scala:22)\n\
    \tat Problem.main(tmpgr4admv6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  // Write your function here\n        val tempList = lst.sortBy(_).take(2)\n\
    \        tempList.headOption\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpm91axm7f.scala:17:34 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mtempList\e[0m = lst.sortBy(_).take(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e\
    [31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$1 of expanded function:\n\e[31m   |\e\
    [0m   _$1 => lst.sortBy(_$1).take(2).\n\e[31m\e[31m-- Error: /tmp/tmpm91axm7f.scala:17:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mtempList\e[0m = lst.sortBy(_).take(\e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mBigDecimal\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660028749
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  require(!lst.isEmpty, \"There should be at least one element to compare with\"\
    )\n        var smallest = lst.head\n        var secondSmallest = lst.head\n\n\
    \        for (elem <- lst.tail) {\n            if (elem < smallest ) {\n     \
    \           secondSmallest = smallest\n                smallest = elem\n     \
    \       } else { \n                if (elem < secondSmallest) {\n            \
    \        secondSmallest = elem\n                }\n            }\n        }\n\n\
    \        smallest match {\n            case 1l => None\n            case 2l =>\
    \ Some(secondSmallest)\n            case _ => None\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy0u0ogfe.scala:38)\n\tat Problem.main(tmpy0u0ogfe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val nums = mutable.ListBuffer.empty[Long]\n        for (x1 <- lst) {\n    \
    \        if (x1 < nums.last)\n                nums += x1\n        }\n        if\
    \ (nums.isEmpty)\n            None\n        else\n            nums(1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkc8945xz.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028749
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val min_lst = lst.sortBy(_)\n        if (min_lst.size > 2) {\n            return\
    \ Some(lst.sorted)\n        }\n        else {\n            val i = min_lst.indexOf(_)\n\
    \            if (i == 0) None\n            else Some(min_lst(i - 1))\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfl034b6z.scala:16:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmin_lst\e[0m = lst.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0mNo\
    \ implicit Ordering defined for Any..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m    scala.math.Ordering.ordered[\e[35mAny\e[0m](\n\e[31m   |\e\
    [0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\e[31m  \
    \ |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were found\
    \ that match type scala.math.Ordering.AsComparable[Any].\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpfl034b6z.scala:18:24 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mreturn\e[0m Some(lst.sorted)\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e\
    [0m\n\e[31m   |\e[0m                        Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E081] Type Error: /tmp/tmpfl034b6z.scala:21:36 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mi\e[0m = min_lst.indexOf(_)\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 =>\
    \ min_lst.indexOf(_$2).\n3 errors found\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val res = new mutable.ArrayBuffer[Long]()\n        lst.foreach { x => \n  \
    \          if (res.length == 0 || res.length == 1 || x < res(res.length-1)) res\
    \ += x\n        }\n        res.lastOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw6n__wpr.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028749
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var smallest = lst.headOption\n        for(i <- lst : i : Iterator[Long]()){\n\
    \            if (smallest.isEmpty) {\n                smallest = i\n         \
    \   } else if (i.get < smallest.get) {\n                smallest = i\n       \
    \     }\n        }\n        smallest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphha7rs9m.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- lst : \e[35mi\e[0m : Iterator[Long]()){\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 ')' expected, but ':' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmphha7rs9m.scala:17:23 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mfor\e[0m(i <- lst : \e[35mi\e[0m : Iterator[Long]()){\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: type i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  lst.sortWith(_ < _)\n        lst.drop(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbqy9z1xb.scala:17:16\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        lst.drop(\e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found: \
    \   \e[1m\e[31mList\e[0m[Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mOption\e\
    [0m[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  def inc(i : Long, acc : Long) : Option[Long] = {\n            if (i == 0)\n\
    \                None\n            else\n                Some(acc)\n        }\n\
    \n        inc(lst.head, lst.last) match {\n            case Some(acc) =>\n   \
    \             inc(lst.tail.last, acc) match {\n                    case Some(acc2)\
    \ =>\n                        inc(lst.tail.last, acc2) match {\n             \
    \               case Some(acc3) =>\n                                inc(lst.tail.last,\
    \ acc3) match {\n                                    case Some(acc4) =>\n    \
    \                                    inc(lst.tail.last, acc4) match {\n      \
    \                                      case Some(acc5) =>\n                  \
    \                              inc(lst.tail.last, acc5) match {\n            \
    \                                        case Some(acc6) =>\n                \
    \                                        Some(acc6)\n                        \
    \                        }\n                                            }\n  \
    \                                      }\n                                }\n\
    \                        }\n                }\n            case None =>\n    \
    \            None\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpha7lr16l.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m            \e[33mcase\e[0m None =>\n\e[31m\e[31m   |\e\
    [0m            ^^^^\e[0m\n\e[31m   |\e[0m            '}' expected, but 'case'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpha7lr16l.scala:56:0 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected,\
    \ but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpha7lr16l.scala:47:11\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m    assert(nextSmallest((List[\e\
    [35mLong\e[0m](\e[31m1l\e[0m.toLong, \e[31m2l\e[0m.toLong, \e[31m3l\e[0m.toLong,\
    \ \e[31m4l\e[0m.toLong, \e[31m5l\e[0m.toLong))).equals(\e[31m2l\e[0m));\n\e[31m\e\
    [31m   |\e[0m           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           Not found:\
    \ nextSmallest\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpha7lr16l.scala:48:11\
    \ ------------------------\e[0m\e[0m\n\e[31m48 |\e[0m    assert(nextSmallest((List[\e\
    [35mLong\e[0m](\e[31m5l\e[0m.toLong, \e[31m1l\e[0m.toLong, \e[31m4l\e[0m.toLong,\
    \ \e[31m3l\e[0m.toLong, \e[31m2l\e[0m.toLong))).equals(\e[31m2l\e[0m));\n\e[31m\e\
    [31m   |\e[0m           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           Not found:\
    \ nextSmallest\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpha7lr16l.scala:49:11\
    \ ------------------------\e[0m\e[0m\n\e[31m49 |\e[0m    assert(nextSmallest((List[\e\
    [35mLong\e[0m]())).equals(None));\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           Not found: nextSmallest\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpha7lr16l.scala:50:11 ------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    assert(nextSmallest((List[\e[35mLong\e[0m](\e[31m1l\e\
    [0m.toLong, \e[31m1l\e[0m.toLong))).equals(None));\n\e[31m\e[31m   |\e[0m    \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           Not found: nextSmallest\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer e"
  stdout: ''
  timestamp: 1660028750
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) {\n            None \n        } else {\n            val sortedList\
    \ = lst.sorted\n            val index = sortedList.indexOf(lst.last)\n       \
    \     if (index == 0 || index == sortedList.size - 1) {\n                None\n\
    \            } else {\n                val nextIndex = index - 1\n           \
    \     val value = sortedList(nextIndex)\n                if (value <= lst.last)\
    \ {\n                    Some(value)\n                } else {\n             \
    \       None\n                }\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx2gs0hor.scala:35)\n\tat Problem.main(tmpx2gs0hor.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val min = lst.min()\n        val max = lst.max()\n        if(max == min)\n\
    \            None\n        else \n            lst.find(_ >= min) match {\n   \
    \             case Some(i) => Some(lst(i+1))\n                case None => None\n\
    \            }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbdh5m2kk.scala:16:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = lst.min()\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument\
    \ for parameter ord of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mtrait\e[0m \e\
    [35mIterableOnceOps\e[0m: (\e[33mimplicit \e[0mord: Ordering[B]): Long\n\e[31m\e\
    [31m-- Error: /tmp/tmpbdh5m2kk.scala:17:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = lst.max()\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument\
    \ for parameter ord of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mtrait\e[0m \e\
    [35mIterableOnceOps\e[0m: (\e[33mimplicit \e[0mord: Ordering[B]): Long\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbdh5m2kk.scala:22:41 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m Some(i) => Some(lst(i+\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                         ^^^\e\
    [0m\n\e[31m   |\e[0m                                         Found:    Long\n\e\
    [31m   |\e[0m                                         Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else {\n            val (i, newlst) = lst.span(x\
    \ => x < lst(1))\n            if (i < lst.length - 1) Some(newlst(i+1)) else None\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiecssoc_.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (i < lst.length - \e[31m1\e\
    [0m) Some(newlst(i+\e[31m1\e[0m)) \e[33melse\e[0m None\n\e[31m\e[31m   |\e[0m\
    \                ^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiecssoc_.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (i < lst.length - \e[31m1\e\
    [0m) Some(newlst(i+\e[31m1\e[0m)) \e[33melse\e[0m None\n\e[31m\e[31m   |\e[0m\
    \                                                ^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660028757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else {\n            val sortedList  = lst.sortWith((a,\
    \ b) => a.compare(b) > 0)\n            val secondSmallest = if (sortedList.length\
    \ >= 2) sortedList(1) else sortedList(0)\n            val firstSmallest = if (sortedList.length\
    \ >= 1) sortedList(0) else None\n            val firstBigger    = if (firstSmallest.isDefined)\
    \ firstSmallest else secondSmallest\n            val secondBigger = if (firstBigger.isDefined)\
    \ firstBigger else secondSmallest\n            val thirdBigger   = if (secondBigger.isDefined)\
    \ secondBigger else firstSmallest\n            val fourthBigger = if (thirdBigger.isDefined)\
    \ thirdBigger else secondSmallest\n            val fifthBigger  = if (fourthBigger.isDefined)\
    \ fourthBigger else firstSmallest\n            val sixthBigger  = if (fifthBigger.isDefined)\
    \ fifthBigger else secondSmallest\n            val seventhBigger = if (sixthBigger.isDefined)\
    \ sixthBigger else firstSmallest\n            val eighthBigger = if (seventhBigger.isDefined)\
    \ seventhBigger else secondSmallest\n            val ninthBigger  = if (eighthBigger.isDefined)\
    \ eighthBigger else firstSmallest\n            Some(ninthBigger)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp53lu5g71.scala:21:51 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mfirstBigger\e[0m   \
    \ = \e[33mif\e[0m (firstSmallest.isDefined) firstSmallest \e[33melse\e[0m secondSmallest\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value isDefined is not a member\
    \ of Matchable\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp53lu5g71.scala:22:47\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36msecondBigger\e[0m = \e[33mif\e[0m (firstBigger.isDefined) firstBigger\
    \ \e[33melse\e[0m secondSmallest\n\e[31m\e[31m   |\e[0m                      \
    \             ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \        value isDefined is not a member of Matchable\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp53lu5g71.scala:23:49 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m            \e[33mval\e[0m \e[36mthirdBigger\e[0m   = \e[33mif\e\
    [0m (secondBigger.isDefined) secondBigger \e[33melse\e[0m firstSmallest\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            value isDefined is not a member of\
    \ Matchable\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp53lu5g71.scala:24:47\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36mfourthBigger\e[0m = \e[33mif\e[0m (thirdBigger.isDefined) thirdBigger\
    \ \e[33melse\e[0m secondSmallest\n\e[31m\e[31m   |\e[0m                      \
    \             ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \        value isDefined is not a member of Matchable\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp53lu5g71.scala:25:48 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m            \e[33mval\e[0m \e[36mfifthBigger\e[0m  = \e[33mif\e\
    [0m (fourthBigger.isDefined) fourthBigger \e[33melse\e[0m firstSmallest\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            value isDefined is not a member of Matchable\n\
    \e[31m\e[31m-- [E00"
  stdout: ''
  timestamp: 1660028757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None else lst.minBy(_.toLong)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3mp9agkw.scala:16:35\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (lst.isEmpty)\
    \ None \e[33melse\e[0m lst.minBy(_.toLong)\n\e[31m\e[31m   |\e[0m            \
    \                       ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \             Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028755
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val mst = lst.sortWith(_ < _).drop(1)\n        mst.headOption.orElse(None)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiq2oar41.scala:20)\n\tat Problem.main(tmpiq2oar41.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.size == 0)\n            None\n        else {\n            var min_num\
    \ = lst(0).toLong\n            for(elem <- lst) {\n                if(min_num\
    \ < elem.toLong) {\n                    min_num = elem.toLong\n              \
    \  }\n            }\n            Some(min_num)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw8qm_uzv.scala:29)\n\tat Problem.main(tmpw8qm_uzv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) {\n            None\n        } else if (lst.head._2 < lst.last._2)\
    \ {\n            lst.head._2\n        } else {\n            lst.last._2\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1bmtz7_l.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        } \e[33melse\e[0m \e[33mif\e[0m (lst.head._2\
    \ < lst.last._2) {\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   value _2 is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp1bmtz7_l.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            lst.head._2\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value _2 is not a member of\
    \ Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1bmtz7_l.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            lst.last._2\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value _2 is not a member of\
    \ Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660028757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else {\n            val list = lst.take(1)\n\
    \            val min = list.head\n            val rest = list.tail\n         \
    \   if (rest.exists(elem => elem < min)) Some(list.last)\n            else if\
    \ (rest.forall(elem => elem < min)) Some(list.last)\n            else None\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpingz3e93.scala:27)\n\tat Problem.main(tmpingz3e93.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) {\n            None\n        }\n        val curr = lst.head\n\
    \        val (prev, next) = lst.splitAt(1)\n        if (next.contains(curr)) {\n\
    \            Some(next)\n        } else if (prev == Nil) {\n            None\n\
    \        } else {\n            Some(next)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjmkggdwc.scala:22:17\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Some(next)\n\e[31m\e\
    [31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m                 Found:\
    \    (next : List[Long])\n\e[31m   |\e[0m                 Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjmkggdwc.scala:26:17 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Some(next)\n\e[31m\e[31m   |\e[0m       \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                 Found:    (next : List[Long])\n\
    \e[31m   |\e[0m                 Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.isEmpty)\n            None\n        else\n            lst.sortWith(_\
    \ < _).take(2)\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprpmzl47c.scala:19:36\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            lst.sortWith(_ <\
    \ _).take(\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    \e[1m\e[31mList\e[0m[Long]\n\e[31m \
    \  |\e[0m            Required: \e[1m\e[32mOption\e[0m[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028759
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  require(!lst.isEmpty, \"nextSmallest called with an empty list\")\n       \
    \ lst.headOption match {\n            case None => None\n            case Some(x)\
    \ => if (lst.tail.isEmpty) Some(lst(0)) else None\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpru7psq4w.scala:23)\n\tat Problem.main(tmpru7psq4w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028761
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  // write your code here\n        var smallest:Long = -1l\n        for(i <-\
    \ lst.indices) {\n            if(i>0 && lst(i) < smallest) {\n               \
    \ smallest = lst(i)\n            }\n        }\n        if(smallest != -1l) {\n\
    \            return Some(smallest)\n        } else {\n            return None\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3yl9j3u2.scala:30)\n\tat Problem.main(tmp3yl9j3u2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else {\n            var smallest = lst.head\n\
    \            var smaller_than_first = lst.tail.forall(x => x < smallest)\n   \
    \         \n            if (smaller_than_first) lst.tail.headOption.map(smallest)\
    \ => Some(smallest)\n            else { smallest = lst.head; lst.tail.headOption.map(smallest)\
    \ => Some(smallest) }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnwzcpd38.scala:21:59 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (smaller_than_first) lst.tail.headOption.map(smallest)\
    \ => Some(smallest)\n\e[31m\e[31m   |\e[0m                                   \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                not a legal formal parameter\n\e[31m\e[31m-- Error: /tmp/tmpnwzcpd38.scala:22:63\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \     \e[33melse\e[0m { smallest = lst.head; lst.tail.headOption.map(smallest)\
    \ => Some(smallest) }\n\e[31m\e[31m   |\e[0m                                 \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                          not a legal formal parameter\n2 errors found\n"
  stdout: ''
  timestamp: 1660028758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val size = lst.size\n        if (size < 2) {\n            None\n        }\n\
    \        else {\n            val iterator = lst.iterator\n            val current\
    \ = iterator.next()\n            val index = lst.indexOf(current)\n          \
    \  if (index == size) {\n                None\n            }\n            else\
    \ if (index < (size - 1)) {\n                val next = iterator.next()\n    \
    \            lst.update(index, next)\n                Some(next)\n           \
    \ }\n            else {\n                val next = iterator.next()\n        \
    \        lst.update(size - 1, next)\n                Some(next)\n            }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkhtz4418.scala:29:20 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                lst.update(index, next)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value update is not\
    \ a member of List[Long] - did you mean lst.updated?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpkhtz4418.scala:34:20 ------------------------\e[0m\e[0m\n\
    \e[31m34 |\e[0m                lst.update(size - \e[31m1\e[0m, next)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value update is\
    \ not a member of List[Long] - did you mean lst.updated?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  lst.view.zipWithIndex.filter{ case ((a, b), idx) => a < b}.\n            map{case\
    \ (elem, idx) => (idx, elem)}.\n            foldRight(Some(lst.head)) {\n    \
    \        case ((idx, smallest), elem) =>\n                if (smallest > elem)\
    \ {\n                    smallest\n                } else {\n                \
    \    None\n                }\n            }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgxvhihcy.scala:16:62 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        lst.view.zipWithIndex.filter{ \e[33mcase\e[0m\
    \ ((a, b), idx) => a < b}.\n\e[31m\e[31m   |\e[0m                            \
    \                                ^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member\
    \ of Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpgxvhihcy.scala:20:29 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m (smallest > elem) {\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35m>\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\e[31m \
    \  |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e\
    [0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x:\
    \ Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments\
    \ ((elem : Some[Long]))\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgxvhihcy.scala:21:20\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    smallest\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \              Found:    (smallest : Long)\n\e[31m   |\e[0m                  \
    \  Required: Some[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgxvhihcy.scala:23:20\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    None\n\e\
    [31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m            \
    \        Found:    None.type\n\e[31m   |\e[0m                    Required: Some[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val lst2 = lst.sortWith(_ < _)\n        lst2.headOption\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpilip4j7c.scala:20)\n\tat Problem.main(tmpilip4j7c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028763
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val sorted = lst.sortWith(_ < _)\n        if (sorted == Nil) None\n       \
    \ else {\n            val first = sorted.head\n            val second = sorted.drop(1).min\n\
    \            if (second == first) Some(second)\n            else nextSmallest(sorted)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  def nextSmallestHelper(list : List[Long], smallest: Long) = {\n           \
    \ list match {\n                case Nil => None\n                case list ::\
    \ tail =>\n                    if (smallest > head) Some(smallest)\n         \
    \           else nextSmallestHelper(tail, smallest)\n            }\n        }\n\
    \n        nextSmallestHelper(lst, lst(1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7nic0ggx.scala:20:35 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    \e[33mif\e[0m (smallest > head) Some(smallest)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\e[31m   |\e\
    [0m                                   Not found: head\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E044] Cyclic Error: /tmp/tmp7nic0ggx.scala:21:25 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33melse\e[0m nextSmallestHelper(tail,\
    \ smallest)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m     Overloaded or recursive \e[33mmethod\e[0m \e[35mnextSmallestHelper\e[0m\
    \ needs return type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  // write your logic here\n        \n        \n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj7y06bt3.scala:15:56\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m    \e[33mdef\e[0m \e[36mnextSmallest\e\
    [0m(\e[36mlst\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mOption\e[0m[\e\
    [35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                                    \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: Option[Long]\n\e[31m16 |\e[0m        \e[34m//\
    \ write your logic here\e[0m\n\e[31m17 |\e[0m        \n\e[31m18 |\e[0m       \
    \ \n\e[31m19 |\e[0m        \n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val smallest = lst.min\n        val index = lst.indexOf(smallest)\n       \
    \ if (index <= (lst.size - 2)) {\n            Some(lst.apply(index + 1))\n   \
    \     }\n        else {\n            None\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkwgnhsip.scala:26)\n\tat Problem.main(tmpkwgnhsip.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else {\n            var smallest = lst(0)\n\
    \            var index = 0\n            var temp = 0\n            for(i <- 1 to\
    \ lst.size) {\n                if(smallest.compareTo(i) < 0) {\n             \
    \       smallest = i\n                    temp = lst(index)\n                }\n\
    \                else {\n                    if(smallest.compareTo(i) > 0) {\n\
    \                        return Some(temp)\n                    }\n          \
    \          else smallest = i\n                }\n                index += 1\n\
    \            }\n            None\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc1cgbpj9.scala:22:38\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e[0m(smallest.compareTo(i)\
    \ < \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                                   \
    \   ^\e[0m\n\e[31m   |\e[0m                                      Found:    (i\
    \ : Int)\n\e[31m   |\e[0m                                      Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc1cgbpj9.scala:24:30\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    temp = lst(index)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    Long\n\e[31m   |\e[0m                \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpc1cgbpj9.scala:27:42 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                    \e[33mif\e[0m(smallest.compareTo(i) > \e[31m0\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (i : Int)\n\e\
    [31m   |\e[0m                                          Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  lst.headOption match {\n            case None => None\n            case Some(elem)\
    \ => Some(lst.tail.min.filter(_ > elem))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7pa4pih3.scala:18:49 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m Some(elem) => Some(lst.tail.min.filter(_\
    \ > elem))\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value filter is not a\
    \ member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660028764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val n = lst.size\n        if(n <= 0) None\n        else lst.sortBy(-_).headOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1egejw3u.scala:21)\n\tat Problem.main(tmp1egejw3u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028767
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  lst.sortWith(_ > _)\n        if (lst.size >= 2) Some(lst.apply(1))\n      \
    \  else None\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4x7el4qq.scala:21)\n\tat Problem.main(tmp4x7el4qq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val nm = lst.sortBy(_).last\n        nm match {\n            case Some(_) =>\
    \ Some(nm)\n            case _ => None\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpjbnba11c.scala:16:28 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnm\e[0m = lst.sortBy(_).last\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => lst.sortBy(_$1).last.\n\
    \e[31m\e[31m-- Error: /tmp/tmpjbnba11c.scala:16:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnm\e[0m = lst.sortBy(_).last\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660028767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val sorted = lst.sorted\n        if (sorted == lst) {\n            None\n \
    \       } else {\n            val index = sorted.indexWhere(x => x > sorted(0))\n\
    \            val index = if (index >= 0) index else 0\n            Option(sorted(index+1))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoo76twfd.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mindex\e[0m = \e[33mif\e\
    [0m (index >= \e[31m0\e[0m) index \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mindex is already defined as \e[33mvalue\e[0m \e[35mindex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660028765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val minLength = lst.map(x => math.sqrt(x)).min\n        val minIndex = lst.zipWithIndex.filter(_._2\
    \ == minLength).head._1\n        lst.slice(minIndex + 1, lst.size - minIndex -\
    \ 1)\n            .filter(x => math.sqrt(x) < minLength)\n            .map(x =>\
    \ math.sqrt(x))\n            .minOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ada1feh.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        lst.slice(minIndex +\
    \ \e[31m1\e[0m, lst.size - minIndex - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:   \
    \ Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4ada1feh.scala:18:32 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        lst.slice(minIndex + \e[31m1\e[0m, lst.size -\
    \ minIndex - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \    ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \     Found:    Long\n\e[31m   |\e[0m                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028768
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.size < 2) None\n        else {\n            val m = lst.min\n      \
    \      val s = lst.indexWhere( v => v == m) + 1\n            if (s < lst.size)\
    \ {\n                Some(m)\n            } else None\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdsqxevvt.scala:26)\n\tat Problem.main(tmpdsqxevvt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else {\n            val min = lst(0)\n     \
    \       val min = lst.minBy(x => x)\n            val min2 = lst.minBy(x => x)\n\
    \            if (min != min2) Some(min2)\n            else nextSmallest(lst.tail)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpquyqpgri.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mmin\e[0m = lst.minBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmin is already defined as \e[33mvalue\e[0m \e[35mmin\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660028766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.size <= 1)\n            None\n        else {\n            var smallest\
    \ = lst.min\n            var otherSmallests = lst.filter(_ > smallest)\n     \
    \       if (otherSmallests.size > 0)\n                smallest = otherSmallests.min\n\
    \            Some(smallest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8j_gvsve.scala:27)\n\tat Problem.main(tmp8j_gvsve.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val min2ndSmallest = new scala.collection.mutable.PriorityQueue[Long](lst.size\
    \ * (lst.size + 1) / 2)\n        for(i <- 0 until lst.size) {\n            min2ndSmallest\
    \ += lst(i) min lst(i+1)\n        }\n        if(min2ndSmallest.nonEmpty) {\n \
    \           min2ndSmallest.dequeue()\n        }else {\n            None\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2_7p67qa.scala:16:104 ----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmin2ndSmallest\e[0m = \e\
    [33mnew\e[0m scala.collection.mutable.PriorityQueue[\e[35mLong\e[0m](lst.size\
    \ * (lst.size + \e[31m1\e[0m) / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e[0m \e[35mPriorityQueue\e\
    [0m in \e[33mclass\e[0m \e[35mPriorityQueue\e[0m: ()(\e[33mimplicit \e[0mord:\
    \ Ordering[Long]): scala.collection.mutable.PriorityQueue[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1660028766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) {\n            None\n        }\n        else {\n         \
    \   val minLong = lst(0).toLong\n            val minIndex = lst.indexOf(minLong)\n\
    \            if (minIndex == 0 || minIndex == lst.size -1) {\n               \
    \ None\n            }\n            else {\n                val newList = lst.take(minIndex-1)\n\
    \                val nextMinLong = newList.last\n                val nextMinIndex\
    \ = lst.indexOf(nextMinLong)\n                if (nextMinIndex == 0 || nextMinIndex\
    \ == lst.size -1) {\n                    None\n                }\n           \
    \     else {\n                    Some(newList.last)\n                }\n    \
    \        }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpew1fek22.scala:39)\n\tat Problem.main(tmpew1fek22.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.size < 2) {\n            None\n        }\n        else {\n        \
    \    val smallest: Long = lst.head\n            val secondSmallest = lst.tail.minBy(_\
    \ < smallest)\n            Some(secondSmallest)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpevxprpk0.scala:26)\n\tat Problem.main(tmpevxprpk0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var smallest = lst.head\n        var i = 2\n        while(i < lst.size) {\n\
    \            if(lst.size > 1l) \n                if(lst.head < smallest) smallest\
    \ = lst.head \n            i += 1\n        }\n        if(lst.size > 1l) \n   \
    \         if(lst.head < smallest) smallest = lst.head \n        return Some(smallest)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmtw9zjas.scala:28)\n\tat Problem.main(tmpmtw9zjas.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else {\n            val smallest = lst.sortBy(_).head\n\
    \            val nextSmallest = lst.filter(e => e < smallest).getOrElse(smallest)\n\
    \            Some(nextSmallest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp2aj1wtzx.scala:18:38 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36msmallest\e[0m = lst.sortBy(_).head\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   _$1 =>\
    \ lst.sortBy(_$1).head.\n\e[31m\e[31m-- Error: /tmp/tmp2aj1wtzx.scala:18:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36msmallest\e[0m = lst.sortBy(_).head\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e\
    [33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e\
    [33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of\
    \ \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2aj1wtzx.scala:19:61 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mnextSmallest\e[0m =\
    \ lst.filter(\e[36me\e[0m => e < smallest).getOrElse(smallest)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value getOrElse is not a member\
    \ of List[Long]\n3 errors found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else {\n            val minPos = lst.indexOf(min(lst))\n\
    \            if (minPos >= 0) Some(lst.apply(minPos + 1))\n            else None\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpzmobebz8.scala:18:37 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mminPos\e[0m = lst.indexOf(min(lst))\n\
    \e[31m\e[31m   |\e[0m                                     ^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in\
    \ \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double,\
    \ y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e\
    [0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m  \
    \ |\e[0mmatch arguments ((lst : List[Long]))\n1 error found\n"
  stdout: ''
  timestamp: 1660028768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.size <= 0) None\n        val arr = new mutable.ListBuffer[Long]()\n\
    \        lst.foreach(x => arr += x)\n        arr.sortWith((x, y) => x < y)\n \
    \       .take(2)\n        .headOption\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg0_b_zvp.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028768
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var l2 = lst.head \n        lst.tail.foreach{\n            a => if(a<l2) l2\
    \ = a \n        }\n        Some(l2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg2a2nky.scala:23)\n\tat Problem.main(tmpcg2a2nky.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) {\n            None\n        } else {\n            val a =\
    \ lst.head\n            var b = lst.head\n            var found = False\n    \
    \        lst match {\n                case h :: t => {\n                    if\
    \ (found) {\n                        None\n                    } else {\n    \
    \                    found = True\n                        b match {\n       \
    \                     case h :: t => {\n                                if (h\
    \ < a) {\n                                    a = h\n                        \
    \            b = t\n                                } else {\n               \
    \                     None\n                                }\n              \
    \              }\n                        }\n                    }\n         \
    \       }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxvz1j85s.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mvar\e[0m \e[36mfound\e[0m = False\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpxvz1j85s.scala:27:32 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                        found = True\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^\e[0m\n\e[31m   |\e[0m                  \
    \              Not found: True\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpxvz1j85s.scala:30:38 ------------------------\e[0m\e[0m\n\e[31m30 |\e\
    [0m                                \e[33mif\e[0m (h < a) {\n\e[31m\e[31m   |\e\
    [0m                                    ^^^\e[0m\n\e[31m   |\e[0mvalue < is not\
    \ a member of Any, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxvz1j85s.scala:31:40 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                                    a = h\n\e[31m\e[31m\
    \   |\e[0m                                        ^\e[0m\n\e[31m   |\e[0m    \
    \                                    Found:    (h : Any)\n\e[31m   |\e[0m    \
    \                                    Required: Long\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpxvz1j85s.scala:32:40 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                                    b = t\n\e[31m\e[31m\
    \   |\e[0m                                        ^\e[0m\n\e[31m   |\e[0m    \
    \                                    Found:    (t : List[Any])\n\e[31m   |\e[0m\
    \       "
  stdout: ''
  timestamp: 1660028775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  // Write your code here\n        val mn = lst.head\n        val n = lst.tail.foldLeft(mn)((n1,n2)\
    \ => if(n2 > n1) n2 else n1)\n        if(n >= mn)\n            Some(n)\n     \
    \   else\n            None\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgwww36ql.scala:25)\n\tat Problem.main(tmpgwww36ql.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else {\n            val head = lst(0) // Get\
    \ the 1st element of the list\n            var index = 1 // Set index to 1st element\n\
    \            val temp : List[Long] = Nil // Create a temp list\n            while\
    \ (index < lst.size) {\n                if (lst(index) < head) {\n           \
    \         // If the current element is smaller than head then move head to temp.\n\
    \                    temp = lst.slice(1, index).reverse\n                }\n \
    \               else {\n                    // Else move current element to temp.\n\
    \                    temp = lst(index) :: temp\n                }\n          \
    \      index = index + 1 // Increment the index\n            }\n            if\
    \ (head < lst(index)) {\n                Some(temp)\n            }\n         \
    \   else {\n                None\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpm40uxoa5.scala:24:25 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    temp = lst.slice(\e[31m1\e[0m, index).reverse\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val temp\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpm40uxoa5.scala:28:25 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    temp = lst(index) :: temp\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Reassignment to val temp\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpm40uxoa5.scala:33:21 --------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                Some(temp)\n\e[31m\e[31m   |\e[0m   \
    \                  ^^^^\e[0m\n\e[31m   |\e[0m                     Found:    (temp\
    \ : List[Long])\n\e[31m   |\e[0m                     Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty)\n            None\n        else {\n            val idx = lst.sortBy(_).indexOf(_)\n\
    \            if (idx == 0)\n                None\n            else if (idx ==\
    \ 1)\n                lst(1)\n            else\n                lst(idx-1)\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpjsncfxer.scala:19:33 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36midx\e[0m = lst.sortBy(_).indexOf(_)\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   (_$1,\
    \ _$2) => lst.sortBy(_$1).indexOf(_$2).\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpjsncfxer.scala:19:44\
    \ -----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e\
    [0m \e[36midx\e[0m = lst.sortBy(_).indexOf(_)\n\e[31m\e[31m   |\e[0m         \
    \                                   ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   (_$1, _$2) => lst.sortBy(_$1).indexOf(_$2).\n\
    \e[31m\e[31m-- Error: /tmp/tmpjsncfxer.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36midx\e[0m = lst.sortBy(_).indexOf(_)\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjsncfxer.scala:23:19 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                lst(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0m                Found:    Long\n\e\
    [31m   |\e[0m                Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpjsncfxer.scala:25:19 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                lst(idx-\e[31m1\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    Long\n\e[31m   |\e[0m                "
  stdout: ''
  timestamp: 1660028776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var smallest: Long = _\n        var index = 0\n\n        while (index < lst.size)\
    \ {\n            if (smallest == 0)\n                smallest = lst(index)\n \
    \           else if (lst(index) < smallest)\n                smallest = lst(index)\n\
    \            index += 1\n        }\n        if (smallest != 0)\n            Some(smallest)\n\
    \        else\n            None\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E017] Syntax Error: /tmp/tmpm07swc9t.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36msmallest\e[0m: \e[35mLong\e\
    [0m = _\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Unbound\
    \ placeholder parameter; incorrect use of _\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028773
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      if(lst.isEmpty)\
    \ None\n      else {\n        var smallest : Option[Long] = None\n        for(i\
    \ <- 0 until lst.size)\n          smallest match {\n            case None => smallest\
    \ = Some(lst(i))\n            case Some(j) if(lst(i) < smallest.get) =>\n    \
    \          smallest = Some(lst(i))\n            case Some(j) if(lst(i) == smallest.get)\
    \ =>\n              smallest = Some(lst(i))\n            case Some(j) if(lst(i)\
    \ > smallest.get) =>\n              smallest = Some(lst(i))\n            case\
    \ Some(j) => println(\"found one twice in list\")\n          }\n        smallest\n\
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfglnm3k9.scala:34)\n\tat Problem.main(tmpfglnm3k9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.isEmpty) None\n        else {\n            val minElem = lst.min\n \
    \           if(minElem == lst.last)\n                None\n            else {\n\
    \                val newList = lst.drop(1)\n                newList +: minElem.next\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsdc0qiw1.scala:23:35 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                newList +: minElem.next\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                     value next is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660028776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  require(!lst.isEmpty, \"Can't be empty\")\n        // Sort the list using the\
    \ default sort mechanism\n        lst.sorted\n        // Now the first element\
    \ is the smallest so return this if present\n        lst.headOption.map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpltdtsvrb.scala:23)\n\tat Problem.main(tmpltdtsvrb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028778
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  require(lst.nonEmpty)\n        val l = lst.head\n        val result = if (lst.size\
    \ > 1) lst.tail.minOption else Option.empty[Long]\n        result.map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzurb_lfw.scala:22)\n\tat Problem.main(tmpzurb_lfw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  // TODO: Complete this function\n        var smallest = lst(0)\n        var\
    \ second_smallest = lst(0)\n\n        var index = lst.indexWhere(item => item\
    \ < smallest)\n        var index = lst.indexWhere(item => item < smallest)\n \
    \       if (index < 1) {\n            None \n        } else {\n            smallest\
    \ = lst(index)\n            var index1 = lst.indexWhere(item => item > second_smallest\
    \ && item < smallest)\n            second_smallest = lst(index1)\n        }\n\n\
    \        Some(second_smallest)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmh16m8dp.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mindex\e[0m = lst.indexWhere(\e\
    [36mitem\e[0m => item < smallest)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mindex is already defined as \e[33mvariable\e[0m \e[35mindex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660028773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val smallest = lst.minBy(_) match {\n            case None  => None\n     \
    \       case Some(x) => x\n        }\n        if (smallest > 1l*lst.size) {\n\
    \            None\n        } else {\n            lst.find(_ > smallest)\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmph5d1rpbs.scala:16:33 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msmallest\e[0m = lst.minBy(_)\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                                 ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$1 of expanded function:\n\e\
    [31m   |\e[0m   _$1 => \n\e[31m   |\e[0m     lst.minBy(_$1)\e[33m match \e[0m\n\
    \e[31m   |\e[0m       {\n\e[31m   |\e[0m         \e[33mcase \e[0mNone => \n\e\
    [31m   |\e[0m           None\n\e[31m   |\e[0m         \e[33mcase \e[0mSome(x)\
    \ => \n\e[31m   |\e[0m           x\n\e[31m   |\e[0m       }.\n\e[31m\e[31m-- Error:\
    \ /tmp/tmph5d1rpbs.scala:16:35 -----------------------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msmallest\e[0m = lst.minBy(_)\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                                  \
    \ ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e\
    [35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e\
    [35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter cmp of \e[33mmethod\e[0m \e[35mminBy\e[0m in \e[33mtrait\e[0m \e\
    [35mIterableOnceOps\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph5d1rpbs.scala:18:28\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e\
    [0m Some(x) => x\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e\
    [31m   |\e[0m                            Not found: x\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val smallest = lst.minOption\n        smallest match {\n            case Some(first)\
    \ if (lst.size != 1) => None\n            case Some(second) =>\n             \
    \   val secondSmallest = lst.minOption\n                if (secondSmallest ==\
    \ None) None\n                else if (smallest.isDefined && !secondSmallest.isDefined\
    \ && smallest.get < secondSmallest.get)\n                    Some(second)\n  \
    \              else secondSmallest\n            case None => None\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_mrkthkf.scala:29)\n\tat Problem.main(tmp_mrkthkf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028779
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val min = lst(0)\n        val minIndex = lst.indexOf(min)\n        if (minIndex\
    \ == lst.size - 1) {\n            None\n        } else {\n            val next\
    \ = lst.apply(minIndex + 1)\n            if (next < min) {\n                Some(next)\n\
    \            } else {\n                nextSmallest(lst.drop(1))\n           \
    \ }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7b3dlhf0.scala:30)\n\tat Problem.main(tmp7b3dlhf0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val index = 0\n        val current = lst(index)\n        val lst2 = lst.tail\n\
    \        if (lst2.isEmpty) return None\n        var j = 0\n        while (j <\
    \ lst2.length){\n            if (lst2(j) < current){\n                current\
    \ = lst2(j)\n                lst2(j)= lst2(0)\n                lst2(0) =lst2(j)\n\
    \                lst2(j) = lst2(j)\n                lst2(j)= lst2(0)\n       \
    \         lst2(0) =lst2(j)\n                lst2(j) = lst2(j)\n              \
    \  lst2(j)= lst2(0)\n                lst2(0) =lst2(j)\n                lst2(j)\
    \ = lst2(j)\n            }\n            j+=1\n        }\n        if (lst2.isEmpty)\
    \ return None\n        var k = 0\n        while (j < lst2.length){\n         \
    \   if (lst2(k) > current){\n                current = lst2(k)\n             \
    \   lst2(k)= lst2(lst2.length)\n                lst2(lst2.length)= lst2(k)\n \
    \               lst2(k)= lst2(lst2.length)\n                lst2(lst2.length)=\
    \ lst2(k)\n                lst2(k)= lst2(lst2.length)\n                lst2(lst2.length)=\
    \ lst2(k)\n                lst2(k)= lst2(lst2.length)\n            }\n       \
    \     k+=1\n        }\n        return Option(current)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmppbkxj_4r.scala:23:24 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                current = lst2(j)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val current\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppbkxj_4r.scala:24:16\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                lst2(j)=\
    \ lst2(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m \
    \  |\e[0m value update is not a member of List[Long] - did you mean lst2.updated?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppbkxj_4r.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                lst2(\e[31m0\e[0m) =lst2(j)\n\e[31m\e\
    [31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m value update is not a\
    \ member of List[Long] - did you mean lst2.updated?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmppbkxj_4r.scala:26:16 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m                lst2(j) = lst2(j)\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^\e[0m\n\e[31m   |\e[0m value update is not a member of List[Long]\
    \ - did you mean lst2.updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppbkxj_4r.scala:27:16\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                lst2(j)=\
    \ lst2(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m \
    \  |\e[0m value update is not a member of List[Long] - did you mean lst2.updated?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppbkxj_4r.scala:28:16 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                lst2(\e[31m0\e[0m) =lst2(j)\n\e[31m\e\
    [31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m value update is not a\
    \ member of List[Long] - did you mean lst2.updated?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmppbkxj_4r.scala:29:16 ------------------------\e[0m\e[0m\n\
    \e[31m29 |\e[0m                lst2(j) = lst2(j)\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^\e[0m\n\e[31m   |\e[0m value update is not a member of List[Long]\
    \ - did you mean lst2.updated?\n\e[31m\e[31m-- [E008]"
  stdout: ''
  timestamp: 1660028782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.isEmpty) None\n        else {\n            val smallest = lst.head\n\
    \            lst.tail.sortWith(_ < smallest).headOption\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp3fxds4ks.scala:19:30 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            lst.tail.sortWith(_ < smallest).headOption\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                              Wrong number of parameters, expected: 2\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val minValues = lst.sortWith(_ < _)\n        if (minValues.length < 2) None\n\
    \        else Some(minValues(1))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv25unwf9.scala:21)\n\tat Problem.main(tmpv25unwf9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var smallest = lst(0)\n        var otherSmallest = lst(0)\n        for (x <-\
    \ lst.drop(1)) {\n            if (x < smallest) {\n                smallest =\
    \ x\n                otherSmallest = x\n            }\n        }\n        if (smallest\
    \ < lst(0) || smallest.equals(lst(0))) {\n            None\n        } else {\n\
    \            Some(otherSmallest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptmal_jc6.scala:31)\n\tat Problem.main(tmptmal_jc6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(null == lst)\n            return None\n        val maxValue = lst.max\n\
    \        val minValue = lst.min\n        if(maxValue == minValue)\n          \
    \  return Some(maxValue)\n        val nextIndex = lst.zipWithIndex.filter { _._1\
    \ == minValue }\n        if(nextIndex.isEmpty)\n            return None\n    \
    \    val index = nextIndex.head._2\n        lst(index - 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6odh1mku.scala:26:11\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        lst(index - \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \  Found:    Long\n\e[31m   |\e[0m        Required: Option[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val a = lst.drop(1)\n        if (a.isEmpty) None\n        else Some(lst(1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxzf35ayr.scala:21)\n\tat Problem.main(tmpxzf35ayr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val smallestIndex = lst.indexOf(lst.min)\n        if(smallestIndex < lst.size-1)\
    \ {\n            Some(lst.apply(smallestIndex + 1))\n        } else {\n      \
    \      None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83dtrug6.scala:24)\n\tat Problem.main(tmp83dtrug6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var smallestElem : Option[Long] = None\n        for(i <- 0 until lst.length-1)\
    \ {\n            if(smallestElem == None) {\n                smallestElem = Some(lst(i))\n\
    \            } else if(smallestElem.get < lst(i)) {\n                smallestElem\
    \ = Some(lst(i))\n            }\n        }\n        smallestElem\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz2okhcuo.scala:27)\n\tat Problem.main(tmpz2okhcuo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  require(!lst.isEmpty)\n        require(lst.size == 2)\n\n        val low =\
    \ lst(0)\n        val high = lst(1)\n        if (low < high) {\n            Some(low)\n\
    \        } else {\n            val next = lst(2) \n            val nextLow = next.min\n\
    \            if (nextLow < low) {\n                Some(nextLow)\n           \
    \ } else {\n                None\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphcmnaiei.scala:26:24 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m (nextLow < low) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member\
    \ of Long => Long, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphcmnaiei.scala:27:21 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                Some(nextLow)\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Found:\
    \    (nextLow : Long => Long)\n\e[31m   |\e[0m                     Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else {\n            val smallest = lst.min\n\
    \            val second = lst.filter(_ < smallest).max\n            if (second\
    \ > smallest) Some(second)\n            else nextSmallest(lst.filter(_ > smallest))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.nextSmallest(tmpxscjbgc1.scala:19)\n\tat Problem$.main(tmpxscjbgc1.scala:25)\n\
    \tat Problem.main(tmpxscjbgc1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  // Your code goes here\n        if(lst.isEmpty)\n            None\n       \
    \ else {\n            var smallest = lst(0)\n            var second = smallest\n\
    \            for ( n <- lst ) {\n                if(n < smallest) {\n        \
    \            second = smallest\n                }\n                smallest= n\n\
    \            }\n            Some(second)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps8w_id2b.scala:32)\n\tat Problem.main(tmps8w_id2b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  def next_smallest(i: Int, lst: mutable.Seq[Long], smallest: Long): Option[Long]\
    \ = {\n            lst(i) match {\n                case None => None\n       \
    \         case Some(a) if a < smallest => Some(a)\n                case Some(a)\
    \ => next_smallest(i+1, lst, a)\n            }\n        }\n        if (lst.isEmpty)\
    \ None\n        else {\n            var smallest = lst(0)\n            next_smallest(1,\
    \ lst, smallest).getOrElse(smallest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ed7o9a5.scala:16:39 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mdef\e[0m \e[36mnext_smallest\e[0m(\e[36mi\e\
    [0m: \e[35mInt\e[0m, \e[36mlst\e[0m: mutable.Seq[\e[35mLong\e[0m], \e[36msmallest\e\
    [0m: \e[35mLong\e[0m): \e[35mOption\e[0m[\e[35mLong\e[0m] = {\n\e[31m\e[31m  \
    \ |\e[0m                                       ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                      Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ed7o9a5.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m Some(a) \e[33mif\e[0m\
    \ a < smallest => Some(a)\n\e[31m\e[31m   |\e[0m                             \
    \   ^\e[0m\n\e[31m   |\e[0m                                Not found: a\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ed7o9a5.scala:19:53 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m Some(a) \e[33mif\e[0m\
    \ a < smallest => Some(a)\n\e[31m\e[31m   |\e[0m                             \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                        Not found: a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp3ed7o9a5.scala:20:56 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m Some(a) => next_smallest(i+\e\
    [31m1\e[0m, lst, a)\n\e[31m\e[31m   |\e[0m                                   \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \                        Not found: a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp3ed7o9a5.scala:26:53 --------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            next_smallest(\e[31m1\e[0m, lst, smallest).getOrElse(smallest)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0"
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else {\n            val smallest = lst.min\n\
    \            val rest = lst.filterNot(_ == smallest)\n            if (rest.size\
    \ > 1) smallest\n            else nextSmallest(rest)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy2znt8su.scala:20:31\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (rest.size\
    \ > \e[31m1\e[0m) smallest\n\e[31m\e[31m   |\e[0m                            \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                               Found:    (smallest\
    \ : Long)\n\e[31m   |\e[0m                               Required: Option[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  // Sort the list\n        val sorted = lst.sorted(implicitly[Ordering[Long]].reverse)\n\
    \        // Get the index where we are looking\n        val index = sorted.indexOf((sorted.head))\n\
    \        // Return None if we are at the last element\n        if(index == sorted.size\
    \ - 1)\n            None\n        // Otherwise return the next smallest element\n\
    \        else\n            Some(sorted(index + 1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk17ub5np.scala:28)\n\tat Problem.main(tmpk17ub5np.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028787
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val smallest = lst.min\n        lst.filter(_ < smallest).map(_+1).find(_ !=\
    \ smallest)\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7gxq70yu.scala:20)\n\tat Problem.main(tmp7gxq70yu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val m = lst.head\n        lst.tail.foreach { n =>\n            val c = m compare\
    \ n\n            if (c == 0) return Some(n)\n            if (c < 0) m = n\n  \
    \      }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp6h_00pee.scala:20:25 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (c < \e[31m0\e[0m) m = n\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \               Reassignment to val m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val minVal = lst.min\n        val minElem = lst.iterator\n        while (true){\n\
    \            val value = minElem.next()\n            if (value < minVal){\n  \
    \              return Some(value)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvexypmgg.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mwhile\e[0m (\e\
    [31mtrue\e[0m){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Option[Long]\n\e[31m19 |\e[0m    \
    \        \e[33mval\e[0m \e[36mvalue\e[0m = minElem.next()\n\e[31m20 |\e[0m   \
    \         \e[33mif\e[0m (value < minVal){\n\e[31m21 |\e[0m                \e[33mreturn\e\
    [0m Some(value)\n\e[31m22 |\e[0m            }\n\e[31m23 |\e[0m        }\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  lst.find{ e => e < lst.minBy(_).toLong }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp0qu2i_qx.scala:16:37 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        lst.find{ \e[36me\e[0m => e < lst.minBy(_).toLong\
    \ }\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$1 of expanded function:\n\e[31m   |\e\
    [0m   _$1 => e < lst.minBy(_$1).toLong.\n\e[31m\e[31m-- Error: /tmp/tmp0qu2i_qx.scala:16:39\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ lst.find{ \e[36me\e[0m => e < lst.minBy(_).toLong }\n\e[31m\e[31m   |\e[0m \
    \                                      ^\e[0m\n\e[31m   |\e[0mambiguous given\
    \ instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter cmp of \e[33mmethod\e[0m \e[35mminBy\e\
    [0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      if(lst.isEmpty)\
    \ return None\n      if(lst.length == 1) {\n        val cur = lst(0)\n       \
    \ if(cur == lst(1)) {\n          return Some(cur)\n        } else {\n        \
    \  return None\n        }\n      }\n      val m = lst.min\n      val n = lst.find(_.isLessThan(m))\n\
    \      if(n != None) return Some(lst.find(_.isLessThan(n)).get)\n      nextSmallest(lst.removeAt(lst.indexOf(m)))\
    \ match {\n        case Some(x) => Some(x)\n        case None => None\n      }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvbye71pt.scala:26:25 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m      \e[33mval\e[0m \e[36mn\e[0m = lst.find(_.isLessThan(m))\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       value isLessThan is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpvbye71pt.scala:27:43 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m      \e[33mif\e[0m(n != None) \e[33mreturn\e[0m Some(lst.find(_.isLessThan(n)).get)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value isLessThan is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvbye71pt.scala:28:23\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m      nextSmallest(lst.removeAt(lst.indexOf(m)))\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   value removeAt is not a member of List[Long]\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else {\n            var res = None\n       \
    \     var minElem = lst(0)\n            for(_ <- 1 to lst.length) {\n        \
    \        if (lst(0) < minElem) {\n                    minElem = lst(0)\n     \
    \               res = Some(minElem)\n                }\n                else if(lst(0)\
    \ != minElem && lst(0) < res.get)\n                    res = Some(lst(0))\n  \
    \          }\n            res\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1vsht5r7.scala:23:30\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    res = Some(minElem)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          Found:    Some[Long]\n\e[31m   |\e[0m           \
    \               Required: None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E051] Reference Error:\
    \ /tmp/tmp1vsht5r7.scala:25:52 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m                \e[33melse\e[0m \e[33mif\e[0m(lst(\e[31m0\e[0m) != minElem\
    \ && lst(\e[31m0\e[0m) < res.get)\n\e[31m\e[31m   |\e[0m                     \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m<\e[0m in \e[33mclass\e[0m\
    \ \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\e[31m   |\e\
    [0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e[0m (x:\
    \ Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x: Short):\
    \ Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0mall match arguments\
    \ ((None.get : => Nothing))\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1vsht5r7.scala:26:30 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                    res = Some(lst(\e[31m0\e[0m))\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \            Found:    Some[Long]\n\e[31m   |\e[0m                          Required:\
    \ None.type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var smallest = null\n        lst.foreach{\n            e =>\n            if\
    \ (smallest == null || e < smallest) {\n                smallest = e\n       \
    \     }\n        }\n        if (smallest != null) {\n            smallest\n  \
    \      } else {\n            None\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmplz1nyf12.scala:19:38 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (smallest == \e[31mnull\e[0m\
    \ || e < smallest) {\n\e[31m\e[31m   |\e[0m                                  \
    \  ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35m<\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e\
    [0m (x: Double): Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m\
    \ (x: Long): Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char):\
    \ Boolean\n\e[31m   |\e[0m (x: Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\
    \e[31m   |\e[0mmatch arguments ((smallest : Null))\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmplz1nyf12.scala:20:27 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m                smallest = e\n\e[31m\e[31m   |\e[0m           \
    \                ^\e[0m\n\e[31m   |\e[0m                           Found:    (e\
    \ : Long)\n\e[31m   |\e[0m                           Required: Null\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.length == 0)\n            None\n        else\n            if(lst.length\
    \ == 1)\n                Some(lst(0))\n            else\n                val smallest:\
    \ Long = lst(0)\n                val second = smallest\n                val rest\
    \ = lst.drop(1)\n                rest match {\n                    case h :: t\
    \ => if(h < second) Some(h) else nextSmallest(t)\n                    case _ =>\
    \ Some(smallest)\n                }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuobr3bu1.scala:31)\n\tat Problem.main(tmpuobr3bu1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val l = lst.take(1)\n        val l = lst.drop(1).foldLeft(l) {\n          \
    \  case (acc: Option[Long], el) => if (el < acc.get) Some(el) else None\n    \
    \    }\n        l match {\n            case Some(el) if (el < l.get) Some(el)\
    \ else None\n            case _ => None\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1v67an1k.scala:21:51 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m Some(el) \e[33mif\e[0m (el\
    \ < l.get) Some(el) \e[33melse\e[0m None\n\e[31m\e[31m   |\e[0m              \
    \                                     ^^^^\e[0m\n\e[31m   |\e[0m             \
    \                            '=>' expected, but 'else' found\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmp1v67an1k.scala:17:12 ---------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = lst.drop(\e[31m1\e[0m).foldLeft(l)\
    \ {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m18 |\e[0m            \e[33mcase\e[0m (acc: \e[35mOption\e[0m[\e[35mLong\e\
    [0m], el) => \e[33mif\e[0m (el < acc.get) Some(el) \e[33melse\e[0m None\n\e[31m19\
    \ |\e[0m        }\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1v67an1k.scala:21:33\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e\
    [0m Some(el) \e[33mif\e[0m (el < l.get) Some(el) \e[33melse\e[0m None\n\e[31m\e\
    [31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0mvalue < is\
    \ not a member of Any, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1v67an1k.scala:21:37 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m Some(el) \e[33mif\e[0m (el\
    \ < l.get) Some(el) \e[33melse\e[0m None\n\e[31m\e[31m   |\e[0m              \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0mvalue get is not a member of\
    \ List[Long], but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else {\n            val s = lst.head\n     \
    \       val l = lst.tail\n            if (l.size < 2) Some(s)\n            else\
    \ {\n                val l = l.tail\n                if (l.size < 2) Some(s)\n\
    \                else {\n                    val l = l.tail\n                \
    \    if (l.size < 2) Some(s)\n                    else {\n                   \
    \     val l = l.tail\n                        if (l.size < 2) Some(s)\n      \
    \                  else {\n                            val l = l.tail\n      \
    \                      if (l.size < 2) Some(s)\n                            else\
    \ {\n                                val l = l.tail\n                        \
    \        if (l.size < 2) Some(s)\n                                else nextSmallest(l)\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt49k4zdu.scala:22:24 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36ml\e[0m = l.tail\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt49k4zdu.scala:25:28 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    \e[33mval\e[0m \e[36ml\e[0m = l.tail\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt49k4zdu.scala:28:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                     \
    \   \e[33mval\e[0m \e[36ml\e[0m = l.tail\n\e[31m\e[31m   |\e[0m              \
    \                  ^\e[0m\n\e[31m   |\e[0m                                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpt49k4zdu.scala:31:36 ---------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                            \e[33mval\e[0m \e[36ml\e[0m =\
    \ l.tail\n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e\
    [31m   |\e[0m                                    Recursive \e[33mvalue\e[0m \e\
    [35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt49k4zdu.scala:34:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                     \
    \           \e[33mval\e[0m \e[36ml\e[0m = l.tail\n\e[31m\e[31m   |\e[0m      \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                     Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660028786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var smallest = lst.head\n        var index = 1\n        for(i <- lst.drop(1)){\n\
    \            if(smallest < i){\n                smallest = i\n            }\n\
    \            if(smallest == i){\n                index = i\n            }\n  \
    \      }\n        Some(index)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpba5arp88.scala:23:24\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                index = i\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Found:    (i : Long)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.size <= 1) None\n        else {\n            val m = lst.dropRight(1).min\n\
    \            lst filter (_ == m) match {\n                case List() => None\n\
    \                case x :: y => Some(y)\n            }\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk13562tl.scala:21:36\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e\
    [0m x :: y => Some(y)\n\e[31m\e[31m   |\e[0m                                 \
    \   ^\e[0m\n\e[31m   |\e[0m                                    Found:    (y :\
    \ List[Long])\n\e[31m   |\e[0m                                    Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val sortedSet = lst.sorted\n        if (sortedSet.length == 0)\n          \
    \  None\n        else {\n            val smallest = sortedSet.head\n         \
    \   val secondSmallest = sortedSet(sortedSet.tail.indexOf(0))\n            Some(secondSmallest)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.nextSmallest(tmp9yp_k_tq.scala:21)\n\tat Problem$.main(tmp9yp_k_tq.scala:26)\n\
    \tat Problem.main(tmp9yp_k_tq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  def isSmaller(a : Long, b : Long) : Boolean = a < b\n        val it = lst.iterator\n\
    \        val lstLen = lst.length\n        var min = it.next()\n        var isSmallest\
    \ = False\n        var i = 0\n        while (i < lstLen) {\n            val v\
    \ = it.next()\n            if (min != v) {\n                if (isSmaller(v, min))\
    \ min = v\n            }\n            i += 1\n        }\n        if (min != it.next())\
    \ Some(min)\n        else None\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp71_9a8zw.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36misSmallest\e[0m = False\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                     Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val smallest = lst.min\n        val index = lst.indexOf(smallest)\n       \
    \ if(index > 0) {\n            return Some(lst(index+1))\n        }\n        None\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9gdtgs49.scala:24)\n\tat Problem.main(tmp9gdtgs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028794
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val mins = lst.foldLeft(List[Long](-1l)) { (result, el) =>\n            if\
    \ (result(0) > el)\n                result :+ el\n            else\n         \
    \       result\n        }\n        if (mins.last < mins.head) None\n        else\
    \ Some(mins.last)\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1b7lj7te.scala:26)\n\tat Problem.main(tmp1b7lj7te.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val lst1 = lst sortBy { case (l,r) => l }\n        if(lst1.length < 2) None\n\
    \        else Some(lst1(1))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz6tikhqp.scala:16:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlst1\e[0m = lst sortBy {\
    \ \e[33mcase\e[0m (l,r) => l }\n\e[31m\e[31m   |\e[0m                        \
    \                         ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined\
    \ for Any..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.ordered[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type scala.math.Ordering.AsComparable[Any].\n1 error found\n"
  stdout: ''
  timestamp: 1660028794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.size <= 1) None\n        else {\n            val min_index = lst.foldLeft(0)((x,\
    \ xs) => x + (xs.min(x) + 1))\n            Some(lst.lift(min_index))\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpikytp5dw.scala:18:55\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mmin_index\e[0m = lst.foldLeft(\e[31m0\e[0m)((\e[36mx\e[0m, \e[36mxs\e[0m)\
    \ => x + (xs.min(x) + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                  \
    \                                     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                       Found:    Long\n\e[31m\
    \   |\e[0m                                                       Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpikytp5dw.scala:19:25\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Some(lst.lift(min_index))\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    Option[Long]\n\e[31m   |\e[0m                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.nonEmpty) {\n            val sm = lst.sortWith(_ < _)\n           \
    \ val sm1 = sm(1).orElse(sm(2))\n            Some(sm1)\n        } else {\n   \
    \         None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppwlo1sqx.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36msm1\e[0m = sm(\e[31m1\e\
    [0m).orElse(sm(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value orElse is not a member of Long\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val (min, max) = lst.span(x => x < min).unzip\n        if ((min == 0) && (max\
    \ == 1)) None\n        else if ((min == 0) && (max > 1)) Some(max.toLong)\n  \
    \      else if ((max == lst.length) && (min > 0)) Some(lst.length.toLong)\n  \
    \      else Some(lst.drop(1).min.toLong)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmoo1rimz.scala:16:13 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m (min, max) = lst.span(\e[36mx\e\
    [0m => x < min).unzip\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e\
    [0m             Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmoo1rimz.scala:16:48 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m (min, max) = lst.span(\e[36mx\e\
    [0m => x < min).unzip\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue unzip is not a member of (List[Long], List[Long]) -\
    \ did you mean (List[Long], List[Long]).zip?\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpmoo1rimz.scala:16:18 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m (min, max) = lst.span(\e[36mx\e[0m => x < min).unzip\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val nums = lst.map(_.toLong)\n        val smallest = nums.min\n        nums\
    \ match {\n            case h :: t => (h.toLong compare smallest == 1) match {\n\
    \                case _ => Some(h)\n                case _ => None\n         \
    \   }\n            case _ => None\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwcb4loka.scala:19:45\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mcase\e[0m h\
    \ :: t => (h.toLong compare smallest == \e[31m1\e[0m) \e[33mmatch\e[0m {\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                             Found:    Boolean\n\
    \e[31m   |\e[0m                                             Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else lst.sorted\n            .drop(2)\n    \
    \        .lastOption\n            .flatMap(_.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps9ydq072.scala:20:23\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            .flatMap(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                Found:    Long\n\e[31m   |\e[0m                     Required:\
    \ Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val mn = lst.foldLeft((Option.empty[Long], 0l, List.empty[Long]))( (a,b) =>\
    \ if (a < b) (a,b,b) else (b,a,a))._2\n        val idx = lst.indexWhere(x => x\
    \ == mn)\n        idx match {\n            case 0 => Some(mn)\n            case\
    \ idx if idx < lst.size -1 => Some(lst.apply(idx+1))\n            case _ => None\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5b_8z5fn.scala:16:90 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmn\e[0m = lst.foldLeft((Option.empty[\e\
    [35mLong\e[0m], \e[31m0l\e[0m, List.empty[\e[35mLong\e[0m]))( (\e[36ma\e[0m,\e\
    [36mb\e[0m) => \e[33mif\e[0m (a < b) (a,b,b) \e[33melse\e[0m (b,a,a))._2\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                        ^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of (Option[Long],\
    \ Long, List[Long]), but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5b_8z5fn.scala:16:96 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmn\e[0m = lst.foldLeft((Option.empty[\e\
    [35mLong\e[0m], \e[31m0l\e[0m, List.empty[\e[35mLong\e[0m]))( (\e[36ma\e[0m,\e\
    [36mb\e[0m) => \e[33mif\e[0m (a < b) (a,b,b) \e[33melse\e[0m (b,a,a))._2\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \   Found:    (a : (Option[Long], Long, List[Long]))\n\e[31m   |\e[0m        \
    \                Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5b_8z5fn.scala:16:100 -------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmn\e[0m = lst.foldLeft((Option.empty[\e\
    [35mLong\e[0m], \e[31m0l\e[0m, List.empty[\e[35mLong\e[0m]))( (\e[36ma\e[0m,\e\
    [36mb\e[0m) => \e[33mif\e[0m (a < b) (a,b,b) \e[33melse\e[0m (b,a,a))._2\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                                   Found:    (b : Long)\n\e[31m   |\e[0m    \
    \                                        "
  stdout: ''
  timestamp: 1660028796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None else Some(lst.sortWith(_ < _)(2).headOption)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9prd3h58.scala:16:63 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (lst.isEmpty) None \e[33melse\e\
    [0m Some(lst.sortWith(_ < _)(\e[31m2\e[0m).headOption)\n\e[31m\e[31m   |\e[0m\
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value headOption is not a member\
    \ of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660028795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      if\
    \ (lst.size < 2) None\n      else lst.zip(lst.drop(1)).minBy(_._1).getOrElse(None)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmput2jb1w5.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m      \e[33melse\e[0m lst.zip(lst.drop(\e[31m1\e[0m)).minBy(_._1).getOrElse(None)\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m           value getOrElse is not a member of (Long, Long)\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028796
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  var smallest = lst(0)\n        var index = 2\n        for(i <- 1 to lst.size)\
    \ {\n            if(lst(i) < smallest) {\n                smallest = lst(i)\n\
    \                index = i\n            }\n        }\n        if(smallest == lst(index))\
    \ {\n            None\n        } else {\n            Some(lst(index))\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.nextSmallest$$anonfun$1(tmpqt9wkv_e.scala:19)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.nextSmallest(tmpqt9wkv_e.scala:23)\n\
    \tat Problem$.main(tmpqt9wkv_e.scala:31)\n\tat Problem.main(tmpqt9wkv_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val m = lst.foldRight((BigInt(Integer.MIN_VALUE), List[Long]()))((a, b) =>\
    \ (b < a._2 match {\n            case (true, _) => b\n            case (false,\
    \ b) => a\n        }), (a, b) => {\n            if (a._2 < a._1)\n           \
    \     (a, b)\n            else\n                (b._2, a.::(b._1))\n        })\n\
    \        if (m._1.equals(BigInt(Integer.MIN_VALUE)))\n            None\n     \
    \   else\n            Some(m._2.last)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong, 1l.toLong,\
    \ 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpg4iolguj.scala:16:74 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = lst.foldRight((BigInt(Integer.MIN_VALUE),\
    \ List[\e[35mLong\e[0m]()))((\e[36ma\e[0m, \e[36mb\e[0m) => (b < a._2 \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m                                                 \
    \                         ^\e[0m\n\e[31m   |\e[0m                          Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          I\
    \ could not infer the type of the parameter a.\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmpg4iolguj.scala:16:77 -----------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = lst.foldRight((BigInt(Integer.MIN_VALUE),\
    \ List[\e[35mLong\e[0m]()))((\e[36ma\e[0m, \e[36mb\e[0m) => (b < a._2 \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m                                                 \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \ Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                   \
    \       I could not infer the type of the parameter b.\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmpg4iolguj.scala:19:13 -----------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        }), (a, b) => {\n\e[31m\e[31m   |\e[0m           \
    \  ^\e[0m\n\e[31m   |\e[0m             Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m             I could not infer the type of the parameter a.\n\e\
    [31m\e[31m-- [E081] Type Error: /tmp/tmpg4iolguj.scala:19:16 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        }), (a, b) => {\n\e[31m\e[31m   |\e[0m      \
    \          ^\e[0m\n\e[31m   |\e[0m                Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                I could not infer the type of the parameter\
    \ b.\n4 errors found\n"
  stdout: ''
  timestamp: 1660028795
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  val sorted = lst.sortWith(_ < _)\n        if(sorted.isEmpty) None else Some(sorted.last)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkyw5xj5n.scala:20)\n\tat Problem.main(tmpkyw5xj5n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028797
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if (lst.isEmpty) None\n        else {\n            var smallestInner = lst.head\n\
    \            var smallestOuterElement = lst.head\n            for (i <- 1 until\
    \ lst.size) smallestInner =\n                if (smallestInner < lst(i)) smallestInner\
    \ else lst(i)\n            smallestOuterElement = smallestInner\n            smallestInner\
    \ = lst.head\n            for (i <- 1 until lst.size) smallestInner =\n      \
    \          if (smallestInner < lst(i)) smallestInner else lst(i)\n           \
    \ smallestOuterElement = smallestInner\n            smallestInner = lst.head\n\
    \            for (i <- 1 until lst.size) smallestInner =\n                if (smallestInner\
    \ < lst(i)) smallestInner else lst(i)\n            smallestOuterElement = smallestInner\n\
    \            nextSmallest(List(smallestOuterElement))\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    // Return None if there\
    \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
    \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n  \
    \  // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n      \
    \  if(lst.isEmpty) None\n        else if(lst.head < lst.tail.head) Some(lst.tail.head)\n\
    \        else if(lst.head > lst.tail.head) Some(lst.head)\n        else None\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
    \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 0l.toLong))).equals(1l));\n    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n\
    \    assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk86xx4h3.scala:22)\n\tat Problem.main(tmpk86xx4h3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028797
