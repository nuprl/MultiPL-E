language: scala
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer.empty[Long]\n        list.add(lst(0))\n        list.add(lst(1))\n\
    \n        for (i <- 2 to lst.length-1) {\n            list.add(lst(i))\n     \
    \       list.add(lst(i-1))\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ohbyu5j.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val listOfPairs\
    \ = lst.toList.grouped(2).toList\n        listOfPairs.map { p =>\n           \
    \ val first = p._1\n            val second = p._2\n            List((first - second).toLong,\
    \ (second - first).toLong)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6d51g_83.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mfirst\e[0m = p._1\n\e\
    [31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0m        \
    \                value _1 is not a member of List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp6d51g_83.scala:18:27 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36msecond\e[0m = p._2\n\e[31m\e\
    [31m   |\e[0m                         ^^^^\e[0m\n\e[31m   |\e[0m             \
    \            value _2 is not a member of List[Long]\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp6d51g_83.scala:19:16 --------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m            List((first - second).toLong, (second - first).toLong)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    List[Nothing]\n\e[31m   |\e[0m     \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var list\
    \ = lst\n        var currentMin = lst(0)\n        var currentMax = lst(lst.length-1)\n\
    \        var currentMinIndex = 0\n        var currentMaxIndex = 0\n        while(currentMinIndex\
    \ < list.length){\n            val currentMin = currentMin\n            val currentMax\
    \ = currentMax\n            currentMinIndex = currentMinIndex + 1\n          \
    \  currentMaxIndex = currentMaxIndex + 1\n            val currentMinIndex = currentMinIndex\
    \ - 1\n            val currentMaxIndex = currentMaxIndex - 1\n            while(currentMaxIndex\
    \ >= 0 && currentMax(currentMaxIndex) > currentMin){\n                list = list.remove(currentMaxIndex)\n\
    \                list = list.insert(currentMaxIndex, currentMin)\n           \
    \     currentMinIndex = currentMinIndex + 1\n                currentMaxIndex =\
    \ currentMaxIndex + 1\n                val currentMinIndex = currentMinIndex -\
    \ 1\n                val currentMaxIndex = currentMaxIndex - 1\n            }\n\
    \        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpal3vrts_.scala:21:29 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mcurrentMin\e[0m = currentMin\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         Recursive \e[33mvalue\e[0m \e[35mcurrentMin\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpal3vrts_.scala:22:29\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mcurrentMax\e[0m = currentMax\n\e[31m\e[31m   |\e[0m                \
    \             ^\e[0m\n\e[31m   |\e[0m                             Recursive \e\
    [33mvalue\e[0m \e[35mcurrentMax\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpal3vrts_.scala:25:34 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mcurrentMinIndex\e[0m\
    \ = currentMinIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \              ^\e[0m\n\e[31m   |\e[0m                              Recursive\
    \ \e[33mvalue\e[0m \e[35mcurrentMinIndex\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpal3vrts_.scala:23:28 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            currentMinIndex = currentMinIndex + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val currentMinIndex\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpal3vrts_.scala:26:34 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mcurrentMaxIndex\e[0m\
    \ = currentMaxIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \              ^\e[0m\n\e[31m   |\e[0m                              Recursive\
    \ \e[33mvalue\e[0m \e[35mcurrentMaxIndex\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1660009858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortBy(_ -1)\n        val sortedList2 = sortedList.sortBy(_ -2)\n    \
    \    val sortedList3 = sortedList2.sortBy(_ -3)\n        val sortedList4 = sortedList3.sortBy(_\
    \ -4)\n        sortedList4\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps55d2o6a.scala:22)\n\tat Problem.main(tmps55d2o6a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val s = lst.sortWith((x:\
    \ Long, y: Long) => x < y)\n        val l3 = s.take(2)\n        val l2 = s.drop(2)\n\
    \        val l1 = s.take(1)\n        l1 ++ l3 ++ l2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpks1g1pxv.scala:22)\n\tat Problem.main(tmpks1g1pxv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        def strangeSort(li\
    \ : List[Long]) : List[Long] = {\n            val m = li(0)\n            val r\
    \ = li.tail\n            val s = r.foldLeft[List[Long]](m)((list, e) => e < list\
    \ match {\n                case true => e\n                case false => list\n\
    \            })\n            s :: r\n        }\n        val sortedList = lst.foldLeft[List[Long]](List[Long]())((list,\
    \ e) => e < list match {\n            case true => list\n            case false\
    \ => e :: list\n        })\n        strangeSort(sortedList).reverse\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9_xkd3pj.scala:18:43\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36ms\e[0m = r.foldLeft[\e[35mList\e[0m[\e[35mLong\e[0m]](m)((\e[36mlist\e[0m,\
    \ \e[36me\e[0m) => e < list \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m        \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                         Found:    (m : Long)\n\e[31m   |\e[0m              \
    \                             Required: List[Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmp9_xkd3pj.scala:18:61 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36ms\e[0m = r.foldLeft[\e\
    [35mList\e[0m[\e[35mLong\e[0m]](m)((\e[36mlist\e[0m, \e[36me\e[0m) => e < list\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                                  \
    \                         ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m<\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\e\
    [31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\e[31m  \
    \ |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x: Short): Boolean\n\e[31m   |\e\
    [0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments ((list : List[Long]))\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9_xkd3pj.scala:19:29 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m \e[31mtrue\e[0m => e\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         Found:    (e : Long)\n\e[31m   |\e[0m              \
    \               Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9_xkd3pj.scala:22:12 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            s :: r\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            Found:    (s : List[Long])\n\e[31m   |\e[0m       \
    \     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ w"
  stdout: ''
  timestamp: 1660009859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var tmp:\
    \ List[Long] = Nil\n        for ( i <- 0 until lst.length ) {\n            tmp\
    \ = lst.tail\n            lst.tail = lst.take(i)\n            lst.head = tmp\n\
    \        }\n        return lst\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpyjuswg_x.scala:18:21 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            lst.tail = lst.take(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val tail\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyjuswg_x.scala:19:23\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            lst.head = tmp\n\e\
    [31m\e[31m   |\e[0m                       ^^^\e[0m\n\e[31m   |\e[0m          \
    \             Found:    (tmp : List[Long])\n\e[31m   |\e[0m                  \
    \     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new ListBuffer[Long]()\n        val tmpList = lst.sort\n        result.addAll(tmpList)\n\
    \        tmpList.clear()\n        result.addAll(tmpList)\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp84wy3282.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mtmpList\e[0m = lst.sort\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \ value sort is not a member of List[Long] - did you mean lst.sortBy?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.isEmpty)\
    \ lst\n        else {\n            val (minVal, maxVal) = lst.minBy(_.toInt).toLong,\
    \ \n                              lst.maxBy(_.toInt).toLong\n            val newList\
    \ = mutable.ArrayBuffer.empty[Long]\n            for (i <- lst.indices) {\n  \
    \              if (i < (maxVal-minVal)) {\n                    newList += lst.apply(i)\
    \ + minVal\n                    newList += lst.apply(i+1)\n                  \
    \  newList += lst.apply(i+2)\n                } else {\n                    newList\
    \ += lst.apply(i)\n                    newList += lst.apply(i-1)\n           \
    \         newList += lst.apply(i-2) + maxVal\n                }\n            }\n\
    \            newList\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpheqxff50.scala:17:60 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m (minVal, maxVal) = lst.minBy(_.toInt).toLong,\
    \ \n\e[31m\e[31m   |\e[0m                                                    \
    \        ^\e[0m\n\e[31m   |\e[0m                                 end of statement\
    \ expected but ',' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpheqxff50.scala:19:26\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnewList\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpheqxff50.scala:21:31 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                \e[33mif\e[0m (i < (maxVal-minVal)) {\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member\
    \ of Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        lst.foldLeft(\
    \ List(lst(0)) :+ lst(lst.size - 1) ){\n            (acc: List[Long], elem: List[Long])\
    \ =>\n                acc.reverse ::: List(elem) ::: acc\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqpiay37e.scala:17:16\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                acc.reverse :::\
    \ List(elem) ::: acc\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    List[Matchable]\n\e[31m   |\e[0m\
    \                Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.isEmpty)\
    \ lst\n        else {\n            val startInd = lst.min.asInstanceOf[Long]\n\
    \            val endInd = lst.max.asInstanceOf[Long]\n            val newInd =\
    \ 1\n            val curr = startInd\n            val list = mutable.ListBuffer.empty[Long]\n\
    \            while (curr < endInd) {\n                list += curr\n         \
    \       newInd += 1\n                curr += newInd\n            }\n         \
    \   list += endInd\n            list.toList.sortBy(_ - startInd).reverse\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph60rihi2.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmph60rihi2.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                newInd += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value\
    \ += is not a member of Int - did you mean newInd.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmph60rihi2.scala:25:21 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m                curr += newInd\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Long - did you mean curr.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortBy(x => x.toLong)\n        val reversedList = sortedList.reverse\n\
    \        reversedList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjw3x4xba.scala:20)\n\tat Problem.main(tmpjw3x4xba.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new ArrayList[Long]()\n        var current = new Long(lst(0))\n        for(i\
    \ <- 1 until lst.size){\n            val val = lst(i)\n            if(val < current){\n\
    \                result.add(current.toLong)\n                current = val\n \
    \           }\n            else {\n                result.add(val.toLong)\n  \
    \              current = val\n            }\n        }\n        result.add(current.toLong)\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpkuvpr92z.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[33mval\e[0m = lst(i)\n\e\
    [31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m                pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkuvpr92z.scala:19:15\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e\
    [0m(\e[33mval\e[0m < current){\n\e[31m\e[31m   |\e[0m               ^^^\e[0m\n\
    \e[31m   |\e[0m               expression expected but \e[31mval\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkuvpr92z.scala:21:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                current\
    \ = \e[33mval\e[0m\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\e\
    [31m   |\e[0m                          expression expected but \e[31mval\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkuvpr92z.scala:24:27\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                result.add(\e\
    [33mval\e[0m.toLong)\n\e[31m\e[31m   |\e[0m                           ^^^\e[0m\n\
    \e[31m   |\e[0m                           expression expected but \e[31mval\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkuvpr92z.scala:25:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                current\
    \ = \e[33mval\e[0m\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\e\
    [31m   |\e[0m                          expression expected but \e[31mval\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkuvpr92z.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m \e[35mArrayList\e[0m[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m    "
  stdout: ''
  timestamp: 1660009852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        def strangeSort(lst\
    \ : List[Long], index : Int) : List[Long] = {\n            if (lst.isEmpty ||\
    \ index >= lst.length) lst\n            else {\n                // Get the minimum\
    \ between current index and remaining length\n                val (minL, minI)\
    \ = lst.span(index)(_ < _)\n\n                // Get the maximum between current\
    \ index and remaining length\n                val (maxL, maxI) = lst.span(index)(_\
    \ > _)\n\n                // Get the minimum between current index and remaining\
    \ length\n                val (minL, maxL) = lst.span(index)(_ < _)\n\n      \
    \          // Merge the minimum with maximum\n                val minLmax = minL\
    \ ++ maxL\n\n                // Merge the minimum and maximum into current index\n\
    \                val lst = minI.toLong ++ minLmax ++ maxI.toLong\n\n         \
    \       // Recursively call for the rest of the list\n                strangeSort(lst,\
    \ index + 1)\n            }\n        }\n        strangeSort(lst, 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp19u_qlda.scala:25:21 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e[0m (minL, maxL) = lst.span(index)(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0mminL\
    \ is already defined as \e[33mvalue\e[0m \e[35mminL\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp19u_qlda.scala:25:27\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e\
    [0m (minL, maxL) = lst.span(index)(_ < _)\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^\e[0m\n\e[31m   |\e[0mmaxL is already defined as \e[33mvalue\e\
    [0m \e[35mmaxL\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp19u_qlda.scala:19:27 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m (minL, minI) = lst.span(index)(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m\
    \                           Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp19u_qlda.scala:19:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e\
    [0m (minL, minI) = lst.span(index)(_ < _)\n\e[31m\e[31m   |\e[0m             \
    \        ^\e[0m\n\e[31m   |\e[0m                     Recursive \e[33mvalue\e[0m\
    \ \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp19u_qlda.scala:22:21 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                \e[33mval\e[0m (maxL, maxI) = lst.span(index)(_ > _)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35m$2$\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E04"
  stdout: ''
  timestamp: 1660009852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val newlst\
    \ = lst.map(x => (x to (x + 1)).toList)\n        newlst.sortWith(_ < _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0yqz_j5x.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        newlst.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m\
    \                        ^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val res =\
    \ new ListBuffer[Long]\n        var nextMax = lst(0)\n        var nextMin = lst(0)\n\
    \        for(i <- 1 until lst.size){\n            val curMax = lst(i)\n      \
    \      val curMin = lst(i)\n            val newMax = if(curMax < nextMax) curMax\
    \ else nextMax\n            val newMin = if(curMin > nextMin) curMin else nextMin\n\
    \            res += newMax\n            nextMax = newMax\n            nextMin\
    \ = newMin\n        }\n        return res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6tbrzq6g.scala:27:15\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mreturn\e[0m res\n\
    \e[31m\e[31m   |\e[0m               ^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    (res : scala.collection.mutable.ListBuffer[Long])\n\e[31m   |\e[0m      \
    \       Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var max =\
    \ lst.map(_.toLong).max\n        var min = lst.map(_.toLong).min\n        while(max\
    \ < min) {\n            max = lst.map(_.toLong).max\n            min = lst.map(_.toLong).min\n\
    \        }\n        val listOfInts = lst.map{i => i to (i - max)}\n        val\
    \ listOfLongs = listOfInts.map{i => i._1 to i._2}\n        val reversedList =\
    \ listOfLongs.toList.reverse\n        val listOfReversedLongs = reversedList.map{i\
    \ => i._2 to i._1}\n        val listOfReversedInts = listOfReversedLongs.toList.reverse\n\
    \        val result = listOfReversedInts.toList\n        result.map{i => i*2l.toLong}\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9qm2qklp.scala:22:48 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlistOfLongs\e[0m = listOfInts.map{\e\
    [36mi\e[0m => i._1 to i._2}\n\e[31m\e[31m   |\e[0m                           \
    \                   ^^^^\e[0m\n\e[31m   |\e[0mvalue _1 is not a member of scala.collection.immutable.NumericRange.Inclusive[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9qm2qklp.scala:24:58 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlistOfReversedLongs\e[0m\
    \ = reversedList.map{\e[36mi\e[0m => i._2 to i._1}\n\e[31m\e[31m   |\e[0m    \
    \                                                    ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     value _2 is not a member of Nothing\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp9qm2qklp.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        result.map{\e[36mi\e[0m => i*\e[31m2l\e[0m.toLong}\n\
    \e[31m\e[31m   |\e[0m                        ^^\e[0m\n\e[31m   |\e[0mvalue * is\
    \ not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import concurrent.duration.pairIntToDuration\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var lst1\
    \ = lst\n        lst1 = lst1.sortWith((a, b) => a.toDouble < b.toDouble)\n   \
    \     lst1 = lst1.sortWith((a, b) => a.toDouble > b.toDouble)\n        lst1 =\
    \ lst1.sortWith((a, b) => a.toLong < b.toLong)\n        lst1 = lst1.sortWith((a,\
    \ b) => a.toLong > b.toLong)\n        return lst1.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpky_qsecd.scala:23)\n\tat Problem.main(tmpky_qsecd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new collection.mutable.ListBuffer[Long]()\n        val current = lst(0)\n\
    \        result.append(current)\n        lst.drop(1).foreach {\n            item\
    \ => \n                if(item > current) {\n                    result.append(item)\n\
    \                } else {\n                    current = item\n              \
    \  }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp21lfmvcl.scala:23:28 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    current = item\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Reassignment to val current\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val n = lst.size\n\
    \        val listOfInt = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1\
    \ to n) {\n            listOfInt += lst(n - i)\n        }\n        listOfInt.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp50tppffk.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlistOfInt\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var list\
    \ : List[Long] = lst.take(lst.size/2-1).toList\n        var list : List[Long]\
    \ = lst.take(lst.size/2).toList\n        for(x<-list.takeWhile(list>x)){\n   \
    \         list.update(x)\n        }\n        list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa54kv5k9.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mlist\e[0m : \e[35mList\e\
    [0m[\e[35mLong\e[0m] = lst.take(lst.size/\e[31m2\e[0m).toList\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mlist is already defined as \e[33mvariable\e[0m \e[35mlist\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpa54kv5k9.scala:17:34 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mfor\e[0m(x<-list.takeWhile(list>x)){\n\e[31m\e[31m   |\e[0m \
    \                             ^^^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member\
    \ of List[Long], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa54kv5k9.scala:18:17 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            list.update(x)\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of List[Long]\
    \ - did you mean List[Long].updated?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val map =\
    \ lst.foldLeft(Map.empty[Long,Long])((m,n) =>{\n            m + (n -> (m.getOrElse(n,0)\
    \ + 1));\n        })\n        map.keySet.sortWith( (a,b) => map.get(b) - map.get(a)).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbuq9szz3.scala:16:40 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            m + (n -> (m.getOrElse(n,\e[31m0\e[0m) +\
    \ \e[31m1\e[0m));\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of AnyVal, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbuq9szz3.scala:18:19 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        map.keySet.sortWith( (\e[36ma\e[0m,\e[36mb\e[0m) =>\
    \ map.get(b) - map.get(a)).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value sortWith is not a member of scala.collection.Set[Long]\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        var minIndex = -1\n        var maxIndex = -1\n\n\
    \        for (i <- 0 until lst.size) {\n            if (i > minIndex) {\n    \
    \            result.insert(maxIndex, maxValue)\n                maxIndex = -1\n\
    \            }\n\n            if (i < maxIndex) {\n                result.insert(minIndex,\
    \ minValue)\n                minIndex = -1\n            }\n\n            minIndex\
    \ = i\n            minValue = lst(i)\n        }\n\n        if (minIndex != -1)\
    \ {\n            result.insert(minIndex, minValue)\n        }\n\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw0z4q52x.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpw0z4q52x.scala:33:21\
    \ -----------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            minValue\
    \ = lst(i)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m            Reassignment to val minValue\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val n = lst.size\n\
    \        val minLst = lst.minBy(_.toLong).toList\n        val maxLst = lst.maxBy(_.toLong).toList\n\
    \        // reverse maxLst and minLst\n        // then reverse maxLst and minLst\n\
    \        // then reverse maxLst and minLst\n        // then reverse maxLst and\
    \ minLst\n        // then reverse maxLst and minLst\n        // reverse maxLst\
    \ and minLst\n        // reverse maxLst and minLst\n        // then reverse maxLst\
    \ and minLst\n        val reversedLst = maxLst ++ minLst ++ maxLst ++ minLst ++\
    \ maxLst ++ minLst ++ maxLst ++ minLst ++ maxLst ++ minLst ++ maxLst ++ minLst\
    \ ++ maxLst ++ minLst ++ maxLst ++ minLst ++ maxLst ++ minLst ++ maxLst ++ minLst\
    \ ++ maxLst ++ minLst\n        reversedLst.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsq_blyma.scala:16:41 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mminLst\e[0m = lst.minBy(_.toLong).toList\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m         value toList is not a member of Long - did you mean Long.toInt?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsq_blyma.scala:17:41 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxLst\e[0m = lst.maxBy(_.toLong).toList\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m         value toList is not a member of Long - did you mean Long.toInt?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if(lst.size\
    \ <= 1)\n            return lst\n        val maxv = lst.foldLeft(List[Long](lst.head))((a,\
    \ b) => if (a._1 > b._1) a else b)\n        val minv = lst.foldLeft(List[Long](lst.head))((a,\
    \ b) => if (a._1 < b._1) a else b)\n        val m = maxv._1\n        val n = minv._1\n\
    \        val rest = lst.reduceLeft(_ + _)\n        val lst2 = (lst - m +: rest\
    \ - n +: m) map {x => m + x} :: n\n        lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E041] Syntax Error: /tmp/tmpm6twz768.scala:22:26 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlst2\e[0m = (lst - m +:\
    \ rest - n +: m) map {\e[36mx\e[0m => m + x} :: n\n\e[31m\e[31m   |\e[0m     \
    \                     ^\e[0m\n\e[31m   |\e[0m- (which is left-associative) and\
    \ +: (which is right-associative) have same precedence and may not be mixed\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E041] Syntax Error: /tmp/tmpm6twz768.scala:22:38\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlst2\e[0m = (lst - m +: rest - n +: m) map {\e[36mx\e[0m => m + x} ::\
    \ n\n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m\
    \   |\e[0m- (which is left-associative) and +: (which is right-associative) have\
    \ same precedence and may not be mixed\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpm6twz768.scala:17:70 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxv\e[0m = lst.foldLeft(List[\e\
    [35mLong\e[0m](lst.head))((\e[36ma\e[0m, \e[36mb\e[0m) => \e[33mif\e[0m (a._1\
    \ > b._1) a \e[33melse\e[0m b)\n\e[31m\e[31m   |\e[0m                        \
    \                                            ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                            value _1 is not a member of List[Long]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpm6twz768.scala:17:88 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxv\e[0m = lst.foldLeft(List[\e\
    [35mLong\e[0m](lst.head))((\e[36ma\e[0m, \e[36mb\e[0m) => \e[33mif\e[0m (a._1\
    \ > b._1) a \e[33melse\e[0m b)\n\e[31m\e[31m   |\e[0m                        \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (b : Long)\n\
    \e[31m   |\e[0m                                                    Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008]"
  stdout: ''
  timestamp: 1660009872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if(lst.size\
    \ == 0)\n            return lst\n        val largest = lst.max\n        val smallest\
    \ = lst.min\n        val others: mutable.MutableList[Long] = mutable.MutableList()\n\
    \        val tmp: List[Long] = new mutable.ArrayBuffer[Long]()\n        tmp.clear()\n\
    \        tmp ++= lst\n        var i = 0\n        while (i < tmp.size)\n      \
    \  {\n            val x = lst(i)\n            val y = lst(largest)\n         \
    \   val z = lst(smallest)\n            if(x == y)\n            {\n           \
    \     tmp ++= z\n                others += lst(i)\n                tmp -= lst(smallest)\n\
    \                others += lst(largest)\n            }\n            else if(x\
    \ > y)\n            {\n                tmp ++= z\n                others += lst(i)\n\
    \                tmp -= lst(smallest)\n                others += lst(largest)\n\
    \            }\n            else if(x < y)\n            {\n                tmp\
    \ ++= x\n                tmp += y\n                others += lst(i)\n        \
    \        tmp -= lst(smallest)\n                tmp += lst(largest)\n         \
    \   }\n            else\n            {\n                tmp ++= x\n          \
    \      tmp += y\n                others += lst(i)\n                tmp -= lst(smallest)\n\
    \                tmp += lst(largest)\n            }\n            i += 1\n    \
    \    }\n        others.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplltjo8jp.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mothers\e[0m: mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList()\n\e[31m\e[31m   |\e[0m                \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplltjo8jp.scala:19:48 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mothers\e[0m: mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList()\n\e[31m\e[31m   |\e[0m                \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplltjo8jp.scala:20:34 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mtmp\e[0m: \e[35mList\e[0m[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmplltjo8jp.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        tmp.clear()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     value clear is not a member of List[Long] - did you mean\
    \ tmp.clone?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplltjo8jp.scala:22:12\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        tmp ++= lst\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m        value ++= is not a member\
    \ of List[Long] - did you mean tmp.++?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmplltjo8jp.scala:27:24 --------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \            \e[33mval\e[0m \e[36my\e[0m = lst(largest)\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1660009873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val tmp :\
    \ List[Long] = Nil\n        var minVal : Long = Long.MaxValue\n        var maxVal\
    \ : Long = 0\n        for(i <- 0 until lst.size) {\n            if(!(i == 0 ||\
    \ i == lst.size - 1)) {\n                if(lst(i) < minVal) {\n             \
    \       minVal = lst(i)\n                    tmp = lst(i)\n                } else\
    \ if(lst(i) > maxVal) {\n                    maxVal = lst(i)\n               \
    \     tmp = lst(i)\n                }\n            }\n        }\n        if(!tmp.equals(lst(0)\
    \ && lst(lst.size - 1) && minVal < maxVal)) {\n            lst ::: List(tmp)\n\
    \        } else {\n            lst\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdgz6lm_v.scala:22:29\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    tmp = lst(i)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        Found:    Long\n\e[31m   |\e[0m                     \
    \     Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdgz6lm_v.scala:25:29\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    tmp = lst(i)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        Found:    Long\n\e[31m   |\e[0m                     \
    \     Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdgz6lm_v.scala:29:30\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m(!tmp.equals(lst(\e\
    [31m0\e[0m) && lst(lst.size - \e[31m1\e[0m) && minVal < maxVal)) {\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \          value && is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdgz6lm_v.scala:30:12 --------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m            lst ::: List(tmp)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    List[Matchable]\n\e[31m   |\e[0m   \
    \         Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n      var res = lst\n\
    \      var minVal = res.min\n      var maxVal = res.max\n      var minPos = -1\n\
    \      var maxPos = -1\n      while(maxVal == minVal) {\n          minVal -= 1\n\
    \          maxVal += 1\n          minPos += 1\n          maxPos += 1\n      }\n\
    \      val startPos = minPos\n      val endPos = maxPos\n      val midPos = if\
    \ (startPos == endPos) startPos + (endPos - startPos) else startPos\n      val\
    \ leftList = lst\n      val rightList = lst.filter(x => x != maxVal)\n      leftList.foreach\
    \ { x =>\n          val midVal = (x + midPos) % rightList.length\n          val\
    \ tempVal = rightList(midVal)\n          if (tempVal > maxVal) {\n           \
    \   val tempList = rightList\n              val startPos = midPos + 1\n      \
    \        val endPos = (midPos + rightList.length)\n              val midPos =\
    \ if (startPos == endPos) startPos + (endPos - startPos) else startPos\n     \
    \         val leftList = tempList\n              val rightList = tempList\n  \
    \            leftList.foreach { x =>\n                  val midVal = (x + midPos)\
    \ % rightList.length\n                  val tempVal = rightList(midVal)\n    \
    \              if (tempVal > maxVal) {\n                      val tempList = rightList\n\
    \                      val startPos = midPos + 1\n                      val endPos\
    \ = (midPos + rightList.length)\n                      val midPos = if (startPos\
    \ == endPos) startPos + (endPos - startPos) else startPos\n                  \
    \    val leftList = tempList\n                      val rightList = tempList\n\
    \                      leftList.foreach { x =>\n                          val\
    \ midVal = (x + midPos) % rightList.length\n                          val tempVal\
    \ = rightList(midVal)\n                          if (tempVal > maxVal) {\n   \
    \                           val tempList = rightList\n                       \
    \       val startPos = midPos + 1\n                              val endPos =\
    \ (midPos + rightList.length)\n                              val midPos = if (startPos\
    \ == endPos) startPos + (endPos - startPos) else startPos\n                  \
    \            val leftList = tempList\n                              val rightList\
    \ = tempList\n                              leftList.foreach { x =>\n        \
    \                          val midVal = (x + midPos) % rightList.length\n    \
    \                              val tempVal = rightList(midVal)\n             \
    \                     if (tempVal > maxVal) {\n                              \
    \        val tempList = rightList\n                                      val startPos\
    \ = midPos + 1\n                                      val endPos = (midPos + rightList.length)\n\
    \                                      val midPos = if (\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplybguev2.scala:68:55 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m                                      \e[33mval\e[0m\
    \ \e[36mmidPos\e[0m = \e[33mif\e[0m (\n\e[31m\e[31m   |\e[0m                 \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                        expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplybguev2.scala:83:0 ----------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplybguev2.scala:33:34\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m          \e[33mval\e[0m \e[36mtempVal\e\
    [0m = rightList(midVal)\n\e[31m\e[31m   |\e[0m                               \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m                                  Found:    (midVal\
    \ : Long)\n\e[31m   |\e[0m                                  Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmplybguev2.scala:70:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m70 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660009871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n      val lst_sorted\
    \ = lst.sorted\n      if(lst_sorted.isEmpty)\n        return lst\n      val min_val\
    \ = lst_sorted(0)\n      val max_val = lst_sorted(lst_sorted.length - 1)\n   \
    \   val min_idx = lst_sorted.lastIndexOf(min_val)\n      val max_idx = lst_sorted.lastIndexOf(max_val)\n\
    \      val strange_order = new Array[(Long, Long)](max_idx - min_idx + 1)\n  \
    \    for(i <- 0 until strange_order.length) strange_order(i) = lst_sorted(min_idx\
    \ + i)\n      val final_lst = lst_sorted.take(strange_order.last).toList +: lst_sorted.drop(strange_order.last)\n\
    \      final_lst.sortWith(compare)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph_ltgigg.scala:23:74\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m      \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until strange_order.length) strange_order(i) = lst_sorted(min_idx +\
    \ i)\n\e[31m\e[31m   |\e[0m                                                  \
    \              ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                                 Found:    Long\n\e[31m   |\e[0m            \
    \                                      Required: (Long, Long)\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph_ltgigg.scala:24:98 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m      \e[33mval\e[0m \e[36mfinal_lst\e[0m = lst_sorted.take(strange_order.last).toList\
    \ +: lst_sorted.drop(strange_order.last)\n\e[31m\e[31m   |\e[0m              \
    \                                                                      ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   (Long, Long)\n\e[31m   |\e[0m                                            \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph_ltgigg.scala:24:52\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m      \e[33mval\e[0m \e[36mfinal_lst\e\
    [0m = lst_sorted.take(strange_order.last).toList +: lst_sorted.drop(strange_order.last)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Found:    (Long, Long)\n\
    \e[31m   |\e[0m                                      Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph_ltgigg.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m      final_lst.sortWith(compare)\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: compare\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available whe"
  stdout: ''
  timestamp: 1660009873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = lst.map(x => {\n            if(x < lst(0)) x\n            else lst(lst.indexWhere(y\
    \ => y < x))\n        }).toList\n        result.sortBy(_.toInt)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmppo5l369t.scala:17)\n\tat scala.runtime.java8.JFunction1$mcJJ$sp.apply(JFunction1$mcJJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.strangeSortList(tmppo5l369t.scala:18)\n\
    \tat Problem$.main(tmppo5l369t.scala:23)\n\tat Problem.main(tmppo5l369t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val newList\
    \ = mutable.ListBuffer(lst(0).toLong)\n        for (ix <- 1 to lst.size) {\n \
    \           if (lst(ix).toLong < lst(ix - 1).toLong) {\n                newList\
    \ += lst(ix - 1).toLong\n            } else {\n                newList += lst(ix).toLong\n\
    \            }\n        }\n        return newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuerylflb.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer(lst(\e\
    [31m0\e[0m).toLong)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val map =\
    \ scala.collection.mutable.LinkedHashMap[Long, Long]()\n        lst.foreach(x\
    \ => map.put(x, x))\n        lst.sortWith((x, y) => map.get(x) < map.get(y))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb_bd9vde.scala:17:42 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.sortWith((\e[36mx\e[0m, \e[36my\e[0m) =>\
    \ map.get(x) < map.get(y))\n\e[31m\e[31m   |\e[0m                            \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of Option[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        // Sort the\
    \ list from first to last \n        val sortList = lst.sortWith(compare(_.toLong,\
    \ _.toLong))\n        val sortedList = sortList.take(sortList.length - 1).flatMap(sortList(i\
    \ => i -> sortList(i + 1)))\n        // Return the list with the first element\
    \ in the middle\n        lst.take(lst.size - 1).reverse ++ sortedList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppmo4leo1.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msortList\e[0m = lst.sortWith(compare(_.toLong,\
    \ _.toLong))\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: compare\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmppmo4leo1.scala:17:77 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msortedList\e[0m = sortList.take(sortList.length\
    \ - \e[31m1\e[0m).flatMap(sortList(\e[36mi\e[0m => i -> sortList(i + \e[31m1\e\
    [0m)))\n\e[31m\e[31m   |\e[0m                                                \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \  Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                  \
    \        I could not infer the type of the parameter i.\n2 errors found\n"
  stdout: ''
  timestamp: 1660009870
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.isEmpty)\n\
    \            lst\n        else\n            val tempList = lst.sortWith(_ > _)\n\
    \            strangeSortList(tempList)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.isEmpty)\
    \ lst\n        else {\n            val minValue = lst.min\n            val maxValue\
    \ = lst.max\n            var current = maxValue\n            var remainingValues:\
    \ List[Long] = lst - minValue\n            var newLst = List[Long]()\n       \
    \     while (!remainingValues.isEmpty) {\n                newLst ::= current\n\
    \                current = remainingValues.max\n                remainingValues\
    \ = remainingValues - current\n            }\n            newLst ::= current\n\
    \            newLst\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp02j48d4r.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mvar\e[0m \e[36mremainingValues\e[0m:\
    \ \e[35mList\e[0m[\e[35mLong\e[0m] = lst - minValue\n\e[31m\e[31m   |\e[0m   \
    \                                           ^^^^^\e[0m\n\e[31m   |\e[0mvalue -\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp02j48d4r.scala:25:50 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                remainingValues = remainingValues - current\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue - is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n      lst.sortWith(_.compareTo(_)\
    \ == 0) // Sort list with ascending order, compare list with zero\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9c60utqe.scala:18)\n\tat Problem.main(tmp9c60utqe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n      val m = lst.min\n\
    \      val n = lst.max\n      val res = List(m,n)\n      for ( i <- 2 until lst.size\
    \ ) {\n        val left = lst.filter(_ > m).sortBy(_ - 1)\n        val right =\
    \ lst.filter(_ < n).sortBy(_ + 1)\n        res = res ++ List(left, right).flatten\n\
    \      }\n      res.flatten\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpq5dr_v4d.scala:21:12 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        res = res ++ List(left, right).flatten\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Reassignment to val res\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpq5dr_v4d.scala:23:17\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m      res.flatten\n\
    \e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0mno given instance\
    \ of type Long => IterableOnce[B] was found for parameter toIterableOnce of \e\
    [33mmethod\e[0m \e[35mflatten\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedIterableOps\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:    B is a type variable with constraint\
    \ <: Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660009874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst2\
    \   = lst.sortWith((x,y) => (x.toLong > y.toLong))\n        val lst3   = lst2.sortWith((x,y)\
    \ => (x.toLong < y.toLong))\n        lst3.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7vpma7t2.scala:20)\n\tat Problem.main(tmp7vpma7t2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n      if(lst.isEmpty)\
    \ lst\n      else lst.sortWith((x1,x2) => ((x1 > x2) || (x1 == x2 && x2 > x1)))\
    \ ++\n        strangeSortList(lst.filter((x) => x != lst.min))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphhehxsxm.scala:20)\n\tat Problem.main(tmphhehxsxm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val max =\
    \ lst.max\n        val min = lst.min\n\n        val mid = max / 2\n\n        var\
    \ sorted = lst.clone()\n        var counter = lst.size\n        while (counter\
    \ > 0) {\n            sorted.remove(mid)\n            sorted.insert(mid, sorted)\n\
    \            counter--\n        }\n        sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7wittykr.scala:25:21 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            counter--\n\e[31m\e[31m   |\e[0m        \
    \             ^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp7wittykr.scala:20:25\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mvar\e[0m \e[36msorted\e[0m = lst.clone()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\e[33mmethod\e[0m \e[35mclone\e\
    [0m in \e[33mclass\e[0m \e[35mObject\e[0m cannot be accessed as a member of (lst\
    \ : List[Long]) from module class Problem$.\n\e[31m   |\e[0m Access to protected\
    \ \e[33mmethod\e[0m \e[35mclone\e[0m not permitted because prefix type List[Long]\n\
    \e[31m   |\e[0m does not conform to \e[33mobject\e[0m \e[35mProblem\e[0m where\
    \ the access takes place\n2 errors found\n"
  stdout: ''
  timestamp: 1660009871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val min =\
    \ lst.min\n        val max = lst.max\n        val result: List[Long] = lst.filter(_\
    \ < min)\n        if (result.length < 1)\n            result\n        else\n \
    \           result.::(strangeSortList(lst.filter(_ > max)).filter(_ < min))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8unxxfzy.scala:21:65\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            result.::(strangeSortList(lst.filter(_\
    \ > max)).filter(_ < min))\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    \e[1m\e[31mList\e[0m\e[1m\e\
    [31m[\e[0mLong\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                      Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.size\
    \ <= 1) {\n            lst.sort\n        } else {\n            val firstElemOfList\
    \ = lst.head\n            val otherElemOfList = lst.drop(1).head\n           \
    \ val restOfList = lst.tail.sort\n            val newListToReturn = firstElemOfList.sorted\
    \ :: otherElemOfList.sorted :: restOfList\n            newListToReturn.sort\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_r4ir_ml.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            lst.sort\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m     value sort is not a member of List[Long]\
    \ - did you mean lst.sortBy?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_r4ir_ml.scala:20:38\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36mrestOfList\e[0m = lst.tail.sort\n\e[31m\e[31m   |\e[0m               \
    \              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort is not a member of\
    \ List[Long @uncheckedVariance], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n      val (max, min,\
    \ count) =\n        if (lst.size == 0) {\n          (Long.MaxValue, 0)\n     \
    \   } else {\n          (\n            lst(0),\n            lst(lst.size - 1),\n\
    \            lst.size - 1\n          )\n        }\n      val nextMin = count match\
    \ {\n        case 0 => -1l\n        case 1 => 0l\n        case _ => {\n      \
    \    val mid = max + (min - max) / 2\n          if (lst.contains(mid))\n     \
    \       nextMin + lst.indexOf(lst.lift(mid))\n          else\n            nextMin\n\
    \        }\n      }\n      val rest = lst.filterNot(_.equals(max)).sorted\n  \
    \    lst.zip(nextMin).sorted.map(x => x._2 match {\n        case x if x != 0 =>\
    \ x.toLong\n        case _ => 0l\n      }).zip(rest)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpp7z2u0kz.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            nextMin + lst.indexOf(lst.lift(mid))\n\e\
    [31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Recursive \e\
    [33mvalue\e[0m \e[35mnextMin\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpp7z2u0kz.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            nextMin\n\e[31m\e[31m   |\e[0m          \
    \  ^\e[0m\n\e[31m   |\e[0m            Recursive \e[33mvalue\e[0m \e[35mnextMin\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp7z2u0kz.scala:37:14\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m      lst.zip(nextMin).sorted.map(\e\
    [36mx\e[0m => x._2 \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              Found:    (nextMin : Long)\n\e[31m   |\e[0m\
    \              Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpp7z2u0kz.scala:37:29 -----------------------------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m      lst.zip(nextMin).sorted.map(\e[36mx\e[0m => x._2 \e\
    [33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0mambiguous given instances of type Ordering[B] found for parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m.\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.Tuple2[\e\
    [35mT1\e[0m, \e[35mT2\e[0m](scala.math.Ordering.Long, \n\e[31m   |\e[0m      /*\
    \ ambiguous: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[T2] */\n\e[31m   |\e[0m        summon[Ordering[T2]]\n\e\
    [31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut both \e[33mobject\e[0m\
    \ \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35m"
  stdout: ''
  timestamp: 1660009875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val m = lst(0)\n\
    \        var r = lst\n        for (x <- lst if x < m) r = r.sorted ++ (x :: r)\n\
    \        r\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpecxb714l.scala:21)\n\tat Problem.main(tmpecxb714l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst1\
    \ = lst.drop(1)\n        val lst2 = lst.last\n        val lst3 = lst2.take(1)\n\
    \        val lst4 = lst3.last\n        val lst5 = lst4.take(1)\n        val lst6\
    \ = lst5.last\n        val lst7 = lst6.take(1)\n        val lst8 = lst7.last\n\
    \        val lst9 = lst8.last\n        val lst10 = lst9.last\n        val lst11\
    \ = lst10.last\n        val lst12 = lst11.last\n        val lst13 = lst12.last\n\
    \        val lst14 = lst13.last\n        val lst15 = lst14.last\n        val lst16\
    \ = lst15.last\n        val lst17 = lst16.last\n        val lst18 = lst17.last\n\
    \        val lst19 = lst18.last\n        val lst20 = lst19.last\n        val lst21\
    \ = lst20.last\n        val lst22 = lst21.last\n        val lst23 = lst22.last\n\
    \        val lst24 = lst23.last\n        val lst25 = lst24.last\n        val lst26\
    \ = lst25.last\n        val lst27 = lst26.last\n        val lst28 = lst27.last\n\
    \        val lst29 = lst28.last\n        val lst30 = lst29.last\n        val lst31\
    \ = lst30.last\n        val lst32 = lst31.last\n        val lst33 = lst32.last\n\
    \        val lst34 = lst33.last\n        val lst35 = lst34.last\n        val lst36\
    \ = lst35.last\n        val lst37 = lst36.last\n        val lst38 = lst37.last\n\
    \        val lst39 = lst38.last\n        val lst40 = lst39.last\n        val lst41\
    \ = lst40.last\n        val lst42 = lst41.last\n        val lst43 = lst42.last\n\
    \        val lst44 = lst43.last\n        val lst45 = lst44.last\n        val lst46\
    \ = lst45.last\n        val lst47 = lst46.last\n        val lst48 = lst47.last\n\
    \        val lst49 = lst48.last\n        val lst50 = lst49.last\n        val lst51\
    \ = lst50.last\n        val lst52 = lst51.last\n        val lst53 = lst52.last\n\
    \        val lst54 = lst53.last\n        val lst55 = lst54.last\n        val lst56\
    \ = lst55.last\n        val \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpd4ukgkmu.scala:71:11 ---------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpd4ukgkmu.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlst3\e[0m = lst2.take(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   value take is not a member of Long\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpd4ukgkmu.scala:72:5 ---------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val maxList\
    \ = lst.map(x => x.toLong).max\n        val minList = lst.map(x => x.toLong).min\n\
    \        val minList = lst.map(x => x.toLong).min\n        val maxList = lst.map(x\
    \ => x.toLong).max\n        val minList = lst.map(x => x.toLong).min\n       \
    \ val maxList = lst.map(x => x.toLong).max\n        val maxList = lst.map(x =>\
    \ x.toLong).max\n        val minList = lst.map(x => x.toLong).min\n        val\
    \ maxList = lst.map(x => x.toLong).max\n        val minList = lst.map(x => x.toLong).min\n\
    \        val maxList = lst.map(x => x.toLong).max\n        val minList = lst.map(x\
    \ => x.toLong).min\n        val maxList = lst.map(x => x.toLong).max\n       \
    \ val maxList = lst.map(x => x.toLong).max\n        val minList = lst.map(x =>\
    \ x.toLong).min\n        val maxList = lst.map(x => x.toLong).max\n        val\
    \ minList = lst.map(x => x.toLong).min\n        val maxList = lst.map(x => x.toLong).max\n\
    \        val minList = lst.map(x => x.toLong).min\n        val maxList = lst.map(x\
    \ => x.toLong).max\n        val minList = lst.map(x => x.toLong).min\n       \
    \ val maxList = lst.map(x => x.toLong).max\n        val minList = lst.map(x =>\
    \ x.toLong).min\n        val maxList = lst.map(x => x.toLong).max\n        val\
    \ minList = lst.map(x => x.toLong).min\n        val maxList = lst.map(x => x.toLong).max\n\
    \        val minList = lst.map(x => x.toLong).min\n        val maxList = lst.map(x\
    \ => x.toLong).max\n        val minList = lst.map(x => x.toLong).min\n       \
    \ val maxList = lst.map(x => x.toLong).max\n        val minList = lst.map(x =>\
    \ x.toLong).min\n        val maxList = lst.map(x => x.toLong).max\n        val\
    \ minList = lst.map(x => x.toLong).min\n        val maxList = lst.map(x => x.toLong).max\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp88xcr5um.scala:49:11 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp88xcr5um.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mminList\e[0m = lst.map(\e\
    [36mx\e[0m => x.toLong).min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminList is already defined as \e[33mvalue\e[0m \e[35mminList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp88xcr5um.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = lst.map(\e[36mx\e[0m\
    \ => x.toLong).max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxList is already defined as \e[33mvalue\e[0m \e[35mmaxList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp88xcr5um.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mminList\e[0m = lst.map(\e[36mx\e[0m\
    \ => x.toLong).min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminList is already defined as \e[33mvalue\e[0m \e[35mminList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp88xcr5um.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = lst.map(\e[36mx\e[0m\
    \ => x.toLong).max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxList is already defined as \e[33mvalue\e[0m \e[35mmaxList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must"
  stdout: ''
  timestamp: 1660009877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val newList\
    \ = lst.sortWith(_ < _)\n        newList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpucei62mb.scala:19)\n\tat Problem.main(tmpucei62mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        def max(a,b)\
    \ = a>b ? a : b\n        def min(a,b) = a<b ? a : b\n        def swap(i : Int,\
    \ j : Int) = {\n            var t = lst(i)\n            lst(i) = lst(j)\n    \
    \        lst(j) = t\n        }\n        def helper(i1 : Int, i2 : Int) : Unit\
    \ = {\n            if(min(i1, i2) > max(i1, i2)) {\n                swap(i1, i2)\n\
    \                helper(i1, i2)\n            } else if(max(i1, i2) > max(i1, i2))\
    \ {\n                helper(i1, i2)\n                helper(i2, i1)\n        \
    \    } else {\n                swap(i1, i2)\n            }\n        }\n      \
    \  if(lst.isEmpty) lst\n        else {\n            helper(0, lst.length-1)\n\
    \            lst\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw8iuj_r7.scala:15:17 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mdef\e[0m \e[36mmax\e[0m(\e[36ma\e[0m,\e\
    [36mb\e[0m) = a>b ? a : \e[35mb\e[0m\n\e[31m\e[31m   |\e[0m                 ^\e\
    [0m\n\e[31m   |\e[0m                 ':' expected, but ',' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpw8iuj_r7.scala:15:19 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mdef\e[0m \e[36mmax\e[0m(\e[36ma\e[0m,\e\
    [36mb\e[0m) = a>b ? a : \e[35mb\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \ ^\e[0m\n\e[31m   |\e[0m                   ':' expected, but ')' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpw8iuj_r7.scala:16:17 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mdef\e[0m \e[36mmin\e[0m(\e[36ma\e[0m,\e\
    [36mb\e[0m) = a<b ? a : \e[35mb\e[0m\n\e[31m\e[31m   |\e[0m                 ^\e\
    [0m\n\e[31m   |\e[0m                 ':' expected, but ',' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpw8iuj_r7.scala:16:19 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mdef\e[0m \e[36mmin\e[0m(\e[36ma\e[0m,\e\
    [36mb\e[0m) = a<b ? a : \e[35mb\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \ ^\e[0m\n\e[31m   |\e[0m                   ':' expected, but ')' found\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpw8iuj_r7.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mdef\e[0m \e[36mmax\e[0m(\e[36ma\e[0m,\e\
    [36mb\e[0m) = a>b ? a : \e[35mb\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \               ^\e[0m\n\e[31m   |\e[0m                                 Not found:\
    \ type b\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw8iuj_r7.scala:16:33\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mdef\e[0m \e\
    [36mmin\e[0m(\e[36ma\e[0m,\e[36mb\e[0m) = a<b ? a : \e[35mb\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m           \
    \                      Not found: type b\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpw8iuj_r7.scala:19:12 --------"
  stdout: ''
  timestamp: 1660009885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        def swap(a:\
    \ Int, b: Int) = {\n            var t = a\n            a = b\n            b =\
    \ t\n        }\n\n        val n = lst.length\n\n        def isSorted(l: List[Long],\
    \ i: Int) = {\n            if (i == n) return true\n            val t = l(i)\n\
    \            if (t > lst(i - 1)) swap(i, i - 1)\n            isSorted(l, i - 1)\n\
    \        }\n\n        var i = n\n\n        while (i != 0) {\n            if (i\
    \ != n) {\n                if (!isSorted(lst, i)) swap(i, n - 1)\n           \
    \ }\n            i = i - 1\n        }\n\n        return lst\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpxb74xtu8.scala:17:14 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            a = b\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val a\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpxb74xtu8.scala:18:14 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            b = t\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val b\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E089] Syntax Error: /tmp/tmpxb74xtu8.scala:24:24 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (i == n) \e[33mreturn\e[0m\
    \ \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m          \e[33mmethod\e[0m \e[35misSorted\e[0m has a return\
    \ statement; it needs a result type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E044] Cyclic Error:\
    \ /tmp/tmpxb74xtu8.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m            isSorted(l, i - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \       ^\e[0m\n\e[31m   |\e[0m            Overloaded or recursive \e[33mmethod\e\
    [0m \e[35misSorted\e[0m needs return type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val l = lst.size\n\
    \        val max = lst.foldRight(List[Long]())((acc, elem) => if (acc > elem)\
    \ elem :: acc else acc)\n        val min = lst.foldRight(List[Long]())((acc, elem)\
    \ => if (acc < elem) elem :: acc else acc)\n        val rest = lst.foldRight(List[Long]())((acc,\
    \ elem) => acc :: (elem :: acc))\n        val result = (max ++ min ++ rest).sorted\n\
    \        result.init\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0h5wuajp.scala:16:69 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = lst.foldRight(List[\e\
    [35mLong\e[0m]())((\e[36macc\e[0m, \e[36melem\e[0m) => \e[33mif\e[0m (acc > elem)\
    \ elem :: acc \e[33melse\e[0m acc)\n\e[31m\e[31m   |\e[0m                    \
    \                                             ^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m>\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\e[31m \
    \  |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e\
    [0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x:\
    \ Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments\
    \ ((elem : List[Long]))\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0h5wuajp.scala:16:82\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = lst.foldRight(List[\e[35mLong\e[0m]())((\e[36macc\e[0m, \e[36melem\e\
    [0m) => \e[33mif\e[0m (acc > elem) elem :: acc \e[33melse\e[0m acc)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \          value :: is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0h5wuajp.scala:16:94 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = lst.foldRight(List[\e[35mLong\e\
    [0m]())((\e[36macc\e[0m, \e[36melem\e[0m) => \e[33mif\e[0m (acc > elem) elem ::\
    \ acc \e[33melse\e[0m acc)\n\e[31m\e[31m   |\e[0m                            \
    \                                                                  ^^^\e[0m\n\e\
    [31m   |\e[0m                                                  Found:    (acc\
    \ : Long)\n\e[31m   |\e[0m                                                  Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0h5wuajp.scala:17:69\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e\
    [0m \e[36mmin\e[0m = lst"
  stdout: ''
  timestamp: 1660009886
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        // find min\
    \ and max elements\n        val max = lst.max\n        val min = lst.min\n   \
    \     // find first element in sorted list that's greater than min\n        val\
    \ pos = lst.indexWhere(x => x > min)\n        // swap elements starting at first\
    \ to first position that's greater than min\n        lst.updated(pos, lst.updated(pos\
    \ + 1, min))\n        // sort rest of elements\n        lst.sortWith(_ < _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm_y03wlo.scala:26)\n\tat Problem.main(tmpm_y03wlo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new ListBuffer[Long]()\n        var last = 0\n        var min = lst(0)\n \
    \       for (i <- 0 until lst.length)\n        {\n            if (last < i)\n\
    \            {\n                val temp = last\n                last = i\n  \
    \              min = lst(i)\n                result += List(temp, last, min, lst(i))\n\
    \            }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvmty_4qk.scala:25:30\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                result += List(temp,\
    \ last, min, lst(i))\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    List[AnyVal]\n\e[31m \
    \  |\e[0m                          Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009886
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var lst_copy\
    \ = (lst ++ lst).sortBy(-_) // to sort by ascending order\n        if (lst_copy.tail.isEmpty)\
    \ {\n            lst_copy\n        } else {\n            val tempList = strangeSortList(lst_copy.tail)\n\
    \            tempList ++ (lst_copy)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.nonEmpty)\
    \ {\n            val minValue = lst.min\n            val maxValue = lst.max\n\
    \            val minIndex= lst.indexWhere(x => x == minValue)\n            val\
    \ maxIndex= lst.indexWhere(x => x == maxValue)\n            val tempList = mutable.ArrayBuffer.empty[Long]\n\
    \            if (minIndex < maxIndex) {\n                tempList ++= lst.drop(minIndex).reverse\n\
    \                tempList ++= lst.take(maxIndex).reverse\n                tempList\
    \ ++= lst.drop(maxIndex).reverse\n            }\n            tempList.toList\n\
    \        } else {\n            List() \n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg2iazgvm.scala:20:27 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mtempList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009883
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        lst.sortBy(l\
    \ => lst(l.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.strangeSortList$$anonfun$1(tmpwoz5yd75.scala:15)\n\tat scala.runtime.java8.JFunction1$mcJJ$sp.apply(JFunction1$mcJJ$sp.scala:17)\n\
    \tat scala.math.Ordering$$anon$1.compare(Ordering.scala:141)\n\tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:360)\n\
    \tat java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat scala.collection.SeqOps.sorted(Seq.scala:700)\n\tat scala.collection.SeqOps.sorted$(Seq.scala:692)\n\
    \tat scala.collection.immutable.List.scala$collection$immutable$StrictOptimizedSeqOps$$super$sorted(List.scala:79)\n\
    \tat scala.collection.immutable.StrictOptimizedSeqOps.sorted(StrictOptimizedSeqOps.scala:78)\n\
    \tat scala.collection.immutable.StrictOptimizedSeqOps.sorted$(StrictOptimizedSeqOps.scala:78)\n\
    \tat scala.collection.immutable.List.sorted(List.scala:79)\n\tat scala.collection.SeqOps.sortBy(Seq.scala:754)\n\
    \tat scala.collection.SeqOps.sortBy$(Seq.scala:754)\n\tat scala.collection.AbstractSeq.sortBy(Seq.scala:1161)\n\
    \tat Problem$.strangeSortList(tmpwoz5yd75.scala:15)\n\tat Problem$.main(tmpwoz5yd75.scala:18)\n\
    \tat Problem.main(tmpwoz5yd75.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension"
  stdout: ''
  timestamp: 1660009891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = mutable.ListBuffer.empty[Long]\n        lst.foreach((i => i match {\n    \
    \        case n : Long => sortedList += n\n        }))\n        sortedList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpumn3segj.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msortedList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009883
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sorted\n        if (sortedList.isEmpty) lst\n        else sortedList.head\
    \ :: sortedList.tail\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptmqpl0pt.scala:20)\n\tat Problem.main(tmptmqpl0pt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var x = lst(0)\n\
    \        val l2 = lst.slice(1)\n        val l3 = lst.slice(2)\n        val l4\
    \ = lst.slice(3)\n        val l5 = lst.slice(4)\n        val l6 = lst.slice(5)\n\
    \        val l7 = lst.slice(6)\n        val l8 = lst.slice(7)\n        val l9\
    \ = lst.slice(8)\n        val l10 = lst.slice(9)\n        val l11 = lst.slice(10)\n\
    \        val l12 = lst.slice(11)\n        val l13 = lst.slice(12)\n        val\
    \ l14 = lst.slice(13)\n        val l15 = lst.slice(14)\n        val l16 = lst.slice(15)\n\
    \        val l17 = lst.slice(16)\n        val l18 = lst.slice(17)\n        val\
    \ l19 = lst.slice(18)\n        val l20 = lst.slice(19)\n        val l21 = lst.slice(20)\n\
    \        val l22 = lst.slice(21)\n        val l23 = lst.slice(22)\n        val\
    \ l24 = lst.slice(23)\n        val l25 = lst.slice(24)\n        val l26 = lst.slice(25)\n\
    \        val l27 = lst.slice(26)\n        val l28 = lst.slice(27)\n        val\
    \ l29 = lst.slice(28)\n        val l30 = lst.slice(29)\n        val l31 = lst.slice(30)\n\
    \        val l32 = lst.slice(31)\n        val l33 = lst.slice(32)\n        val\
    \ l34 = lst.slice(33)\n        val l35 = lst.slice(34)\n        val l36 = lst.slice(35)\n\
    \        val l37 = lst.slice(36)\n        val l38 = lst.slice(37)\n        val\
    \ l39 = lst.slice(38)\n        val l40 = lst.slice(39)\n        val l41 = lst.slice(40)\n\
    \        val l42 = lst.slice(41)\n        val l43 = lst.slice(42)\n        val\
    \ l44 = lst.slice(43)\n        val l45 = lst.slice(44)\n        val l46 = lst.slice(45)\n\
    \        val l47 = lst.slice(46)\n        val l48 = lst.slice(47)\n        val\
    \ l49 = lst.slice(48)\n        val l50 = lst.slice(49)\n        val l51 = lst.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprbh88mx1.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmprbh88mx1.scala:16:26\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36ml2\e[0m = lst.slice(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                 ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter\
    \ until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e[0m \e[35mList\e\
    [0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- Error: /tmp/tmprbh88mx1.scala:17:26\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36ml3\e[0m = lst.slice(\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                 ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter\
    \ until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e[0m \e[35mList\e\
    [0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- Error: /tmp/tmprbh88mx1.scala:18:26\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \ \e[33mval\e[0m \e[36ml4\e[0m = lst.slice(\e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                 ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter\
    \ until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e[0m \e[35mList\e\
    [0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- Error: /tmp/tmprbh88mx1.scala:19:26\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36ml5\e[0m = lst.slice(\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                 ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter\
    \ until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e[0m \e[35mList\e\
    [0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- Error: /tmp/tmprbh88mx1.scala:20:26\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36ml6\e[0m = lst.slice(\e[31m5\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                 ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter\
    \ until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e[0m \e[35mList\e\
    [0m: (from: Int, u"
  stdout: ''
  timestamp: 1660009889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.isEmpty)\
    \ lst\n        else {\n            var min = lst(0)\n            var max = lst(0)\n\
    \            var i : Long = 1\n            var j : Long = 1\n            var temp\
    \ : Long = lst(0)\n            while (i < lst.length && j < lst.length) {\n  \
    \              if (lst(i) < min) {\n                    min = lst(i)\n       \
    \             j = i\n                    i = i + 1\n                }\n      \
    \          if (lst(i) > max) {\n                    max = lst(i)\n           \
    \         j = i\n                    i = i + 1\n                }\n          \
    \      if (lst(i) < temp) {\n                    temp = lst(i)\n             \
    \       j = i\n                    i = i + 1\n                }\n            \
    \    else {\n                    temp = lst(i)\n                    i = i + 1\n\
    \                }\n            }\n            while (i < lst.length) {\n    \
    \            temp = lst(i)\n                j = i\n                i = i + 1\n\
    \            }\n            if (i < lst.length) {\n                var c = lst(i)\n\
    \                while (i < lst.length) {\n                    if (lst(i) > c)\
    \ {\n                        lst(i) = lst(j)\n                        lst(j) =\
    \ temp\n                        temp = c\n                        j = j + 1\n\
    \                        i = i + 1\n                    }\n                  \
    \  else {\n                        c = lst(i)\n                    }\n       \
    \         }\n            }\n            else {\n                var c = lst(0)\n\
    \                while (i < lst.length) {\n                    if (lst(i) < c)\
    \ {\n                        lst(i) = lst(j)\n                        lst(j) =\
    \ temp\n                        temp = c\n                        j = j + 1\n\
    \                        i = i + 1\n                    }\n                  \
    \  else {\n                        c = lst(i)\n                    }\n       \
    \         }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9nqxvydf.scala:23:24\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e[0m\
    \ (lst(i) < min) {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    (i : Long)\n\e[31m   |\e[0m      \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9nqxvydf.scala:24:30 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                    min = lst(i)\n\e[31m\e[31m   |\e[0m              \
    \                ^\e[0m\n\e[31m   |\e[0m                              Found: \
    \   (i : Long)\n\e[31m   |\e[0m                              Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9nqxvydf.scala:28:24\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m                \e[33mif\e[0m\
    \ (lst(i) > max) {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    (i : Long)\n\e[31m   |\e[0m      \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9nqxvydf.scala:29:30 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m                    max = lst(i)\n\e[31m\e[31m   |\e[0m              \
    \                ^\e[0m\n\e[31m   |\e[0m                              Found: \
    \   (i : Long)\n\e[31m   |\e[0m                              Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9nqxvydf.scala:33:24\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m                \e[33mif\e[0m\
    \ (lst(i) < temp) {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    (i : Long)\n\e[31m   |\e[0m      \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type "
  stdout: ''
  timestamp: 1660009895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val newList\
    \ = lst.sortBy(l => l).toList\n        newList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkounwz0l.scala:19)\n\tat Problem.main(tmpkounwz0l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst0\
    \ = lst.reverse\n        lst0.takeWhile(_ <= lst0.head) match {\n            case\
    \ Nil => lst\n            case h :: t => t.reverse.takeWhile(_ <= h) ::: h::strangeSortList(lst)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.collection.immutable.List.takeWhile(List.scala:311)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:16)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\
    \tat Problem$.strangeSortList(tmp3eylds7d.scala:18)\n\tat Problem$.strangeSortList(tmp3eylds7d.sc"
  stdout: ''
  timestamp: 1660009893
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        // First\
    \ sort the list by it's minimum value\n        val minValue = lst.min\n      \
    \  lst.sortBy {\n            // Then sort the list by the maximum of current and\
    \ minimum value\n            case x if x < minValue => minValue\n            case\
    \ x if x > minValue => x\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 1 (of class java.lang.Long)\n\tat Problem$.strangeSortList$$anonfun$1(tmp_x72lajw.scala:20)\n\
    \tat scala.runtime.java8.JFunction1$mcJJ$sp.apply(JFunction1$mcJJ$sp.scala:17)\n\
    \tat scala.math.Ordering$$anon$1.compare(Ordering.scala:141)\n\tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\
    \tat java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat scala.collection.SeqOps.sorted(Seq.scala:700)\n\tat scala.collection.SeqOps.sorted$(Seq.scala:692)\n\
    \tat scala.collection.immutable.List.scala$collection$immutable$StrictOptimizedSeqOps$$super$sorted(List.scala:79)\n\
    \tat scala.collection.immutable.StrictOptimizedSeqOps.sorted(StrictOptimizedSeqOps.scala:78)\n\
    \tat scala.collection.immutable.StrictOptimizedSeqOps.sorted$(StrictOptimizedSeqOps.scala:78)\n\
    \tat scala.collection.immutable.List.sorted(List.scala:79)\n\tat scala.collection.SeqOps.sortBy(Seq.scala:754)\n\
    \tat scala.collection.SeqOps.sortBy$(Seq.scala:754)\n\tat scala.collection.AbstractSeq.sortBy(Seq.scala:1161)\n\
    \tat Problem$.strangeSortList(tmp_x72lajw.scala:21)\n\tat Problem$.main(tmp_x72lajw.scala:24)\n\
    \tat Problem.main(tmp_x72lajw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.ru"
  stdout: ''
  timestamp: 1660009893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val newList\
    \ = new ListBuffer[Long]()\n        val minValue = lst.head\n        val maxValue\
    \ = lst.last\n        newList.add(minValue)\n        for(num <- lst) {\n     \
    \       if(num < minValue) newList.add(minValue)\n            if(num > maxValue)\
    \ newList.add(maxValue)\n            newList.add(num)\n        }\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7zekj3ua.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        newList.add(minValue)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value add is not a member of scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7zekj3ua.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(num < minValue) newList.add(minValue)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue add is not a member of scala.collection.mutable.ListBuffer[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.buffer AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.buffer AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.mutableSeq AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.mutableSeq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7zekj3ua.scala:21:39\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(num\
    \ > maxValue) newList.add(maxValue)\n\e[31m\e[31m   |\e[0m                   \
    \            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue add is not a member of scala.collection.mutable.ListBuffer[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.buffer AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.buffer AsJavaList\n\
    \e[31"
  stdout: ''
  timestamp: 1660009895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ : Long = lst.min\n        val maxVal : Long = lst.max\n        val listLength\
    \ = lst.size\n        var index = 0\n        var list = new scala.collection.mutable.ListBuffer[Long]()\n\
    \        // Create list with first item in the list\n        list += minVal\n\
    \        for (i <- 0 until listLength) {\n            var val = lst(i)\n     \
    \       val maxValueToSwap = lst(index - 1)\n            val minValueToSwap =\
    \ lst(index + 1)\n            // Do swap\n            val temp = lst(index)\n\
    \            val maxValToSwap = lst(index - 1)\n            val minValToSwap =\
    \ lst(index + 1)\n            // Swap values - now they are in right order\n \
    \           val maxValToSwapIndex = list.indexWhere(x => x == maxValToSwap)\n\
    \            val minValToSwapIndex = list.indexWhere(x => x == minValToSwap)\n\
    \            val temp = lst(maxValToSwapIndex)\n            lst(maxValToSwapIndex)\
    \ = maxVal\n            lst(minValToSwapIndex) = minVal\n            lst(maxValIndex)\
    \ = temp\n            lst(minValIndex) = temp\n            list += temp\n    \
    \        index++\n        }\n        list.result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp55c2km38.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mvar\e[0m \e[33mval\e[0m = lst(i)\n\e\
    [31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m                pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp55c2km38.scala:39:19\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m            index++\n\e\
    [31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp55c2km38.scala:33:16 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36mtemp\e[0m = lst(maxValToSwapIndex)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mtemp is already defined as \e[33mvalue\e[0m \e[35mtemp\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp55c2km38.scala:34:12 ------------------------\e[0m\e[0m\n\e[31m34 |\e\
    [0m            lst(maxValToSwapIndex) = maxVal\n\e[31m\e[31m   |\e[0m        \
    \    ^^^\e[0m\n\e[31m   |\e[0m  value update is not a member of List[Long] - did\
    \ you mean lst.updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp55c2km38.scala:35:12\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m            lst(minValToSwapIndex)\
    \ = minVal\n\e[31m\e[31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m  value\
    \ update is not a member of List[Long] - did you mean lst.updated?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp55c2km38.scala:36:12 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            lst(maxValIndex) = temp\n\e[31m\e[31m   |\e\
    [0m            ^^^\e[0m\n\e[31m   |\e[0m  value update is not a member of List[Long]\
    \ - did you mean lst.updated?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp55c2km38.scala:36:16\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m"
  stdout: ''
  timestamp: 1660009894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = mutable.ArrayBuffer.empty[Long]\n        var i = 0\n        while (i < lst.size)\
    \ {\n            val val = lst(i)\n            val index = val % lst.size\n  \
    \          val temp = lst(i)\n            lst(i) = lst(index)\n            lst(index)\
    \ = temp\n            sortedList += val\n            i += 1\n        }\n     \
    \   lst.toList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpavtn7msg.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[33mval\e[0m = lst(i)\n\e\
    [31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m                pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpavtn7msg.scala:19:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e\
    [0m \e[36mindex\e[0m = \e[33mval\e[0m % lst.size\n\e[31m\e[31m   |\e[0m      \
    \                  ^^^\e[0m\n\e[31m   |\e[0m                        expression\
    \ expected but \e[31mval\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpavtn7msg.scala:23:26 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            sortedList += \e[33mval\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                          expression\
    \ expected but \e[31mval\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpavtn7msg.scala:15:25 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36msortedList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpavtn7msg.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            lst(i) = lst(index)\n\e[31m\e[31m   |\e[0m\
    \            ^^^\e[0m\n\e[31m   |\e[0m  value update is not a member of List[Long]\
    \ - did you mean lst.updated?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpavtn7msg.scala:21:25\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            lst(i) = lst(index)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                     Found:    (index : Null)\n\e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1660009895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val l = lst.sortBy(-_)\n\
    \        val list = l.toList\n        list.drop(1).sortBy(-_)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5l5d0f2b.scala:20)\n\tat Problem.main(tmp5l5d0f2b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortWith(_.compare(_.max))\n        val maxIndex = lst.size - 1\n    \
    \    val minIndex = lst.head\n        lst.zipWithIndex.sortWith(_.compare(_.compare(_.max))._1).map(_._1).zipWithIndex.map(e\
    \ => if (e._2 > maxIndex) maxIndex else e._2).map(e => if (e._2 < minIndex) minIndex\
    \ else e._1).zipWithIndex.map { case (e1, e2) => if (e2 < maxIndex) e1 else e2\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpwu79g8dr.scala:15:38 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msortedList\e[0m = lst.sortWith(_.compare(_.max))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpwu79g8dr.scala:18:34\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        lst.zipWithIndex.sortWith(_.compare(_.compare(_.max))._1).map(_._1).zipWithIndex.map(\e\
    [36me\e[0m => \e[33mif\e[0m (e._2 > maxIndex) maxIndex \e[33melse\e[0m e._2).map(\e\
    [36me\e[0m => \e[33mif\e[0m (e._2 < minIndex) minIndex \e[33melse\e[0m e._1).zipWithIndex.map\
    \ { \e[33mcase\e[0m (e1, e2) => \e[33mif\e[0m (e2 < maxIndex) e1 \e[33melse\e\
    [0m e2 }\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwu79g8dr.scala:18:154\
    \ -----------------------\e[0m\e[0m\n\e[31m18 |\e[0m        lst.zipWithIndex.sortWith(_.compare(_.compare(_.max))._1).map(_._1).zipWithIndex.map(\e\
    [36me\e[0m => \e[33mif\e[0m (e._2 > maxIndex) maxIndex \e[33melse\e[0m e._2).map(\e\
    [36me\e[0m => \e[33mif\e[0m (e._2 < minIndex) minIndex \e[33melse\e[0m e._1).zipWithIndex.map\
    \ { \e[33mcase\e[0m (e1, e2) => \e[33mif\e[0m (e2 < maxIndex) e1 \e[33melse\e\
    [0m e2 }\n\e[31m\e[31m   |\e[0m                                              \
    \                                                                            \
    \                              ^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                     value _2 is not a member of Int\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpwu79g8dr.scala:18:185 -----------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        lst.zipWithIndex.sortWith(_.compare(_.compare(_.max))._1).map(_._1).zipWithIndex.map(\e\
    [36me\e[0m => \e[33mif\e[0m (e._2 > maxIndex) maxIndex \e[33melse\e[0m e._2).map(\e\
    [36me\e[0m => \e[33mif\e[0m (e._2 < minIndex) minIndex \e[33melse\e[0m e._1).zipWit"
  stdout: ''
  timestamp: 1660009894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val res =\
    \ new mutable.ListBuffer[Long]()\n        val sortedLst = new scala.collection.mutable.TreeSet[Long]()\n\
    \        sortedLst.addAll(lst)\n        sortedLst.sortWith((x, y) => x.compareTo(y)\
    \ < 0)\n        res ++= sortedLst.asInstanceOf[List[Long]]\n        res.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgvtghhp8.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgvtghhp8.scala:18:18\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        sortedLst.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.compareTo(y) < \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sortWith is not a member\
    \ of scala.collection.mutable.TreeSet[Long]\n2 errors found\n"
  stdout: ''
  timestamp: 1660009894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        // We will\
    \ store the current strange sorted order here and return\n        // it at the\
    \ end. \n        var strangeSortedOrder = lst.sortWith((a, b) => a.toLong > b.toLong)\n\
    \n        // Sort the next few integers in the list.\n        for (i <- 1 until\
    \ strangeSortedOrder.size) {\n            strangeSortedOrder = strangeSortedOrder\
    \ :+ strangeSortedOrder.min.max\n        }\n\n        // Return the list.\n  \
    \      return strangeSortedOrder\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm3ds0cz2.scala:21:55\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            strangeSortedOrder\
    \ = strangeSortedOrder :+ strangeSortedOrder.min.max\n\e[31m\e[31m   |\e[0m  \
    \                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   Long => Long\n\e[31m   |\e[0m                                            \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val temp\
    \ = lst.sortBy(x => -x)\n        val max = temp.last\n        val min = temp.head\n\
    \        val res = for (i <- temp) yield (min until i.toLong reverse) ++ (max\
    \ until i.toLong)\n        res\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmph9h6qa9a.scala:18:67 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = \e[33mfor\e[0m\
    \ (i <- temp) \e[33myield\e[0m (min until i.toLong reverse) ++ (max until i.toLong)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.nonEmpty)\
    \ {\n            val min = lst.min\n            val max = lst.max\n          \
    \  val mid = lst.size / 2\n            lst.sortWith((x, y) => x > y) match {\n\
    \                case Seq(a, b, c) =>\n                    a :: b :: c :: min.asInstanceOf[List[Long]]\
    \ :: max :: mid :: Nil\n                case _ => Nil\n            }\n       \
    \ } else {\n            Nil\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_kdj4ecv.scala:21:20\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    a :: b ::\
    \ c :: min.asInstanceOf[\e[35mList\e[0m[\e[35mLong\e[0m]] :: max :: mid :: Nil\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Found:    List[\e[1m\e[31mAny\e[0m]\n\e\
    [31m   |\e[0m                    Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        lst.map(_*1000).toList\
    \ sortBy (_ % 1000)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp717yfzj8.scala:18)\n\tat Problem.main(tmp717yfzj8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var res =\
    \ lst.sortWith(_ < _)\n        var index = 0\n        while (index < res.length)\
    \ {\n            val tmp = res(index)\n            val min = res(index + 1)\n\
    \            val max = res(index + 2)\n            if (min == max) {\n       \
    \         if (tmp < min)\n                    res = (min +: res).sortWith(_ <\
    \ _)\n                else\n                    res = (min +: res).sortWith(_\
    \ <= _)\n            } else if (min > max)\n                res = (res + (max\
    \ +: res).sortWith(_ > _)).sortWith(_ <= _)\n            else\n              \
    \  res = (res + (min +: res).sortWith(_ < _)).sortWith(_ < _)\n            index\
    \ += 3\n        }\n        res.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8vaiuclz.scala:27:27 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                res = (res + (max +: res).sortWith(_\
    \ > _)).sortWith(_ <= _)\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp8vaiuclz.scala:29:27 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                res = (res + (min +: res).sortWith(_ < _)).sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.isEmpty)\
    \ {\n            return lst\n        }\n        val minValue = lst.min\n     \
    \   val maxValue = lst.max\n        val list2 = lst.foldLeft(List[Long]()) { (acc,\
    \ i) => acc :+ i }\n        val list3 = list2.reverse\n        val list4 = list3.foldLeft(List[Long]())\
    \ { (acc, i) => acc :+ i }\n        val list5 = list4.foldLeft(List[Long]()) {\
    \ (acc, i) => acc :+ i }\n        val list6 = list5.foldLeft(List[Long]()) { (acc,\
    \ i) => acc :+ i }\n        val list7 = list6.foldLeft(List[Long]()) { (acc, i)\
    \ => acc :+ i }\n        val list8 = list7.foldLeft(List[Long]()) { (acc, i) =>\
    \ acc :+ i }\n        val list9 = list8.foldLeft(List[Long]()) { (acc, i) => acc\
    \ :+ i }\n        val list10 = list9.foldLeft(List[Long]()) { (acc, i) => acc\
    \ :+ i }\n        val list11 = list10.foldLeft(List[Long]()) { (acc, i) => acc\
    \ :+ i }\n        val list12 = list11.foldLeft(List[Long]()) { (acc, i) => acc\
    \ :+ i }\n        val list13 = list12.foldLeft(List[Long]()) { (acc, i) => acc\
    \ :+ i }\n        val list14 = list13.foldLeft(List[Long]()) { (acc, i) => acc\
    \ :+ i }\n        val list15 = list14.foldLeft(List[Long]()) { (acc, i) => acc\
    \ :+ i }\n        val list16 = list15.foldLeft(List[Long]()) { (acc, i) => acc\
    \ :+ i }\n        val list17 = list16.foldLeft(List[Long]()) { (acc, i) => acc\
    \ :+ i }\n        val list18 = list17.foldLeft(List[Long]()) { (acc, i) => acc\
    \ :+ i }\n        val list19 = list18.foldLeft(List[Long]()) { (acc, i) => acc\
    \ :+ i }\n        val list20 = list19.foldLeft(List[Long]()) { (acc, i) => acc\
    \ :+ i }\n        val list21 = list20.foldLeft(List[Long]()) { (acc, i) => acc\
    \ :+ i }\n        val list22 = list21.foldLeft(List[\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8s_05730.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8s_05730.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val mn =\
    \ lst.min\n        val mv = lst.max - (mn zip lst) reduceLeft (_ min _)\n    \
    \    val rv = lst zip lst.drop 1 reduceLeft (_ max _)\n        rv + mn :: (mv\
    \ :: mn :: rv).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxv5irqfr.scala:17:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mrv\e[0m = lst zip lst.drop\
    \ \e[31m1\e[0m reduceLeft (_ max _)\n\e[31m\e[31m   |\e[0m                   \
    \               ^\e[0m\n\e[31m   |\e[0m                     end of statement expected\
    \ but integer literal found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxv5irqfr.scala:16:31\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmv\e[0m = lst.max - (mn zip lst) reduceLeft (_ min _)\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \          value zip is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxv5irqfr.scala:17:25 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mrv\e[0m = lst zip lst.drop \e[31m1\e[0m reduceLeft\
    \ (_ max _)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Found:    Int => List[Long]\n\e[31m   |\e[0m\
    \                         Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpxv5irqfr.scala:18:11 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        rv + mn :: (mv :: mn :: rv).reverse\n\e[31m\e\
    [31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[(Long,\
    \ Nothing)], but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val newList\
    \ = lst.sortWith(_ > _)\n        if (newList.isEmpty) {\n            return lst\n\
    \        }\n        newList.headOption match {\n            case Some(x) => strangeSortList(newList.tail)\n\
    \            case None => newList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr2p5e1m4.scala:25)\n\tat Problem.main(tmpr2p5e1m4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009903
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val res =\
    \ lst.foldLeft(List[Long]())((acc: List[Long], x) => {\n            val newAcc\
    \ = if (acc.isEmpty || x < acc.head) x :: acc\n                else acc.reverse\n\
    \            newAcc\n        })\n        res.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrgtn7ec.scala:23)\n\tat Problem.main(tmpvrgtn7ec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val mutableList\
    \ = mutable.LinkedHashMap[Long, List[Long]]().withDefaultValue[List[Long]](List())\n\
    \        for (i <- lst.sorted)\n            mutableList.getOrElseUpdate(i, i ::\
    \ mutableList.getOrElse(i, List()))\n        mutableList.foldLeft(List(lst.head))(_\
    \ :+ _).map(_ :+ _).reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkujy4veq.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmutableList\e[0m = mutable.LinkedHashMap[\e\
    [35mLong\e[0m, \e[35mList\e[0m[\e[35mLong\e[0m]]().withDefaultValue[\e[35mList\e\
    [0m[\e[35mLong\e[0m]](List())\n\e[31m\e[31m   |\e[0m                         \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val mutableList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val mutableList2 = mutable.ArrayBuffer.empty[Long]\n\
    \        var j = 0\n        while (j < lst.length) {\n            val minInt =\
    \ lst(j)\n            var i = 1\n            while (i < lst.length) {\n      \
    \          if (minInt >= lst(i)) {\n                    mutableList += minInt\n\
    \                    j++\n                }\n                else {\n        \
    \            mutableList2 += minInt\n                }\n                i++\n\
    \            }\n        }\n        mutableList += lst(j)\n        mutableList2\
    \ += lst(j)\n        mutableList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpl_zn23t1.scala:24:23 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    j++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpl_zn23t1.scala:29:19 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m                i++\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e\
    [31m   |\e[0m                   expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl_zn23t1.scala:15:26\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mmutableList\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpl_zn23t1.scala:16:27 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mmutableList2\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        lst.sortWith(_.compareTo(_)\
    \ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzze6_j87.scala:18)\n\tat Problem.main(tmpzze6_j87.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009911
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        def loop(lst\
    \ : List[Long], i : Int, tmp : List[Long]): List[Long] = {\n            if (i\
    \ == lst.length) {\n                tmp\n            } else {\n              \
    \  loop(lst, i + 1, tmp :+ lst(i))\n            }\n        }\n        loop(lst,\
    \ 0, Nil)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgjnmkzbr.scala:25)\n\tat Problem.main(tmpgjnmkzbr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.LinkedList[Long]()\n        // Use a mutable Set so we can keep\
    \ track of elements we've already seen\n        val seen = new mutable.Set[Long]()\n\
    \n        val head = lst(0)\n        // Add head to the result list\n        result.addFirst(head)\n\
    \        // Now loop through the rest and see if we have already seen the element\n\
    \        for ( i <- 1 to lst.size ) {\n            val current = lst(i)\n    \
    \        // If the current number is in the seen list we already saw it\n    \
    \        if ( seen.contains(current) ) {\n                // Move on\n       \
    \         continue\n            }\n            // We haven't seen this number\
    \ yet, add it to the result list\n            result.addLast(current)\n      \
    \      // Now see if we saw the current number before, if we haven't then add\
    \ it\n            seen.add( current )\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6c8aow_g.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6c8aow_g.scala:17:23\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mseen\e[0m = \e[33mnew\e[0m mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6c8aow_g.scala:28:16 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m                continue\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Not found: continue\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n      val lst1 =\
    \ lst.drop(1).reverse\n      val lst2 = lst.dropRight(1)\n      val lst3 = lst1.zip(lst2).map(pair\
    \ => (pair._1 + pair._2, pair._2)).toSeq.sortWith(_._1 > _._1)\n      lst3.map\
    \ { pair=> pair._1 }.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudzh8hiw.scala:21)\n\tat Problem.main(tmpudzh8hiw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        def strangeSort(lst\
    \ : List[Long]) : List[Long] = {\n            val sortedList : List[Long] = Nil\n\
    \            sortedList ++= lst\n\n            def strangeSort_helper(lst : List[Long])\
    \ : List[Long] = {\n                sortedList ++= lst\n                val sortedList\
    \ = sortedList.sortWith(_ < _)\n                strangeSort_helper(sortedList)\n\
    \            }\n            strangeSort_helper(lst)\n        }\n        strangeSort(lst)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpabh693fd.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            sortedList ++= lst\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value ++= is not a member\
    \ of List[Long] - did you mean sortedList.++?\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpabh693fd.scala:21:33 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                \e[33mval\e[0m \e[36msortedList\e[0m = sortedList.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m \
    \  |\e[0m                                 Recursive \e[33mvalue\e[0m \e[35msortedList\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val maxElems\
    \ = lst.reverse.foldLeft(0)((acc, currElem) => if (currElem > acc) currElem else\
    \ acc)\n        val minElems = lst.reverse.foldLeft(0)((acc, currElem) => if (currElem\
    \ < acc) currElem else acc)\n        val max = lst.reverse.head\n        val min\
    \ = lst.reverse.last\n        var i = 0\n        val result = new List[Long]()\n\
    \        while (!lst.contains(i)) {\n            i += 1\n        }\n        i\
    \ -= 1\n        while (i <= maxElems) {\n            val element = lst.last\n\
    \            val minIndex = lst.indexOf(min)\n            val maxIndex = lst.indexOf(max)\n\
    \            if (minIndex < maxIndex) {\n                result.add(element)\n\
    \                lst.lastIndex = lst.lastIndex + 1\n                i -= 1\n \
    \           }\n            else {\n                lst.lastIndex = lst.lastIndex\
    \ + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps_a4vlic.scala:15:86\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxElems\e\
    [0m = lst.reverse.foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mcurrElem\e[0m)\
    \ => \e[33mif\e[0m (currElem > acc) currElem \e[33melse\e[0m acc)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                  Found:    (currElem : Long)\n\e[31m   |\e[0m              \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmps_a4vlic.scala:16:86 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mminElems\e[0m = lst.reverse.foldLeft(\e\
    [31m0\e[0m)((\e[36macc\e[0m, \e[36mcurrElem\e[0m) => \e[33mif\e[0m (currElem <\
    \ acc) currElem \e[33melse\e[0m acc)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                    ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (currElem\
    \ : Long)\n\e[31m   |\e[0m                                             Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps_a4vlic.scala:30:23\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                result.add(element)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue add\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found "
  stdout: ''
  timestamp: 1660009912
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val strange\
    \ = new ArrayBuffer[Long]()\n        var i : Long = -1\n        for (x <- lst)\
    \ {\n            i = if (x < i) x else i\n            strange += i\n        }\n\
    \        strange.toList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2d8dr0_5.scala:24)\n\tat Problem.main(tmp2d8dr0_5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortWith((x, y) => x < y)\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 to lst.size - 1) {\n            result += sortedList.take(i)\n\
    \        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpms386lot.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var currentIndex\
    \ = lst.head\n        val result = new ListBuffer[Long]()\n        for (x <- lst.tail)\
    \ {\n            if (currentIndex < x) result.+=(currentIndex)\n            else\
    \ result.+=(currentIndex - x)\n            currentIndex = x\n        }\n     \
    \   result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpax2kk84b.scala:25)\n\tat Problem.main(tmpax2kk84b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        def strangeSort(lst\
    \ : List[Long], i : Int) : List[Long] = {\n            if(lst.size < 2)\n    \
    \            lst\n            else if(lst.size < 3)\n                strangeSort(lst.take(i+1),\
    \ 1)(lst.reverse)\n            else if(lst.size < 4)\n                strangeSort(lst.take(2+i),\
    \ 1)(lst.reverse)\n            else\n                strangeSort(lst.take(3+i),\
    \ 1)(strangeSort(lst.take(3+i), 2)(lst.reverse))\n        }\n        strangeSort(lst,\
    \ 0)(lst.reverse)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd5ou_oqn.scala:19:50\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                strangeSort(lst.take(i+\e\
    [31m1\e[0m), \e[31m1\e[0m)(lst.reverse)\n\e[31m\e[31m   |\e[0m               \
    \                               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                                  Found:    List[Long]\n\e[31m   |\e[0m     \
    \                                         Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpd5ou_oqn.scala:21:50 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                strangeSort(lst.take(\e[31m2\e[0m+i),\
    \ \e[31m1\e[0m)(lst.reverse)\n\e[31m\e[31m   |\e[0m                          \
    \                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                       Found:    List[Long]\n\e[31m   |\e[0m                \
    \                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpd5ou_oqn.scala:23:80 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                strangeSort(lst.take(\e[31m3\e[0m+i),\
    \ \e[31m1\e[0m)(strangeSort(lst.take(\e[31m3\e[0m+i), \e[31m2\e[0m)(lst.reverse))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                             Found:    List[Long]\n\e[31m   |\e[0m          \
    \                                          Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd5ou_oqn.scala:25:32 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        strangeSort(lst, \e[31m0\e[0m)(lst.reverse)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            Found:    List[Long]\n\e[31m   |\e[0m         \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain"
  stdout: ''
  timestamp: 1660009911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        require(lst.nonEmpty,\
    \ \"The list cannot be empty.\")\n        require(lst.length == 1, \"The list\
    \ must be only one long.\")\n        val min = lst.head\n        val max = lst.tail.last\n\
    \        require(max > min, \"The list cannot be empty.\")\n        require(min.nonEmpty,\
    \ \"The list cannot be empty.\")\n        var newList: List[Long] = lst.head ::\
    \ lst\n        for (i1 <- 1L to lst.size - 2) {\n            val leftMax = lst(i\
    \ - 1)\n            val rightMax = lst(i + 1)\n            val leftMin = lst(i\
    \ - 2)\n            val rightMin = lst(i + 2)\n            newList = newList :+\
    \ (leftMax * rightMin) - (leftMin * rightMax)\n        }\n        newList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbqyx3oh3.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        require(min.nonEmpty, \e[31m\"The list cannot\
    \ be empty.\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                value nonEmpty is not a member of Long\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbqyx3oh3.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mleftMax\e[0m = lst(i\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\
    \e[31m   |\e[0m                              Not found: i\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbqyx3oh3.scala:24:31 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mrightMax\e[0m = lst(i\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\
    \e[31m   |\e[0m                               Not found: i\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbqyx3oh3.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mleftMin\e[0m = lst(i\
    \ - \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\
    \e[31m   |\e[0m                              Not found: i\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbqyx3oh3.scala:26:31 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mrightMin\e[0m = lst(i\
    \ + \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\
    \e[31m   |\e[0m                               Not found: i\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minLst\
    \   = lst.min\n        val maxLst   = lst.max\n        val minIndex = {\n    \
    \        val (i,n) = lst.indexWhere(_ == minLst)\n            if(n == 1) i\n \
    \           else i-1\n        }\n        val maxIndex = {\n            val (i,n)\
    \ = lst.indexWhere(_ == maxLst)\n            if(n == 1) i\n            else i-1\n\
    \        }\n        if(minIndex < maxIndex) lst.reverse\n        else lst\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxb2hcynm.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33melse\e[0m i-\e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0mvalue - is not a member\
    \ of Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpxb2hcynm.scala:25:18 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m i-\e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0mvalue - is not a member\
    \ of Any, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpxb2hcynm.scala:27:20 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m(minIndex < maxIndex) lst.reverse\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not\
    \ a member of Any, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val mn =\
    \ lst(0)\n        val mx = lst(lst.length-1)\n        for(i <- 0 until lst.length\
    \ -1) {\n            val temp = lst(i)\n            lst(i) = mx \n           \
    \ mx = temp\n        }\n        lst\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpga_qz7c1.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            lst(i) = mx \n\e[31m\e[31m   |\e[0m     \
    \       ^^^\e[0m\n\e[31m   |\e[0m  value update is not a member of List[Long]\
    \ - did you mean lst.updated?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpga_qz7c1.scala:20:15\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            mx = temp\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val mx\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val n = lst.size\n\
    \        var minV = lst(0)\n        var maxV = lst(0)\n        for (i<-n;i>0;i--)\n\
    \            if (minV < lst(i))\n                minV = lst(i)\n            if\
    \ (maxV > lst(i))\n                maxV = lst(i)\n        for (i<-n;i>0;i--)\n\
    \            lst(i) = minV\n        minV\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpidgtrimh.scala:18:21 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i<-n;i>\e[31m0\e[0m;i--)\n\e\
    [31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m              \
    \       '<-' expected, but ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpidgtrimh.scala:18:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m\
    \ (i<-n;i>\e[31m0\e[0m;i--)\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         pattern expected\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpidgtrimh.scala:23:21 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m (i<-n;i>\e[31m0\e[0m;i--)\n\e\
    [31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m              \
    \       '<-' expected, but ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpidgtrimh.scala:23:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m\
    \ (i<-n;i>\e[31m0\e[0m;i--)\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         pattern expected\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpidgtrimh.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i<-n;i>\e[31m0\e[0m;i--)\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                value\
    \ foreach is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpidgtrimh.scala:23:16\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m (i<-n;i>\e\
    [31m0\e[0m;i--)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m\
    \                value foreach is not a member of Int\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpidgtrimh.scala:25:8 ---------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m        minV\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m  \
    \ |\e[0m        Found:    (minV : Long)\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation "
  stdout: ''
  timestamp: 1660009912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val n = lst.length\n\
    \        val n1 = lst(0)\n        val n2 = lst(n)\n        val n3 = lst(n-1)\n\
    \        val n4 = lst(n-2)\n        val n5 = lst(n-3)\n        val n6 = lst(n-4)\n\
    \        val n7 = lst(n-5)\n        val n8 = lst(n-6)\n        val n9 = lst(n-7)\n\
    \        val n10 = lst(n-8)\n        val n11 = lst(n-9)\n        val n12 = lst(n-10)\n\
    \        val n13 = lst(n-11)\n        val n14 = lst(n-12)\n        val n15 = lst(n-13)\n\
    \        val n16 = lst(n-14)\n        val n17 = lst(n-15)\n        val n18 = lst(n-16)\n\
    \        val n19 = lst(n-17)\n        val n20 = lst(n-18)\n        val n21 = lst(n-19)\n\
    \        val n22 = lst(n-20)\n        val n23 = lst(n-21)\n        val n24 = lst(n-22)\n\
    \        val n25 = lst(n-23)\n        val n26 = lst(n-24)\n        val n27 = lst(n-25)\n\
    \        val n28 = lst(n-26)\n        val n29 = lst(n-27)\n        val n30 = lst(n-28)\n\
    \        val n31 = lst(n-29)\n        val n32 = lst(n-31)\n        val n33 = lst(n-30)\n\
    \        val n34 = lst(n-32)\n        val n35 = lst(n-33)\n        val n36 = lst(n-34)\n\
    \        val n37 = lst(n-35)\n        val n38 = lst(n-36)\n        val n39 = lst(n-37)\n\
    \        val n40 = lst(n-38)\n        val n41 = lst(n-39)\n        val n42 = lst(n-40)\n\
    \        val n43 = lst(n-41)\n        val n44 = lst(n-42)\n        val n45 = lst(n-43)\n\
    \        val n46 = lst(n-44)\n        val n47 = lst(n-45)\n        val n48 = lst(n-46)\n\
    \        val n49 = lst(n-47)\n        val n50 = lst(n-48)\n        val n51 = lst(n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptp3dj88v.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptp3dj88v.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        require(!lst.isEmpty)\n\
    \        val min: Long = lst.min\n        val max: Long = lst.max\n        val\
    \ minIndex: Int = lst.indexOf(min)\n        val maxIndex: Int = lst.indexOf(max)\n\
    \        // if min and max have same value, no need to sort\n        if (min ==\
    \ max)\n            lst.filterNot(x => x == min)\n        else\n            lst.sortWith((a,\
    \ b) => (a > b) ? 1 : -1)\n            .reverse()\n            .zipWithIndex\n\
    \            .filter(_._1 == minIndex)\n            .map(_._2)\n            .toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcteen87y.scala:24:43 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            lst.sortWith((\e[36ma\e[0m, \e[36mb\e[0m)\
    \ => (a > b) ? \e[31m1\e[0m : -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \               value ? is not a member of Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1660009917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.size\
    \ <= 1) lst\n        else {\n            var maxIndex = lst.size - 1\n       \
    \     var maxValue = lst(maxIndex)\n            var minIndex = lst.size - 1\n\
    \            var minValue = lst(minIndex)\n            var newList = lst.filter((value)\
    \ => value <= minValue)\n            var rest = lst.filter((value) => value >=\
    \ maxValue)\n            newList.foreach {value =>\n                minIndex =\
    \ lst.indexOf(value)\n                minValue = lst(minIndex)\n            }\n\
    \            rest.reverse.foreach {value =>\n                maxIndex = lst.indexOf(value)\n\
    \                maxValue = lst(maxIndex)\n            }\n            (minIndex\
    \ :: newList) ++ (maxIndex :: rest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe1ohyluw.scala:31:12\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            (minIndex :: newList)\
    \ ++ (maxIndex :: rest)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    List[\e[1m\e[31mAnyVal\e[0m]\n\e[31m\
    \   |\e[0m            Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var s = lst.min\n\
    \        var rest = lst.filter(_ != s)\n        var restLength = rest.length\n\
    \        var temp = []\n        for(i <- 0 until restLength) {\n            var\
    \ j = i\n            while (j > 0) {\n                if(rest(j) == rest(j-1))\
    \ {\n                    rest(j) = rest(j-1)\n                    rest(j-1) =\
    \ s\n                    s = rest(j-1)\n                    temp += List(s, rest(j))\n\
    \                }\n                j -= 1\n            }\n        }\n       \
    \ val result = new mutable.ArrayList[Long]()\n        result.addAll(s+temp.toList)\n\
    \        result.addAll(rest.toList)\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqxyammhk.scala:18:20 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mtemp\e[0m = []\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    an\
    \ identifier expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqxyammhk.scala:19:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i\
    \ <- \e[31m0\e[0m until restLength) {\n\e[31m\e[31m   |\e[0m^^^\e[0m\n\e[31m \
    \  |\e[0m'=>' expected, but 'end of statement' found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpqxyammhk.scala:23:20 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m                    rest(j) = rest(j-\e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a\
    \ member of List[Long] - did you mean List[Long].updated?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpqxyammhk.scala:24:20 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                    rest(j-\e[31m1\e[0m) = s\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a\
    \ member of List[Long] - did you mean List[Long].updated?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpqxyammhk.scala:26:25 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                    temp += List(s, rest(j))\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member\
    \ of Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.con"
  stdout: ''
  timestamp: 1660009918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        lst.sortWith(\
    \ (a,b) => a < b ? -1 : a > b ? 1 : 0 )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4rpdx1be.scala:15:54 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        lst.sortWith( (\e[36ma\e[0m,\e[36mb\e[0m) =>\
    \ a < b ? -\e[31m1\e[0m : \e[35ma\e[0m \e[35m>\e[0m \e[35mb\e[0m \e[35m?\e[0m\
    \ \e[31m1\e[0m : \e[31m0\e[0m )\n\e[31m\e[31m   |\e[0m                       \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                       ')' expected, but ':' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp4rpdx1be.scala:15:46 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        lst.sortWith( (\e[36ma\e[0m,\e[36mb\e[0m) => a < b ? -\e\
    [31m1\e[0m : \e[35ma\e[0m \e[35m>\e[0m \e[35mb\e[0m \e[35m?\e[0m \e[31m1\e[0m\
    \ : \e[31m0\e[0m )\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   Not found: type >\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4rpdx1be.scala:15:37\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        lst.sortWith( (\e\
    [36ma\e[0m,\e[36mb\e[0m) => a < b ? -\e[31m1\e[0m : \e[35ma\e[0m \e[35m>\e[0m\
    \ \e[35mb\e[0m \e[35m?\e[0m \e[31m1\e[0m : \e[31m0\e[0m )\n\e[31m\e[31m   |\e\
    [0m                                   ^^^\e[0m\n\e[31m   |\e[0m              \
    \                     value ? is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660009916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val first\
    \ = lst(0).toInt\n        val rest = lst.tail.filterNot(_ == first)\n        val\
    \ min = rest.min(first = first)._1.toInt\n        val max = rest.max(first = first)._1.toInt\n\
    \        var newRest = rest\n        while (rest.nonEmpty) {\n            val\
    \ next = rest.min(first = first)._1.toInt\n            newRest = newRest.filterNot(_\
    \ == next)\n            val newMin = newRest.min(first = first)._1.toInt\n   \
    \         val newMax = newRest.max(first = first)._1.toInt\n            if (newMin\
    \ > min) {\n                newRest = newRest.filterNot(_ == min)\n          \
    \      max = newMax\n            } else {\n                if (newMax < max) {\n\
    \                    newRest = newRest.filterNot(_ == max)\n                 \
    \   min = newMin\n                }\n            }\n        }\n        newRest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyhu5knnz.scala:17:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = rest.min(first\
    \ = first)._1.toInt\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m\e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m: (\e[33mimplicit \e[0mord: Ordering[B]): Long does not have a parameter first\n\
    \e[31m\e[31m-- Error: /tmp/tmpyhu5knnz.scala:18:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = rest.max(first\
    \ = first)._1.toInt\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m\e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m: (\e[33mimplicit \e[0mord: Ordering[B]): Long does not have a parameter first\n\
    \e[31m\e[31m-- Error: /tmp/tmpyhu5knnz.scala:21:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mnext\e[0m = rest.min(first\
    \ = first)._1.toInt\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m\e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m: (\e[33mimplicit \e[0mord: Ordering[B]): Long does not have a parameter first\n\
    \e[31m\e[31m-- Error: /tmp/tmpyhu5knnz.scala:23:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mnewMin\e[0m = newRest.min(first\
    \ = first)._1.toInt\n\e[31m\e[31m   |\e[0m                                   \
    \  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mtrait\e\
    [0m \e[35mIterableOnceOps\e[0m: (\e[33mimplicit \e[0mord: Ordering[B]): Long does\
    \ not have a parameter first\n\e[31m\e[31m-- Error: /tmp/tmpyhu5knnz.scala:24:43\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \     \e[33mval\e[0m \e[36mnewMax\e[0m = newRest.max(first = first)._1.toInt\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m\e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m: (\e[33mimplicit \e[0mord: Ordering[B]): Long does "
  stdout: ''
  timestamp: 1660009914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val size\
    \ = lst.size\n        val newList = mutable.ListBuffer[Long]()\n        val minVal\
    \ = lst(size)\n        var index = 0\n        while (!lst.isEmpty) {\n       \
    \     newList += lst(index).asInstanceOf[Long]\n            index += 1\n     \
    \   }\n        newList.sortBy(x=> (x + minVal).asInstanceOf[Long])\n        newList.take(size)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm50a6rkz.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val n = lst.length\n\
    \        if (n == 0) lst\n        else {\n            val small = lst.min\n  \
    \          val max = lst.max\n            val smallerLst = (lst.filterNot(i =>\
    \ i == small)) // remove smallest element\n            val biggerLst = (lst.filterNot(i\
    \ => i == max)) // remove largest element\n            val rem = smallerLst ++\
    \ biggerLst ++ lst // get remaining elements\n            rem.sorted\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe8dlkz7p.scala:27)\n\tat Problem.main(tmpe8dlkz7p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.isEmpty)\
    \ lst\n        else {\n            // Find the first minimum element\n       \
    \     var i : Long = -1\n            for (i<-lst.length-1; i <- i to 0 by -1)\
    \ {\n                if (lst.head > lst.tail(i)) break\n            }\n      \
    \      // Find minimum and maximum of remaining integers\n            var j =\
    \ i\n            var max1 = lst.tail(i)\n            var min1 = lst.head\n   \
    \         for (j <- i to 0 by -1) {\n                if (lst.head > lst.tail(j))\
    \ break\n            }\n            // Now swap min and max elements\n       \
    \     val t1 = lst.tail(j)\n            val t2 = lst.tail(i)\n            lst.tail(j)\
    \ = t2\n            lst.tail(i) = t1\n            // Sort the rest of the list\n\
    \            strangeSortList(lst.tail)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpde5bbvhv.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mfor\e[0m (i<-lst.length-\e[31m1\e[0m;\
    \ i <- i to \e[31m0\e[0m by -\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m          \
    \          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value foreach\
    \ is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpde5bbvhv.scala:24:32\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mvar\e[0m \e\
    [36mmax1\e[0m = lst.tail(i)\n\e[31m\e[31m   |\e[0m                           \
    \     ^\e[0m\n\e[31m   |\e[0m                                Found:    (i : Long)\n\
    \e[31m   |\e[0m                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpde5bbvhv.scala:27:40 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m (lst.head > lst.tail(j))\
    \ break\n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\
    \e[31m   |\e[0m                                        Found:    (j : Long)\n\e\
    [31m   |\e[0m                                        Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpde5bbvhv.scala:27:44 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m (lst.head > lst.tail(j))\
    \ break\n\e[31m\e[31m   |\e[0m                                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpde5bbvhv.scala:30:30\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e\
    [36mt1\e[0m = lst.tail(j)\n\e[31m\e[31m   |\e[0m                             \
    \ ^\e[0m\n\e[31m   |\e[0m                              Found:    (j : Long)\n\e\
    [31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-"
  stdout: ''
  timestamp: 1660009923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        // first\
    \ find the max and min values.\n        val max = lst.max\n        val min = lst.min\n\
    \        // find the remainder of lst by removing first and last value\n     \
    \   val remList = lst.tail.init ++ lst.init ++ lst.tail\n        // loop over\
    \ remList and swap the current values with min/max values\n        // until remList\
    \ is empty.\n        // finally return the remainder of lst as original list.\n\
    \        val strangeList = remList.map(x => (x swapWith min) swapWith max)\n \
    \       strangeList.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpja75o2p3.scala:23:46 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mstrangeList\e[0m = remList.map(\e\
    [36mx\e[0m => (x swapWith min) swapWith max)\n\e[31m\e[31m   |\e[0m          \
    \                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                        value swapWith is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009920
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        // find the\
    \ minimum value of the list first.\n        val minVal : Long = lst.min\n    \
    \    // find the maximum value of the list first.\n        val maxVal : Long =\
    \ lst.max\n        // the middle value of the list.\n        val midVal : Long\
    \ = lst.size / 2\n\n        // create an empty list to hold the values after they\
    \ have been sorted\n        // and insert the minimum into the list before it.\n\
    \        // the list before the first value will always be the minimum value,\n\
    \        // and it will get deleted later on.\n        // we will add the maximum\
    \ value into the list.\n        var newList : List[Long] = Nil\n\n        // traverse\
    \ the list, compare each value with the min value,\n        // if value is smaller\
    \ than the minimum, store it\n        // else, just insert it\n        lst.foreach{x\
    \ =>\n            if(x == minVal) {\n                newList ::= x\n         \
    \   }\n            else {\n                newList ::= x\n            }\n    \
    \    }\n\n        // find the maximum value in the list\n        lst.foreach{x\
    \ =>\n            if(x == maxVal) {\n                newList ::= x\n         \
    \   }\n            else {\n                newList ::= x\n            }\n    \
    \    }\n\n        // find the minimum value in the list again\n        lst.foreach{x\
    \ =>\n            if(x == minVal) {\n                newList ::= x\n         \
    \   }\n            else {\n                newList ::= x\n            }\n    \
    \    }\n\n        // return the newList to whoever called this method\n      \
    \  newList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7x5xf_cx.scala:65)\n\tat Problem.main(tmp7x5xf_cx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        // Sorting\
    \ algorithm:\n        // For each element in list:\n        //   1. Find the minimum\
    \ of remaining elements.\n        //   2. Swap this element with the minimum.\n\
    \        //   3. Repeat steps 1 and 2 until no elements remains.\n        // \
    \  4. Return list.\n\n        // Step 1: Find the minimum of remaining elements:\n\
    \        var minimum = lst.min\n        while (lst.length>0){\n            minimum\
    \ = lst.min\n            lst diff minimum lst\n        }\n\n        // Step 2:\
    \ Swap this element with the minimum:\n        lst swap minimum lst\n\n      \
    \  // Step 3: Repeat steps 1 and 2 until no elements remains:\n        while (lst.length\
    \ > 0){\n            lst diff minimum lst\n        }\n\n        return lst\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxipld2u3.scala:26:32 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            lst diff minimum lst\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E018] Syntax Error: /tmp/tmpxipld2u3.scala:30:28 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        lst swap minimum lst\n\e[31m\e[31m   |\e[0m \
    \                           ^\e[0m\n\e[31m   |\e[0m                          expression\
    \ expected but \e[31mend of statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E018] Syntax Error: /tmp/tmpxipld2u3.scala:34:32 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            lst diff minimum lst\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxipld2u3.scala:26:21 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            lst diff minimum lst\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Found:\
    \    (minimum : Long)\n\e[31m   |\e[0m                     Required: scala.collection.Seq[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxipld2u3.scala:30:12\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        lst swap minimum\
    \ lst\n\e[31m\e[31m   |\e[0m        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ swap is not a member of List[Long] - did you mean lst.map?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpxipld2u3.scala:34:21 --------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m            lst diff minimum lst\n\e[31m\e[31m   |\e[0m  \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Found:"
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val map =\
    \ new mutable.HashMap[Long, List[Long]]()\n        for(i <- 0 until lst.size)\
    \ {\n            if(!map.contains(lst(i)))\n                map.update(lst(i),\
    \ (i :: Nil))\n            else\n                map(lst(i)) += lst(i)\n     \
    \   }\n        var result: List[Long] = Nil\n        for((k, v) <- map.toSeq)\
    \ {\n            val subList = v.reverse\n            result += k.toLong :: subList\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprp3255p9.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mList\e[0m[\e[35mLong\e[0m]]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.isEmpty)\
    \ return lst\n        var min = lst(0)\n        var max = lst(0)\n        lst.foreach(i\
    \ => {\n            if (i < min) min = i\n            if (i > max) max = i\n \
    \       })\n        if (min > max) return lst\n        var listToSort = lst.filter(i\
    \ => !(i % 2))\n        listToSort.sortBy(i => listToSort.indexOf(i))\n      \
    \  strangeSortList(listToSort ++ lst.filter(i => !(i % 2))).reverse\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfzbtfy6j.scala:23:41 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mlistToSort\e[0m = lst.filter(\e\
    [36mi\e[0m => !(i % \e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                    \
    \                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m      value unary_! is not\
    \ a member of Long - did you mean Long.unary_+?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpfzbtfy6j.scala:25:54 ------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        strangeSortList(listToSort ++ lst.filter(\e[36mi\e[0m => !(i %\
    \ \e[31m2\e[0m))).reverse\n\e[31m\e[31m   |\e[0m                             \
    \                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m      value unary_! is\
    \ not a member of Long - did you mean Long.unary_+?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val rev :List[Long]\
    \ = lst.sortWith(_ < _)\n        val temp :List[Long] = rev.reverse\n        rev.reverse\n\
    \        temp\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcflvlwab.scala:21)\n\tat Problem.main(tmpcflvlwab.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if(lst.size\
    \ < 2) {\n            return lst\n        }\n\n        val minValue = lst(0)\n\
    \        val maxValue = lst(0)\n\n        val reversedList = lst.tail\n      \
    \  val remaining = reversedList.drop(1)\n\n        while(!remaining.isEmpty) {\n\
    \            val value = remaining.min\n            val remainingList = remaining.filter(x\
    \ => x != value)\n\n            if(maxValue < value) {\n                maxValue\
    \ = value\n            }\n\n            if(minValue > value) {\n             \
    \   minValue = value\n            }\n\n            if(!remainingList.isEmpty)\
    \ {\n                minValue = remainingList.min\n                maxValue =\
    \ remainingList.max\n            }\n\n            val newList = List(minValue,\
    \ reversedList.head, maxValue)\n            val newReversedList = newList.reverse\n\
    \            return strangeSortList(newList) ++ strangeSortList(newReversedList)\n\
    \        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp40nyakll.scala:30:25 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                maxValue = value\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp40nyakll.scala:34:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                minValue\
    \ = value\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Reassignment to val minValue\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp40nyakll.scala:38:25 -----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                minValue = remainingList.min\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val minValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp40nyakll.scala:39:25 -----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                maxValue = remainingList.max\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val l: MutableList[Long]\
    \ = new mutable.MutableList[Long]()\n        val mInv = 1.0 / lst(0)\n       \
    \ // Start with minimum of the list\n        l += lst(0) * (mInv.toLong)\n   \
    \     // Then, maximum of the remaining list\n        l += lst(lst.length-1) *\
    \ (mInv.toLong)\n        // Then minimum of remaining list\n        l += lst(lst.length-2)\
    \ * (mInv.toLong)\n        return l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpea8qm3va.scala:15:15 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m: \e[35mMutableList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.MutableList[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \       Not found: type MutableList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpea8qm3va.scala:15:39 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36ml\e[0m: \e[35mMutableList\e[0m[\e[35mLong\e[0m]\
    \ = \e[33mnew\e[0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                       ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        // Add all\
    \ elements in list to a new set (for O(1) access)\n        val set = lst.asInstanceOf[mutable.Set[Long]]\n\
    \        \n        // Now get min and max value from original list\n        //\
    \ Using min and max since they are already sorted\n        val min = lst.min\n\
    \        val max = lst.max\n        \n        // Initialize result List\n    \
    \    val res = new mutable.ListBuffer[Long]()\n        \n        // Loop through\
    \ set and add all odd numbers to result\n        for (i <- set) {\n          \
    \  if (i % 2 == 1) {\n                res += i\n            }\n        }\n   \
    \     \n        // Now add min and max to result\n        res ++= List(min, max)\n\
    \        \n        // Now sort result\n        res.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphxmnf7b6.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = lst.asInstanceOf[mutable.Set[\e\
    [35mLong\e[0m]]\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphxmnf7b6.scala:24:22\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mres\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var newList\
    \ = lst.filter(i => i != 0).toList\n        newList *= (2).toLong\n        newList\
    \ *= (2).toLong\n        newList *= (2).toLong\n        newList += lst.filter(i\
    \ => i != 0).min\n        newList += lst.filter(i => i != 0).max\n        newList\
    \ += lst.filter(i => i != 0).min\n        newList *= (2).toLong\n        newList\
    \ *= (2).toLong\n        newList *= (2).toLong\n        return newList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpij6iol3q.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        newList *= (\e[31m2\e[0m).toLong\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value *= is not a member\
    \ of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpij6iol3q.scala:17:16 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        newList *= (\e[31m2\e[0m).toLong\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value *= is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpij6iol3q.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        newList *= (\e[31m2\e\
    [0m).toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \ value *= is not a member of List[Long] - did you mean List[Long].!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpij6iol3q.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        newList += lst.filter(\e[36mi\e[0m => i != \e\
    [31m0\e[0m).min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \    value += is not a member of List[Long] - did you mean List[Long].!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpij6iol3q.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        newList += lst.filter(\e[36mi\e[0m => i != \e\
    [31m0\e[0m).max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \    value += is not a member of List[Long] - did you mean List[Long].!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpij6iol3q.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        newList += lst.filter(\e[36mi\e[0m => i != \e\
    [31m0\e[0m).min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \    value += is not a member of List[Long] - did you mean List[Long].!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpij6iol3q.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        newList *= (\e[31m2\e[0m).toLong\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value *= is not a member\
    \ of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008] Not "
  stdout: ''
  timestamp: 1660009931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = lst.foldLeft((List[Long](), 0L))((acc, el) =>\n            (if (el < acc._1)\
    \ (el._1, el._2) else (acc._1, el._2))\n        )\n        result._1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpgdx61em5.scala:16:20 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            (\e[33mif\e[0m (el < acc._1) (el._1, el._2)\
    \ \e[33melse\e[0m (acc._1, el._2))\n\e[31m\e[31m   |\e[0m                 ^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m<\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long):\
    \ Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\
    \e[31m   |\e[0m (x: Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m\
    \   |\e[0mmatch arguments ((acc._1 : => List[Long]))\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpgdx61em5.scala:16:34 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            (\e[33mif\e[0m (el < acc._1) (el._1, el._2) \e[33melse\e\
    [0m (acc._1, el._2))\n\e[31m\e[31m   |\e[0m                               ^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value _1 is not a member of\
    \ Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgdx61em5.scala:16:41 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            (\e[33mif\e[0m (el < acc._1) (el._1, el._2)\
    \ \e[33melse\e[0m (acc._1, el._2))\n\e[31m\e[31m   |\e[0m                    \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \       value _2 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgdx61em5.scala:16:62 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            (\e[33mif\e[0m (el < acc._1) (el._1, el._2) \e[33melse\e[0m (acc._1,\
    \ el._2))\n\e[31m\e[31m   |\e[0m                                             \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \     value _2 is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660009930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val list\
    \ = lst\n        var reversed = list.reverse\n        val minValue = reversed.min\n\
    \        var maxValue = reversed.max\n        var minValue = reversed.min\n  \
    \      var maxValue = reversed.max\n        val newList = List[Long]()\n     \
    \   // loop through list and compare each element to previous and add to newList\n\
    \        for (i<-1 to list.size) {\n            if ((list(i) < maxValue)) {\n\
    \                // add element to beginning of newList\n                newList\
    \ += list(i)\n                // set maxValue to smallest element in list\n  \
    \              maxValue = list(i)\n            }\n            else if ((list(i)\
    \ > minValue)) {\n                // add element to end of newList\n         \
    \       newList += list(i)\n                // set minValue to greatest element\
    \ in list\n                minValue = list(i)\n            }\n        }\n    \
    \    // add all elements to end of newList\n        newList += minValue\n    \
    \    newList += maxValue\n        // return new list\n        return newList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpksxlldti.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mminValue\e[0m = reversed.min\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpksxlldti.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mmaxValue\e[0m = reversed.max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValue is already defined as \e[33mvariable\e[0m \e[35mmaxValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpksxlldti.scala:26:24 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m                newList += list(i)\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       value += is not a member of\
    \ List[Long] - did you mean newList.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpksxlldti.scala:32:24 ------------------------\e[0m\e[0m\n\e[31m32 |\e\
    [0m                newList += list(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m       value += is not a member of List[Long] - did you mean\
    \ newList.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpksxlldti.scala:34:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                minValue\
    \ = list(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Reassignment to val minValue\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpksxlldti.scala:38:16 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        newList += minValue\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       value += is not a member of List[Long]\
    \ - did you mean newList.!=?\n\e[31m\e[31m-- [E008] Not Fo"
  stdout: ''
  timestamp: 1660009930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val listSize\
    \ = lst.size\n        val currentMin = lst.min\n        val currentMax = lst.max\n\
    \        var newList = lst.sortWith((x,y)=> x > y).reverse\n        var index\
    \ = 0\n        while (index < listSize) {\n            val nextIndex = math.min(listSize\
    \ - index + 1, newList.size)\n            newList = newList._2.zip(newList._1).take(nextIndex).map(x\
    \ => x._2.toLong :: x._1.toLong).reverse\n            index += nextIndex\n   \
    \     }\n        if (newList.contains(currentMin.toLong) && newList.contains(currentMax.toLong))\
    \ {\n            newList = newList.drop(1).take(1).reverse\n        }\n      \
    \  newList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7a21rb8b.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            newList = newList._2.zip(newList._1).take(nextIndex).map(\e\
    [36mx\e[0m => x._2.toLong :: x._1.toLong).reverse\n\e[31m\e[31m   |\e[0m     \
    \                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value\
    \ _2 is not a member of List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1660009930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        // TODO:\
    \ implement it\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbvh4n324.scala:14:57\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mstrangeSortList\e\
    [0m(\e[36mlst\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mList\e[0m[\e[35mLong\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \           ^\e[0m\n\e[31m   |\e[0m                                          \
    \          Found:    Unit\n\e[31m   |\e[0m                                   \
    \                 Required: List[Long]\n\e[31m15 |\e[0m        \e[34m// TODO:\
    \ implement it\e[0m\n\e[31m16 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.nonEmpty)\n\
    \        {\n            val list = mutable.Buffer.empty[Long]()\n            val\
    \ min  = lst.min\n            val max  = lst.max\n\n            val current =\
    \ min\n            list += current\n            while (current < max)\n      \
    \      {\n                val next = current + 1\n                list += next\n\
    \                current = next\n            }\n            list += max\n    \
    \        list\n        }\n        else\n            List()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgf4job2g.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mlist\e[0m = mutable.Buffer.empty[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpgf4job2g.scala:27:24 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                current = next\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val current\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        // Make list\
    \ of min and max values\n        var max: Long = lst.head\n        var min: Long\
    \ = lst.head\n        var max = lst.head\n        var min = lst.head\n       \
    \ lst.foreach(x => if(x>max) max = x)\n        lst.foreach(x => if(x<min) min\
    \ = x)\n        // Sort by min\n        var newlst = new ListBuffer[Long]()\n\
    \        lst.foreach(x => if(x == min) newlst.append(max))\n        newlst.append(min)\n\
    \        newlst.append(max)\n        // Sort by max\n        newlst.sort\n   \
    \     newlst.reverse\n        newlst\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp370ghe3u.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mmax\e[0m = lst.head\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmax is already\
    \ defined as \e[33mvariable\e[0m \e[35mmax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp370ghe3u.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mmin\e[0m = lst.head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmin is already defined as \e[33mvariable\e[0m \e[35mmin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp370ghe3u.scala:28:15 ------------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m        newlst.sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sort is not a member of scala.collection.mutable.ListBuffer[Long]\
    \ - did you mean scala.collection.mutable.ListBuffer[Long].sortBy?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp370ghe3u.scala:30:8 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        newlst\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (newlst : scala.collection.mutable.ListBuffer[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.size\
    \ < 2)\n            return lst\n        else {\n            val firstValue = lst.head\n\
    \            val rest = lst.tail\n            val minRest = min(rest)\n      \
    \      val maxRest = max(rest)\n            val minRestIndex = rest.indexOf(minRest)\n\
    \            val maxRestIndex = rest.indexOf(maxRest)\n            val minRestValue\
    \ = lst(minRestIndex)\n            val maxRestValue = lst(maxRestIndex)\n\n  \
    \          val firstRestList: List[Long] = strangeSortList(List(firstValue, maxRest))\n\
    \            val secondRestList: List[Long] = strangeSortList(List(firstValue,\
    \ minRest))\n            val combinedList = firstRestList ++ secondRestList ++\
    \ List(maxRestValue, minRestValue)\n            combinedList\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpvbws_2vi.scala:20:26 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mminRest\e[0m = min(rest)\n\
    \e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((rest : List[Long]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpvbws_2vi.scala:21:26\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36mmaxRest\e[0m = max(rest)\n\e[31m\e[31m   |\e[0m                    \
    \      ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((rest : List[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660009928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.size\
    \ > 0) {\n            var max = lst.head\n            var min: Long = lst.last\n\
    \            var rest = lst.tail\n            val sortedList = lst.sortWith(_\
    \ < _)\n            if (min == max) {\n                sortedList.reverse\n  \
    \          } else {\n                for (i <- 0 until rest.length - 1)\n    \
    \                if (rest(i) > rest(i + 1)) \n                        rest(i)\
    \ = rest(i + 1)\n                    else if (rest(i) < rest(i + 1))\n       \
    \                 rest(i) = rest(i)\n                val sortedReverseList = sortedList.reverse\n\
    \                val list = sortedReverseList ++ List(min, max)\n            \
    \    strangeSortList(list)\n            }\n        }\n        else\n         \
    \   List(1L)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphyywlsgj.scala:25:24 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                        rest(i) = rest(i + \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ update is not a member of List[Long] - did you mean List[Long].updated?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphyywlsgj.scala:27:24 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                        rest(i) = rest(i)\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0mvalue update is not\
    \ a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val len =\
    \ lst.size\n        if(len > 1){\n            var smallest = lst.head\n      \
    \      var secondSmallest = lst.last\n            var listWithoutSmallest = lst.filterNot(smallest\
    \ => lst.contains(secondSmallest))\n            var listWithoutSecondSmallest\
    \ = lst.filterNot(secondSmallest => lst.contains(smallest))\n            var listWithoutSmallestAndSecondSmallest\
    \ = lst.filterNot(smallest => lst.contains(secondSmallest) || lst.contains(smallest))\n\
    \            var newList = List[Long]()\n            newList ++= listWithoutSmallest\n\
    \            newList ++= listWithoutSecondSmallest\n            newList ++= listWithoutSmallestAndSecondSmallest\n\
    \            newList ++= listWithoutSmallest\n            newList ++= listWithoutSmallestAndSecondSmallest\n\
    \            newList ++= listWithoutSecondSmallest\n            newList ++= listWithoutSmallestAndSecondSmallest\n\
    \            newList ++= listWithoutSmallest\n            newList ++= listWithoutSmallestAndSecondSmallest\n\
    \            newList ++= listWithoutSmallest\n            newList ++= listWithoutSmallestAndSecondSmallest\n\
    \            newList ++= listWithoutSecondSmallest\n            newList ++= listWithoutSmallest\n\
    \            newList ++= listWithoutSmallestAndSecondSmallest\n            newList\
    \ ++= listWithoutSmallest\n            newList ++= listWithoutSmallestAndSecondSmallest\n\
    \            newList ++= listWithoutSecondSmallest\n            newList ++= listWithoutSmallest\n\
    \            newList ++= listWithoutSmallestAndSecondSmallest\n            newList\
    \ ++= listWithoutSmallest\n            newList ++= listWithoutSmallestAndSecondSmallest\n\
    \            newList ++= listWithoutSmallest\n            newList ++= listWithoutSmallestAndSecondSmallest\n\
    \            newList ++= listWithoutSecondSmallest\n            newList ++= listWithoutSmallest\n\
    \            newList ++= listWithoutSmallestAndSecondSmallest\n            newList\
    \ ++= listWithoutSmallest\n            newList ++= listWithoutSmallestAndSecondSmallest\n\
    \            newList ++= listWithoutSmallest\n            newList ++= listWithoutSmallestAndSecondSmallest\n\
    \            newList ++= listWithoutSmallest\n            newList ++= listWithoutSmallestAndSecondSmallest\n\
    \            new\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7ef9kbz0.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp7ef9kbz0.scala:70:0 ----------------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ef9kbz0.scala:69:1 ---------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp7ef9kbz0.scala:57:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m57 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660009934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val strangeList\
    \ = mutable.LinkedListBuffer[Long]()\n        var curr : Long = 0l\n        var\
    \ max = 0l\n\n        for(i <- lst.iterator){\n            max = max < i ? max\
    \ : i\n\n            if(max != i){\n                strangeList += i\n       \
    \         curr = max\n            }\n        }\n\n        for(i <- strangeList.iterator){\n\
    \            strangeList -= i\n        }\n        strangeList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9d6evocq.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstrangeList\e[0m = mutable.LinkedListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9d6evocq.scala:20:34 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            max = max < i ? max : \e[35mi\e[0m\n\e[31m\e\
    [31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m       \
    \                           Not found: type i\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9d6evocq.scala:20:26 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            max = max < i ? max : \e[35mi\e[0m\n\e[31m\e\
    [31m   |\e[0m                        ^^^\e[0m\n\e[31m   |\e[0m               \
    \         value ? is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660009932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val min =\
    \ lst.min\n        val max = lst.max\n        var tmp : List[Long] = List()\n\
    \        for (i <- 0 until lst.size) {\n            var j = i\n            while\
    \ (j > 0 && lst.at(j - 1) > lst.at(j)) {\n                tmp = lst.take(j)\n\
    \                lst.clear()\n                lst.addAll(tmp)\n              \
    \  j -= 1\n            }\n            lst.add(i)\n        }\n        lst.clear()\n\
    \        lst.add(min)\n        lst.add(max)\n        lst.sort\n        lst.filter(_\
    \ > min)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfkmtpdui.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mwhile\e[0m (j > \e[31m0\e[0m && lst.at(j\
    \ - \e[31m1\e[0m) > lst.at(j)) {\n\e[31m\e[31m   |\e[0m                      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m                            value at is not\
    \ a member of List[Long]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfkmtpdui.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                lst.clear()\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue clear\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfkmtpdui.scala:23:20\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                lst.addAll(tmp)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue addAll\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfkmtpdui.scala:26:16\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            lst.add(i)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue add is not a\
    \ member of List[Long], but could be made available "
  stdout: ''
  timestamp: 1660009938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        // If list\
    \ is empty, return an empty list\n        if(lst.size == 0) {\n            return\
    \ lst\n        }\n        // Store first element\n        var firstElem = lst(0)\n\
    \        // Remove first element\n        lst.head = lst.tail\n        // Return\
    \ list with first element in last position\n        return lst ++ List(firstElem)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa1qcp8eq.scala:22:23\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        lst.head = lst.tail\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \            Found:    List[Long @uncheckedVariance]\n\e[31m   |\e[0m        \
    \           Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val max =\
    \ lst.max\n        val min = lst.min\n        val maxIndex = lst.indexWhere(_\
    \ == max)\n        val minIndex = lst.indexWhere(_ == min)\n        val toRet\
    \ = lst\n        toRet.sortWith {\n            case (list, _) if list contains\
    \ max => -1\n            case (list, _) if list contains min => 1\n          \
    \  case (list, index) if index > maxIndex => (-1 * list.length)\n            case\
    \ (list, index) if index < minIndex => (-1 * list.length)\n            case (list,\
    \ _) => list.length\n        }\n        toRet\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpna6a4nxs.scala:21:35 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m (list, _) \e[33mif\e[0m list\
    \ contains max => -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              value\
    \ contains is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpna6a4nxs.scala:21:51 --------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \            \e[33mcase\e[0m (list, _) \e[33mif\e[0m list contains max => -\e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \       ^^\e[0m\n\e[31m   |\e[0m                                             \
    \      Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                      \
    \                             Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpna6a4nxs.scala:22:35 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m (list, _) \e[33mif\e[0m list\
    \ contains min => \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              value\
    \ contains is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpna6a4nxs.scala:22:51 --------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \            \e[33mcase\e[0m (list, _) \e[33mif\e[0m list contains min => \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   ^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m                                   \
    \                Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpna6a4nxs.scala:23:65 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            \e[33mcase\e[0m (list, index) \e[33mif\e[0m index > maxIndex =>\
    \ (-\e[31m1\e[0m * list.length)\n\e[31m\e[31m   |\e[0m                       \
    \                                     ^^^^^^^^^^^\e[0"
  stdout: ''
  timestamp: 1660009939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val list\
    \ = lst match {\n            case Nil => Nil\n            case h :: t => (h ::\
    \ t.reverse).sorted\n        }\n        list.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph16a4vnp.scala:22)\n\tat Problem.main(tmph16a4vnp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009943
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val newList\
    \ : List[Long] = new mutable.LinkedList\n        var currentMax = -1\n       \
    \ var currentMin = 0\n        var newCurrentMin = 0\n\n        lst.foreach{\n\
    \            if (_ < currentMax) {\n                currentMin = newCurrentMin\n\
    \                currentMax = _\n                newCurrentMin = currentMax\n\
    \            } else {\n                newList.add(_)\n            }\n       \
    \ }\n        newList.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5gu6quzt.scala:15:39 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m : \e[35mList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.LinkedList\n\e[31m\e[31m   |\e[0m\
    \                                       ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmp5gu6quzt.scala:21:16 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (_ < currentMax) {\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => _$1 < currentMax.\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmp5gu6quzt.scala:23:29 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                currentMax = _\n\e[31m\e[31m   |\e[0m\
    \                             ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => currentMax = _$2.\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5gu6quzt.scala:24:30 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                newCurrentMin = currentMax\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Found:    Unit\n\e[31m   |\e[0m                Required: Long\
    \ => Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5gu6quzt.scala:26:24\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                newList.add(_)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue add\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversion"
  stdout: ''
  timestamp: 1660009942
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var minI\
    \ = 0\n        var maxI = lst.size - 1\n        while(minI < maxI) {\n       \
    \     minI += lst.take(minI).max\n            maxI -= lst.take(minI).max\n   \
    \     }\n        return lst.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0di1cncj.scala:18:17 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            minI += lst.take(minI).max\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0di1cncj.scala:19:17 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            maxI -= lst.take(minI).max\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value -= is not a member of Int - did you mean\
    \ Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val ordered\
    \ = lst.sort\n        val (current, max, min) = ordered span (_ > 0)\n       \
    \ (min :: (max :: (min :: (max :: ordered) span (_ > 0))) reverse) :: Nil\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphgrj_qst.scala:17:71 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        (min :: (max :: (min :: (max :: ordered) span\
    \ (_ > \e[31m0\e[0m))) reverse) :: Nil\n\e[31m\e[31m   |\e[0m                \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m')'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphgrj_qst.scala:15:26\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mordered\e[0m = lst.sort\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     value sort is not a member of List[Long] - did you mean\
    \ lst.sortBy?\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphgrj_qst.scala:16:13\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ (current, max, min) = ordered span (_ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \             ^\e[0m\n\e[31m   |\e[0m             Recursive \e[33mvalue\e[0m \e\
    [35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphgrj_qst.scala:16:22\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ (current, max, min) = ordered span (_ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                      ^\e[0m\n\e[31m   |\e[0m                      Recursive\
    \ \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmphgrj_qst.scala:16:27 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m (current, max, min) = ordered\
    \ span (_ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           Recursive \e[33mvalue\e[0m \e[35m$1$\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val a = mutable.ListBuffer.empty[Long]\n\
    \        val b = mutable.ListBuffer.empty[Long]\n        val c = mutable.ListBuffer.empty[Long]\n\
    \        for(i <- lst) {\n            a += i\n            b += i\n           \
    \ c += i\n        }\n        val maxValue = a.reverse.max\n        val minValue\
    \ = b.reverse.min\n        val sortedList = c.reverse.sortWith((x,y) => x.toLong\
    \ <=> y.toLong)\n        (sortedList ++ a ++ b ++ c ++ sortedList).map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1idgjz80.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1idgjz80.scala:16:16 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1idgjz80.scala:17:16 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        lst.sortWith\
    \ {\n            case (a , Long.MinValue ) => (a , Long.MinValue)\n          \
    \  case (b , Long.MaxValue ) => (b , Long.MaxValue)\n            case (a , Long(min\
    \ , _)) => (a , min)\n            case (b , Long(max , _)) => (b , max)\n    \
    \        case (a , Long(min1 , _)) => (a , min1)\n            case (b , Long(max1\
    \ , _)) => (b , max1)\n            case (a , Long(min2 , _)) => (a , min2)\n \
    \           case (b , Long(max2 , _)) => (b , max2)\n            case (a , Long(min3\
    \ , _)) => (a , min3)\n            case (b , Long(max3 , _)) => (b , max3)\n \
    \           case (a , Long(min4 , _)) => (a , min4)\n            case (b , Long(max4\
    \ , _)) => (b , max4)\n            case (a , Long(min5 , _)) => (a , min5)\n \
    \           case (b , Long(max5 , _)) => (b , max5)\n            case (a , Long(min6\
    \ , _)) => (a , min6)\n            case (b , Long(max6 , _)) => (b , max6)\n \
    \           case (a , Long(min7 , _)) => (a , min7)\n            case (b , Long(max7\
    \ , _)) => (b , max7)\n            case (a , Long(min8 , _)) => (a , min8)\n \
    \           case (b , Long(max8 , _)) => (b , max8)\n            case (a , Long(min9\
    \ , _)) => (a , min9)\n            case (b , Long(max9 , _)) => (b , max9)\n \
    \           case (a , Long(min10 , _)) => (a , min10)\n            case (b , Long(max10\
    \ , _)) => (b , max10)\n            case (a , Long(min11 , _)) => (a , min11)\n\
    \            case (b , Long(max11 , _)) => (b , max11)\n            case (a ,\
    \ Long(min12 , _)) => (a , min12)\n            case (b , Long(max12 , _)) => (b\
    \ , max12)\n            case (a , Long(min13 , _)) => (a , min13)\n          \
    \  case (b , Long(max13 , _)) => (b , max13)\n            case (a , Long(min14\
    \ , _)) => (a , min14)\n            case (b , Long(max14 , _)) => (b , max14)\n\
    \            case (a , Long(min15 , _)) => (\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpco1g1pv8.scala:48:43 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            \e[33mcase\e[0m (a , Long(min15 , _)) =>\
    \ (\n\e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpco1g1pv8.scala:63:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpco1g1pv8.scala:16:41 --------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            \e[33mcase\e[0m (a , Long.MinValue ) => (a , Long.MinValue)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         Found:    (Long,\
    \ Long)\n\e[31m   |\e[0m                                         Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpco1g1pv8.scala:17:41\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m (b\
    \ , Long.MaxValue ) => (b , Long.MaxValue)\n\e[31m\e[31m   |\e[0m            \
    \                             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                   Found:    (Long, Long)\n\e[31m   |\e[0m  \
    \                                       Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E127] Syntax Error: /tmp/tmpco1g1pv8.scala:18:22 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m (a , Long(min , _)) => (a\
    \ , min)\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0mLong\
    \ cannot be used as an extractor in a pattern because it lacks an unapply or unapplySeq\
    \ method\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatc"
  stdout: ''
  timestamp: 1660009947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result:\
    \ List[Long] = new ListBuffer[Long]()\n        var temp: Long = 0\n        val\
    \ max = lst.head\n        for(x <- lst) {\n            if (temp < x) temp = x\n\
    \        }\n        // Swap the first and last element\n        if (max > temp)\
    \ result ++= lst.tail\n        if (max < temp) result ++= lst.reverse\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpywyh5hqw.scala:15:33\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m                     Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpywyh5hqw.scala:22:31 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m (max > temp) result ++= lst.tail\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \       value ++= is not a member of List[Long] - did you mean result.++?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpywyh5hqw.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m (max < temp) result ++= lst.reverse\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \       value ++= is not a member of List[Long] - did you mean result.++?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sorted\
    \ = lst.sort\n        var minIndex = lst.indexOf(min)\n        val minIndex =\
    \ lst.indexOf(min(sorted))\n        var maxIndex = lst.indexOf(max)\n        val\
    \ maxIndex = lst.indexOf(max(sorted))\n\n        // If list is empty, return empty\
    \ list\n        if (lst.isEmpty) return lst\n\n        // If list contains all\
    \ integers, return list\n        if (lst.size == sorted.size) return lst\n\n \
    \       // If there are two same minimum integers, swap them\n        if (minIndex\
    \ != maxIndex && sorted.contains(min(sorted))) {\n            val tmp = min(sorted)\n\
    \            min(sorted) = max(sorted)\n            max(sorted) = tmp\n      \
    \  }\n\n        // If the maximum number of integer is smaller than the minimum\
    \ integer\n        if (maxIndex != minIndex && sorted.contains(max(sorted))) {\n\
    \            val tmp = max(sorted)\n            max(sorted) = min(sorted)\n  \
    \          min(sorted) = tmp\n        }\n\n        // If the minimum integer is\
    \ smaller than the maximum integer\n        if (minIndex != maxIndex && sorted.contains(min(sorted)))\
    \ {\n            val tmp = min(sorted)\n            min(sorted) = max(sorted)\n\
    \            max(sorted) = tmp\n        }\n\n        // If both minimum and maximum\
    \ integer are equal, sort them\n        if (maxIndex != minIndex && sorted.contains(max(sorted)))\
    \ {\n            val tmp = max(sorted)\n            max(sorted) = min(sorted)\n\
    \            min(sorted) = tmp\n        }\n\n        // If only one integer is\
    \ there, sort the list with that integer\n        if (maxIndex == minIndex) {\n\
    \            val tmp = sorted(maxIndex)\n            sorted(maxIndex) = sorted(minIndex)\n\
    \            sorted(minIndex) = tmp\n        }\n\n        // Sort the list with\
    \ minimum integer first\n        sorted(minIndex)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0yyqwyft.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexOf(min(sorted))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mminIndex is already defined as \e[33mvariable\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0yyqwyft.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexOf(max(sorted))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxIndex is already defined as \e[33mvariable\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp0yyqwyft.scala:15:25 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36msorted\e[0m = lst.sort\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m     value sort is\
    \ not a member of List[Long] - did you mean lst.sortBy?\n\e[31m\e[31m-- [E134]\
    \ Type Error: /tmp/tmp0yyqwyft.scala:30:12 -----------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m            min(sorted) = max(sorted)\n\e[31m\e[31m   |\e\
    [0m            ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch expected type ?{ update:\
    \ ? }\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0yyqwyft.scala:31:12 -----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            max(sorted) = tmp\n\e[31m\e[31m   |\e[0m\
    \            ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with\
    \ types\n\e[31m   |\e[0m (x"
  stdout: ''
  timestamp: 1660009946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        lst.foldLeft(List[Long]())((acc:\
    \ List[Long], cur: List[Long]) => {\n            var tmp = cur\n            while\
    \ (acc.lastOption.isEmpty && tmp.nonEmpty) {\n                acc = acc.reverse\
    \ :+ tmp.last\n                tmp = tmp.dropRight(1)\n            }\n       \
    \     acc = acc.reverse :+ tmp.last\n            cur\n        })\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp101k73js.scala:18:20 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                acc = acc.reverse :+ tmp.last\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val acc\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp101k73js.scala:21:16 -----------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            acc = acc.reverse :+ tmp.last\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      Reassignment to val acc\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if(lst.isEmpty)\
    \ lst\n        else {\n            // We start with the minimum number, and we\
    \ iterate over the list until we find the maximum number\n            // we then\
    \ return the list reversed\n            val minVal = lst.head\n            val\
    \ maxVal = lst.head\n            var i = 1 // i is incremented only when we find\
    \ a maximum\n            while(i < lst.size) {\n                if(lst(i) > maxVal)\
    \ {\n                    maxVal = lst(i)\n                    i = i + 1\n    \
    \            } else if(lst(i) < minVal) {\n                    minVal = lst(i)\n\
    \                    i = i + 1\n                }\n            }\n           \
    \ // Here we are at the end, we need to reverse the list so that we can append\
    \ the minimum at the end\n            val list = List[Long]()\n            for(i<-minVal.toLong\
    \ until maxVal.toLong)\n                list += i\n            list += minVal.toLong\n\
    \            list.reverse\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpal7bebda.scala:24:27 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    maxVal = lst(i)\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \   Reassignment to val maxVal\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpal7bebda.scala:27:27 -----------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                    minVal = lst(i)\n\e[31m\e[31m   |\e[0m           \
    \         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment\
    \ to val minVal\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpal7bebda.scala:34:21\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                list += i\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m          value\
    \ += is not a member of List[Long] - did you mean list.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpal7bebda.scala:35:17 ------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m            list += minVal.toLong\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m          value += is not a member of\
    \ List[Long] - did you mean list.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        def isEven(x\
    \ : Long) : Boolean = {\n            if(x % 2 == 0) true\n            else if(x\
    \ % 2 == 1) false\n            else throw NumberFormatException(\"Not even\")\n\
    \        }\n        def getEven(lst : List[Long]) : List[Long] = {\n         \
    \   var ls = lst\n            while(!ls.isEmpty) {\n                val x = ls.head\n\
    \                ls = ls.tail\n                if(isEven(x)) ls = ls.head :: ls.tail\n\
    \            }\n            return ls\n        }\n        def getOdd(lst : List[Long])\
    \ : List[Long] = {\n            var ls = lst\n            while(!ls.isEmpty) {\n\
    \                val x = ls.head\n                ls = ls.tail\n             \
    \   if(!isEven(x)) ls = ls.head :: ls.tail\n            }\n            return\
    \ ls\n        }\n        val oddList = lst.sortBy(isEven)\n        val evenList\
    \ = getEven(oddList)\n        val evenListOdd = getOdd(evenList)\n        return\
    \ oddList ++ evenListOdd ++ evenList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.getEven$1(tmp6l4unbtd.scala:25)\n\
    \tat Problem$.strangeSortList(tmp6l4unbtd.scala:39)\n\tat Problem$.main(tmp6l4unbtd.scala:44)\n\
    \tat Problem.main(tmp6l4unbtd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst1\
    \ = lst.takeWhile(_ <= lst(0))\n        val lst2 = lst.dropWhile(_ <= lst(1))\n\
    \        lst1.zip(lst2).map { case (x,y) => y.toLong :: x}.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpju7jzxta.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst1.zip(lst2).map { \e[33mcase\e[0m (x,y) =>\
    \ y.toLong :: x}.toList\n\e[31m\e[31m   |\e[0m                               \
    \                     ^^^^\e[0m\n\e[31m   |\e[0m                             \
    \           value :: is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        // O(n^2)\n\
    \        var sortedList = lst\n        val l = sortedList.length\n        for\
    \ (i=l-1 to 1 by -1) {\n            val minInd = sortedList.indexWhere(_ < sortedList(i))\n\
    \            val maxInd = sortedList.indexWhere(_ > sortedList(i))\n         \
    \   val minVal = sortedList(minInd)\n            val maxVal = sortedList(maxInd)\n\
    \            val tmpList = sortedList.toList\n            val tmpList2 = tmpList.filter(_\
    \ != minVal)\n            val tmpList3 = tmpList.filter(_ != maxVal)\n       \
    \     val tmpList4 = tmpList2.filter(_ != minVal)\n            val tmpList5 =\
    \ tmpList2.filter(_ != maxVal)\n            val tmpList6 = tmpList3.filter(_ !=\
    \ minVal)\n            val tmpList7 = tmpList3.filter(_ != maxVal)\n         \
    \   val tmpList8 = tmpList4.filter(_ != minVal)\n            val tmpList9 = tmpList4.filter(_\
    \ != maxVal)\n            val tmpList10 = tmpList5.filter(_ != minVal)\n     \
    \       val tmpList11 = tmpList5.filter(_ != maxVal)\n            val tmpList12\
    \ = tmpList6.filter(_ != minVal)\n            val tmpList13 = tmpList6.filter(_\
    \ != maxVal)\n            val tmpList14 = tmpList7.filter(_ != minVal)\n     \
    \       val tmpList15 = tmpList7.filter(_ != maxVal)\n            val tmpList16\
    \ = tmpList8.filter(_ != minVal)\n            val tmpList17 = tmpList8.filter(_\
    \ != maxVal)\n            val tmpList18 = tmpList9.filter(_ != minVal)\n     \
    \       val tmpList19 = tmpList9.filter(_ != maxVal)\n            val tmpList20\
    \ = tmpList10.filter(_ != minVal)\n            val tmpList21 = tmpList10.filter(_\
    \ != maxVal)\n            val tmpList22 = tmpList11.filter(_ != minVal)\n    \
    \        val tmpList23 = tmpList11.filter(_ != maxVal)\n            val tmpList24\
    \ = tmpList12.filter(_ != minVal)\n            val tmpList25 = tmpList12.filter(_\
    \ != maxVal)\n            val tmpList26 = tmpList13.filter(_ != minVal)\n    \
    \        val tmpList27 = tmpList13.filter(_ != maxVal)\n            val tmpList28\
    \ = tmpList14.filter(_ != minVal)\n            val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwx4publr.scala:18:14 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i=l-\e[31m1\e[0m to \e[31m1\e\
    [0m by -\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e\
    [0m              ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpwx4publr.scala:18:31 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mfor\e[0m (i=l-\e[31m1\e[0m to \e[31m1\e[0m by -\e[31m1\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e\
    [0m                               '<-' expected, but '{' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpwx4publr.scala:66:0 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwx4publr.scala:52:5\
    \ -------------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e\
    [0m     ^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member of Null, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660009948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var result\
    \ = ListBuffer[Long]()\n        var currentMax = lst.head\n        var currentMin\
    \ = lst.last\n\n        for ( i <- 0 until lst.size ) {\n            currentMax\
    \ = lst.updated(i, lst.updated(i, lst.head))\n            currentMin = lst.updated(i,\
    \ lst.updated(i, lst.last))\n            result = result :+ lst.updated(i, lst.head)\n\
    \        }\n        result.takeWhile( x => x < currentMax ).toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu5hn90dx.scala:20:36\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            currentMax = lst.updated(i,\
    \ lst.updated(i, lst.head))\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    List[Matchable]\n\e[31m\
    \   |\e[0m                         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpu5hn90dx.scala:21:36 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            currentMin = lst.updated(i, lst.updated(i,\
    \ lst.last))\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    List[Matchable]\n\e[31m\
    \   |\e[0m                         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpu5hn90dx.scala:22:42 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            result = result :+ lst.updated(i, lst.head)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    \e[1m\e[31mList\e\
    [0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                   \
    \            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009948
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var newList\
    \ = lst.take(3).map(_.toLong)\n        for (i <- 3 to (lst.size - 2)) {\n    \
    \        newList = (lst.take(i).map(_ - 1).take(i).map(_.toLong) ++ lst.take(i\
    \ + 1).map(_ + 1).take(i).map(_.toLong) ++ newList)\n        }\n        newList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo51pk9rz.scala:22)\n\tat Problem.main(tmpo51pk9rz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        require(lst.nonEmpty)\n\
    \        require(lst.head.isInstanceOf[Long])\n        val tmpList = mutable.ListBuffer.empty[Long]\n\
    \        tmpList += lst.head\n        val remainingList = lst.tail\n        for\
    \ ((i, item) <- remainingList.zipWithIndex) yield {\n            val newItem =\
    \ remainingList.headOption.map { i => item + i }.getOrElse(item)\n           \
    \ val remaining = remainingList.drop(1)\n            tmpList += newItem\n    \
    \        strangeSortList(remaining)\n        }\n        tmpList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxtv_89hd.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mtmpList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortBy(_.toInt)\n        val temp = mutableListBuffer[Long]()\n      \
    \  var i = 0\n        val maxSize = lst.max - 1\n        while (i < maxSize) {\n\
    \            temp += lst.apply(i)\n            i += 1\n        }\n        sortedList\
    \ ++ temp.sortBy(_.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6vngl4_v.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mtemp\e[0m = mutableListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutableListBuffer\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.size\
    \ == 0) return lst\n        var i = lst.last\n        var rest = lst.init drop\
    \ 1\n\n        while (rest.nonEmpty && rest.head < i) {\n            val curr\
    \ = rest.head\n            rest -= 1\n            i -= 1\n            lst = lst\
    \ :+ curr\n        }\n\n        lst\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvulujb6q.scala:21:17 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            rest -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m    value -= is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpvulujb6q.scala:23:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            lst = lst\
    \ :+ curr\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val lst\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        // Create\
    \ an array of sorted elements from input list\n        // In case input list is\
    \ empty, return empty list\n        var sortedArray = lst.sorted() // Sort input\
    \ list\n        // If there are no elements, return empty list\n        if (sortedArray.isEmpty)\
    \ sortedArray = Nil\n        // Else, sort using custom sorting function \n  \
    \      // where minimum of previous element is used as first element\n       \
    \ // and maximum of the remaining elements is used as last element\n        val\
    \ firstElement = sortedArray(0)\n        val lastElement = sortedArray.length\
    \ - 1\n        sortedArray.grouped(firstElement.toInt + lastElement.toInt).map(\n\
    \            // Split sorted array into groups according to first and last element\n\
    \            // This means all elements which are in range of firstElement and\
    \ lastElement\n            // are grouped together, but not in sorted order\n\
    \            x => (x._1, x._2)\n        )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpn97totqu.scala:17:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36msortedArray\e[0m = lst.sorted()\
    \ \e[34m// Sort input list\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter ord of \e\
    [33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m: (\e[33mimplicit \e[0mord: Ordering[B]): List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1660009947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.isEmpty)\
    \ lst\n        else (0 to lst.size - 1).map(i => (lst.head + i * lst.size).toLong).sortWith(compare)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwwg0sph7.scala:16:85 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m (\e[31m0\e[0m to lst.size - \e\
    [31m1\e[0m).map(i => (lst.head + i * lst.size).toLong).sortWith(compare)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                            Not found: compare\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sorted\n        val newList = mutable.ListBuffer[Long]()\n        sortedList.foreach\
    \ { x => newList += x }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc_0hgnwy.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val tempList\
    \ = lst.sortBy(_.compareTo(_))\n        var rearrangeList: List[Long] = Nil\n\
    \        var front = 0\n        var back = tempList.size - 1\n        while (front\
    \ < back) {\n            if (tempList(front) == tempList(back)) {\n          \
    \      front += 1\n                back -= 1\n            } else {\n         \
    \       val tmp = tempList(front)\n                tempList(front) = tempList(back)\n\
    \                tempList(back) = tmp\n                rearrangeList = tempList::rearrangeList\n\
    \                front += 1\n                back -= 1\n            }\n      \
    \  }\n        rearrangeList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpw5tdytnr.scala:15:34 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mtempList\e[0m = lst.sortBy(_.compareTo(_))\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- Error: /tmp/tmpw5tdytnr.scala:15:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mtempList\e[0m = lst.sortBy(_.compareTo(_))\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigInt\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        lst.sortWith((a,\
    \ b) => {\n            (a.toLong, b.toLong) match {\n                case (maxA,\
    \ maxB) =>\n                    maxA.compare(maxB)\n                case (minA,\
    \ minB) =>\n                    minA.compare(minB)\n                case _ =>\n\
    \                    a.toLong.compare(b.toLong)\n            }\n        })\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvuzu3uhf.scala:18:32\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                    maxA.compare(maxB)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Found:    Int\n\e[31m   |\e[0m                    Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvuzu3uhf.scala:20:32\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                    minA.compare(minB)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Found:    Int\n\e[31m   |\e[0m                    Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvuzu3uhf.scala:22:36\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    a.toLong.compare(b.toLong)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Found:    Int\n\e[31m   |\e[0m                 \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        // Add first\
    \ element of list to result list, this will be the smallest number.\n        //\
    \ Add all the rest to result list\n        // Sort result list\n        // Return\
    \ sorted list\n        val newList = lst::List(1)\n        newList.sortWith( (a,b)\
    \ => a < b )\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfp65on_1.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        newList.sortWith( (\e[36ma\e[0m,\e[36mb\e[0m)\
    \ => a < b )\n\e[31m\e[31m   |\e[0m                                   ^^^\e[0m\n\
    \e[31m   |\e[0mvalue < is not a member of Matchable, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if(lst.isEmpty)\
    \ lst\n        else {\n            val minValue = getMin(lst.map(x => x.toLong))\n\
    \            val maxValue = getMax(lst.map(x => x.toLong))\n            var sortedList\
    \ = lst.sortWith(x => (x.toLong < minValue) || (x.toLong > maxValue))\n      \
    \      val result = sortedList.map(_ => minValue).reverse.mkString(\"\") + sortedList.map(_\
    \ => maxValue).mkString(\"\")\n            result\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3gntlxhq.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mminValue\e[0m = getMin(lst.map(\e\
    [36mx\e[0m => x.toLong))\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: getMin\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3gntlxhq.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmaxValue\e[0m = getMax(lst.map(\e\
    [36mx\e[0m => x.toLong))\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: getMax\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp3gntlxhq.scala:19:44 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mvar\e[0m \e[36msortedList\e[0m = lst.sortWith(\e\
    [36mx\e[0m => (x.toLong < minValue) || (x.toLong > maxValue))\n\e[31m\e[31m  \
    \ |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3gntlxhq.scala:21:12\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            result\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (result\
    \ : String)\n\e[31m   |\e[0m            Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val first\
    \ = lst.head\n        val rest = lst.tail\n        if (rest.isEmpty) List(first)\n\
    \        else (lst.head minus first :: strangeSortList(rest)).sortBy(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpup6ua8dz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m (lst.head minus first :: strangeSortList(rest)).sortBy(_.toLong)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \        value minus is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var res =\
    \ new Array[Long](lst.size)\n        var temp : Long = lst(0)\n        var i :\
    \ Int = 0\n        while(i < lst.size) {\n            while(temp < lst(i)) {\n\
    \                res(i) = temp\n                i += 1\n            }\n      \
    \      temp = lst(i)\n            i += 1\n        }\n        return res\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8yksgbz.scala:26:15\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mreturn\e[0m res\n\
    \e[31m\e[31m   |\e[0m               ^^^\e[0m\n\e[31m   |\e[0m               Found:\
    \    (res : Array[Long])\n\e[31m   |\e[0m               Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val maxNum\
    \ = lst.map(_.toInt).max\n        val minNum = lst.map(_.toInt).min\n        lst.sortWith((x,\
    \ y) => math.min(math.max(x,minNum), maxNum - math.max(y,minNum)))\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpolfoif7w.scala:17:39\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        lst.sortWith((\e[36mx\e\
    [0m, \e[36my\e[0m) => math.min(math.max(x,minNum), maxNum - math.max(y,minNum)))\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    Long\n\e[31m   |\e\
    [0m                               Required: Boolean\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var strangeLst:\
    \ List[Long] = lst\n        var strangeOrder: Map[Long, Int] = Map()\n       \
    \ // Sort the list with minimum first\n        strangeLst.sort {\n           \
    \ case i : Long => {\n                // If this integer is smaller than the previous,\
    \ add it\n                if (strangeOrder.contains(i)) {\n                  \
    \  val order = strangeOrder(i)\n                    strangeLst.updated(order,\
    \ i)\n                } else {\n                    strangeOrder.put(i, 1)\n \
    \               }\n            }\n        }\n        strangeLst\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1yp82s6z.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        strangeLst.sort {\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort is not a member of List[Long]\
    \ - did you mean List[Long].sortBy?\n1 error found\n"
  stdout: ''
  timestamp: 1660009961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n      val n = lst.length\n\
    \      var max = 0\n      val list = new mutable.ListBuffer[Long]\n      lst.foreach\
    \ {\n        x => x match {\n          case a if max < a => max = a\n        \
    \  case a => list.+= a\n        }\n      }\n      val sorted = list.sortWith((x,\
    \ y) => y > x)\n      sorted\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpt1490oo2.scala:21:29 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m          \e[33mcase\e[0m a => list.+= a\n\e[31m\e[31m\
    \   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m               \
    \              expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpt1490oo2.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m      \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                 \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt1490oo2.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m          \e[33mcase\e[0m a \e\
    [33mif\e[0m max < a => max = a\n\e[31m\e[31m   |\e[0m                        \
    \             ^\e[0m\n\e[31m   |\e[0m                                     Found:\
    \    (a : Long)\n\e[31m   |\e[0m                                     Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst2\
    \ = lst.sortBy { i => \n            if (i < lst(lst.length-1)) lst(lst.length-1)\
    \ else i\n        }\n        return lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpebjp3dfe.scala:21)\n\tat Problem.main(tmpebjp3dfe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var sortedList\
    \ = lst\n        var sortedListSize = sortedList.length\n        \n        for\
    \ (i <- 0 until sortedListSize) {\n            var index = i\n            while\
    \ (index > 0 && sortedList(i) < sortedList(index-1)) index -= 1\n            if\
    \ (index < sortedListSize-1) {\n                val temp = sortedList(i)\n   \
    \             sortedList(i) = sortedList(index+1)\n                sortedList(index+1)\
    \ = temp\n            }\n        }\n        \n        return sortedList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmgpjuw_s.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                sortedList(i) = sortedList(index+\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ update is not a member of List[Long] - did you mean List[Long].updated?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpmgpjuw_s.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                sortedList(index+\e[31m1\e[0m) = temp\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue update\
    \ is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        lst.foldLeft(List[Long]()){\n\
    \            case (acc: List[Long], nxt: Long) =>\n                if (nxt < acc.head)\
    \ acc ::: List(1L, nxt)\n                else if (nxt > acc.last) acc ::: List(nxt,\
    \ 1L)\n                else acc ::: List(acc.last, nxt)\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.strangeSortList$$anonfun$1(tmpmgtd9als.scala:17)\n\
    \tat Problem$.strangeSortList$$anonfun$adapted$1(tmpmgtd9als.scala:20)\n\tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:169)\n\
    \tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:165)\n\tat scala.collection.immutable.List.foldLeft(List.scala:79)\n\
    \tat Problem$.strangeSortList(tmpmgtd9als.scala:20)\n\tat Problem$.main(tmpmgtd9als.scala:23)\n\
    \tat Problem.main(tmpmgtd9als.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n      val min = lst.min\n\
    \      val max = lst.max\n      lst match {\n        case Nil => lst\n       \
    \ case x :: Nil => x\n        case x :: xs => {\n          val l = lst.head -\
    \ min + 1\n          val r = lst.last - max + 1\n          val newList = x ::\
    \ xs.sortWith(a => a - min < b - max && a.toLong < b.toLong)\n          newList\
    \ ++ strangeSortList(newList.drop(l)) ++ strangeSortList(newList.take(r))\n  \
    \      }\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpic663udq.scala:19:25\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mcase\e[0m x ::\
    \ Nil => x\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e\
    [0m                         Found:    (x : Long)\n\e[31m   |\e[0m            \
    \             Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmpic663udq.scala:23:43 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m          \e[33mval\e[0m \e[36mnewList\e[0m = x :: xs.sortWith(\e[36ma\e\
    [0m => a - min < b - max && a.toLong < b.toLong)\n\e[31m\e[31m   |\e[0m      \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpic663udq.scala:24:50\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m          newList ++ strangeSortList(newList.drop(l))\
    \ ++ strangeSortList(newList.take(r))\n\e[31m\e[31m   |\e[0m                 \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                              Found:    (l : Long)\n\e[31m   |\e[0m         \
    \                                         Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpic663udq.scala:24:86 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m          newList ++ strangeSortList(newList.drop(l))\
    \ ++ strangeSortList(newList.take(r))\n\e[31m\e[31m   |\e[0m                 \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0m                                                    Found:    (r\
    \ : Long)\n\e[31m   |\e[0m                                                   \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val min =\
    \ lst.map(_.toLong).min\n        val max = lst.map(_.toLong).max\n        var\
    \ curr = min\n        val ret = lst.map((_) => curr).sortWith((x, y) => x - y)\n\
    \        ret ++ lst.map((_) => max).sortWith((x, y) => x - y)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0pbohuzm.scala:18:58\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mret\e\
    [0m = lst.map((_) => curr).sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x - y)\n\e\
    [31m\e[31m   |\e[0m                                                          ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \    Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0pbohuzm.scala:19:54\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        ret ++ lst.map((_) =>\
    \ max).sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x - y)\n\e[31m\e[31m   |\e[0m\
    \                                                      ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                      Found:    Long\n\e[31m\
    \   |\e[0m                                                      Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val min =\
    \ lst.min\n        val max = lst.max\n        val newList = mutable.MutableList(min.toLong)\n\
    \        for(num <- lst)\n            if(num < min || num > max)\n           \
    \     newList += num\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk5ccv6yp.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.MutableList(min.toLong)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var lst2\
    \ = lst.reverse\n        var maxV = lst2.head\n        for (elem <- lst2) {\n\
    \            if (elem > maxV) {\n                maxV = elem\n            }\n\
    \        }\n        var lst3 = lst.reverse\n        for (elem <- lst3) {\n   \
    \         if (elem < maxV) {\n                lst3 = lst3.reverse\n          \
    \      lst3 = lst3 :+ elem\n            }\n        }\n        lst3 = lst3.reverse\n\
    \        lst3.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp325q6d0e.scala:33)\n\tat Problem.main(tmp325q6d0e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n      var reordered\
    \ = lst\n      // remove min from reordered list.\n      val minIndex = reordered.indexOf(min(reordered))\n\
    \      reordered.remove(minIndex)\n      // remove max from reordered list.\n\
    \      val maxIndex = reordered.indexOf(max(reordered))\n      reordered.remove(maxIndex)\n\
    \      // add min to reordered list.\n      reordered += min(reordered)\n    \
    \  // add max to reordered list.\n      reordered += max(reordered)\n      reordered\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0up0r0xp.scala:17:39 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m      \e[33mval\e[0m \e[36mminIndex\e[0m = reordered.indexOf(min(reordered))\n\
    \e[31m\e[31m   |\e[0m                                       ^^^\e[0m\n\e[31m \
    \  |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e\
    [0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e\
    [31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\
    \e[31m   |\e[0mmatch arguments ((reordered : List[Long]))\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp0up0r0xp.scala:18:16 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m      reordered.remove(minIndex)\n\e[31m\e[31m   |\e[0m  \
    \    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a member of List[Long]\
    \ - did you mean List[Long].reduce?\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0up0r0xp.scala:20:39\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m\
    \ \e[36mmaxIndex\e[0m = reordered.indexOf(max(reordered))\n\e[31m\e[31m   |\e\
    [0m                                       ^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((reordered : List[Long]))\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0up0r0xp.scala:21:16 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m      reordered.remove(maxIndex)\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue remove is not a member of List[Long], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import collection.convert.ImplicitConversions.seq AsJavaList\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\e[31m\
    \   |\e[0m  imp"
  stdout: ''
  timestamp: 1660009966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        lst.foldLeft((List.empty[Long],\
    \ 0l)){ case ((res, count), cur) =>\n            if(count % 2 == 0) {\n      \
    \          (cur.toLong :: res, cur.toLong)\n            } else {\n           \
    \     (cur.toLong :: res, cur.toLong :: res)\n            }\n        }._1.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3zjvmj_q.scala:19:36\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                (cur.toLong ::\
    \ res, cur.toLong :: res)\n\e[31m\e[31m   |\e[0m                             \
    \       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \      Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m\n\e\
    [31m   |\e[0m                                    Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var lst1\
    \ = lst;\n        val min = lst1.min\n        val max = lst1.max\n\n        val\
    \ len = lst1.size\n        val lst2 = new ListBuffer[Long]()\n\n        while\
    \ (min <= max) {\n            lst2.append(min);\n            lst2.append(max);\n\
    \            lst2.append(min);\n            lst2.append(max);\n            lst2.append(max);\n\
    \            lst2.append(min);\n\n            min = min + 2l.toLong\n        \
    \    max = max + 1l.toLong\n        }\n\n        lst2.reverse\n        lst1.clear()\n\
    \        lst1 ++= lst2\n        return lst1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp2led1fj8.scala:30:16 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            min = min + \e[31m2l\e[0m.toLong\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Reassignment to val min\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp2led1fj8.scala:31:16 -----------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m            max = max + \e[31m1l\e[0m.toLong\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2led1fj8.scala:35:13\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        lst1.clear()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue clear is not\
    \ a member of List[Long] - did you mean List[Long].clone?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val a = lst.sortBy(_.toInt)\n\
    \        a.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptx666b0q.scala:19)\n\tat Problem.main(tmptx666b0q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sorted\
    \ = lst.sortBy(x => x)\n        val head = sorted.take(1)\n        sorted.drop(1).foldRight(head){case\
    \ (acc, x) => (x :: acc)}\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiwsgv305.scala:17:59 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        sorted.drop(\e[31m1\e[0m).foldRight(head){\e\
    [33mcase\e[0m (acc, x) => (x :: acc)}\n\e[31m\e[31m   |\e[0m                 \
    \                                          ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                  value :: is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val s = lst.sort\n\
    \        s.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7civ6_zn.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = lst.sort\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m     value sort is\
    \ not a member of List[Long] - did you mean lst.sortBy?\n1 error found\n"
  stdout: ''
  timestamp: 1660009967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        def strangeSortHelper(l\
    \ : List[Long]) : List[Long] = {\n            if (l.isEmpty) lst\n           \
    \ else {\n                val (min, max) = l.minBy(_.toLong), l.maxBy(_.toLong)\n\
    \                var ret: List[Long] = Nil\n                while (min < max)\
    \ {\n                    val mid = min + max / 2\n                    val newLst\
    \ = (mid, min + max / 2, mid)\n                    val newMin = mid.toLong\n \
    \                   val newMax = mid + min.toLong\n                    newLst\
    \ ::: strangeSortHelper(newLst)\n                    val newMid = mid + min.toLong\n\
    \                    val newNewLst = (newMid, newMin + newMax / 2, newMid)\n \
    \                   val newNewMin = newMid.toLong\n                    val newNewMax\
    \ = newMid + max.toLong\n                    ret ::: strangeSortHelper(newNewLst)\n\
    \                    min = newMin\n                    max = newMax\n        \
    \        }\n                ret\n            }\n        }\n        strangeSortHelper(lst)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpn3uq89zf.scala:18:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m (min, max) = l.minBy(_.toLong),\
    \ l.maxBy(_.toLong)\n\e[31m\e[31m   |\e[0m                                   \
    \               ^\e[0m\n\e[31m   |\e[0m                                 end of\
    \ statement expected but ',' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn3uq89zf.scala:20:27\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mwhile\e\
    [0m (min < max) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue < is not a member of Any, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn3uq89zf.scala:21:34\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    \e[33mval\e\
    [0m \e[36mmid\e[0m = min + max / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m         \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of Any,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpn3uq89zf.scala:21:40 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mval\e[0m \e[36mmid\e[0m = min\
    \ + max / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                                \
    \    ^^^^^\e[0m\n\e[31m   |\e[0mvalue / is not a member of Any, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import"
  stdout: ''
  timestamp: 1660009973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.MutableList[Long]\n        var minValue = -1\n        var maxValue\
    \ = -1\n        for(i <- 0 until lst.size){\n            minValue = min(minValue,\
    \ lst(i))\n            maxValue = max(maxValue, lst(i))\n        }\n        var\
    \ i = lst.size\n        while(i > 0) {\n            result.append(lst(minValue\
    \ + i-1))\n            result.append(lst(maxValue + i))\n            i -= 1\n\
    \        }\n        result.distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9y1oqfe_.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9y1oqfe_.scala:19:40\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            minValue = min(minValue,\
    \ lst(i))\n\e[31m\e[31m   |\e[0m                                     ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    Long\n\e[31m\
    \   |\e[0m                                     Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9y1oqfe_.scala:20:40 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            maxValue = max(maxValue, lst(i))\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Found:    Long\n\e[31m   |\e[0m        \
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val length\
    \ = lst.size\n        var min = 0\n        var max = length-1\n        while (max\
    \ >= min){\n            val temp = lst(max)\n            lst(max)  = lst(min)\n\
    \            lst(min)  = temp\n            min = (min + 1) % length\n        \
    \    max = (max + 1) % length\n        }\n        lst.sortWith(_ > _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsbvxqoko.scala:20:12 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            lst(max)  = lst(min)\n\e[31m\e[31m   |\e\
    [0m            ^^^\e[0m\n\e[31m   |\e[0m  value update is not a member of List[Long]\
    \ - did you mean lst.updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsbvxqoko.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            lst(min)  = temp\n\
    \e[31m\e[31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m  value update is not\
    \ a member of List[Long] - did you mean lst.updated?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val listToSort\
    \ = lst.sortWith((x, y) => x < y) //sortWith is for sorting lists in ascending\
    \ order\n        var newList: List[Long] = Nil\n        if (listToSort.isEmpty)\
    \ newList = Nil\n        else {\n            val newListSize = listToSort.length\n\
    \            val numberOfElements = listToSort.reverse.length\n            if\
    \ (numberOfElements > 0 && newListSize < numberOfElements) {\n               \
    \ newList = listToSort.reverse\n            }\n            if (numberOfElements\
    \ > 1 && newListSize < numberOfElements) {\n                newList = (listToSort.reverse.head\
    \ :: listToSort.reverse.dropRight(numberOfElements - newListSize)) :: listToSort\n\
    \            }\n            if (numberOfElements > 2 && newListSize < numberOfElements)\
    \ {\n                newList = (listToSort.reverse.head :: listToSort.reverse.dropRight(numberOfElements\
    \ - newListSize)) :: (listToSort.reverse.tail.head :: listToSort.reverse.tail.dropRight(numberOfElements\
    \ - newListSize)) :: listToSort\n            }\n        }\n        newList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz3ntab52.scala:25:27\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                newList = (listToSort.reverse.head\
    \ :: listToSort.reverse.dropRight(numberOfElements - newListSize)) :: listToSort\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    \e[1m\e[31mList\e[0m\e\
    [1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                        \
    \   Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz3ntab52.scala:28:27\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m                newList = (listToSort.reverse.head\
    \ :: listToSort.reverse.dropRight(numberOfElements - newListSize)) :: (listToSort.reverse.tail.head\
    \ :: listToSort.reverse.tail.dropRight(numberOfElements - newListSize)) :: listToSort\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    List[Matchable]\n\e[31m\
    \   |\e[0m                           Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.isEmpty)\n\
    \            return lst\n        var listToSort = lst.toList\n        var swap\
    \ = listToSort.head\n        var swapIndex = lst.indexOf(swap)\n        listToSort.remove(swap)\n\
    \        swapIndex = swapIndex - 1 // because swapped value is at 0 index.\n \
    \       listToSort.take(swapIndex).foreach { val elem =>\n            listToSort.insert(swapIndex,\
    \ elem)\n            swapIndex = swapIndex + 1\n        }\n        listToSort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4wyti5_1.scala:22:54 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        listToSort.take(swapIndex).foreach { \e[33mval\e\
    [0m \e[36melem\e[0m =>\n\e[31m\e[31m   |\e[0m                                \
    \                      ^^\e[0m\n\e[31m   |\e[0m                              \
    \              '=' expected, but '=>' found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp4wyti5_1.scala:20:19 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        listToSort.remove(swap)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue remove is not a member of List[Long] - did you mean\
    \ List[Long].reduce?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4wyti5_1.scala:24:22\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            swapIndex = swapIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Unit\n\e[31m   |\e[0m            Required:\
    \ Long => Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val newList\
    \ = mutable.Buffer.empty[Long]\n        val currentMin = lst.min\n        val\
    \ currentMax = lst.max\n        var nextMin = currentMin\n        var nextMax\
    \ = currentMax\n        for(i <- 0 until lst.size){\n            if(currentMin\
    \ > lst.min){\n                newList += currentMin\n                currentMin\
    \ = lst.min\n                nextMin = lst.min\n            }\n            if(currentMax\
    \ < lst.max){\n                newList += currentMax\n                currentMax\
    \ = lst.max\n                nextMax = lst.max\n            }\n        }\n   \
    \     newList += currentMin\n        newList += currentMax\n        return newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmpqnhn6v.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.Buffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpmpqnhn6v.scala:23:27 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                currentMin = lst.min\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Reassignment to val currentMin\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpmpqnhn6v.scala:28:27 -----------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                currentMax = lst.max\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val currentMax\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val tempList\
    \ = lst.map(_ => 1l)\n        val tempSet = tempList.toSet\n        val temp =\
    \ tempList.filter(_ != 1l)\n        tempList.foreach { x =>\n            tempSet.foreach\
    \ { y =>\n                if (x < y)\n                    tempList.insert(x, y)\n\
    \            }\n        }\n        tempList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk2c2o8nw.scala:21:29 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    tempList.insert(x, y)\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue insert\
    \ is not a member of List[Long] - did you mean tempList.init?\n1 error found\n"
  stdout: ''
  timestamp: 1660009976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.isEmpty)\
    \ lst\n        else {\n            val head = lst.head\n            val tail =\
    \ strangeSortList(rest lst.tail)\n            val list = head :: tail\n      \
    \      list\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpz0gqsx0r.scala:18:47 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mtail\e[0m = strangeSortList(rest\
    \ lst.tail)\n\e[31m\e[31m   |\e[0m                                           \
    \    ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpz0gqsx0r.scala:18:39 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            \e[33mval\e[0m \e[36mtail\e[0m = strangeSortList(rest lst.tail)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: rest\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        def nextValue(current\
    \ : Long): Int = {\n            if (current < lst(0).min) {\n                if\
    \ (lst.size > 1) {\n                    nextValue(lst(1).max)\n              \
    \  } else {\n                    -1\n                }\n            } else if\
    \ (current > lst(0).max) {\n                if (lst.size > 1) {\n            \
    \        nextValue(lst(0).min)\n                } else {\n                   \
    \ -1\n                }\n            } else {\n                0\n           \
    \ }\n        }\n        val result = mutable.Stack[Long]()\n        result.push(lst(0).min)\n\
    \        for {\n            i <- nextValue(lst(0).max)\n        } yield result.push(lst.take(i).max)\n\
    \        result.head\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpq6yxhqq6.scala:16:24 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (current < lst(\e[31m0\e[0m).min)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m<\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\e[31m \
    \  |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e\
    [0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x:\
    \ Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments\
    \ (Long => Long)\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq6yxhqq6.scala:18:30\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                    nextValue(lst(\e\
    [31m1\e[0m).max)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    Long => Long\n\e[31m\
    \   |\e[0m                              Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmpq6yxhqq6.scala:22:31 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (current\
    \ > lst(\e[31m0\e[0m).max) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m>\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long):\
    \ Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\
    \e[31m   |\e[0m (x: Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m\
    \   |\e[0mmatch arguments (Long => Long)\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpq6yxhqq6.scala:24:30 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                    nextValue(lst(\e[31m0\e[0m).min)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                  Found:    Long => Long\n\e[31m   |\e[0m                   \
    \           Required: Long\n\e"
  stdout: ''
  timestamp: 1660009979
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst2\
    \ = lst.sortBy(x => x)\n        val lst3 = lst2.sortBy(x => -x)\n        lst3.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo9acro7a.scala:20)\n\tat Problem.main(tmpo9acro7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val newList\
    \ = mutable.ListBuffer[Long]()\n        val minList = lst.min\n        val maxList\
    \ = lst.max\n        for(i <- minList until maxList){\n            newList +=\
    \ i\n        }\n        newList.sorted //.takeWhile(_ < 5).reverse\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp69jz0uyu.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var list\
    \ = lst\n        list.sortBy(x => if (x < list.min) list.min else x)\n       \
    \ list.sortBy(x => if (x > list.max) list.max else x)\n        list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnipxhdri.scala:21)\n\tat Problem.main(tmpnipxhdri.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        def doSort(lst: mutable.Seq[Long],\
    \ acc: List[Long]) = {\n            lst match {\n                case Nil =>\n\
    \                    acc += lst.min\n                    acc += lst.max\n    \
    \            case _ => doSort(lst.tail, acc :+ lst.min)\n            }\n     \
    \   }\n        doSort(lst, result)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc9uzt76.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjc9uzt76.scala:16:24\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mdef\e[0m \e\
    [36mdoSort\e[0m(\e[36mlst\e[0m: mutable.Seq[\e[35mLong\e[0m], \e[36macc\e[0m:\
    \ \e[35mList\e[0m[\e[35mLong\e[0m]) = {\n\e[31m\e[31m   |\e[0m               \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjc9uzt76.scala:19:24\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    acc +=\
    \ lst.min\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e\
    [0m           value += is not a member of List[Long] - did you mean acc.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpjc9uzt76.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    acc += lst.max\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m           value += is not\
    \ a member of List[Long] - did you mean acc.!=?\n\e[31m\e[31m-- [E044] Cyclic\
    \ Error: /tmp/tmpjc9uzt76.scala:21:26 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m                \e[33mcase\e[0m _ => doSort(lst.tail, acc :+ lst.min)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \          Overloaded or recursive \e[33mmethod\e[0m \e[35mdoSort\e[0m needs return\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n      lst.sortWith\
    \ {\n        case (min, max) =>\n          {\n            val minMax = min max\
    \ min\n            val rest = lst.reverse.filter(_.toLong < minMax.toLong).reverse.filter(_.toLong\
    \ >= minMax.toLong).reverse\n            val sorted = rest min minMax\n      \
    \      val restOfSorted = sorted.toList ::: rest\n            restOfSorted\n \
    \         }\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkvjgb2q.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e\
    [36msorted\e[0m = rest min minMax\n\e[31m\e[31m   |\e[0m                     \
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (minMax : Long)\n\e[31m   |\e[0m                                  Required:\
    \ Ordering[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnkvjgb2q.scala:21:38\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36mrestOfSorted\e[0m = sorted.toList ::: rest\n\e[31m\e[31m   |\e[0m    \
    \                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       value toList\
    \ is not a member of Long - did you mean sorted.toInt?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnkvjgb2q.scala:22:12 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            restOfSorted\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (restOfSorted : List[Long])\n\
    \e[31m   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val a = lst.tail\n\
    \        val b = lst.head\n        val c = lst.head\n        val d = lst.tail\n\
    \        val c = lst.head\n        val b = lst.tail\n        val c = lst.head\n\
    \        val d = lst.tail\n        val c = lst.head\n        val d = lst.tail\n\
    \        val a = lst.tail\n        val d = lst.tail\n        val c = lst.head\n\
    \        val b = lst.tail\n        val a = lst.tail\n        val c = lst.head\n\
    \        val d = lst.tail\n        val b = lst.tail\n        val a = lst.tail\n\
    \        val d = lst.tail\n        val c = lst.head\n        val b = lst.tail\n\
    \        val a = lst.tail\n        val d = lst.tail\n        val c = lst.head\n\
    \        val b = lst.tail\n        val a = lst.tail\n        val d = lst.tail\n\
    \        val c = lst.head\n        val b = lst.tail\n        val a = lst.tail\n\
    \        val d = lst.tail\n        val c = lst.head\n        val b = lst.tail\n\
    \        val a = lst.tail\n        val d = lst.tail\n        val c = lst.head\n\
    \        val b = lst.tail\n        val a = lst.tail\n        val d = lst.tail\n\
    \        val c = lst.head\n        val b = lst.tail\n        val a = lst.tail\n\
    \        val d = lst.tail\n        val c = lst.head\n        val b = lst.tail\n\
    \        val a = lst.tail\n        val d = lst.tail\n        val c = lst.head\n\
    \        val b = lst.tail\n        val a = lst.tail\n        val d = lst.tail\n\
    \        val c = lst.head\n        val b = lst.tail\n        val a = lst.tail\n\
    \        val d = lst.tail\n        val c = lst.head\n        val b = lst.tail\n\
    \        val a = lst.tail\n        val d = lst.tail\n        val c = lst.head\n\
    \        val b = lst.tail\n        val a = lst.tail\n        val d = lst.tail\n\
    \        val c = lst.head\n        val b = lst.tail\n        val a = lst.tail\n\
    \        val d = lst.tail\n        val c = lst.head\n        val b = lst.tail\n\
    \        val a = lst.tail\n        val d = lst.tail\n        val c = lst.head\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpib_amefh.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = lst.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mc is already defined\
    \ as \e[33mvalue\e[0m \e[35mc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpib_amefh.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = lst.tail\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mb is already defined\
    \ as \e[33mvalue\e[0m \e[35mb\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpib_amefh.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = lst.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mc is already defined\
    \ as \e[33mvalue\e[0m \e[35mc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpib_amefh.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = lst.tail\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined\
    \ as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpib_amefh.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = lst.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mc is already defined\
    \ as \e[33mvalue\e[0m \e[35mc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpib_amefh.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m "
  stdout: ''
  timestamp: 1660009981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortBy(_)\n        val strangeList = sortedList.zipWithIndex.sortBy(_._1)\n\
    \        strangeList.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_w6yrri1.scala:15:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msortedList\e[0m = lst.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0mNo implicit Ordering defined for Any..\n\e[31m   |\e[0mI found:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e[35mAny\e[0m](\n\
    \e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\e[31m  \
    \ |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were found\
    \ that match type java.util.Comparator[Any].\n1 error found\n"
  stdout: ''
  timestamp: 1660009982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        lst.foldLeft((List[Long](),\
    \ List[Long]()))( (acc, x) => {\n            val minLst  = acc.getOrElse(Long.MinValue,\
    \ List[Long]())\n            val maxLst  = acc.getOrElse(Long.MaxValue, List[Long]())\n\
    \            val newLst = minLst :+ x :+ maxLst\n            (newLst, maxLst)\n\
    \        })._1.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb46wesc1.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mminLst\e[0m  = acc.getOrElse(Long.MinValue,\
    \ List[\e[35mLong\e[0m]())\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value getOrElse is not a member of (List[Long],\
    \ List[Long])\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb46wesc1.scala:17:30\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmaxLst\e[0m  = acc.getOrElse(Long.MaxValue, List[\e[35mLong\e[0m]())\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value getOrElse is not a member of (List[Long], List[Long])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if(lst.isEmpty)\
    \ lst\n        else {\n            val list = lst.head\n            var result\
    \ = lst.tail\n            for(i <- 0 until list) result = swapIfLarger(result,\
    \ list)\n            result\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpikz4psrt.scala:19:29\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mfor\e[0m(i\
    \ <- \e[31m0\e[0m until list) result = swapIfLarger(result, list)\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^\e[0m\n\e[31m   |\e[0m            \
    \                 Found:    (list : Long)\n\e[31m   |\e[0m                   \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpikz4psrt.scala:19:44 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            \e[33mfor\e[0m(i <- \e[31m0\e[0m until list) result = swapIfLarger(result,\
    \ list)\n\e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Not found: swapIfLarger\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ = lst.min\n        val maxVal = lst.max\n        val tmpVal = minVal\n     \
    \   val resultList = mutable.Buffer.empty[Long]\n        // First value is the\
    \ min value minus one\n        resultList.append(tmpVal-1)\n\n        while (tmpVal\
    \ <= maxVal) {\n            // Now tmpVal, minVal and maxVal are all equal\n \
    \           if (tmpVal == minVal) {\n                // Append new value to the\
    \ beginning\n                resultList.append(tmpVal)\n                // Next\
    \ value is max value + 1\n                resultList.append(maxVal+1)\n      \
    \      } else {\n                // Append new value to the middle\n         \
    \       resultList.append(tmpVal)\n                // Next value is min value\
    \ - 1\n                resultList.append(minVal-1)\n            }\n          \
    \  tmpVal = minVal + (tmpVal - minVal)\n        }\n        // Add last value to\
    \ the end\n        resultList.append(tmpVal)\n        resultList.flatten\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkeb3ebd3.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresultList\e[0m = mutable.Buffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpkeb3ebd3.scala:35:19 -----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            tmpVal = minVal + (tmpVal - minVal)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val tmpVal\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val nums\
    \ = lst.sorted\n        val len   = nums.length\n        val res   = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until len) {\n            var index = i\n            var\
    \ j = i + 1;\n            while (j < len) {\n                if (nums(i).equals(nums(j))\
    \ && index < j) j++\n                else if (nums(i).equals(nums(j)) && index\
    \ > j) index--\n                else {\n                    res += nums(index)\n\
    \                    index = j\n                }\n            }\n        }\n\
    \        res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa2_rss1w.scala:22:61 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e[0m (nums(i).equals(nums(j))\
    \ && index < j) j++\n\e[31m\e[31m   |\e[0m                                   \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \           expression expected but \e[31melse\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa2_rss1w.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m   = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var sortedList\
    \ = lst\n        val length = sortedList.length\n        val newList = new List[Long](length)\n\
    \        for (i<- 0 until length-1) {\n            newList(length-i-1) = sortedList(i)\n\
    \        }\n        for (i<- 0 until length-1) {\n            for (j <- i until\
    \ length-1) {\n                if (newList(j) > newList(i)) {\n              \
    \      val temp = newList(i)\n                    newList(i) = newList(j)\n  \
    \                  newList(j) = temp\n                }\n            }\n     \
    \   }\n        return newList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1qsnpwoo.scala:17:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = \e[33mnew\e\
    [0m \e[35mList\e[0m[\e[35mLong\e[0m](length)\n\e[31m\e[31m   |\e[0m          \
    \                           ^^^^^^\e[0m\n\e[31m   |\e[0m   too many arguments\
    \ for \e[33mconstructor\e[0m \e[35mList\e[0m in \e[33mclass\e[0m \e[35mList\e\
    [0m: (): List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1660009980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        // sort the\
    \ list in increasing order\n        val increasingOrderList = lst.sortBy(_.toLong)\n\
    \n        // sort the list in descending order\n        val decreasingOrderList\
    \ = lst.sortBy(_.toLong.reverse)\n\n        // return list of increasing and descending\
    \ order\n        increasingOrderList ++ decreasingOrderList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphisx36q1.scala:19:54 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdecreasingOrderList\e[0m\
    \ = lst.sortBy(_.toLong.reverse)\n\e[31m\e[31m   |\e[0m                      \
    \                       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                    value reverse is not a member of Long\n\e[31m\e[31m-- Error:\
    \ /tmp/tmphisx36q1.scala:19:62 -----------------------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdecreasingOrderList\e[0m = lst.sortBy(_.toLong.reverse)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m\
    \ \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mDeprecatedDoubleOrdering\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue=\
    \ lst.head\n        val maxValue= lst.last\n        var newLst = List[Long]()\n\
    \        for (i <- 0 until lst.size) {\n            var maxPos = maxValue\n  \
    \          var currPos = minValue\n            var numSwaps = 0 // to count swaps\n\
    \            while (currPos != maxPos) {\n                maxPos -= 1\n      \
    \          currPos += 1\n                numSwaps += 1\n            }\n      \
    \      newLst += lst.take(maxPos).take(currPos)\n        }\n        return newLst\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjs73za8y.scala:27:19 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            newLst += lst.take(maxPos).take(currPos)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is\
    \ not a member of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjs73za8y.scala:27:31 --------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            newLst += lst.take(maxPos).take(currPos)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                          Found:    (maxPos : Long)\n\e[31m   |\e[0m        \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjs73za8y.scala:27:44 --------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            newLst += lst.take(maxPos).take(currPos)\n\e[31m\e\
    [31m   |\e[0m                                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                            Found:    (currPos : Long)\n\
    \e[31m   |\e[0m                                            Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009986
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.size\
    \ < 2) return lst\n        val mid = lst.size / 2\n        val l = strangeSortList(lst.filter(_\
    \ < mid))\n        val r = strangeSortList(lst.filter(_ > mid))\n        l.sortWith(_\
    \ < _) ::: r.sortWith(_ > _) ::: l.sortWith(_ < _) ::: r.sortWith(_ > _)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.collection.immutable.List.filter(List.scala:513)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:17)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\
    \tat Problem$.strangeSortList(tmpqstvgeu7.scala:18)\n\tat Problem$.strangeSortList(tmpqstvgeu7.scala"
  stdout: ''
  timestamp: 1660009987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n      var maxVal\
    \ = Long.MinValue\n      var minVal = Long.MaxValue\n      lst.foreach(l => {\n\
    \        if (l > maxVal) maxVal = l\n        if (l < minVal) minVal = l\n    \
    \  })\n      var result: List[Long] = List()\n      if (lst.size == 0) result\n\
    \      else {\n        var next = minVal\n        lst.foreach(l => {\n       \
    \   if (next > maxVal) next = maxVal\n          if (l < next) next = l\n     \
    \   })\n        result = lst.sortWith(_ < _)\n        result += strangeSortList(lst.filter(_\
    \ < next))\n        result += strangeSortList(lst.filter(_ > next))\n      }\n\
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzbjoswwk.scala:30:15 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        result += strangeSortList(lst.filter(_ < next))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not\
    \ a member of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpzbjoswwk.scala:31:15 ------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m        result += strangeSortList(lst.filter(_ > next))\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not\
    \ a member of List[Long] - did you mean List[Long].!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.isEmpty)\n\
    \            return lst\n        var newList = lst\n        var index = 0\n  \
    \      // Find minimum number in list\n        var minElement = lst.min\n    \
    \    newList = lst.filter(x => x != minElement).sortBy(x => x).reverse\n     \
    \   // Find maximum number in list\n        var maxElement = lst.max\n       \
    \ newList = newList.map(x => (index++, x)).sortBy(_._1).reverse\n        // Find\
    \ minimum number in list after reversing and sorting\n        minElement = newList.min._1\n\
    \        // Find maximum number in list after reversing and sorting\n        maxElement\
    \ = newList.max._1\n        newList = newList.map(x => (index++, x)).sortBy(_._1).reverse\n\
    \        //  Create new list\n        newList = newList.zipWithIndex.map{ case\
    \ (l, i) => newList(i) }.flatMap(x => x)\n        //  Concatenate min and max\n\
    \        newList = newList.::(minElement).::(maxElement).::(lst.min).::(lst.max).::(lst)\n\
    \        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpq3nee16a.scala:24:43 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        newList = newList.map(\e[36mx\e[0m => (index++,\
    \ x)).sortBy(_._1).reverse\n\e[31m\e[31m   |\e[0m                            \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \ expression expected but \e[31m','\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E018] Syntax Error: /tmp/tmpq3nee16a.scala:29:43 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        newList = newList.map(\e[36mx\e[0m => (index++,\
    \ x)).sortBy(_._1).reverse\n\e[31m\e[31m   |\e[0m                            \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \ expression expected but \e[31m','\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpq3nee16a.scala:24:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        newList = newList.map(\e[36mx\e[0m => (index++,\
    \ x)).sortBy(_._1).reverse\n\e[31m\e[31m   |\e[0m                            \
    \                                 ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mShort\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpq3nee16a.scala:26:33 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        minElement = newList.min._1\n\e[31m\e[31m   |\e[0m                \
    \     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value _1 is not\
    \ a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq3nee16a.scala:28:33\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        maxElement = newList.max._1\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     value _1 is not a member of Long\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpq3nee16a.scala:29:61 --"
  stdout: ''
  timestamp: 1660009988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.isEmpty)\
    \ lst\n        else {\n            val sorted = lst.sortBy(-_)\n            val\
    \ list = sorted diff sorted.reverse\n            strangeSortList(list)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqt7w7qp1.scala:23)\n\tat Problem.main(tmpqt7w7qp1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val longs\
    \ = lst.toList.map(_.toLong).toList\n        if (longs.isEmpty) lst.clear()\n\
    \        else longs.sortWith((a, b) => a - b).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwygdkjf.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (longs.isEmpty) lst.clear()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \     value clear is not a member of List[Long] - did you mean lst.clone?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnwygdkjf.scala:17:38 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m longs.sortWith((a, b) => a -\
    \ b).reverse\n\e[31m\e[31m   |\e[0m                                      ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Found:    Long\n\e[31m\
    \   |\e[0m                                      Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val tmpMap\
    \ : mutable.Map[Long, Long] = mutable.Map.empty[Long, Long]\n        lst.foreach(x\
    \ => {\n            if (tmpMap.containsKey(x))\n                tmpMap += (x ->\
    \ tmpMap(x))\n            else\n                tmpMap += (x -> x)\n        })\n\
    \        val maxVal = tmpMap.maxBy(_._2)._1\n        tmpMap.toList\n         \
    \   .sortBy(_._1)\n            .map(x => (x._1, x._2))\n            .map(x =>\
    \ maxVal + x)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzx8gzes9.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mtmpMap\e[0m : mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m] = mutable.Map.empty[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzx8gzes9.scala:15:47 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mtmpMap\e[0m : mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m] = mutable.Map.empty[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                                               ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        def strange(lst:\
    \ List[Long], cur:List[Long], k:Int) : List[Long] = {\n            if( lst.length\
    \ <= 1 )\n                lst\n            else\n                if( cur.length\
    \ <= 1 )\n                    strange(lst.tail, cur.tail, k)\n               \
    \ else\n                    strange(lst.tail, lst.head,k) ::: strange(cur, lst.tail,k)\n\
    \        }\n        lst match {\n            case Nil =>\n                lst\n\
    \            case _  => strange(lst, Nil, 0) \n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpio6zcr9s.scala:22:42\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    strange(lst.tail,\
    \ lst.head,k) ::: strange(cur, lst.tail,k)\n\e[31m\e[31m   |\e[0m            \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                  Found:    Long\n\e[31m   |\e[0m                           \
    \           Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var tmp =\
    \ lst\n        var tmp2 = lst\n        var i : Int = 0\n        while (i < tmp.size)\
    \ {\n            // move all the values above to tmp2\n            for (j <- i\
    \ to tmp.size ) {\n                if (j < tmp.size) {\n                    tmp2\
    \ += tmp(j)\n                }\n            }\n            // move the smallest\
    \ element to the tail of the list\n            tmp2 += tmp(i)\n            tmp2\
    \ = tmp2.sorted\n            // move the smallest element from tmp2 to the tail\n\
    \            for (j <- tmp.size until i) {\n                tmp2 += tmp(j)\n \
    \           }\n            tmp = tmp2\n            i += 1\n        }\n       \
    \ tmp\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp28m11azg.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    tmp2 += tmp(j)\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member\
    \ of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp28m11azg.scala:26:17 ------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m            tmp2 += tmp(i)\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    value += is not a member of List[Long] - did you mean\
    \ List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp28m11azg.scala:30:21\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                tmp2 += tmp(j)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m    value +=\
    \ is not a member of List[Long] - did you mean List[Long].!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        if (lst.size\
    \ <= 1) {\n            return lst\n        }\n        val m = lst.head\n     \
    \   val n = lst.last\n        val bigger = strangeSortList(lst.rest) ++ List(n)(0)\n\
    \        val smaller = strangeSortList(lst.rest) ++ List(m)((lst.last - m)+1)\n\
    \        bigger ++ smaller\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzfyvh8tx.scala:20:41 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbigger\e[0m = strangeSortList(lst.rest)\
    \ ++ List(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^\e[0m\n\e[31m   |\e[0m       value rest is not a member of List[Long]\
    \ - did you mean lst.last?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzfyvh8tx.scala:20:57\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbigger\e\
    [0m = strangeSortList(lst.rest) ++ List(n)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    Long\n\e[31m   |\e[0m\
    \                                            Required: IterableOnce[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzfyvh8tx.scala:21:42\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36msmaller\e[0m = strangeSortList(lst.rest) ++ List(m)((lst.last - m)+\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m       value rest is not a member of List[Long] - did you mean\
    \ lst.last?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzfyvh8tx.scala:21:59\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36msmaller\e\
    [0m = strangeSortList(lst.rest) ++ List(m)((lst.last - m)+\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                           ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009989
