language: scala
name: HumanEval_58_common
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val a = l1.toSet ++ l2.toSet\n       \
    \ val b = (l1 diff l2).toSet ++ l2.toSet\n        val c = (l1 diff l2).toSet ++\
    \ (l2 diff l1).toSet\n        val d = (l1 diff l2).toSet ++ (l2 diff l1).toSet\n\
    \        val e = (l1 diff l2).toSet ++ (l2 diff (l1 diff l2)).toSet\n        val\
    \ f = l1.toSet ++ (l2 diff l1).toSet\n        val g = l1.toSet ++ (l2 diff l2).toSet\n\
    \        val h = (l1 diff l2).toSet ++ (l2 diff (l1 diff l2)).toSet\n        val\
    \ i = l1.toSet ++ (l2 diff (l1 diff l2)).toSet\n        val j = (l1 diff l2).toSet\
    \ ++ (l2 diff (l1 diff l2)).toSet\n        val k = (l1 diff l2).toSet ++ (l2 diff\
    \ (l1 diff l2)).toSet\n        val l = (l1 diff l2).toSet ++ (l2 diff (l1 diff\
    \ l2)).toSet\n        val m = (l1 diff l2).toSet ++ (l2 diff (l1 diff l2)).toSet\n\
    \        val n = (l1 diff l2).toSet ++ (l2 diff (l1 diff l2)).toSet\n        val\
    \ o = (l1 diff l2).toSet ++ (l2 diff (l1 diff l2)).toSet\n        val p = (l1\
    \ diff l2).toSet ++ (l2 diff (l1 diff l2)).toSet\n        val q = (l1 diff l2).toSet\
    \ ++ (l2 diff (l1 diff l2)).toSet\n        val r = (l1 diff l2).toSet ++ (l2 diff\
    \ (l1 diff l2)).toSet\n        val s = (l1 diff l2).toSet ++ (l2 diff (l1 diff\
    \ l2)).toSet\n        val t = (l1 diff l2).toSet ++ (l2 diff (l1 diff l2)).toSet\n\
    \        val u = (l1 diff l2).toSet ++ (l2 diff (l1 diff l2)).toSet\n        val\
    \ v = (l1 diff l2).toSet ++ (l2 diff (l1 diff l2)).toSet\n        val w = (l1\
    \ diff l2).toSet ++ (l2 diff (l1 diff l2)).toSet\n        val x = (l1 diff l2).toSet\
    \ ++ (l2 diff (l1 diff l2)).toSet\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr2fl2e9b.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val unique1 = mutable.HashSet[Long]()\n\
    \        val unique2 = mutable.HashSet[Long]()\n        val res = mutable.ArrayBuffer(l1(0))\n\
    \        l1.foreach( x => {\n            if(unique1.contains(x)) return\n    \
    \        unique1 += x\n            if(unique2.contains(x)) return\n          \
    \  unique2 += x\n            res += x\n        })\n        res ++= l2.filter(\
    \ x => !unique1.contains(x) &&  !unique2.contains(x))\n        res.sort()\n  \
    \      res\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9n45usg6.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36munique1\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9n45usg6.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36munique2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9n45usg6.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = mutable.ArrayBuffer(l1(\e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9n45usg6.scala:14:36 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(unique1.contains(x)) \e[33mreturn\e\
    [0m\n\e[31m\e[31m   |\e[0m                                    ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                    Found:    Unit\n\e[31m   |\e\
    [0m                                    Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9n45usg6.scala:16:36 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(unique2.contains(x)) \e[33mreturn\e\
    [0m\n\e[31m\e[31m   |\e[0m                                    ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                    Found:    Unit\n\e[31m   |\e\
    [0m                                    Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n"
  stdout: ''
  timestamp: 1659979361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val set1 = new mutable.HashSet[Long](l1)\n\
    \        val set2 = new mutable.HashSet[Long](l2)\n        set1.intersect(set2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplk3soyy8.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mset1\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m](l1)\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplk3soyy8.scala:11:23\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mset2\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m](l2)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 zip l2 map ((a, b) => if (a == b) a\
    \ else None)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvgcvizr2.scala:10:52\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        l1 zip l2 map ((\e[36ma\e\
    [0m, \e[36mb\e[0m) => \e[33mif\e[0m (a == b) a \e[33melse\e[0m None)\n\e[31m\e\
    [31m   |\e[0m                                                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                                                    Found:    None.type\n\
    \e[31m   |\e[0m                                                    Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val list1 = l1 ++ l2.filter(_ <- l1.sorted)\n\
    \        val list2 = l1.filter(_ <- list1.sorted)\n        val result = list1\
    \ ++ list2\n        result.sortWith(_ > _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfqyo5z87.scala:10:38 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mlist1\e[0m = l1 ++ l2.filter(_\
    \ <- l1.sorted)\n\e[31m\e[31m   |\e[0m                                      ^^\e\
    [0m\n\e[31m   |\e[0m                                      ')' expected, but '<-'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfqyo5z87.scala:11:32 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = l1.filter(_\
    \ <- list1.sorted)\n\e[31m\e[31m   |\e[0m                                ^^\e\
    [0m\n\e[31m   |\e[0m                                ')' expected, but '<-' found\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpfqyo5z87.scala:10:36 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mlist1\e[0m = l1 ++ l2.filter(_\
    \ <- l1.sorted)\n\e[31m\e[31m   |\e[0m                                    ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$1 of expanded function:\n\e\
    [31m   |\e[0m   _$1 => l1 ++ l2.filter(_$1).\n3 errors found\n"
  stdout: ''
  timestamp: 1659979357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 zip l2 map { case (a, b) => (a max\
    \ b) min a }\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2a71ola_.scala:13)\n\tat Problem.main(tmp2a71ola_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        def loop(i : Int, acc : List[Long]) :\
    \ List[Long] = {\n            if (i < l1.length) {\n                if (l1.get(i)\
    \ == l2.get(i)) {\n                    loop(i +1, l1.filterNot(l1.lift(_ == l2.get(i))))\
    \ ++ acc\n                } else if (l1.get(i) < l2.get(i)) {\n              \
    \      loop(i +1, acc)\n                } else {\n                    loop(i +1,\
    \ l2.filterNot(l1.lift(_ == l2.get(i)))) ++ acc\n                }\n         \
    \   } else {\n                acc\n            }\n        }\n        loop(0 ,\
    \ List[Long]())\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqehcjg3g.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mif\e[0m (l1.get(i) == l2.get(i))\
    \ {\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \       value get is not a member of List[Long] - did you mean l1.seq?\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpqehcjg3g.scala:13:52 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                    loop(i +\e[31m1\e[0m, l1.filterNot(l1.lift(_\
    \ == l2.get(i)))) ++ acc\n\e[31m\e[31m   |\e[0m                              \
    \                      ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$1\
    \ of expanded function:\n\e[31m   |\e[0m   _$1 => _$1 == l2.get(i).\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpqehcjg3g.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                } \e[33melse\e[0m \e[33mif\e[0m (l1.get(i)\
    \ < l2.get(i)) {\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue get is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpqehcjg3g.scala:17:52\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                   \
    \ loop(i +\e[31m1\e[0m, l2.filterNot(l1.lift(_ == l2.get(i)))) ++ acc\n\e[31m\e\
    [31m   |\e[0m                                                    ^\e[0m\n\e[31m\
    \   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$2 of expanded function:\n\e[31m   |\e\
    [0m   _$2 => _$2 == l2.get(i).\n4 errors found\n"
  stdout: ''
  timestamp: 1659979361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var s1 =  l1.toSet.toList\n        var\
    \ s2 = l2.toSet.toList\n        var r1 = s2.toList\n        var r2 = s1.toList\n\
    \        var l = s1.toList\n        var m = s1.toList\n        var r = s1.toList\n\
    \        var n = s1.toList\n        var i = s1.toList\n        var v = s1.toList\n\
    \        var p = s1.toList\n        var f = s1.toList\n        var d = s1.toList\n\
    \        var g = s1.toList\n        var h = s1.toList\n        var k = s1.toList\n\
    \        var j = s1.toList\n        while ( s1 union s2 == l1 && l1 union s2 ==\
    \ l2 && s1 union s2 == l2 ) {\n            if ( s1.size > s2.size ) {\n      \
    \          s1 = s1.tail\n                s2 = s2.tail\n            } else {\n\
    \                s2 = s2.tail\n                s1 = s1.tail\n            }\n \
    \       }\n        while ( s1 contains s2 && s1 contains l2 ) {\n            s1\
    \ = s1.tail\n            l2 = l2.tail\n        }\n        while ( s1 contains\
    \ s2 && l1 contains l2 ) {\n            l = l.tail\n            s1 = s1.tail\n\
    \            l2 = l2.tail\n        }\n        while ( l1 contains s2 && l1 contains\
    \ l2 ) {\n            m = m.tail\n            l1 = l1.tail\n            l2 = l2.tail\n\
    \        }\n        while ( s1 contains s2 && l2 contains l1 ) {\n           \
    \ r = r.tail\n            s1 = s1.tail\n            l2 = l2.tail\n        }\n\
    \        while ( s1 contains s2 && s2 contains l1 ) {\n            n = n.tail\n\
    \            s1 = s1.tail\n            s2 = s2.tail\n        }\n        while\
    \ ( l1 contains s2 && l2 contains s1 ) {\n            i = i.tail\n           \
    \ l1 = l1.tail\n            s1 = s1.tail\n        }\n        while ( l1 contains\
    \ s2 && s2 contains l1 ) {\n            v = v.tail\n            l1 = l1.tail\n\
    \            s1 = s1.tail\n        }\n        while ( l1 contains s2 && l2 contains\
    \ s1 ) {\n            p = p.tail\n            l1 = l1.tail\n            s1 = s1.tail\n\
    \        }\n        while ( s1 contains s2 && l1 contains s1 ) {\n           \
    \ f = f.tail\n            l1 = l1.tail\n            s1 = s1.tail\n        }\n\
    \        while ( s1 contains s2 && s2 contains l1 ) {\n            d = d.tail\n\
    \            l1 = l1.tail\n            s1 = s1.tail\n        }\n        while\
    \ ( s1 contains s2 && l2 contains s1 ) {\n            g = g.tail\n           \
    \ l1 = l1.tail\n            s1 = s1.tail\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe4wgu21g.scala:27:37\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mwhile\e[0m ( s1\
    \ union s2 == l1 && l1 union s2 == l2 && s1 union s2 == l2 ) {\n\e[31m\e[31m \
    \  |\e[0m                                     ^^\e[0m\n\e[31m   |\e[0m       \
    \                              Found:    (l1 : List[Long])\n\e[31m   |\e[0m  \
    \                                   Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpe4wgu21g.scala:27:58 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mwhile\e[0m ( s1 union s2 == l1 && l1 union\
    \ s2 == l2 && s1 union s2 == l2 ) {\n\e[31m\e[31m   |\e[0m                   \
    \                                       ^^\e[0m\n\e[31m   |\e[0m             \
    \                                Found:    (s1 : List[Long])\n\e[31m   |\e[0m\
    \                                             Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe4wgu21g.scala:27:67 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mwhile\e[0m ( s1 union s2 == l1 && l1 union\
    \ s2 == l2 && s1 union s2 == l2 ) {\n\e[31m\e[31m   |\e[0m                   \
    \                                                ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                    Found:    Boolean\n\e[31m   |\e[0m      \
    \                              Required: scala.collection.Seq[Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe4wgu21g.scala:36:31 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mwhile\e[0m ( s1 contains s2 && s1 contains\
    \ l2 ) {\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            value && is not a member of List[Long]\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpe4wgu21g.scala:38:15 -----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            l2 = l2.tail\n\e[31m\e[31m   |\e[0m     \
    \       "
  stdout: ''
  timestamp: 1659979363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val unique = l1.toSet ++ l2.toSet\n  \
    \      if (unique.isEmpty) Nil\n        else unique.toList.sort\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptlivtbny.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m unique.toList.sort\n\e[31m\e\
    [31m   |\e[0m             ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort is\
    \ not a member of List[Long] - did you mean List[Long].sortBy?\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val l1 = l1.toList\n        val l2 = l2.toList\n\
    \        val unique = l1.zip(l2).filter { case (a1, b1) => !l2.contains(b1) &&\
    \ a1 != b1 }.map (_._1)\n        unique.sortWith((a, b) => a < b).distinct\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn9kjdl9g.scala:10:17 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ml1\e[0m = l1.toList\n\e\
    [31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35ml1\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpn9kjdl9g.scala:11:17 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36ml2\e[0m = l2.toList\n\e\
    [31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35ml2\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        //return l1 union l2\n        val newList\
    \ = l1 ++ l2\n        val sorted = newList.sorted\n        val seen = mutable.HashSet[Long]()\n\
    \        val res = []\n        var i = 0\n        while (i < sorted.length) {\n\
    \            val el = sorted(i)\n            seen.add(el)\n            i += 1\n\
    \            while (i<sorted.length && el == sorted(i)) {\n                val\
    \ other = sorted(i)\n                if (!seen.contains(other)) {\n          \
    \          res += other\n                    i += 1\n                } else {\n\
    \                    break\n                }\n            }\n        }\n    \
    \    res\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe9apog2e.scala:14:19 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = []\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   an identifier\
    \ expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe9apog2e.scala:15:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mi\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m^^^\e[0m\n\e[31m   |\e[0m'=>'\
    \ expected, but 'end of statement' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpe9apog2e.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.HashSet[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpe9apog2e.scala:23:24 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m                    res += other\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m                 value += is not a member of Null\
    \ - did you mean res.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe9apog2e.scala:26:20\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var common = l1 diff l2\n        while\
    \ (l1.nonEmpty && l2.nonEmpty) {\n            if (l1.head == l2.head) {\n    \
    \            l1 += l1.head :: l1.tail\n                l2 -= l2.head\n       \
    \     } else {\n                if (common.length == 0) {\n                  \
    \  common = l1 diff l2\n                }\n                l1 -= l1.head\n   \
    \             l2 += l2.head\n            }\n        }\n        if (common.length\
    \ > 0) {\n            common.reverse\n        } else {\n            common\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphdeywr02.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                l1 += l1.head :: l1.tail\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of List[Long] - did you mean l1.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmphdeywr02.scala:14:19 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m                l2 -= l2.head\n\e[31m\e[31m   |\e[0m                ^^^^^\e\
    [0m\n\e[31m   |\e[0m            value -= is not a member of List[Long] - did you\
    \ mean l2.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphdeywr02.scala:19:19\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                l1 -= l1.head\n\
    \e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of List[Long] - did you mean l1.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmphdeywr02.scala:20:19 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                l2 += l2.head\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ List[Long] - did you mean l2.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var l3 : List[Long] = Nil\n        for(a\
    \ <- l1 ) {\n        for(a <- l2 ) {\n        if(l3.contains(a)) {\n         \
    \   l3 = l3.filter(_ != a) // Remove all duplicates\n        } else {\n      \
    \      l3 = l3 :+ a // Add the element to the new list\n        }\n        }}\n\
    \        l3\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbhjlqadh.scala:22)\n\tat Problem.main(tmpbhjlqadh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val list1 = l1.toSeq\n        val list2\
    \ = l2.toSeq\n        if (list1.nonEmpty && list2.nonEmpty) {\n            list1.intersect(list2).toList\n\
    \        }\n        else {\n            list1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm5xjqvf3.scala:20)\n\tat Problem.main(tmpm5xjqvf3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979361
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var result = l1\n        var common =\
    \ l1.filter(l1.contains(_))\n        val l = l2.filter(l2.contains(_))\n     \
    \   common ++ l\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy9tgzg9r.scala:16)\n\tat Problem.main(tmpy9tgzg9r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val commonElements = mutable.Set[Long]()\n\
    \        l1 foreach { e1 => l2 foreach { e2 => commonElements add(e1 & e2) } }\n\
    \        l1 filter { e1 => commonElements contains e1 }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkiyayi4p.scala:10:29 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcommonElements\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1.zipWithIndex.intersect(l2.zipWithIndex).\n\
    \          collect {case (x, y) => if (x == y) x else y}.\n          sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvnzqnc9e.scala:12:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m          sorted\n\e[31m\e[31m   |\e[0m             \
    \   ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mwhere:    B is a type variable with constraint >: AnyVal\n\e[31m\
    \   |\e[0m..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mB\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[B]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[B].\n1 error found\n"
  stdout: ''
  timestamp: 1659979361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        if (l1 == null || l2 == null) List()\n\
    \        else {\n            val l1 = l1.toSet\n            val l2 = l2.toSet\n\
    \            val intersection = (l1 diff l2)\n            l1 intersect l2\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5khof80k.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36ml1\e[0m = l1.toSet\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35ml1\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5khof80k.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36ml2\e[0m = l2.toSet\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35ml2\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        def isSame(s : List[Long], t: List[Long])\
    \ : Boolean = {\n            if(!s.isEmpty) s.head == t.head\n            else\
    \ true\n        }\n        val s1 = new mutable.ListBuffer[Long]\n        val\
    \ s2 = new mutable.ListBuffer[Long]\n        for(i <- 0 until l1.length) s1.append(l1(i))\n\
    \        for(i <- 0 until l2.length) s2.append(l2(i))\n        val s1 = s1.toList.sorted\n\
    \        val s2 = s2.toList.sorted\n        if(s1.length == s2.length) {\n   \
    \         var i1 = 0\n            var i2 = 0\n            while(!(s1(i1) == s2(i2))\
    \ && i1 < s1.length) {\n                if(i2 == s2.length)\n                \
    \    break\n                if(s1(i1) != s2(i2)) {\n                    i1 +=\
    \ 1\n                    i2 += 1\n                }\n                else {\n\
    \                    i1 += 1\n                    i2 += 1\n                }\n\
    \            }\n            if(!(i1 == s1.length && i2 == s2.length)) {\n    \
    \            s1.slice(i1, s1.length-i2)\n            }\n        }\n        else\n\
    \            List()\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaaqkbpxg.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36ms1\e[0m = s1.toList.sorted\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ms1\
    \ is already defined as \e[33mvalue\e[0m \e[35ms1\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaaqkbpxg.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36ms2\e[0m = s2.toList.sorted\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ms2 is already defined as \e[33mvalue\e[0m \e[35ms2\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpaaqkbpxg.scala:14:21 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36ms1\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpaaqkbpxg.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ms2\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                 \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaaqkbpxg.scala:25:20\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpaaqkbpxg.scala:35:12 --------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m            \e[33mif\e[0m(!(i1 == s1"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val a1 = l1.toSet\n        val a2 = l2.toSet\n\
    \        a1 intersect a2 map { x => x }.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp2z06xo_x.scala:12:30 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        a1 intersect a2 map { \e[36mx\e[0m => x }.toList\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                       Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                          I could not infer the type of the parameter x.\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 diff l2 filterNot (x => l2 exists y\
    \ => x == y)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsrg9ufk_.scala:10:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        l1 diff l2 filterNot (\e[36mx\e[0m => l2 exists\
    \ y => x == y)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   not a legal formal parameter\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsrg9ufk_.scala:10:55 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        l1 diff l2 filterNot (\e[36mx\e[0m => l2 exists\
    \ y => x == y)\n\e[31m\e[31m   |\e[0m                                        \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \                 Not found: y\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var list = l1.toSet\n        list.addAll(l2)\n\
    \        list = list.sortWith(_ < _)\n        val list2 = list.iterator.toList\n\
    \        val list3 = list2.takeWhile(_ != l2.head)\n        val list4 = list3.drop(1)\n\
    \        val list5 = list4.iterator.toList\n        val list6 = list5.takeWhile(_\
    \ != l1.head)\n        val list7 = list6.drop(1)\n        list7.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi9btqs_q.scala:11:13 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        list.addAll(l2)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue addAll is not a member of Set[Long]\
    \ - did you mean Set[Long].zipAll?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi9btqs_q.scala:12:20\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        list = list.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               value sortWith is not a member of Set[Long]\n2 errors found\n"
  stdout: ''
  timestamp: 1659979361
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // Find the common elements\n        var\
    \ commonElements = l1.filter(x => l2.contains(x))\n        // Find the unique\
    \ elements\n        var uniqueElements = l1.diff(commonElements)\n        // Return\
    \ sorted unique common elements\n        commonElements.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // Sort list before comparing it to avoid\
    \ the problem of comparing non-unique elements.\n        val l3 = (l1 ++ l2).sorted\n\
    \        // Initialize result to empty list.\n        val result = new mutable.LinkedList[Long]()\n\
    \        // Iterate over the lists and add elements that appear in both lists.\n\
    \        for (i <- l3.indices) {\n            if (l3(i) == l3((i + 1).toLong))\
    \ {\n                result.add(i.toLong)\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswie5so7.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.LinkedList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpswie5so7.scala:16:36\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (l3(i)\
    \ == l3((i + \e[31m1\e[0m).toLong)) {\n\e[31m\e[31m   |\e[0m                 \
    \           ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            Found:\
    \    Long\n\e[31m   |\e[0m                            Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var commonList = scala.collection.mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < l1.length || i < l2.length) {\n       \
    \     if (i >= l1.length) commonList += l2.head\n            if (i >= l2.length)\
    \ commonList += l1.head\n            else {\n                if ((l1.head < l2.head)\
    \ ^ (l1.head > l2.head)) commonList += l2.head\n                else commonList\
    \ += l1.head\n            }\n            i += 1\n        }\n        commonList.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ypgajgi.scala:21:27\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        commonList.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.mutable.ListBuffer[Long]\n\e[31m \
    \  |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val (l1, l2) = l1 zip l2\n        val\
    \ m = l1.length\n        val n = l2.length\n        var i : Int = 0\n        var\
    \ j : Int = 0\n        val common = new mutable.HashSet[Long]\n        while (i<m\
    \ && j<n) {\n            if (l1.get(i) == l2.get(j)) {\n                common.add(l1.get(i))\n\
    \                i += 1\n                j += 1\n            } else if( l1.get(i)\
    \ < l2.get(j)) {\n                j += 1\n            } else {\n             \
    \   i += 1\n            }\n        }\n        common.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8btpfqu3.scala:10:13 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m (l1, l2) = l1 zip l2\n\e[31m\e\
    [31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m             Recursive \e[33mvalue\e\
    [0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp8btpfqu3.scala:10:17 ---------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m (l1, l2) = l1 zip l2\n\e[31m\e[31m   |\e[0m   \
    \              ^\e[0m\n\e[31m   |\e[0m                 Recursive \e[33mvalue\e\
    [0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8btpfqu3.scala:15:25 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mcommon\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val l = l1.distinct\n        val l2 =\
    \ l2.distinct\n        if (l.isEmpty) l2\n        else l.intersect(l2).distinct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmht6gbfz.scala:11:17 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36ml2\e[0m = l2.distinct\n\e\
    [31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35ml2\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979364
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // Solution 1: find all elements that\
    \ are in both lists\n        // >>> common([1, 2, 5, 8], [2, 3, 5])\n        //\
    \ (2, 3)\n        val commonSet = l1.intersect(l2).filterNot(_ == l1.head).filterNot(_\
    \ == l2.head)\n        // Solution 2: return unique elements\n        // >>> common([1,\
    \ 2, 5, 8], [2, 3, 5])\n        // (2, 3)\n        commonSet.distinct\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph5ler4hm.scala:20)\n\tat Problem.main(tmph5ler4hm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val set1 = mutable.HashSet[Long]()\n \
    \       val set2 = mutable.HashSet[Long]()\n        l1.foreach{ x => set1 += x}\n\
    \        l2.foreach{ x => set2 += x}\n        set1.intersect(set2).toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8h705uxh.scala:10:19 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mset1\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8h705uxh.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val common = l1 match {\n            case\
    \ x :: xs =>\n                val y = l2 match {\n                    case xs\
    \ :: ys =>\n                        common(xs, ys)\n                    case _\
    \ => false\n                }\n                if (y) x\n                else\
    \ false\n            case _ => false\n        }\n        if (common) l1 else l2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpidqtz0zv.scala:14:24 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                        common(xs, ys)\n\e[31m\e[31m\
    \   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                    \
    \    Recursive \e[33mvalue\e[0m \e[35mcommon\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpidqtz0zv.scala:21:12 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (common) l1 \e[33melse\e[0m l2\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    (common : AnyVal)\n\e[31m   |\e[0m            Required: Boolean\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val set1 : mutable.Set[Long] = new mutable.HashSet[Long]()\n\
    \        val set2 : mutable.Set[Long] = new mutable.HashSet[Long]()\n        l1.foreach\
    \ {\n            x =>\n            if (set1.add(x)) {\n                set2.add(x)\n\
    \            }\n        }\n        set1.diff(set2).map(x => l1.filter(_ != x)).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpubnspynq.scala:10:19 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mset1\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpubnspynq.scala:10:43\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mset1\e[0m : mutable.Set[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpubnspynq.scala:11:19\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mset2\e[0m : mutable.Set[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpubnspynq.scala:11:43 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                           ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659979366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        def i1(xs: Int) : Int = {\n          \
    \  val n = xs.length\n            if(n == 0)\n                0\n            else\n\
    \                xs(0).toLong * xs(1) + i1(xs.drop(1))\n        }\n        def\
    \ i2(xs: Int) : Int = {\n            val n = xs.length\n            if(n == 0)\n\
    \                0\n            else\n                xs(0).toLong * xs(1) + i2(xs.drop(1))\n\
    \        }\n        val a = l1.foldLeft(mutable.ArrayBuffer.empty[Long])((a, x)\
    \ => if (a.isEmpty || a.last.compareTo(x) == 0)\n            a :+ x\n        else\n\
    \            a)\n        val b = l2.foldLeft(mutable.ArrayBuffer.empty[Long])((b,\
    \ x) => if (b.isEmpty || b.last.compareTo(x) == 0)\n            b :+ x\n     \
    \   else\n            b)\n        val ac = a.toList\n        val bc = b.toList\n\
    \        ac.flatMap{x => bc.map{y =>\n            val xi = i1(x).toInt\n     \
    \       val yi = i1(y).toInt\n            if (xi != yi)\n                (xi ->\
    \ yi)\n        }.filter(_._1 != _._1).sortBy(_._1).map(_._2)}.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp36azxs0j.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mval\e[0m \e[36mn\e[0m = xs.length\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \               value length is not a member of Int\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmp36azxs0j.scala:15:16 -----------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m                xs(\e[31m0\e[0m).toLong * xs(\e[31m1\e[0m) + i1(xs.drop(\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                ^^\e[0m\n\e[31m   |\e[0m  \
    \              \e[33mparameter\e[0m \e[35mxs\e[0m does not take parameters\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp36azxs0j.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m\
    \ \e[36mn\e[0m = xs.length\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value length is not a member of Int\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmp36azxs0j.scala:22:16 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                xs(\e[31m0\e[0m).toLong * xs(\e[31m1\e\
    [0m) + i2(xs.drop(\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                ^^\e[0m\n\
    \e[31m   |\e[0m                \e[33mparameter\e[0m \e[35mxs\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp36azxs0j.scala:24:28\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36ma\e[0m = l1.foldLeft(mutable.ArrayBuffer.empty[\e[35mLong\e[0m])((\e[36ma\e\
    [0m, \e[36mx\e[0m) => \e[33mif\e[0m (a.isEmpty || a.last.compareTo(x) == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp36azxs0j.scala:24:77 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = l1.foldLeft(mutable.ArrayBuffer"
  stdout: ''
  timestamp: 1659979372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 ++ l2.filter(x => l1.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfk0qu8hj.scala:13)\n\tat Problem.main(tmpfk0qu8hj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val li : List[Long] = l1 ++ l2\n     \
    \   li.foldLeft[List[Long]](List[Long]())((a, b) => {\n            if (a contains\
    \ b) {\n                a\n            } else {\n                b::a\n      \
    \      }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpltoz__8u.scala:20)\n\tat Problem.main(tmpltoz__8u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val s1 = l1 ++ l2\n        val s0 = l1\
    \ -- l2\n        val set1 = new mutable.HashSet[Long](l1)\n        val set0 =\
    \ new mutable.HashSet[Long](l0)\n        s1.filter(x => set1.remove(x))\n    \
    \        .filter(x => set0.remove(x))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf7yc9i6s.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36ms0\e[0m = l1 -- l2\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^\e[0m\n\e[31m   |\e[0m                 value\
    \ -- is not a member of List[Long]\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf7yc9i6s.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mset1\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m](l1)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpf7yc9i6s.scala:13:23 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mset0\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m](l0)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val l = new HashSet(l1 ++ l2)\n      \
    \  l.reverse.toList\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpcx_j4msf.scala:10:20 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = \e[33mnew\e[0m\
    \ \e[35mHashSet\e[0m(l1 ++ l2)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mconstructor\e\
    [0m \e[35mHashSet\e[0m in \e[33mclass\e[0m \e[35mHashSet\e[0m with types\n\e[31m\
    \   |\e[0m [A](): scala.collection.mutable.HashSet[A]\n\e[31m   |\e[0m [A]\n\e\
    [31m   |\e[0m  (initialCapacity: Int, loadFactor: Double): \n\e[31m   |\e[0m \
    \   scala.collection.mutable.HashSet[A]\n\e[31m   |\e[0mmatch arguments (List[Long])\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val common = new mutable.ListBuffer[Long]()\n\
    \        for (a <- l1) {\n            for (b <- l2) {\n                if (a ==\
    \ b) {\n                    common += a\n                }\n            }\n  \
    \      }\n        common.distinct\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsc4lq_lw.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcommon\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 ++ l2.filterNot(_ == l1.head).distinct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2lo5ynb2.scala:13)\n\tat Problem.main(tmp2lo5ynb2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val m = l1.length\n        val n = l2.length\n\
    \        val l3 = new ListBuffer[Long]()\n        var i : Int = 0\n        var\
    \ j : Int = 0\n        while (i < m && j < n) {\n            if (l1(j) < l2(m))\
    \ {\n                l3 += l1(j)\n                i += 1\n            } else if\
    \ (l1(j) > l2(m)) {\n                l3 += l2(m)\n                j += 1\n   \
    \         } else {\n                l3 += l1(j)\n                i += 1\n    \
    \            j += 1\n            }\n        }\n        if (i < m) {\n        \
    \    l3 += l1(j)\n        }\n        if (j < n) {\n            l3 += l2(m)\n \
    \       }\n        l3.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 7\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.common(tmpke83m113.scala:16)\n\tat Problem$.main(tmpke83m113.scala:37)\n\
    \tat Problem.main(tmpke83m113.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val sortedList1 = l1.sortWith(_ < _)\n\
    \        val sortedList2 = l2.sortWith(_ < _)\n        if (sortedList1 == sortedList2)\
    \ sortedList1\n        else sortedList1.filter(_ == sortedList2.min) ++ sortedList2.filter(_\
    \ == sortedList1.min)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph3pve39d.scala:16)\n\tat Problem.main(tmph3pve39d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // Sort the two lists first\n        def\
    \ compare(l1 : List[Long], l2 : List[Long]) : Int = {\n            if (l1.length\
    \ == l2.length) l1 compareTo l2\n            else (l2.length, l1.length) match\
    \ {\n                case (_, 0) => -1\n                case (_, 1) => 0\n   \
    \             case (x, y) => (l1.head < l2.head) ? -1 : 1\n            }\n   \
    \     }\n        l1.sortBy(compare(l1, l2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp80vwcmxg.scala:12:43 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (l1.length == l2.length) l1\
    \ compareTo l2\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue compareTo is not a member of List[Long], but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe\
    \ following import might make progress towards fixing the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp80vwcmxg.scala:16:51 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m (x, y) => (l1.head <\
    \ l2.head) ? -\e[31m1\e[0m : \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                  ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                value ? is not a member of Boolean\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp80vwcmxg.scala:19:25 --------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        l1.sortBy(compare(l1, l2))\n\e[31m\e[31m   |\e[0m     \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:  \
    \  Int\n\e[31m   |\e[0m                  Required: Long => Any\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmp80vwcmxg.scala:19:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        l1.sortBy(compare(l1, l2))\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659979373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val (common, other) = (l1 diff l2, l2\
    \ diff l1)\n        common ++ other\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy6o7pol4.scala:14)\n\tat Problem.main(tmpy6o7pol4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val a = {\n            val a = l1.toSet\n\
    \            val b = l2.toSet\n            a.intersect(b)\n        }\n\n     \
    \   val b = {\n            val a = l2.toSet\n            val b = l1.toSet\n  \
    \          a.intersect(b)\n        }\n        a.union(b)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbg8ymx7k.scala:21:15\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        a.union(b)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e\
    [31mSet\e[0m[Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e[0m[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val commonSet = mutable.HashSet[Long]()\n\
    \        l1.foreach(c => commonSet.add(c))\n        l2.foreach(c => commonSet.add(c))\n\
    \        commonSet.filter(_ != 0l).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6gq2e9my.scala:10:24 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcommonSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 ++ l2.toSet.toList.sortWith( (a,b)\
    \ => a > b )\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7kcvy11n.scala:13)\n\tat Problem.main(tmp7kcvy11n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        if (l1.isEmpty) return l2\n        if\
    \ (l2.isEmpty) return l1\n        if (l1.head == l2.head) common(l1.tail, l2.tail)\n\
    \        else common(l1, l2.tail)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk1i6maoo.scala:16)\n\tat Problem.main(tmpk1i6maoo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        if (l1 == null || l2 == null) return l1\n\
    \        if (l1.length == 0) return l2\n        if (l2.length == 0) return l1\n\
    \        val l1set = l1.toSet\n        val l2set = l2.toSet\n        if (l1set\
    \ intersect l2set) return l1\n        if (l1set diff l2set) return l2\n      \
    \  l1set diff l2set\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy9sleluk.scala:15:12\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (l1set\
    \ intersect l2set) \e[33mreturn\e[0m l1\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Set[Long]\n\e[31m   |\e[0m         \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy9sleluk.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (l1set\
    \ diff l2set) \e[33mreturn\e[0m l2\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Set[Long]\n\e[31m   |\e[0m         \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy9sleluk.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        l1set diff l2set\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    \e[1m\e[31mSet\e[0m[Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e\
    [0m[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val l3 = new mutable.HashSet[Long]()\n\
    \        l1 foreach { x => l3.add(x) }\n        l2 foreach { x => l3.add(x) }\n\
    \        l3.toList filter (x => l2.contains(x)) sortWith { x => l1.indexOf(x)\
    \ } map { x => x }.toList\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdvcpk2xj.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ml3\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1.foldLeft(l2) ((acc, elem) => (elem\
    \ :: acc).distinct)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy2p9f4bj.scala:13)\n\tat Problem.main(tmpy2p9f4bj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        if (l1.length <= 0) l2 else common(l2,\
    \ l1.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdi1fyskd.scala:13)\n\tat Problem.main(tmpdi1fyskd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979377
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var ans = ListBuffer[Long]()\n       \
    \ for (x <- l1 diff l2) {\n            ans += x\n        }\n        ans.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxp6p9dmg.scala:17)\n\tat Problem.main(tmpxp6p9dmg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val set = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set.add(x.toLong))\n        l2.foreach(x => set.add(x.toLong))\n\
    \        set.distinct\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsayf839v.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.HashSet[Long]()\n\
    \        l1 foreach { x => if (result.contains(x)) x else result += x }\n    \
    \    l2 foreach { x => if (result.contains(x)) x else result += x }\n        result.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6qkj2pdq.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        def removeIfMatched(lst : List[Long],\
    \ toRemove : List[Long]) = {\n            if (lst.size <= toRemove.size) return\
    \ lst\n            if (toRemove.size <= lst.size) return toRemove\n          \
    \  if (toRemove.isEmpty) return lst\n            if (lst.isEmpty || toRemove.isEmpty)\
    \ return toRemove\n            if (lst.toSet.intersect(toRemove.toSet).size !=\
    \ toRemove.size)\n                return removeIfMatched(lst.tail, toRemove.tail)\n\
    \            if (lst.toSet.intersect(toRemove.toSet).size == toRemove.size)\n\
    \                return removeIfMatched(lst.tail, removeIfMatched(lst.tail, toRemove.tail))\n\
    \            return removeIfMatched(lst.tail, removeIfMatched(lst.toList, toRemove.tail))\n\
    \        }\n        var common = removeIfMatched(l1, l2)\n        var commons\
    \ = Set[Long]()\n        commons ++= l1 ++ l2\n        while (l1.nonEmpty || l2.nonEmpty)\
    \ {\n            common ++= removeIfMatched(common.toList, commons.toList)\n \
    \           commons += l1.head ++ l2.head\n            common = removeIfMatched(l1.tail,\
    \ l2.tail)\n            commons ++= l1.head ++ l2.head\n        }\n        common.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E089] Syntax Error: /tmp/tmphi6xafd6.scala:11:43 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (lst.size <= toRemove.size)\
    \ \e[33mreturn\e[0m lst\n\e[31m\e[31m   |\e[0m                               \
    \            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \e[33mmethod\e[0m \e[35mremoveIfMatched\e\
    [0m has a return statement; it needs a result type\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E089] Syntax Error: /tmp/tmphi6xafd6.scala:12:43 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (toRemove.size <= lst.size)\
    \ \e[33mreturn\e[0m toRemove\n\e[31m\e[31m   |\e[0m                          \
    \                 ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \e[33mmethod\e[0m \e\
    [35mremoveIfMatched\e[0m has a return statement; it needs a result type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E089] Syntax Error: /tmp/tmphi6xafd6.scala:13:34 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (toRemove.isEmpty) \e[33mreturn\e\
    [0m lst\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m   \e[33mmethod\e[0m \e[35mremoveIfMatched\e[0m has a return statement;\
    \ it needs a result type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E089] Syntax Error:\
    \ /tmp/tmphi6xafd6.scala:14:49 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m            \e[33mif\e[0m (lst.isEmpty || toRemove.isEmpty) \e[33mreturn\e\
    [0m toRemove\n\e[31m\e[31m   |\e[0m                                          \
    \       ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \e[33mmethod\e[0m \e[35mremoveIfMatched\e\
    [0m has a return statement; it needs a result type\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E089] Syntax Error: /tmp/tmphi6xafd6.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mreturn\e[0m removeIfMatched(lst.tail,\
    \ toRemove.tail)\n\e[31m\e[31m   |\e[0m                ^^^^^^^"
  stdout: ''
  timestamp: 1659979380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        //We use hash set so that order does not\
    \ matter\n        var hSet = mutable.HashSet[Long]()\n        hSet ++= l1\n  \
    \      hSet ++= l2\n        hSet.filter(x => l1.contains(x) || l2.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcmhmsrnd.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mhSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 ::: l2\n        .groupBy(x => x)\n\
    \        .mapValues(_.size)\n        .filter(_._2 > 1)\n        .keys\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfq5zwphw.scala:10:11 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        l1 ::: l2\n\e[31m\e[31m   |\e[0m           ^\e\
    [0m\n\e[31m   |\e[0mvalue ::: is not a member of Iterable[Long] - did you mean\
    \ Iterable[Long].++:?\n\e[31m11 |\e[0m        .groupBy(\e[36mx\e[0m => x)\n\e\
    [31m12 |\e[0m        .mapValues(_.size)\n\e[31m13 |\e[0m        .filter(_._2 >\
    \ \e[31m1\e[0m)\n\e[31m14 |\e[0m        .keys\n1 error found\n"
  stdout: ''
  timestamp: 1659979379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val a = l1.toSet.intersect(l2.toSet)\n\
    \        val b = l2.toSet.intersect(l1.toSet)\n        if (b.isEmpty) a\n    \
    \    else if (a.isEmpty) b\n        else a union b\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpka9d6ev7.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (b.isEmpty)\
    \ a\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m     \
    \                  Found:    (a : Set[Long])\n\e[31m   |\e[0m                \
    \       Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpka9d6ev7.scala:13:28 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (a.isEmpty) b\n\e[31m\e[31m   |\e\
    [0m                            ^\e[0m\n\e[31m   |\e[0m                       \
    \     Found:    (b : Set[Long])\n\e[31m   |\e[0m                            Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpka9d6ev7.scala:14:13\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m a union\
    \ b\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \      Found:    \e[1m\e[31mSet\e[0m[Long]\n\e[31m   |\e[0m             Required:\
    \ \e[1m\e[32mList\e[0m[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // Sort the lists.\n        l1 = l1.sorted\n\
    \        l2 = l2.sorted\n        \n        // Return sorted unique common elements\
    \ for two lists.\n        if (l1.isEmpty) l2\n        else if (l2.isEmpty) l1\n\
    \        else if (l1.head == l2.head) common(l1.tail, l2.tail)\n        else common(l1,\
    \ l2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp1oeqmttn.scala:11:11 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        l1 = l1.sorted\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment to val l1\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp1oeqmttn.scala:12:11 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        l2 = l2.sorted\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment to val l2\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var l3 = [(l1.head + l2.head)]\n     \
    \   while(l1.tail != Nil || l2.tail != Nil){\n            val m = (l1.tail.head\
    \ + l2.tail.head) max l3.head\n            if(m==0){\n                l3.remove(l3.head)\n\
    \            } else {\n                l3.append(m)\n            }\n         \
    \   l1 = l1.tail\n            l2 = l2.tail\n        }\n        if(l1.tail == Nil\
    \ && l2.tail == Nil){\n            return Nil\n        } else {\n            return\
    \ l3\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoc79y5xi.scala:10:18 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36ml3\e[0m = [(l1.head + l2.head)]\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   an identifier expected, but '(' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpoc79y5xi.scala:11:0 ----------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mwhile\e[0m(l1.tail != Nil || l2.tail != Nil){\n\e[31m\e\
    [31m   |\e[0m^^^^^\e[0m\n\e[31m   |\e[0m'=>' expected, but 'end of statement'\
    \ found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoc79y5xi.scala:12:57 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = (l1.tail.head\
    \ + l2.tail.head) max l3.head\n\e[31m\e[31m   |\e[0m                         \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue head is not a\
    \ member of Null, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e\
    [0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.list asScalaBuffer\n\e[31m  \
    \ |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoc79y5xi.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m                l3.remove(l3.head)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove\
    \ is not a member of Null, but could be made available as an extension method.\n\
    \e"
  stdout: ''
  timestamp: 1659979386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var l1a = l1\n        var l1b = l1\n \
    \       var l2a = l2\n        var l2b = l2\n        while (l1a.nonEmpty && l2a.nonEmpty)\
    \ {\n            if (l1a(l1a.head) < l2a(l2a.head)) {\n                l1 = l1a.tail\n\
    \                l1a = l1a.head\n            } else {\n                l2 = l2a.tail\n\
    \                l2a = l2a.head\n            }\n        }\n        while (l1b.nonEmpty\
    \ && l2b.nonEmpty) {\n            if (l1b(l1b.head) < l2b(l2b.head)) {\n     \
    \           l1 = l1b\n                l1b = l1b\n            } else {\n      \
    \          l2 = l2b\n                l2b = l2b\n            }\n        }\n   \
    \     (l1a ++ l1b).distinct\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdx9cwq8m.scala:15:24\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (l1a(l1a.head)\
    \ < l2a(l2a.head)) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Found:    Long\n\e[31m   |\e[0m           \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdx9cwq8m.scala:15:40\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (l1a(l1a.head)\
    \ < l2a(l2a.head)) {\n\e[31m\e[31m   |\e[0m                                  \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    Found:  \
    \  Long\n\e[31m   |\e[0m                                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdx9cwq8m.scala:16:19 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                l1 = l1a.tail\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val l1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdx9cwq8m.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                l1a = l1a.head\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                  Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpdx9cwq8m.scala:19:19 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                l2 = l2a.tail\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val l2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdx9cwq8m.scala:20:26\
    \ --------------------\e[0m\e"
  stdout: ''
  timestamp: 1659979384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n      val sortedL1 = l1.sorted\n      val sortedL2\
    \ = l2.sorted\n      val commonElementsSet = new mutable.HashSet[Long]()\n   \
    \   val commonElements = ListBuffer[Long]()\n      var i = 0\n      while (i <\
    \ sortedL1.length && i < sortedL2.length) {\n        val l1Element = sortedL1(i)\n\
    \        val l2Element = sortedL2(i)\n        if (commonElementsSet.contains(l2Element))\
    \ {\n          i += 1\n        } else {\n          commonElementsSet += l2Element\n\
    \          commonElements += l2Element\n          i += 1\n        }\n      }\n\
    \      if (i < sortedL1.length) commonElements += sortedL1(i)\n      if (i < sortedL2.length)\
    \ commonElements += sortedL2(i)\n      commonElements.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2wojxzl3.scala:12:34 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m      \e[33mval\e[0m \e[36mcommonElementsSet\e[0m = \e\
    [33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var commonList = new ListBuffer[Long]()\n\
    \        l1.foreach(element => {\n            if (commonList.contains(element))\
    \ {\n                return\n            } else {\n                commonList\
    \ += element\n            }\n        })\n        l2.foreach(element => {\n   \
    \         if (commonList.contains(element)) {\n                return\n      \
    \      } else {\n                commonList += element\n            }\n      \
    \  })\n        commonList.distinct\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4rv6k0j9.scala:13:16\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                \e[33mreturn\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    Unit\n\e[31m   |\e[0m                Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4rv6k0j9.scala:20:16\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mreturn\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    Unit\n\e[31m   |\e[0m                Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4rv6k0j9.scala:25:19\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        commonList.distinct\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Found:    scala.collection.mutable.ListBuffer[Long]\n\e[31m   |\e[0m       \
    \ Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979384
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val c1 = l1.toSet & l2.toSet\n       \
    \ c1.toList\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ehg8_5s.scala:14)\n\tat Problem.main(tmp5ehg8_5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val num1 = l1.length\n        val num2\
    \ = l2.length\n        var common = List[Long]()\n        var i = 0\n        while\
    \ (i < num1 && i < num2) {\n            if (l1.get(i) eq l2.get(i))\n        \
    \        common ::= l1.get(i)\n            else \n                i += 1\n   \
    \     }\n        if (num1 != num2) common ::= l1.last\n        common\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdyc25b8s.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (l1.get(i) eq l2.get(i))\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m          value\
    \ get is not a member of List[Long] - did you mean l1.seq?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpdyc25b8s.scala:16:23 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m                common ::= l1.get(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value ::= is not a member\
    \ of List[Long] - did you mean List[Long].::?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpdyc25b8s.scala:16:30 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m                common ::= l1.get(i)\n\e[31m\e[31m   |\e[0m          \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0mvalue get is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659979385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val s1 = l1.sorted\n        val s2 = l2.sorted\n\
    \        val r1 = new HashSet[Long]()\n        val r2 = new HashSet[Long]()\n\
    \        for (x <- s1) if (!r1.contains(x)) r1.add(x)\n        for (x <- s2) if\
    \ (!r2.contains(x)) r2.add(x)\n        r1.toList ++ (r2.toList diff r1).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0rbjqd3g.scala:16:37\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        r1.toList ++ (r2.toList\
    \ diff r1).sorted\n\e[31m\e[31m   |\e[0m                                     ^^\e\
    [0m\n\e[31m   |\e[0m                 Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mr1\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mscala.collection.\e[1m\e\
    [31mmutable\e[0m\e[1m\e[31m.\e[0m\e[1m\e[31mHashSet\e[0m[Long]\e[1m\e[31m)\e[0m\n\
    \e[31m   |\e[0m                 Required: scala.collection.\e[1m\e[32mSeq\e[0m[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979384
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val c1 = l1.distinct\n        val c2 =\
    \ l2.distinct\n        val u1 = c1.toSet & c2.toSet\n        if(u1.isEmpty) return\
    \ List() \n        else u1.head :: common(l1.filterNot(_ == u1.head), l2.filterNot(_\
    \ == u1.head))\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpug8z3efm.scala:17)\n\tat Problem.main(tmpug8z3efm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val l = l1.toSet ++ l2.toSet\n       \
    \ l.toList.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvqnmrw17.scala:14)\n\tat Problem.main(tmpvqnmrw17.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val unique = Set[Long](l1, l2).distinct\n\
    \        unique.toList\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_2jddo0.scala:10:31\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36munique\e\
    [0m = Set[\e[35mLong\e[0m](l1, l2).distinct\n\e[31m\e[31m   |\e[0m           \
    \                    ^^\e[0m\n\e[31m   |\e[0m                               Found:\
    \    (l1 : List[Long])\n\e[31m   |\e[0m                               Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_2jddo0.scala:10:35\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36munique\e\
    [0m = Set[\e[35mLong\e[0m](l1, l2).distinct\n\e[31m\e[31m   |\e[0m           \
    \                        ^^\e[0m\n\e[31m   |\e[0m                            \
    \       Found:    (l2 : List[Long])\n\e[31m   |\e[0m                         \
    \          Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var i : Int = 0\n        var j : Int =\
    \ 1\n        var result : List[Long] = Nil\n        var set1 : Set[Long] = Set()\n\
    \        var set2 : Set[Long] = Set()\n\n        while (i < l1.length && j < l2.length)\
    \ {\n            val x = l1.get(i)\n            val y = l2.get(j)\n          \
    \  if (set1.contains(y)) {\n                i += 1\n            } else {\n   \
    \             if (set2.contains(x)) {\n                    j -= 1\n          \
    \      } else {\n                    result = result ::: List(x, y)\n        \
    \        }\n                set1.add(y)\n            }\n            set2.add(x)\n\
    \        }\n\n        if (i < l1.length) {\n            result = result ::: l1.take(i).toList\n\
    \        }\n        if (j < l2.length) {\n            result = result ::: l2.take(j).toList\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1d14pbo0.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mx\e[0m = l1.get(i)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \  value get is not a member of List[Long] - did you mean l1.seq?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp1d14pbo0.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = l2.get(j)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0mvalue get\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659979384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var l3 = (l1.filter(!(l1.contains(_)))\
    \ ++ l2.filter(!(l2.contains(_)))).toSet\n        for(a <- l1.filter(!(l1.contains(_)))\
    \ ++ l2.filter(!(l2.contains(_))) ; b <- l1.filter(!(l1.contains(_))) ++ l2.filter(!(l2.contains(_)))\
    \ ; if (a == b) l3 += a ; else l3 += b) yield l3.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpb25l1glb.scala:11:170 --------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(a <- l1.filter(!(l1.contains(_)))\
    \ ++ l2.filter(!(l2.contains(_))) ; b <- l1.filter(!(l1.contains(_))) ++ l2.filter(!(l2.contains(_)))\
    \ ; \e[33mif\e[0m (a == b) l3 += a ; \e[33melse\e[0m l3 += b) \e[33myield\e[0m\
    \ l3.toList\n\e[31m\e[31m   |\e[0m                                           \
    \                                                                            \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                      expression expected but \e[31melse\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb25l1glb.scala:10:28\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e\
    [36ml3\e[0m = (l1.filter(!(l1.contains(_))) ++ l2.filter(!(l2.contains(_)))).toSet\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        value unary_! is not a member of Long => Boolean\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb25l1glb.scala:10:60 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36ml3\e[0m = (l1.filter(!(l1.contains(_)))\
    \ ++ l2.filter(!(l2.contains(_)))).toSet\n\e[31m\e[31m   |\e[0m              \
    \                                              ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        value unary_! is not a member of Long => Boolean\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb25l1glb.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(a <- l1.filter(!(l1.contains(_)))\
    \ ++ l2.filter(!(l2.contains(_))) ; b <- l1.filter(!(l1.contains(_))) ++ l2.filter(!(l2.contains(_)))\
    \ ; \e[33mif\e[0m (a == b) l3 += a ; \e[33melse\e[0m l3 += b) \e[33myield\e[0m\
    \ l3.toList\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value unary_! is not a member of Long\
    \ => Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb2"
  stdout: ''
  timestamp: 1659979387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var n1 = l1.size\n        var n2 = l2.size\n\
    \        var common = new ListBuffer[Long]()\n        while (n1 >= 0 && n2 >=\
    \ 0) {\n            if (l1.get(n1) == l2.get(n2)) {\n                common.append(l1.get(n1))\n\
    \                n1--\n                n2--\n            } else if (l1.get(n1)\
    \ < l2.get(n2)) {\n                n1--\n            } else {\n              \
    \  n2--\n            }\n        }\n        common.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp85eowa9q.scala:17:20 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                n2--\n\e[31m\e[31m   |\e[0m         \
    \           ^\e[0m\n\e[31m   |\e[0m                    expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp85eowa9q.scala:19:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                n1--\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmp85eowa9q.scala:21:20 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                n2--\n\e[31m\e[31m   |\e[0m         \
    \           ^\e[0m\n\e[31m   |\e[0m                    expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp85eowa9q.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m\
    \ (l1.get(n1) == l2.get(n2)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m          value get is not a member of List[Long] - did you\
    \ mean l1.seq?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp85eowa9q.scala:15:33\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m                common.append(l1.get(n1))\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ get is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp85eowa9q.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                n1--\n\e\
    [31m\e[31m  "
  stdout: ''
  timestamp: 1659979387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // Use a hash set for O(n) lookups and\
    \ O(n) insertions.\n        // This is also called a perfect hash, but we assume\
    \ that all elements\n        // are unique. \n        val h1 = new mutable.HashSet[Long]()\n\
    \        val h2 = new mutable.HashSet[Long]()\n        // Add the elements in\
    \ the list1 to the hash set h1\n        l1.foreach { x => h1.add(x) }\n      \
    \  // Add the elements in the list2 to the hash set h2\n        l2.foreach { x\
    \ => h2.add(x) }\n        // Now, h1 contains all elements in both lists\n   \
    \     // And h2 contains all elements in only list1\n        // Now, we are only\
    \ left with elements that are in both lists and h1 contains all\n        // elements\
    \ that are in list2 and h2 contains all elements that are in list1\n        //\
    \ Now, sort all the elements that are in both lists and h1 and h2 \n        //\
    \ and return the sorted unique common elements\n        // This assumes that there\
    \ are no duplicate elements in list1 and list2\n        l1.toSet.intersect(l2).toList.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphe6mtu_y.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mh1\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphe6mtu_y.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mh2\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphe6mtu_y.scala:26:27 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        l1.toSet.intersect(l2).toList.sort\n\e[31m\e\
    [31m   |\e[0m                           ^^\e[0m\n\e[31m   |\e[0m             \
    \              Found:    (l2 : List[Long])\n\e[31m   |\e[0m                  \
    \         Required: scala.collection.Set[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // TODO: Write me!\n        val l1 = l1.toSet\n\
    \        val l2 = l2.toSet\n        l1.intersection(l2).sort\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjdt7q9a7.scala:11:17 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36ml1\e[0m = l1.toSet\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35ml1\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpjdt7q9a7.scala:12:17 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml2\e[0m = l2.toSet\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35ml2\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var l3 = (0 until l1.length) map (x =>\
    \ 0 until l2.length) map (x => new Pair(l1.get(x), l2.get(x))) toList\n      \
    \  l3.sort { x => x._1._1 < x._1._2 }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpldvz9zrk.scala:10:80 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36ml3\e[0m = (\e[31m0\e[0m\
    \ until l1.length) map (\e[36mx\e[0m => \e[31m0\e[0m until l2.length) map (\e\
    [36mx\e[0m => \e[33mnew\e[0m \e[35mPair\e[0m(l1.get(x), l2.get(x))) toList\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                      ^^^^\e[0m\n\e[31m   |\e[0m                            \
    \                        Not found: type Pair\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpldvz9zrk.scala:11:8 ----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        l3.sort { \e[36mx\e[0m => x._1._1 < x._1._2 }\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Recursive \e[33mvariable\e\
    [0m \e[35ml3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpldvz9zrk.scala:12:5 ---------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var list : List[Long] = Nil\n        for\
    \ (i <- l1 diff l2) {\n            list = i :: list\n        }\n        list.sortWith((x,\
    \ y) => x < y)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptkfybi4z.scala:17)\n\tat Problem.main(tmptkfybi4z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979390
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val common = l1 ++ l2 diff l1\n      \
    \  common.toList.sortWith(_ > _)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0g7g7ago.scala:14)\n\tat Problem.main(tmp0g7g7ago.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        def helper(l1 : List[Long], l2 : List[Long],\
    \ i : Int, result : List[Long]) =\n            if (i >= l1.length && i >= l2.length)\
    \ return result\n            else if (i >= l1.length) helper(l2, l1, i + 1, result\
    \ :+ l1(i))\n            else helper(l1, l2, i + 1, result :+ l1(i))\n       \
    \ helper(l1, l2, 0, Nil)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E089] Syntax Error: /tmp/tmpwniyia23.scala:11:50 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (i >= l1.length && i >= l2.length)\
    \ \e[33mreturn\e[0m result\n\e[31m\e[31m   |\e[0m                            \
    \                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \e[33mmethod\e\
    [0m \e[35mhelper\e[0m has a return statement; it needs a result type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E044] Cyclic Error: /tmp/tmpwniyia23.scala:12:37 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (i >= l1.length)\
    \ helper(l2, l1, i + \e[31m1\e[0m, result :+ l1(i))\n\e[31m\e[31m   |\e[0m   \
    \                                  ^\e[0m\n\e[31m   |\e[0m                 Overloaded\
    \ or recursive \e[33mmethod\e[0m \e[35mhelper\e[0m needs return type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E044] Cyclic Error: /tmp/tmpwniyia23.scala:13:17 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33melse\e[0m helper(l1, l2, i + \e[31m1\e\
    [0m, result :+ l1(i))\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m  \
    \ |\e[0m                 Overloaded or recursive \e[33mmethod\e[0m \e[35mhelper\e\
    [0m needs return type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        def union(xs: List[Long], ys: List[Long])\
    \ : List[Long] = {\n            var x : List[Long] = xs\n            var y : List[Long]\
    \ = ys\n            while(x.nonEmpty) {\n                x ::= x.head\n      \
    \          y.foreach(y.head :: _)\n            }\n            xs ::= y\n     \
    \   }\n\n        def find(xs : List[Long], ys : List[Long]) : List[Long] = {\n\
    \            var x : List[Long] = xs\n            var y : List[Long] = ys\n  \
    \          var z: List[Long] = Nil\n            while(x.nonEmpty) {\n        \
    \        x ::= x.head\n                y.foreach(y.head :: _)\n              \
    \  if(x.nonEmpty) {\n                    if(x.head == y.head) {\n            \
    \            z ::= x.head\n                    }\n                }\n        \
    \    }\n            xs ::= z\n        }\n\n        def findFirst(xs : List[Long],\
    \ ys : List[Long]) : List[Long] = {\n            var x : List[Long] = xs\n   \
    \         var y : List[Long] = ys\n            var z: List[Long] = Nil\n     \
    \       while(x.nonEmpty) {\n                x ::= x.head\n                y.foreach(y.head\
    \ :: _)\n                if(x.nonEmpty) {\n                    if(x.head == y.head)\
    \ {\n                        z ::= x.head\n                        x.drop(1).foreach(x\
    \ :: _)\n                    }\n                }\n            }\n           \
    \ xs ::= z\n        }\n        if(l1.isEmpty) {\n            return l2\n     \
    \   }\n        if(l2.isEmpty) {\n            return l1\n        }\n        val\
    \ l1m = l1.groupBy(x => x).map(x => (x._1, x._2.toList))\n        val l2m = l2.groupBy(x\
    \ => x).map(x => (x._1, x._2.toList))\n        val l3 = union(l1m, l2m)\n    \
    \    l3.flatten\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnkoz8_9h.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                y.foreach(y.head :: _)\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^\e[0m\n\e[31m   |\e[0m        \
    \                         value :: is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpnkoz8_9h.scala:17:15 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            xs ::= y\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value ::= is not a member of List[Long] - did you\
    \ mean xs.::?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnkoz8_9h.scala:26:33\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                y.foreach(y.head\
    \ :: _)\n\e[31m\e[31m   |\e[0m                                 ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value :: is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnkoz8_9h.scala:33:15 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            xs ::= z\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m           value ::= is not a member of List[Long]\
    \ - did you mean xs.::?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnkoz8_9h.scala:42:33\
    \ ------------------------\e[0m\e[0m\n\e[31m42 |\e[0m                y.foreach(y.head\
    \ :: _)\n\e[31m\e[31m   |\e[0m                                 ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value :: is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnkoz8_9h.scala:46:44 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m                        x.drop(\e[31m1\e[0m).foreach(x\
    \ :: _)\n\e[31m\e[31m   |\e[0m                                            ^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value :: is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnkoz8_9h.scala:50:15\
    \ ------------------------\e[0m\e[0m\n\e[31m50 |\e[0m            xs ::= z\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m           value ::=\
    \ is not a member of List[Long] - did you mean xs.::?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpnkoz8_9h.scala:60:23 "
  stdout: ''
  timestamp: 1659979392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var l3 = l1;\n        var l4 = l2;\n \
    \       while (l3.nonEmpty || l4.nonEmpty) {\n            var common = l3.find(x\
    \ => !l4.exists(y => x == y)) match {\n                case None => l4.toList;\n\
    \                case Some(element) => element :: common;\n            }\n   \
    \         l3.remove(common);\n            l4.remove(common);\n        }\n    \
    \    l3.toList\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcqd_rxkv.scala:15:49 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mcase\e[0m Some(element) => element\
    \ :: common;\n\e[31m\e[31m   |\e[0m                                          \
    \       ^\e[0m\n\e[31m   |\e[0m                                    Recursive \e\
    [33mvariable\e[0m \e[35mcommon\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpcqd_rxkv.scala:17:15 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            l3.remove(common);\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a member of List[Long]\
    \ - did you mean List[Long].reduce?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcqd_rxkv.scala:18:15\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            l4.remove(common);\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is\
    \ not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659979392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        if (l1.isEmpty) {\n            return\
    \ l2\n        }\n        if (l2.isEmpty) {\n            return l1\n        }\n\
    \        if (l1.head == l2.head) {\n            return common(l1.tail, l2.tail)\n\
    \        }\n        val result = new mutable.ListBuffer[Long]()\n        val commonElement\
    \ = new mutable.HashSet[Long]()\n        l1.foreach { e =>\n            commonElement.add(e)\n\
    \        }\n        l2.foreach { e =>\n            if (!commonElement.contains(e))\
    \ {\n                commonElement += e\n            }\n        }\n        result.addAll(commonElement)\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw1lvs1fr.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw1lvs1fr.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mcommonElement\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val commonSet = l1 ++ l2 diff l1 diff\
    \ l2\n        commonSet.sort\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp11zd0czs.scala:11:18 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        commonSet.sort\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort is not a member of List[Long]\
    \ - did you mean commonSet.sortBy?\n1 error found\n"
  stdout: ''
  timestamp: 1659979392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        def find(l1 : List[Long], l2 : List[Long],\
    \ result : List[Long]) : List[Long] = {\n            def findL(l1 : List[Long],\
    \ l2 : List[Long], result : List[Long]) : List[Long] = {\n                if (l1.isEmpty)\
    \ result\n                else if (l2.isEmpty) result ::: l1\n               \
    \ else if (l1.head == l2.head) findL(l1.tail, l2.tail, result ::: l1)\n      \
    \          else findL(l1, l2.tail, result ::: l2)\n            }\n           \
    \ findL(l1, l2, Nil)\n        }\n        find(l1, l2, Nil)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgfv2t6gu.scala:22)\n\tat Problem.main(tmpgfv2t6gu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val set1 = new mutable.HashSet[Long](l1.toArray)\n\
    \        val set2 = new mutable.HashSet[Long](l2.toArray)\n        set1.retainAll(set2)\n\
    \        set1.toList\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ijbdvkg.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mset1\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m](l1.toArray)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ijbdvkg.scala:11:23\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mset2\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m](l2.toArray)\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val s1 = l1.sortBy(_.toInt)\n        val\
    \ s2 = l2.sortBy(_.toInt)\n        val intersection = s2.filter(x => s1.exists(y\
    \ => x == y))\n        val difference = s2.filter(x => !s1.exists(y => x == y))\n\
    \        (intersection ++ difference)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv9dglesl.scala:17)\n\tat Problem.main(tmpv9dglesl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]\n\
    \        l1.foreach(x => if (l2.contains(x)) result += x else None)\n        result.sortWith((x,y)\
    \ => x.toLong > y.toLong)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus92hs4y.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m               \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val uniqueList1 = unique(l1)\n       \
    \ val uniqueList2 = unique(l2)\n        uniqueList1.intersect(uniqueList2).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvbdywclu.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36muniqueList1\e[0m = unique(l1)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        Not found: unique\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpvbdywclu.scala:11:26 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36muniqueList2\e[0m = unique(l2)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        Not found: unique\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val set1 = new HashSet[Long](l1)\n   \
    \     val set2 = new HashSet[Long](l2)\n        set1.intersect(set2)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp7d0vtvjb.scala:10:23 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mset1\e[0m = \e[33mnew\e\
    [0m \e[35mHashSet\e[0m[\e[35mLong\e[0m](l1)\n\e[31m\e[31m   |\e[0m           \
    \            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mconstructor\e[0m \e[35mHashSet\e[0m in \e[33mclass\e[0m \e[35mHashSet\e\
    [0m with types\n\e[31m   |\e[0m [A](): scala.collection.mutable.HashSet[A]\n\e\
    [31m   |\e[0m [A]\n\e[31m   |\e[0m  (initialCapacity: Int, loadFactor: Double):\
    \ \n\e[31m   |\e[0m    scala.collection.mutable.HashSet[A]\n\e[31m   |\e[0mmatch\
    \ arguments ((l1 : List[Long]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp7d0vtvjb.scala:11:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e\
    [0m \e[36mset2\e[0m = \e[33mnew\e[0m \e[35mHashSet\e[0m[\e[35mLong\e[0m](l2)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mconstructor\e[0m \e[35mHashSet\e[0m\
    \ in \e[33mclass\e[0m \e[35mHashSet\e[0m with types\n\e[31m   |\e[0m [A](): scala.collection.mutable.HashSet[A]\n\
    \e[31m   |\e[0m [A]\n\e[31m   |\e[0m  (initialCapacity: Int, loadFactor: Double):\
    \ \n\e[31m   |\e[0m    scala.collection.mutable.HashSet[A]\n\e[31m   |\e[0mmatch\
    \ arguments ((l2 : List[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1659979392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val (c1, l1) = l1.sortWith(_ < _).span(_\
    \ == l2.head)\n        val (c2, l2) = l2.sortWith(_ < _).span(_ == l1.head)\n\
    \        c1.takeWhile(x => !l2.exists(y => x == y)).toList ::: c2.takeWhile(x\
    \ => !l1.exists(y => x == y)).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwp0t4gtx.scala:10:17 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m (c1, l1) = l1.sortWith(_ < _).span(_\
    \ == l2.head)\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m \
    \                Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwp0t4gtx.scala:10:13 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m (c1, l1) = l1.sortWith(_ < _).span(_\
    \ == l2.head)\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m     \
    \        Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwp0t4gtx.scala:11:17 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m (c2, l2) = l2.sortWith(_ < _).span(_\
    \ == l1.head)\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m \
    \                Recursive \e[33mvalue\e[0m \e[35m$2$\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwp0t4gtx.scala:11:13 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m (c2, l2) = l2.sortWith(_ < _).span(_\
    \ == l1.head)\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m     \
    \        Recursive \e[33mvalue\e[0m \e[35m$2$\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659979392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var a : Set[Long] = new mutable.HashSet[Long]()\n\
    \        var b : Set[Long] = new mutable.HashSet[Long]()\n        var c : Set[Long]\
    \ = new mutable.HashSet[Long]()\n        var d : Set[Long] = new mutable.HashSet[Long]()\n\
    \        var e : Set[Long] = new mutable.HashSet[Long]()\n\n        l1.foreach(x\
    \ => a.add(x))\n        l2.foreach(x => b.add(x))\n\n        for(i <- a to b )\
    \ {\n            if(!c.contains(i)) {\n                c.add(i)\n            \
    \    d += i\n            }\n        }\n\n        for(i <- b to c ) {\n       \
    \     if(!d.contains(i)) {\n                d.add(i)\n                e += i\n\
    \            }\n        }\n\n        e - (a ++ b ++ c ++ d)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg12gtrbr.scala:10:32 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36ma\e[0m : \e[35mSet\e[0m[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpg12gtrbr.scala:11:32 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mb\e[0m : \e[35mSet\e[0m[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpg12gtrbr.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mc\e[0m : \e[35mSet\e[0m[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpg12gtrbr.scala:13:32 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36md\e[0m : \e[35mSet\e[0m[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpg12gtrbr.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36me\e[0m : \e[35mSet\e[0m[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1659979397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        if (l1.length != l2.length) throw new\
    \ java.lang.AssertionError(\"Not same length.\")\n        var commonL1 : List[Long]\
    \ = Nil\n        var commonL2 : List[Long] = Nil\n        var i : Int = 0\n  \
    \      val max = l1.length\n        while (i < max) {\n            val el1 = l1.get(i)\n\
    \            val el2 = l2.get(i)\n            if (el1 != el2 && commonL1 == Nil\
    \ && commonL2 == Nil) commonL1 = Nil\n            else if (el1 == el2 && commonL1\
    \ == Nil) commonL1 = el1\n            else if (el1 == el2 && commonL2 == Nil)\
    \ commonL2 = el2\n            else if (el1 != el2 && commonL1 == Nil && commonL2\
    \ == Nil) {\n                commonL1 = List(el1)\n                commonL2 =\
    \ List(el2)\n            }\n            else commonL1 = List(el1) :: commonL1\n\
    \            commonL2 = List(el2) :: commonL2\n            i += 1\n        }\n\
    \        if (commonL1 == Nil && commonL2 == Nil) commonL1 = Nil\n        else\
    \ if (commonL1 == Nil) commonL1 = Nil\n        else if (commonL2 == Nil) commonL2\
    \ = Nil\n        else commonL1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp75q1gz0.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mel1\e[0m = l1.get(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \    value get is not a member of List[Long] - did you mean l1.seq?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpp75q1gz0.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mel2\e[0m = l2.get(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0mvalue get\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp75q1gz0.scala:25:32\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m commonL1\
    \ = List(el1) :: commonL1\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    List[Nothing]\n\e[31m\
    \   |\e[0m                            Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpp75q1gz0.scala:26:27 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            commonL2 = List(el2) :: commonL2\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \             Found:    List[Nothing]\n\e[31m   |\e[0m                       Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp75q1gz0.scala:29:57\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m (commonL1\
    \ == Nil && commonL2 == Nil) commonL1 = Nil\n\e[31m\e[31m   |\e[0m           \
    \                                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                             "
  stdout: ''
  timestamp: 1659979397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // Set l1 to a new Set (O(n), n being\
    \ the number of elements in l1)\n        val set1 = new mutable.HashSet[Long]()\n\
    \        // Loop through l1 and add elements to set1.\n        l1.foreach { elem\
    \ => set1 += elem }\n        // Loop through l2 and add elements to set2.\n  \
    \      l2.foreach { elem => set1 += elem }\n        // Return sorted unique elements\
    \ from set1 & set2\n        set1.toList ++ set2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3rm1x693.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mset1\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // Using Set and intersect to get unique\
    \ common elements\n        val set1 = Set[Long](l1)\n        val set2 = Set[Long](l2)\n\
    \        val common = set1.intersect(set2)\n        val list = l1.filterNot(common\
    \ contains _)\n        val list2 = l2.filterNot(common contains _)\n        if\
    \ (list2.nonEmpty) {\n            common\n        } else {\n            list\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdqthxrv8.scala:11:29\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mset1\e\
    [0m = Set[\e[35mLong\e[0m](l1)\n\e[31m\e[31m   |\e[0m                        \
    \     ^^\e[0m\n\e[31m   |\e[0m                             Found:    (l1 : List[Long])\n\
    \e[31m   |\e[0m                             Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdqthxrv8.scala:12:29 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m = Set[\e[35mLong\e\
    [0m](l2)\n\e[31m\e[31m   |\e[0m                             ^^\e[0m\n\e[31m  \
    \ |\e[0m                             Found:    (l2 : List[Long])\n\e[31m   |\e\
    [0m                             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdqthxrv8.scala:17:12 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            common\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (common : scala.collection.mutable.Set[Long])\n\
    \e[31m   |\e[0m            Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        if (set1.isEmpty) set2\n        else if (set2.isEmpty) set1\n\
    \        else set1 intersect set2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvyjnw9l9.scala:12:26\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (set1.isEmpty)\
    \ set2\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e\
    [0m                          Found:    (set2 : Set[Long])\n\e[31m   |\e[0m   \
    \                       Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvyjnw9l9.scala:13:31 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (set2.isEmpty)\
    \ set1\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    (set1 : Set[Long])\n\e[31m\
    \   |\e[0m                               Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvyjnw9l9.scala:14:13 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m set1 intersect set2\n\e[31m\e\
    [31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \   Found:    \e[1m\e[31mSet\e[0m[Long]\n\e[31m   |\e[0m             Required:\
    \ \e[1m\e[32mList\e[0m[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 ++ l2 filterNot (x => l1 exists (y\
    \ => y == x))\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj69jgbql.scala:13)\n\tat Problem.main(tmpj69jgbql.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979399
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 ++ l2 diff l1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp481jq3p0.scala:13)\n\tat Problem.main(tmp481jq3p0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val commonList = mutable.HashSet[Long]()\n\
    \        for(elm <- l1 ++ l2) {\n            commonList += elm\n        }\n  \
    \      commonList.sortWith((l1, l2) => l1 < l2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplu_9s_1l.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcommonList\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979394
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 ++ l2 filter { x => l1 contains x }\
    \ filter { x => l2 contains x }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgscdrcd4.scala:13)\n\tat Problem.main(tmpgscdrcd4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 ++ l2.distinct -- l1.intersect(l2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv1u6pljs.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        l1 ++ l2.distinct -- l1.intersect(l2)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value --\
    \ is not a member of List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1659979398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val a = new mutable.ArrayBuffer[Long]\n\
    \        val b = new mutable.ArrayBuffer[Long]\n        for(x <- l1) a.add(x)\n\
    \        for(x <- l2) b.add(x)\n        if(a.size == 0) b\n        else if(a.toSet.size\
    \ == b.toSet.size) a.toSet\n        else common(a, b.toSet)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptpdbivbe.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptpdbivbe.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val l3 = l1.flatMap(x => l2.filter(y =>\
    \ x != y))\n        val l4 = l3.distinct\n        val l5 = l3.map(x => x + (l4.count(_\
    \ == x) * l4.count(_ == x) / 2)).toList\n        l5.sortWith(_.compareTo(_) ==\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpksxvt59v.scala:16)\n\tat Problem.main(tmpksxvt59v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979403
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val l3 = (l1 ++ l2) filterNot (l1 contains\
    \ _)\n        l3.sort\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqli4v9xx.scala:11:11 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        l3.sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value sort is not a member of List[Long] - did you mean\
    \ l3.sortBy?\n1 error found\n"
  stdout: ''
  timestamp: 1659979402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        (l1 ++ l2) groupBy (_ % l1.size) mapValues\
    \ (_.toList)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppgm_l720.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        (l1 ++ l2) groupBy (_\
    \ % l1.size) mapValues (_.toList)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[Long, List[Long]]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // sort them and count them\n        val\
    \ l3_sorted       = l1.sorted ++ l2.sorted\n        val l3_sorted_count = l3_sorted.distinct.length\n\
    \        // get the unique items and check their frequency\n        val l3_unique\
    \ = l3_sorted.distinct.filter( x => l3_sorted_count -- l2.count( y => x == y)\
    \ )\n        // sort the unique items and count them\n        val l3_unique_sorted\
    \ = l3_unique.sorted ++ l2.sorted\n        val l3_unique_sorted_count = l3_unique_sorted.distinct.length\n\
    \        // return the unique item\n        l3_unique_sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiynmr5f2.scala:14:72 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml3_unique\e[0m = l3_sorted.distinct.filter(\
    \ \e[36mx\e[0m => l3_sorted_count -- l2.count( \e[36my\e[0m => x == y) )\n\e[31m\e\
    [31m   |\e[0m                                                        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         value -- is not a\
    \ member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659979402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var ret = new ListBuffer[Long]()\n   \
    \     l1.foreach {\n            _ =>\n                ret.append(l2.indexOf(_.toLong))\n\
    \        }\n        ret.distinct\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpi5cpf30n.scala:13:38 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                ret.append(l2.indexOf(_.toLong))\n\e\
    [31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 =>\
    \ _$2.toLong.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi5cpf30n.scala:15:12\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        ret.distinct\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // Solution begins here\n        val m1\
    \ = l1.length\n        val m2 = l2.length\n        val u1 : List[Long] = List(1l)\n\
    \        val u2 : List[Long] = List(1l)\n        var i : Int = 0\n        var\
    \ j : Int = 0\n        var k : Int = 0\n        var flag : Boolean = false\n \
    \       var z : List[Long] = List()\n        var t : List[Long] = List()\n   \
    \     while (i<m1 && j<m2) {\n            if (l1(i) == l2(j)) {\n            \
    \    if (u1.length < m1) {\n                    u1 += l1(i)\n                \
    \    i += 1\n                }\n                if (u2.length < m2) {\n      \
    \              u2 += l2(j)\n                    j += 1\n                }\n  \
    \          } else {\n                flag = true\n                while (flag)\
    \ {\n                    k = 0\n                    flag = false\n           \
    \         while (k<m1 && !u1(k)) {\n                        k += 1\n         \
    \           }\n                    while (k<m2 && !u2(k)) {\n                \
    \        k += 1\n                    }\n                    while (i<k && j<k)\
    \ {\n                        if (l1(i) == l2(j)) {\n                         \
    \   if (u1.length < k) {\n                                u1 += l1(i)\n      \
    \                          i += 1\n                            }\n           \
    \                 if (u2.length < k) {\n                                u2 +=\
    \ l2(j)\n                                j += 1\n                            }\n\
    \                        } else {\n                            flag = true\n \
    \                       }\n                    }\n                    if (flag)\
    \ {\n                        break\n                    }\n                }\n\
    \                if (flag) {\n                    break\n                }\n \
    \           }\n        }\n        if (u1.length == m1 && u2.length == m2) {\n\
    \            u1\n        }\n        else {\n            u2\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaecw8hq.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    u1 += l1(i)\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of List[Long] - did you mean u1.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpiaecw8hq.scala:28:23 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                    u2 += l2(j)\n\e[31m\e[31m   |\e[0m               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of List[Long]\
    \ - did you mean u2.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaecw8hq.scala:36:35\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m                    \e[33mwhile\e\
    [0m (k<m1 && !u1(k)) {\n\e[31m\e[31m   |\e[0m                                \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m      value unary_! is not a member of Long -\
    \ did you mean Long.unary_+?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaecw8hq.scala:39:35\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m                    \e[33mwhile\e\
    [0m (k<m2 && !u2(k)) {\n\e[31m\e[31m   |\e[0m                                \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m      value unary_! is not a member of Long -\
    \ did you mean Long.unary_+?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaecw8hq.scala:45:35\
    \ ------------------------\e[0m\e[0m\n\e[31m45 |\e[0m                        \
    \        u1 += l1(i)\n\e[31m\e[31m   |\e[0m                                ^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of List[Long] - did you\
    \ mean u1.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaecw8hq.scala:49:35\
    \ ------------------------\e[0m\e[0m\n\e[31m49 |\e[0m                        \
    \        u2 += l2(j)\n\e[31m\e[31m   |\e[0m                                ^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of List[Long] - did you\
    \ mean u2.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiaecw8hq.scala:57:24\
    \ ------------------------\e[0m\e[0m\n\e[31m57 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   "
  stdout: ''
  timestamp: 1659979404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val n1 = l1.toSet\n        val n2 = l2.toSet\n\
    \        if(n1.size == 0 || n2.size == 0) Nil\n        else if(n1 & n2) == n1\
    \ //if both are unique then return all element\n        else l1 ++ l2 map (_ +\
    \ 0) sortBy (_ % l1(0)) map (_ / l1(0)) filter (_ == l1(0)) map {_ / l1(0)} toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpp2fdcyxe.scala:13:30 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(n1 & n2) == n1\
    \ \e[34m//if both are unique then return all element\e[0m\n\e[31m\e[31m   |\e\
    [0m                              ^\e[0m\n\e[31m   |\e[0m                     \
    \         expression expected but \e[31melse\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpp2fdcyxe.scala:13:16 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(n1 & n2) == n1\
    \ \e[34m//if both are unique then return all element\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:    Set[Long]\n\
    \e[31m   |\e[0m                Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979403
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val commonElements = l1 ++ l2\n      \
    \  val uniqueCommonElements = commonElements.distinct\n        uniqueCommonElements\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi81hixce.scala:15)\n\tat Problem.main(tmpi81hixce.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // find common elements\n        var common\
    \ = l1\n        common = l2 diff common\n        // remove repeated elements from\
    \ common list\n        common = common.toSet.toList\n        // sort it\n    \
    \    common.sort\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqrteoukm.scala:16:15 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        common.sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sort is not a member of List[Long] - did you mean List[Long].sortBy?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979403
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val commonSet = l1 intersect l2\n    \
    \    commonSet.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        if (l1.isEmpty) l2\n        else if (l2.isEmpty)\
    \ l1\n        else if (l1.head == l2.head) common(l1.tail, l2.tail)\n        else\
    \ {\n            val common = l1 diff l2\n            val temp = l1.tail.head\
    \ :: l2.tail.head\n            (common ++ temp)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9rq9e46z.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mtemp\e[0m = l1.tail.head\
    \ :: l2.tail.head\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value :: is not a member\
    \ of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659979404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var result : List[Long] = Nil\n      \
    \  val set1 :Set[Long] = l1.toSet\n        val set2 :Set[Long] = l2.toSet\n  \
    \      val common = set1 intersect set2\n        result = common match {\n   \
    \         case Nil => result\n            case x :: xs => x :: common\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqagapvhv.scala:11:30\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mset1\e\
    [0m :\e[35mSet\e[0m[\e[35mLong\e[0m] = l1.toSet\n\e[31m\e[31m   |\e[0m       \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \       Found:    Set[Long]\n\e[31m   |\e[0m                              Required:\
    \ collection.mutable.Set[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqagapvhv.scala:12:30 --------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mset2\e[0m :\e[35mSet\e[0m[\e[35mLong\e[0m]\
    \ = l2.toSet\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                              Found:    Set[Long]\n\e[31m   |\e\
    [0m                              Required: collection.mutable.Set[Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqagapvhv.scala:15:17 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m Nil => result\n\e[31m\e[31m\
    \   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m        Found:    (Nil : =>\
    \ collection.immutable.Nil\xB2.type)\n\e[31m   |\e[0m        Required: scala.collection.mutable.Set[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m        where:    Nil  is a getter in \e[33mpackage\
    \ object\e[0m \e[35mscala\e[0m\n\e[31m   |\e[0m                  Nil\xB2 is a\
    \ object in \e[33mpackage\e[0m \e[35mscala.collection.immutable\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m        pattern type is incompatible with expected type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqagapvhv.scala:16:30\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e\
    [0m x :: xs => x :: common\n\e[31m\e[31m   |\e[0m                            \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue :: is not a member of scala.collection.mutable.Set[Long]\
    \ - did you mean common./:?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979407
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var result : List[Long] = Nil\n      \
    \  var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1(j) == l2(l1.length - i - 1)) {\n                result\
    \ = result :+ l1(j)\n                j += 1\n            } else if (l2(j) == l1(l2.length\
    \ - i - 1)) {\n                result = result :+ l2(j)\n                i +=\
    \ 1\n            } else if (l1(j) < l2(j)) {\n                i += 1\n       \
    \     } else {\n                j += 1\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvnicffwx.scala:29)\n\tat Problem.main(tmpvnicffwx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val set1 = l1.toSet \n        val set2\
    \ = l2.toSet\n        val commonSet = set1 -- set2\n        commonSet.map(l1.indexOf(_)).filter(x\
    \ => x != -1)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr9z11wnu.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        commonSet.map(l1.indexOf(_)).filter(\e\
    [36mx\e[0m => x != -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Set[Int]\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        def merge(l1 : List[Long], l2 : List[Long],\
    \ acc : List[Long]) : List[Long] = {\n          if (l1.length == 0) {\n      \
    \      acc ::: l2\n          } else if (l2.length == 0) {\n            acc :::\
    \ l1\n          } else {\n            val (a1, b1, c1) = (l1.head, l2.head, l1.length)\n\
    \            merge(l1.tail, l2.tail, acc :+ a1)\n          }\n        }\n    \
    \    val unique = new mutable.HashSet[Long]\n        merge(l1, l2, unique.toList)\n\
    \        unique.toList\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8zme75z5.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36munique\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val (list1, list2) = l1 zip l2\n     \
    \   val list = list1 diff list2\n        list map {case i => list1 find (x =>\
    \ x == i) } ++ list\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphx211szj.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = list1 diff list2\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \              value diff is not a member of Any\n1 error found\n"
  stdout: ''
  timestamp: 1659979407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val list = new mutable.HashSet[Long]()\n\
    \        for (x1 <- l1) list.add(x1)\n        for (x2 <- l2) list.add(x2)\n  \
    \      list.sort\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv9t5u4f1.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        if (l1 == l2) l1 else l1.toSet intersect\
    \ l2.toSet\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5jqewbic.scala:10:30\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mif\e[0m (l1 ==\
    \ l2) l1 \e[33melse\e[0m l1.toSet intersect l2.toSet\n\e[31m\e[31m   |\e[0m  \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              Found:    \e[1m\e[31mSet\e[0m[Long]\n\e[31m   |\e\
    [0m                              Required: \e[1m\e[32mList\e[0m[Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n      val n1 = l1.size\n      val n2 = l2.size\n\
    \n      val (i,j) =  (0 to n2).iterator\n      val u : List[Long] = new ListBuffer[Long]\n\
    \      val v : List[Long] = new ListBuffer[Long]\n\n      while (i<=n1 && j<=n2)\
    \ {\n        if (l1.get(i) == l2.get(j)) {\n          u ++= l1.get(i).asInstanceOf[Long]\n\
    \          v ++= l2.get(j).asInstanceOf[Long]\n          i += 1\n          j +=\
    \ 1\n        } else { // swap them\n          if (j == n2) {\n            j +=\
    \ 1\n          } else if (i == n1) {\n            i += 1\n          } else { //\
    \ swap them\n            if (l1.get(i) < l2.get(j)) {\n              u ++= l1.get(i).asInstanceOf[Long]\n\
    \              v ++= l2.get(j).asInstanceOf[Long]\n              i += 1\n    \
    \        } else {\n              u ++= l2.get(j).asInstanceOf[Long]\n        \
    \      v ++= l1.get(i).asInstanceOf[Long]\n              j += 1\n            }\n\
    \          }\n        }\n      }\n      List(u.toList.sorted).distinct\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq2yqlvzf.scala:14:27\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m      \e[33mval\e[0m \e[36mu\e\
    [0m : \e[35mList\e[0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m   |\e[0m                     Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq2yqlvzf.scala:15:27 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mv\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     Found:    scala.collection.mutable.ListBuffer[Long]\n\e\
    [31m   |\e[0m                     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpq2yqlvzf.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m      \e[33mwhile\e[0m (i<=n1 && j<=n2) {\n\e[31m\e[31m\
    \   |\e[0m             ^^^\e[0m\n\e[31m   |\e[0mvalue <= is not a member of Any,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq2yqlvzf.scala:18:15 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (l1.get(i) == l2.get(j)) {\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0mvalue get is not a\
    \ member of List[Long], but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJ"
  stdout: ''
  timestamp: 1659979413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val l1unique = l1.distinct\n        val\
    \ l2unique = l2.distinct\n        val common = l1unique.intersect(l2unique)\n\
    \        l1unique.filter(x => l2unique.contains(x)).toList ++ common :: l2unique.filter(x\
    \ => l1unique.contains(x)).toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8tdknxnw.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        l1unique.filter(\e[36mx\e\
    [0m => l2unique.contains(x)).toList ++ common :: l2unique.filter(\e[36mx\e[0m\
    \ => l1unique.contains(x)).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n      l1.filter(_ => l2.contains(_)).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppq0dchwf.scala:10:21\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m      l1.filter(_ => l2.contains(_)).sorted\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Found:    \e[1m\e[31mLong\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m=\e\
    [0m\e[1m\e[31m>\e[0m\e[1m\e[31m \e[0mBoolean\n\e[31m   |\e[0m                \
    \     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val (a1, b1) = l1.partition(elem => l2.contains(elem))\n\
    \        val (a2, b2) = l2.partition(elem => l1.contains(elem))\n        (a1 +\
    \ a2) diff (b1 + b2)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx0eg05jb.scala:12:12 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        (a1 + a2) diff (b1 + b2)\n\e[31m\e[31m   |\e\
    [0m         ^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val l = l1.toSet ++ l2.toSet\n       \
    \ l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps77dsuw_.scala:14)\n\tat Problem.main(tmps77dsuw_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // First sort both lists lexicographically\
    \ \n        l1.sortWith(_ < _)\n        l2.sortWith(_ < _)\n        // Then, check\
    \ if elements in both lists are unique\n        // For each element, check if\
    \ it is in both lists.\n        // If yes, return it.\n        // If no, add it\
    \ to an initially empty list.\n        var unique = List.empty[Long]\n       \
    \ for (e <- l1) {\n            if (l2.contains(e)) {\n                unique +=\
    \ e\n            }\n        }\n        // Finally, return the unique list.\n \
    \       unique\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbfvbrp38.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                unique += e\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of\
    \ List[Long] - did you mean List[Long].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659979413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1.zip(l2).filter(_._1 == _._1).map {\
    \ case (x, y) => y }\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk43e4x2m.scala:10:28 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        l1.zip(l2).filter(_._1 == _._1).map { \e[33mcase\e\
    [0m (x, y) => y }\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e\
    [31m   |\e[0m                          value _1 is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val (list1, list2) = (l1.toSet diff l2.toSet).unzip\n\
    \        list1.flatMap{x1 => list2.map{x2 => if (x1 == x2) List(x1) else List()}}.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvjmwg1kn.scala:10:59 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m (list1, list2) = (l1.toSet diff\
    \ l2.toSet).unzip\n\e[31m\e[31m   |\e[0m                                     \
    \                      ^\e[0m\n\e[31m   |\e[0mno given instance of type Long =>\
    \ (A1, A2) was found for parameter asPair of \e[33mmethod\e[0m \e[35munzip\e[0m\
    \ in \e[33mtrait\e[0m \e[35mIterableOps\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:\
    \    A1 is a type variable\n\e[31m   |\e[0m          A2 is a type variable\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvjmwg1kn.scala:10:13 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m (list1, list2) = (l1.toSet diff\
    \ l2.toSet).unzip\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m \
    \            Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvjmwg1kn.scala:10:20 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m (list1, list2) = (l1.toSet diff\
    \ l2.toSet).unzip\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e\
    [0m                    Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var commonElements = l1.distinct\n   \
    \     commonElements = commonElements.intersect(l2.distinct)\n        commonElements\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9ospuosv.scala:15)\n\tat Problem.main(tmp9ospuosv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var l3 = List.empty[Long]\n        var\
    \ l4 = List.empty[Long]\n        l1 match {\n            case Nil => l2\n    \
    \        case _ => {\n                for(i <- 0 until l1.length) {\n        \
    \            if((l1.contains(i) && l2.contains(i))) {\n                      \
    \  l3 += l1(i)\n                        l4 += l2(i)\n                    }\n \
    \               }\n                val l5 = l3.intersect(l4)\n               \
    \ val l6 = l3.filterNot(l4.contains)\n                l3.removeAll(l4)\n     \
    \           l3.removeAll(l5)\n                l3.filterNot((l6.length > 0).and(l5.length\
    \ > 0))\n            }\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpged_femb.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                        l3 += l1(i)\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member\
    \ of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpged_femb.scala:18:27 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m                        l4 += l2(i)\n\e[31m\e[31m   |\e[0m           \
    \             ^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpged_femb.scala:23:19\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                l3.removeAll(l4)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue removeAll\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpged_femb.scala:24:19\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                l3.removeAll(l5)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue removeAll\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n\e["
  stdout: ''
  timestamp: 1659979415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val seen = mutable.Set[Long]()\n     \
    \   l1 foreach { e => if (!seen.contains(e)) seen.add(e) }\n        l2 foreach\
    \ { e => if (!seen.contains(e)) seen.add(e) }\n        seen .toList filterNot\
    \ (l1.toSet ++ l2.toSet).toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjua_3cwj.scala:10:19 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mseen\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 ++ l2.filterNot(x => l1.contains(x)).toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphixv5xhi.scala:13)\n\tat Problem.main(tmphixv5xhi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var l3 = l1\n        l2 foreach {\n  \
    \          x =>\n            if (l3 contains x) l3 ::= x\n            else l3\
    \ = x\n        }\n        l3\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt5knanh_.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33melse\e[0m l3\
    \ = x\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m    \
    \                  Found:    (x : Long)\n\e[31m   |\e[0m                     \
    \ Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val sortedL1 = l1.sortBy(x => x)\n   \
    \     val sortedL2 = l2.sortBy(x => x)\n        val commonElements = l1.filter(x\
    \ => sortedL2.contains(x))\n        commonElements\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy_q_9ys6.scala:16)\n\tat Problem.main(tmpy_q_9ys6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        def getAllNonConsecutivePairsOfTwoLists(l\
    \ : List[Long], other : List[Long]) : List[(Long, Long)] = {\n            val\
    \ newL : List[(Long, Long)] = l.toList.sortBy(l => l)\n            val newOther\
    \ : List[(Long, Long)] = other.toList.sortBy(l => l)\n            val newL : mutable.List[(Long,\
    \ Long)] =  mutable.ListBuffer[(Long, Long)]()\n            val newOther : mutable.List[(Long,\
    \ Long)] =  mutable.ListBuffer[(Long, Long)]()\n            newL.reverse.zipWithIndex\
    \ foreach { case (left, leftIndex) =>\n                newOther.reverse.zipWithIndex\
    \ foreach { case (right, rightIndex) =>\n                    if (leftIndex !=\
    \ rightIndex) None\n                    else if (!(newL.last._1 == left && newOther.last._1\
    \ == right)) None\n                    else newL += ((left, right))\n        \
    \        }\n            }\n            newL.reverse\n            newOther.reverse\n\
    \        }\n        val allPairs = getAllNonConsecutivePairsOfTwoLists(l1, l2)\n\
    \        val uniquePairs : List[(Long, Long)] = allPairs.distinct\n        uniquePairs\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8dka7p1o.scala:13:16 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mnewL\e[0m : mutable.List[(\e\
    [35mLong\e[0m, \e[35mLong\e[0m)] =  mutable.ListBuffer[(\e[35mLong\e[0m, \e[35mLong\e\
    [0m)]()\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewL is already defined as \e[33mvalue\e[0m \e[35mnewL\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8dka7p1o.scala:14:16 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m            \e[33mval\e[0m \e[36mnewOther\e[0m : mutable.List[(\e[35mLong\e\
    [0m, \e[35mLong\e[0m)] =  mutable.ListBuffer[(\e[35mLong\e[0m, \e[35mLong\e[0m)]()\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewOther is already defined as \e[33mvalue\e[0m \e[35mnewOther\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp8dka7p1o.scala:11:44 --------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m            \e[33mval\e[0m \e[36mnewL\e[0m : \e[35mList\e[0m[(\e\
    [35mLong\e[0m, \e[35mLong\e[0m)] = l.toList.sortBy(\e[36ml\e[0m => l)\n\e[31m\e\
    [31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Found:    List[Long]\n\
    \e[31m   |\e[0m                                            Required: List[\e[1m\e\
    [32m(\e[0mLong\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0m\e[1m\e[32mLong\e[0m\e[1m\e[32m)\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8dka7p1o.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e\
    [36mnewOther\e[0m : \e[35mList\e[0m[(\e[35mLong\e[0m, \e[35mLong\e[0m)] = other.toList.sortBy(\e\
    [36ml\e[0m => l)\n\e[31m\e[31m   |\e[0m                             "
  stdout: ''
  timestamp: 1659979417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n      val set1 =  l1.toSet\n      val set2 = l2.toSet\n\
    \      val intersection = set1 intersect set2\n      val intersection2 = set1\
    \ intersect set2\n      val result = new ListBuffer[Long]()\n      var i = 0\n\
    \      while(i < intersection.size || i < intersection2.size) {\n        result\
    \ += if (i < intersection.size) intersection(i) else intersection2(i)\n      \
    \  i += 1\n      }\n      result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpssak3mxv.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        result += \e[33mif\e[0m (i < intersection.size)\
    \ intersection(i) \e[33melse\e[0m intersection2(i)\n\e[31m\e[31m   |\e[0m    \
    \              ^^\e[0m\n\e[31m   |\e[0m                  expression expected but\
    \ \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val commonSet = new mutable.HashSet[Long]\n\
    \        l2.foreach(commonSet.add)\n        l1.foreach(commonSet.add)\n      \
    \  commonSet.filter(_.nonEmpty)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt7pxs1cz.scala:10:28 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcommonSet\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val l3 = l1 ++ l2\n        l3.toList.sortWith(l\
    \ => l1 < l)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpc1szwdu8.scala:11:29 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        l3.toList.sortWith(\e[36ml\e[0m => l1 < l)\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Wrong number of parameters, expected: 2\n1 error found\n"
  stdout: ''
  timestamp: 1659979413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 ++ l2 diff (l2 intersect l1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8hwg7vlq.scala:13)\n\tat Problem.main(tmp8hwg7vlq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var a1 = l1\n        var a2 = l2\n   \
    \     var b1 = a1.toSet\n        var b2 = a2.toSet\n        var common = Set()\n\
    \        while(b1.nonEmpty || b2.nonEmpty) {\n            val t = b1.head\n  \
    \          b1 -= t\n            val tt = b2.head\n            b2 -= tt\n     \
    \       if(t.equals(tt)) {\n                common += t\n                a1 +=\
    \ tt\n                a2 += tt\n            }\n        }\n        if (b1.nonEmpty\
    \ || b2.nonEmpty) common.toList\n        else a1.toList ++ a2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg71x4skq.scala:21:26\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                common += t\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (t : Long)\n\e[31m   |\e[0m                    \
    \      Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpg71x4skq.scala:22:19 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                a1 += tt\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\
    \e[31m   |\e[0m    value += is not a member of List[Long] - did you mean List[Long].!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg71x4skq.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                a2 += tt\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        if (l1 == null && l2 == null) List()\n\
    \        else if (l1 == null && l2 != null) List(l2(0)) \n        else if (l1\
    \ != null && l2 == null) List(l1(0)) \n        else \n            val unique1\
    \ = new HashSet[Long](l1)\n            val unique2 = new HashSet[Long](l2)\n \
    \           val common = unique1 & unique2\n            if (common.isEmpty) List()\n\
    \            else List(common(0))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpqjf9_dbq.scala:14:30 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36munique1\e[0m = \e[33mnew\e\
    [0m \e[35mHashSet\e[0m[\e[35mLong\e[0m](l1)\n\e[31m\e[31m   |\e[0m           \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mconstructor\e[0m \e[35mHashSet\e[0m in \e[33mclass\e[0m\
    \ \e[35mHashSet\e[0m with types\n\e[31m   |\e[0m [A](): scala.collection.mutable.HashSet[A]\n\
    \e[31m   |\e[0m [A]\n\e[31m   |\e[0m  (initialCapacity: Int, loadFactor: Double):\
    \ \n\e[31m   |\e[0m    scala.collection.mutable.HashSet[A]\n\e[31m   |\e[0mmatch\
    \ arguments ((l1 : List[Long]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpqjf9_dbq.scala:15:30\
    \ -----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e\
    [0m \e[36munique2\e[0m = \e[33mnew\e[0m \e[35mHashSet\e[0m[\e[35mLong\e[0m](l2)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mNone of the overloaded alternatives of \e[33mconstructor\e[0m \e[35mHashSet\e\
    [0m in \e[33mclass\e[0m \e[35mHashSet\e[0m with types\n\e[31m   |\e[0m [A]():\
    \ scala.collection.mutable.HashSet[A]\n\e[31m   |\e[0m [A]\n\e[31m   |\e[0m  (initialCapacity:\
    \ Int, loadFactor: Double): \n\e[31m   |\e[0m    scala.collection.mutable.HashSet[A]\n\
    \e[31m   |\e[0mmatch arguments ((l2 : List[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1659979415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        if (l1.isEmpty) l2\n        else {\n \
    \           val i = l1.head\n            l2 match {\n                case x ::\
    \ xs => if (x == i) common(l1.tail, xs) else l1 ::: common(l1, xs)\n         \
    \       case Nil => Nil\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps6vk93hq.scala:20)\n\tat Problem.main(tmps6vk93hq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var res : List[Long] = Nil\n        l1\
    \ foreach { x =>\n            val i = l2 indexOf x\n            if (i == -1) res\
    \ += x\n            else {\n                if (l1.length == l2.length) {\n  \
    \                  val tmp: List = l1.slice(i + 1, l1.length)\n              \
    \      res += l1.slice(i + 1, l1.length).find(x => x == tmp(0))\n            \
    \    } else res += l1.slice(i + 1, l1.length - 1).find(x => x == l2(i - 1))\n\
    \            }\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwvob5qh.scala:13:29 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (i == -\e[31m1\e[0m) res +=\
    \ x\n\e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \    value += is not a member of List[Long] - did you mean List[Long].!=?\n\e\
    [31m\e[31m-- [E056] Syntax Error: /tmp/tmpnwvob5qh.scala:16:29 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    \e[33mval\e[0m \e[36mtmp\e[0m: \e\
    [35mList\e[0m = l1.slice(i + \e[31m1\e[0m, l1.length)\n\e[31m\e[31m   |\e[0m \
    \                            ^^^^\e[0m\n\e[31m   |\e[0m                      \
    \       Missing type parameter for List\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpnwvob5qh.scala:17:24 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                    res += l1.slice(i + \e[31m1\e[0m, l1.length).find(\e[36mx\e\
    [0m => x == tmp(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e\
    [0m\n\e[31m   |\e[0m    value += is not a member of List[Long] - did you mean\
    \ List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnwvob5qh.scala:18:27\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                } \e[33melse\e\
    [0m res += l1.slice(i + \e[31m1\e[0m, l1.length - \e[31m1\e[0m).find(x => x ==\
    \ l2(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                       ^^^^^^\e\
    [0m\n\e[31m   |\e[0m    value += is not a member of List[Long] - did you mean\
    \ List[Long].!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val u1 = u(l1)\n        val u2 = u(l2)\n\
    \        val intersection = u1.intersect(u2)\n        intersection.sortBy(identity)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0vdsxliu.scala:10:17 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mu1\e[0m = u(l1)\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ u\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0vdsxliu.scala:11:17\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mu2\e[0m = u(l2)\n\e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e\
    [0m                 Not found: u\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val (min1n, min1s) = l1.partition(_ <\
    \ l1(0))\n        val (max1n, max1s) = l1.partition(_ > l1(l1.length-1))\n   \
    \     val (min2n, min2s) = l2.partition(_ < l2(0))\n        val (max2n, max2s)\
    \ = l2.partition(_ > l2(l2.length-1))\n        (min1n zip max1n) diff (min2n zip\
    \ max2n)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmiu0m7cq.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (min1n zip max1n) diff\
    \ (min2n zip max2n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31mLong\e[0m\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m  \
    \      Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach {\n      \
    \      x => set1 += x\n        }\n        l2.foreach {\n            x => set2\
    \ += x\n        }\n        set1.diff(set2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8v8erowq.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mset1\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8v8erowq.scala:11:23\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mset2\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var l : List[Long] = l1.toList ++ l2.toList\n\
    \        l = l.toSet.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7tz4ryvh.scala:11:10\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        l = l.toSet.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        if (l1 == null || l2 == null) return null\n\
    \        if (l1 contains l2) return l1\n        var l1 = l1.sorted \n        var\
    \ l2 = l2.sorted \n        var result = new mutable.HashSet[Long]()\n        while\
    \ (true) {\n            var next = (l1.head min l2.head) match {\n           \
    \     case null => break\n                case n1 => if (n1 > n2) l1.remove(n1);\
    \ else l2.remove(n2)\n            }\n            result += next\n        }\n \
    \       result sorted\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4_k2snt4.scala:22:21 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        result sorted\n\e[31m\e[31m   |\e[0m        \
    \             ^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp4_k2snt4.scala:12:17 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mvar\e[0m \e[36ml1\e[0m = l1.sorted \n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive \e[33mvariable\e\
    [0m \e[35ml1\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp4_k2snt4.scala:13:17 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mvar\e[0m \e[36ml2\e[0m = l2.sorted \n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive \e[33mvariable\e\
    [0m \e[35ml2\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4_k2snt4.scala:14:25 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mvar\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4_k2snt4.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m \e[31mnull\e[0m => break\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var commonElements : List[Long] = Nil\n\
    \        if (l1.length >= l2.length) {\n            commonElements = l1.filter(\
    \ _ == l2.head ).distinct\n        }\n        if (l1.length < l2.length) {\n \
    \           commonElements = l2.filter( _ == l1.head ).distinct\n        }\n \
    \       if (commonElements.length > 0) {\n            return commonElements\n\
    \        }\n        else {\n            return common(l2, l1)\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpezg1khu3.scala:25)\n\tat Problem.main(tmpezg1khu3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 diff l2 map {\n            case elem\
    \ => elem\n        }.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmppb0urg81.scala:11:12 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m elem => elem\n\e[31m\e[31m\
    \   |\e[0m            ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter x$1\
    \ of expanded function:\n\e[31m   |\e[0m   x$1 => \n\e[31m   |\e[0m     x$1\e\
    [33m match \e[0m\n\e[31m   |\e[0m       {\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0melem => \n\e[31m   |\e[0m           elem\n\e[31m   |\e[0m       }.\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        def u(n1 : Long, n2 : Long, u : mutable.Set[Long]\
    \ = mutable.Set()) : Boolean = { if (n1 != n2) { if (u(n1, n2) && n1 < n2) u(n1,\
    \ n2) else u(n2, n1) } else true }\n        def u(n1 : Long, n2 : Long) : Boolean\
    \ = { if (u(n1, n2)) u(n1, n2) else false }\n        u(l1.head, l2.head).foreach(u(_,\
    \ _))\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9rfh5aao.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mdef\e[0m \e[36mu\e[0m(\e[36mn1\e[0m : \e\
    [35mLong\e[0m, \e[36mn2\e[0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = { \e[33mif\e\
    [0m (u(n1, n2)) u(n1, n2) \e[33melse\e[0m \e[31mfalse\e[0m }\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mu is already defined as \e[33mmethod\e[0m \e[35mu\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9rfh5aao.scala:10:40 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mdef\e[0m \e[36mu\e[0m(\e[36mn1\e[0m : \e[35mLong\e[0m, \e[36mn2\e\
    [0m : \e[35mLong\e[0m, \e[36mu\e[0m : mutable.Set[\e[35mLong\e[0m] = mutable.Set())\
    \ : \e[35mBoolean\e[0m = { \e[33mif\e[0m (n1 != n2) { \e[33mif\e[0m (u(n1, n2)\
    \ && n1 < n2) u(n1, n2) \e[33melse\e[0m u(n2, n1) } \e[33melse\e[0m \e[31mtrue\e\
    [0m }\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9rfh5aao.scala:10:60\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mdef\e[0m \e\
    [36mu\e[0m(\e[36mn1\e[0m : \e[35mLong\e[0m, \e[36mn2\e[0m : \e[35mLong\e[0m, \e\
    [36mu\e[0m : mutable.Set[\e[35mLong\e[0m] = mutable.Set()) : \e[35mBoolean\e[0m\
    \ = { \e[33mif\e[0m (n1 != n2) { \e[33mif\e[0m (u(n1, n2) && n1 < n2) u(n1, n2)\
    \ \e[33melse\e[0m u(n2, n1) } \e[33melse\e[0m \e[31mtrue\e[0m }\n\e[31m\e[31m\
    \   |\e[0m                                                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9rfh5aao.scala:12:28\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        u(l1.head, l2.head).foreach(u(_,\
    \ _))"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1.toSet intersect l2.toSet.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc27e4uz4.scala:10:36\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        l1.toSet intersect l2.toSet.toList\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Found:    List[Long]\n\e[31m   |\e[0m    \
    \                       Required: scala.collection.Set[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val u1 = new mutable.HashSet[Long]()\n\
    \        val u2 = new mutable.HashSet[Long]()\n        for (i <- l1) {\n     \
    \       u1 += i\n        }\n        for (j <- l2) {\n            u2 += j\n   \
    \     }\n        if (u1.size == 0 || u2.size == 0)\n            return l1\n  \
    \      else if (u1 union u2 == u1)\n            return l1\n        else\n    \
    \        return l2\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzvtkw57l.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mu1\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzvtkw57l.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mu2\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var commonElems1 : List[Long] = Nil\n\
    \        var commonElems2 : List[Long] = Nil\n        var j = 0\n        val n\
    \ = l1.size\n        val m = l2.size\n        while (j < n && j < m) {\n     \
    \       if (l1(j) == l2(j)) {\n                commonElems1 ::= l1(j)\n      \
    \          commonElems2 ::= l2(j)\n                j += 1\n            }\n   \
    \         else if (l1(j) < l2(j)) {\n                commonElems1 ::= l1(j)\n\
    \                j += 1\n            }\n            else {\n                commonElems2\
    \ ::= l2(j)\n                j += 1\n            }\n        }\n        commonElems1\
    \ ::= l1(j) :: commonElems1\n        commonElems2 ::= l2(j) :: commonElems2\n\
    \        commonElems1 sortBy (_ < _) reverse ::: commonElems2 sortBy (_ < _) reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1u2iiqp8.scala:32:83 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        commonElems1 sortBy (_ < _) reverse ::: commonElems2\
    \ sortBy (_ < _) reverse\n\e[31m\e[31m   |\e[0m                              \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1u2iiqp8.scala:30:21\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        commonElems1 ::=\
    \ l1(j) :: commonElems1\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m   value ::= is not a member of List[Long] - did you mean List[Long].::?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1u2iiqp8.scala:31:21 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        commonElems2 ::= l2(j) :: commonElems2\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value ::= is not\
    \ a member of List[Long] - did you mean List[Long].::?\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmp1u2iiqp8.scala:32:29 ---------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m        commonElems1 sortBy (_ < _) reverse ::: commonElems2\
    \ sortBy (_ < _) reverse\n\e[31m\e[31m   |\e[0m                             ^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1u2iiqp8.scala:32:44 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        commonElems1 sortBy (_ < _) reverse ::: commonElems2\
    \ sortBy (_ < _) reverse\n\e[31m\e[31m   |\e[0m                              \
    \              ^^^\e[0m\n\e[31m   |\e[0m                                     \
    \       Not found: :::\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var common = mutable.HashSet[Long]()\n\
    \        l2.foreach{\n            c => common += c\n        }\n        l1.foreach{\n\
    \            c => common -= c\n        }\n        common.sortWith(_.compareTo(_)\
    \ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfsu4k_5l.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mcommon\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 ::: (l2 -- l1).distinct\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmparbqdmd4.scala:10:19 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        l1 ::: (l2 -- l1).distinct\n\e[31m\e[31m   |\e\
    [0m                ^^^^^\e[0m\n\e[31m   |\e[0m                value -- is not\
    \ a member of List[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1659979424
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1.filter(_ == l2.head).distinct\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9fq2xgao.scala:13)\n\tat Problem.main(tmp9fq2xgao.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val lim = Math.min(l1.length, l2.length)\n\
    \        var li : Int = l1.length\n        var lj : Int = l2.length\n        var\
    \ lc = 0\n        if (l1.length < l2.length) lc = 1\n        else lc = -1\n  \
    \      val res : List[Long] = new Array[Long](lim)\n        var i = 0\n      \
    \  while (i < lim) {\n            val a = l1.apply(i).asInstanceOf[Long]\n   \
    \         val b = l2.apply(i).asInstanceOf[Long]\n            if (a == b) res(i)\
    \ = a\n            else if (lc < 0) res(i) = b\n            else if ((a > b) ||\
    \ ((b < 0) && (a < 0))) res(i) = a\n            else if (lc > 0) res(i) = b\n\
    \            else {\n                val j : Int = i - 1\n                val\
    \ k : Int = i + 1\n                while (j >= 0 && k < lim && a.equals(l1.apply(j))\
    \ && b.equals(l2.apply(k))) {\n                    res(j)++res(k)\n          \
    \          j--; k++\n                }\n            }\n            i += 1\n  \
    \      }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpp3u5uf3x.scala:30:23 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    j--; k++\n\e[31m\e[31m   |\e[0m \
    \                      ^\e[0m\n\e[31m   |\e[0m                       expression\
    \ expected but \e[31m';'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpp3u5uf3x.scala:30:28 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m                    j--; k++\n\e[31m\e[31m   |\e[0m                  \
    \          ^\e[0m\n\e[31m   |\e[0m                            expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpp3u5uf3x.scala:16:31 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mres\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]\
    \ = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](lim)\n\e[31m\e[31m   |\e\
    [0m                               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                              Found:    \e[1m\e[31mArray\e[0m[Long]\n\e[31m \
    \  |\e[0m                               Required: \e[1m\e[32mList\e[0m[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp3u5uf3x.scala:21:24\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m\
    \ (a == b) res(i) = a\n\e[31m\e[31m   |\e[0m                        ^^^\e[0m\n\
    \e[31m   |\e[0m  value update is not a member of List[Long] - did you mean res.updated?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp3u5uf3x.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (lc < \e[31m0\e\
    [0m) res(i) = b\n\e[31m\e[31m   |\e[0m                             ^^^\e[0m\n\e\
    [31m   |\e[0m  value update is not a member of List[Long] - did you mean res.updated?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp3u5uf3x.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m ((a > b) ||\
    \ ((b < \e["
  stdout: ''
  timestamp: 1659979426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val l3 = (l1, l2) match {\n          \
    \  case (x :: xs, _) => (x :: xs, x :: xs)\n            case (_ :: xs, y :: ys)\
    \ => ys intersect xs\n        }\n        l3.head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjzwvalsm.scala:14:11 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        l3.head\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value head is not a member of Object & Equals\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 ++ l2 filterNot (x => l1 contains x)\
    \ -> l1 filter (x => l2 contains x) sortBy (_.hashCode)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpb_nwd9fi.scala:10:28 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        l1 ++ l2 filterNot (\e[36mx\e[0m => l1 contains\
    \ x) -> l1 filter (\e[36mx\e[0m => l2 contains x) sortBy (_.hashCode)\n\e[31m\e\
    [31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m             \
    \             Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m       \
    \                   I could not infer the type of the parameter x.\n1 error found\n"
  stdout: ''
  timestamp: 1659979425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val uList = mutable.Set.empty[Long]\n\
    \        val vList = mutable.Set.empty[Long]\n\n        l1.foreach { elem => uList\
    \ += elem }\n        l2.foreach { elem => vList += elem }\n\n        uList intersect\
    \ vList\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp104qak35.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36muList\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp104qak35.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mvList\e[0m = mutable.Set.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val lis = mutable.ListBuffer.empty[Long]\n\
    \        val lis2 = mutable.ListBuffer.empty[Long]\n        l1 foreach { e =>\
    \ lis += e}\n        l2 foreach { e => lis2 += e}\n        lis.filter(e => lis2.contains(e)).sortWith((e1,\
    \ e2) => e1 compare e2)\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi4key5_5.scala:10:18 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mlis\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi4key5_5.scala:11:19 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mlis2\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // Store the unique items in one list.\n\
    \        val unique = l1 diff l2\n\n        // Compare each item to other items\
    \ in l1 and l2.\n        unique foreach { element =>\n            val i1Match\
    \ = l1 find { x => x == element }\n            val i2Match = l2 find { x => x\
    \ == element }\n\n            // If either item is unique, add it to the list.\n\
    \            if (i1Match != null) unique += element\n            if (i2Match !=\
    \ null) unique += element\n        }\n\n        // Sort the list.\n        unique.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpah6ci7tq.scala:19:40 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (i1Match != \e[31mnull\e[0m)\
    \ unique += element\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of List[Long] - did you mean\
    \ unique.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpah6ci7tq.scala:20:40\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m\
    \ (i2Match != \e[31mnull\e[0m) unique += element\n\e[31m\e[31m   |\e[0m      \
    \                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is\
    \ not a member of List[Long] - did you mean unique.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpah6ci7tq.scala:24:15 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        unique.sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sort is not a member of List[Long], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import collection.convert.ImplicitConversions.seq AsJavaList\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\e[31m\
    \   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659979430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        if (l1 == null || l2 == null) return null\n\
    \        if (l1.isEmpty) return l2\n        if (l2.isEmpty) return l1\n      \
    \  if (l1.head==l2.head) return common(l1.tail, l2.tail)\n        common(l1, l2.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw9za_znc.scala:17)\n\tat Problem.main(tmpw9za_znc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var l3 = l1 ++ l2\n        l3.sortWith(Ordering[Long].reverse)\n\
    \        l3\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpswp75c98.scala:11:35\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        l3.sortWith(Ordering[\e\
    [35mLong\e[0m].reverse)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Found:    Ordering[Long]\n\e[31m   |\e\
    [0m                    Required: (Long, Long) => Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // The first list is the shorter, so we\
    \ sort the list before comparing them.\n        val sortedL1 = l1.sortBy(l =>\
    \ l)\n        val sortedL2 = l2.sortBy(l => l)\n        // Iterate through the\
    \ first list and see if any of the elements are in the second list.\n        var\
    \ commonElems = sortedL1.iterator\n        while (!commonElems.hasNext || commonElems.next.compareTo(sortedL2.next)\
    \ < 0) {\n            val elem = commonElems.next\n            if (!sortedL2.contains(elem))\n\
    \                commonElems = commonElems.next\n        }\n        // Now that\
    \ we have exhausted both lists, we know that any elements that are not in the\
    \ second list are in the first list.\n        commonElems.next.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplox0v_s7.scala:15:75 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mwhile\e[0m (!commonElems.hasNext || commonElems.next.compareTo(sortedL2.next)\
    \ < \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                                   \
    \                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value next\
    \ is not a member of List[Long] - did you mean sortedL2.head?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplox0v_s7.scala:18:30 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                commonElems = commonElems.next\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              Found:    Long\n\e[31m   |\e[0m             \
    \                 Required: Iterator[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmplox0v_s7.scala:21:25 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        commonElems.next.toList\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value toList is not\
    \ a member of Long - did you mean Long.toInt?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        def f1(x : (Long, Long)) = x match {\n\
    \            case (x , y ) if x < y => x\n            case (x , y ) => y\n   \
    \         case _ => x\n        }\n        def f2(x : Long) = x match {\n     \
    \       case x if x < 0 => x\n            case x => 0\n        }\n        val\
    \ l3 = l1 ++ l2\n        val ll = l3.sorted\n        ll.foldLeft((0 , ll)){\n\
    \            case (acc, x) => f1(acc) match {\n                case (acc, y) if\
    \ acc > 0 && f2(acc) < f2(y) => acc :: f1(y)\n                case (acc, y) if\
    \ acc > 0 && f2(acc) > f2(y) => acc :: y\n                case (acc, y) => acc\
    \ :: y\n            }\n        }.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn6377n77.scala:22:32\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m (acc,\
    \ x) => f1(acc) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                    \
    \            ^^^\e[0m\n\e[31m   |\e[0m                                Found: \
    \   (acc : (Int, List[Long]))\n\e[31m   |\e[0m                               \
    \ Required: (Long, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpn6377n77.scala:23:37 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m                \e[33mcase\e[0m (acc, y) \e[33mif\e[0m acc > \e[31m0\e[0m &&\
    \ f2(acc) < f2(y) => acc :: f1(y)\n\e[31m\e[31m   |\e[0m                     \
    \            ^^^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of Any, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m\
    \   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn6377n77.scala:23:73 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m (acc, y) \e[33mif\e[0m\
    \ acc > \e[31m0\e[0m && f2(acc) < f2(y) => acc :: f1(y)\n\e[31m\e[31m   |\e[0m\
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   (y : Any)\n\e[31m   |\e[0m                                               \
    \   Required: (Long, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpn6377n77.scala:24:37 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m                \e[33mcase\e[0m (acc, y) \e[33mif\e[0m acc > \e[31m0\e[0m &&\
    \ f2(acc) > f2(y) => acc :: y\n\e[31m\e[31m   |\e[0m                         \
    \        ^^^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of Any, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659979433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val result = new ArrayList[Long]()\n \
    \       l1.foldLeft(result) { case (acc, x) => if (l2.contains(x)) acc :+ x else\
    \ acc }\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0zihe9n0.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m \e[35mArrayList\e[0m[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ type ArrayList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 ++ l2 filterNot (l1.contains)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppo6o_13k.scala:13)\n\tat Problem.main(tmppo6o_13k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var c = 0\n        var l = l1.head \n\
    \        var u = l2.head\n        var ret: List[Long] = Nil\n        while (l\
    \ != Null && u != Null) {\n            if (l < u) {\n                c += 1\n\
    \                l += l1.tail\n                u += l2.tail\n            }\n \
    \           else {\n                c += 1\n                l += l1.tail\n   \
    \             u += l2.tail\n            }\n        }\n        ret :+ l1.head +\
    \ l2.head - c\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphs87xr6.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mwhile\e[0m (l != Null && u != Null) {\n\
    \e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m          \
    \          Not found: Null\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpphs87xr6.scala:17:18 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                l += l1.tail\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\
    \e[31m   |\e[0m                value += is not a member of Long - did you mean\
    \ Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpphs87xr6.scala:18:18\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                u += l2.tail\n\
    \e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m              \
    \  value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpphs87xr6.scala:22:18 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                l += l1.tail\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpphs87xr6.scala:23:18\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                u += l2.tail\n\
    \e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m              \
    \  value += is not a member of Long - did you mean Long.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1659979432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var i : Int = 0\n        var j : Int =\
    \ 0\n        var a : List[Long] = null\n        var b : List[Long] = null\n  \
    \      while(i < l1.length && j < l2.length) {\n            if (l1.get(i) == l2.get(j))\n\
    \                a += l1.get(i)\n            else\n                b += l1.get(i)\n\
    \            i += 1\n            j += 1\n        }\n        if (i == l1.length\
    \ && j == l2.length)\n            a\n        else\n            b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfv6s6935.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (l1.get(i) == l2.get(j))\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m          value\
    \ get is not a member of List[Long] - did you mean l1.seq?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpfv6s6935.scala:16:18 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m                a += l1.get(i)\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[Long]\
    \ - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfv6s6935.scala:16:24\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                a += l1.get(i)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m   |\e[0mvalue get\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfv6s6935.scala:18:18\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                b += l1.get(i)\n\
    \e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m    value += is\
    \ not a member of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpfv6s6935.scala:18:24 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                b += l1.get(i)\n\e[31m\e[31m   |\e[0m    \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0mvalue get is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\
    \e[31m   |\e[0m\n5 errors found\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // This can be done more efficiently by\
    \ sorting both lists once, finding the\n        // intersection, and then sorting,\
    \ but this is more readable for demonstration.\n        val set1 = l1 diff l2\n\
    \        val set2 = l2 diff l1\n        val common = set1 intersect set2\n   \
    \     common.sort\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz1iheqtw.scala:15:15 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        common.sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m  value sort is not a member of List[Long] - did you mean\
    \ common.sortBy?\n1 error found\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val lc = l1.zip(l2).filter { case(a,b)\
    \ => a == b}.map { case(a,b) => a}.toList\n        lc.sort\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwuyfk0m9.scala:11:11 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        lc.sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value sort is not a member of List[Long] - did you mean\
    \ lc.sortBy?\n1 error found\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var common = Set.empty[Long]\n       \
    \ l1.foreach{\n            if (l2.contains(_))\n                common += _\n\
    \        }\n        common.sorted() // Sorted for consistency.\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5wf8r0xu.scala:12:16\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (l2.contains(_))\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \            Found:    \e[1m\e[31mLong\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m=\e[0m\e\
    [1m\e[31m>\e[0m\e[1m\e[31m \e[0mBoolean\n\e[31m   |\e[0m                Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp5wf8r0xu.scala:13:26\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m                common\
    \ += _\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m\
    \   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 =>\
    \ common += _$2.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5wf8r0xu.scala:15:15\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        common.sorted() \e\
    [34m// Sorted for consistency.\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value sorted is not a member of scala.collection.mutable.Set[Long]\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        def isElementNotInList(l1 : List[Long],\
    \ l2 : List[Long], element : Long) : Boolean = {\n            if(!l1.contains(element))\n\
    \                return false\n            if(!l2.contains(element))\n       \
    \         return false\n            if(l1.size == 0)\n                return true\n\
    \            else\n                l2.size != 0\n        }\n        l1.toSet ++\
    \ l2.toSet filterNot (e => isElementNotInList(l1, l2, e)).sort\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1_36oq7y.scala:20:76 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        l1.toSet ++ l2.toSet filterNot (\e[36me\e[0m\
    \ => isElementNotInList(l1, l2, e)).sort\n\e[31m\e[31m   |\e[0m              \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue sort is not a member of Long => Boolean - did you mean Long =>\
    \ Boolean.wait?\n1 error found\n"
  stdout: ''
  timestamp: 1659979434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 foreach { e =>\n            l2 foreach\
    \ { e2 =>\n                if  (e2 == e) yield e\n            }\n        }\n \
    \       l1.toList\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp951qsobj.scala:12:30 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mif\e[0m  (e2 == e) \e[33myield\e\
    [0m e\n\e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                              'then' expected, but 'yield' found\n\e\
    [33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp951qsobj.scala:13:12 ----------------\e\
    [0m\e[0m\n\e[33m12 |\e[0m                \e[33mif\e[0m  (e2 == e) \e[33myield\e\
    [0m e\n\e[33m13 |\e[0m            }\n\e[33m\e[33m   |\e[0m                   \
    \                  ^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement\
    \ position; you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 warning\
    \ found\n1 error found\n"
  stdout: ''
  timestamp: 1659979430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // The first list should be the shortest.\n\
    \        if (l1.length < l2.length)\n            l2 ::: l1\n        else\n   \
    \         l1 ::: l2\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmparkmkp69.scala:17)\n\tat Problem.main(tmparkmkp69.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var commonList = ListBuffer[Long]()\n\
    \        val set1 = l1.toSet\n        val set2 = l2.toSet\n        commonList\
    \ ++= set1 diff set2\n        set1 diff set2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgem70nxs.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        set1 diff set2\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e\
    [1m\e[31mSet\e[0m[Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e[0m[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979435
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val common = l1.toSet.intersect(l2.toSet)\n\
    \        val unique = l1.toSet.union(common)\n        unique.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeul501bn.scala:15)\n\tat Problem.main(tmpeul501bn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val hashSet = new mutable.HashSet[Long]\n\
    \        l2.foreach { x => hashSet.add(x); hashSet.size }\n        l1.foreach\
    \ { x => if (hashSet.contains(x)) hashSet.remove(x) }\n        hashSet.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdt_7nie.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mhashSet\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var list : List[Long] = Nil\n        for\
    \ (a1 <- l1 diff l2; a2 <- l2 diff l1; a <- List(a1, a2)) yield {\n          \
    \  if (list.length != 0) list = list ++ List(a)\n            else list = List(a)\n\
    \        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo7l777uj.scala:18)\n\tat Problem.main(tmpo7l777uj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1.toStream.zip(l2.toStream)\n       \
    \         .collect { case ((x, y), z) if (x == y) => (x, y) }\n              \
    \  .sortWith(_._1 > _._1)\n                .map(_._2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpidu8v0nq.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                .sortWith(_._1 > _._1)\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0mvalue > is not\
    \ a member of Any, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val s1 = l1.sort\n        val s2 = l2.sort\n\
    \        val s3 = ListBuffer.empty[Long]\n        val s4 = ListBuffer.empty[Long]\n\
    \        while (!s1.isEmpty) {\n            val a = s1.head\n            s3 +=\
    \ a\n            while (!s2.contains(a)) {\n                if (s1.head == s2.head)\
    \ {\n                    s4 += s1.head\n                    s2.remove(0)\n   \
    \             } else {\n                    s1.remove(0)\n                }\n\
    \            }\n        }\n        List((s3 diff s4).distinct)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph_alhbxe.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ms1\e[0m = l1.sort\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m      value sort is\
    \ not a member of List[Long] - did you mean l1.sortBy?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmph_alhbxe.scala:11:20 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36ms2\e[0m = l2.sort\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort is not a member\
    \ of List[Long], but could be made available as an extension method.\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.seq\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.seq\
    \ AsJavaList\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph_alhbxe.scala:26:26\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        List((s3 diff s4).distinct)\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \             Found:    scala.collection.mutable.ListBuffer[Long]\n\e[31m   |\e\
    [0m             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        //var lst = List[Long]()\n        //var\
    \ ltr = List[Long]()\n        var j = 0\n        for((i, a) <- l1.zipWithIndex)\
    \ yield {\n            var b = l2.subList(i,l2.length)\n            if(a ++ b\
    \ == l2) j+=1\n            else if(a ++ b != l2) lst += a.toList\n           \
    \ else if (a ++ b == l2) lst += b.toList\n            else ltr += a.toList\n \
    \       }\n        //if(lst.size != ltr.size) lst ++ ltr\n        //else ltr\n\
    \        ltr.toList\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz3h3dt2k.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mvar\e[0m \e[36mb\e[0m = l2.subList(i,l2.length)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value\
    \ subList is not a member of List[Long] - did you mean l2.toList?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpz3h3dt2k.scala:15:17 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(a ++ b == l2) j+=\e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m               ^^^^\e[0m\n\e[31m   |\e[0m          \
    \     value ++ is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpz3h3dt2k.scala:16:22 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33melse\e[0m \e[33mif\e[0m(a ++ b != l2) lst += a.toList\n\e\
    [31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m            \
    \        value ++ is not a member of Int\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpz3h3dt2k.scala:16:34 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33melse\e[0m \e[33mif\e[0m(a ++ b != l2) lst += a.toList\n\e\
    [31m\e[31m   |\e[0m                                  ^^^\e[0m\n\e[31m   |\e[0m\
    \                                  Not found: lst\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpz3h3dt2k.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (a ++ b ==\
    \ l2) lst += b.toList\n\e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e\
    [31m   |\e[0m                     value ++ is not a member of Int\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpz3h3dt2k.scala:17:35 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (a ++ b ==\
    \ l2) lst += b.toList\n\e[31m\e[31m   |\e[0m                                 \
    \  ^^^\e[0m\n\e[31m   |\e[0m                                   Not found: lst\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz3h3dt2k.scala:18:17\
    \ ------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1659979440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // Remove common elements.\n        //\
    \ >>> common((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong,\
    \ 2l.toLong)))\n        // (List[Long](2l.toLong, 3l.toLong))\n        val r =\
    \ l1.toSet.intersect(l2.toSet)\n        r.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmc2u5epa.scala:14:10 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        r.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m   value reverse is not a member of Set[Long] - did you mean\
    \ r.reversed?\n1 error found\n"
  stdout: ''
  timestamp: 1659979438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val a1 = l1\n        val a2 = l2\n   \
    \     val s = a1.distinct.toList\n        val t = a2.distinct.toList\n       \
    \ val c = s.intersect(t)\n        val list = new ListBuffer[Long]()\n        for\
    \ (item <- a1) {\n            list.+=item\n        }\n        for (item <- a2)\
    \ {\n            list.+=item\n        }\n        list.filter((item) => list.contains(item))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplmwpkvma.scala:17:23 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            list.+=item\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmplmwpkvma.scala:20:23 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            list.+=item\n\e[31m\e[31m   |\e[0m                       ^\e\
    [0m\n\e[31m   |\e[0m                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmplmwpkvma.scala:17:17\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            list.+=item\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m+=\e[0m in \e[33mtrait\e[0m \e[35mGrowable\e\
    [0m with types\n\e[31m   |\e[0m (elem1: Long, elem2: Long, elems: Long*): \n\e\
    [31m   |\e[0m  (list : scala.collection.mutable.ListBuffer[Long])\n\e[31m   |\e\
    [0m (elem: Long): (list : scala.collection.mutable.ListBuffer[Long])\n\e[31m \
    \  |\e[0mmatch expected type ?{ item: ? }\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmplmwpkvma.scala:20:17\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            list.+=item\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m+=\e[0m in \e[33mtrait\e[0m \e[35mGrowable\e\
    [0m with types\n\e[31m   |\e[0m (elem1: Long, elem2: Long, elems: Long*): \n\e\
    [31m   |\e[0m  (list : scala.collection.mutable.ListBuffer[Long])\n\e[31m   |\e\
    [0m (elem: Long): (list : scala.collection.mutable.ListBuffer[Long])\n\e[31m \
    \  |\e[0mmatch expected type ?{ item: ? }\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplmwpkvma.scala:22:19 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        list.filter((\e[36mitem\e[0m) => list.contains(item))\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e["
  stdout: ''
  timestamp: 1659979440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        def loop(list1 : List[Long], list2 : List[Long],\
    \ result : List[Long], cnt : Int) : List[Long] = {\n            if (list1.isEmpty)\
    \ {\n                result ++ list2\n            } else if (list2.isEmpty) {\n\
    \                result ++ list1\n            } else if (list1.head._1 == list2.head._1)\
    \ {\n                result ++ loop(list1.tail, list2.tail, result :+ list1.head._1,\
    \ cnt + 1)\n            } else if (list1.head._1 > list2.head._1) {\n        \
    \        loop(list1, list2.tail, result :+ list2.head._1, cnt + 1)\n         \
    \   } else {\n                loop(list1.tail, list2, result :+ list1.head._1,\
    \ cnt + 1)\n            }\n        }\n        loop(l1, l2, Nil, 0)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwiu0_mom.scala:15:34 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (list1.head._1\
    \ == list2.head._1) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value _1 is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpwiu0_mom.scala:16:76 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                result ++ loop(list1.tail, list2.tail,\
    \ result :+ list1.head._1, cnt + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                                                         ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value _1 is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwiu0_mom.scala:17:34\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            } \e[33melse\e\
    [0m \e[33mif\e[0m (list1.head._1 > list2.head._1) {\n\e[31m\e[31m   |\e[0m   \
    \                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \  value _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwiu0_mom.scala:18:61\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                loop(list1,\
    \ list2.tail, result :+ list2.head._1, cnt + \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        value _1 is not a member of\
    \ Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwiu0_mom.scala:20:61 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                loop(list1.tail, list2, result :+ list1.head._1,\
    \ cnt + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                 \
    \                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                value _1 is not a member of Long\n5 errors found\n"
  stdout: ''
  timestamp: 1659979441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val c1 = l1.toSet\n        val c2 = l2.toSet\n\
    \        c1 intersect c2\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp81y521w1.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        c1 intersect c2\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    \e[1m\e[31mSet\e[0m[Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e\
    [0m[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val l3 = l1 ++ l2\n        val l4 = l3.groupBy(x\
    \ => x).mapValues(_.length).toList.sortBy(-_._2)\n        val l5 = l4.map(_._1).distinct\n\
    \        l5\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq1f4n7iu.scala:16)\n\tat Problem.main(tmpq1f4n7iu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        def common(acc : List[Long], l2 : List[Long])\
    \ : List[Long] = {\n            val l1 = acc.toList\n            val l2 = l2.toList\n\
    \            val common = l1 diff l2\n            if (common.isEmpty)\n      \
    \          acc\n            else\n                common(common ::: acc, l2)\n\
    \        }\n        common(List(), l2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4qkot_8a.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36ml2\e[0m = l2.toList\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35ml2\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4qkot_8a.scala:17:23 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                common(common ::: acc, l2)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                      Found:    (List[Long], Nothing)\n\e[31m   |\e[0m      \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n      l1 diff l2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyfty1idx.scala:13)\n\tat Problem.main(tmpyfty1idx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979443
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val set1 = new HashSet[Long]()\n     \
    \   val set2 = new HashSet[Long]()\n\n        l2.foreach((x) => set1 += x)\n \
    \       l1.foreach((x) => set2 += x)\n\n        set1.toList ++ set2.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp1uixn1a.scala:19)\n\tat Problem.main(tmpp1uixn1a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val (l1, l2) = l1 ++ l2.sortBy(_.hashCode)\n\
    \        val l = l1.toSet + l2.toSet\n        l.toList.sortBy(_.hashCode)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcut4dyju.scala:10:13 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m (l1, l2) = l1 ++ l2.sortBy(_.hashCode)\n\
    \e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m             Recursive\
    \ \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcut4dyju.scala:10:17 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m (l1, l2) = l1 ++ l2.sortBy(_.hashCode)\n\
    \e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                \
    \ Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        l1 diff l2 filterNot (_ => l1.contains(l2))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcnx998_o.scala:13)\n\tat Problem.main(tmpcnx998_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        // Create two mutable sets to hold sorted\
    \ unique elements.\n        // This requires O(nlogn) time and O(n) extra space.\n\
    \        val s1 = new mutable.TreeSet[Long]\n        val s2 = new mutable.TreeSet[Long]\n\
    \        l2.foreach { x => s1.add(x.toLong); s2.add(x) }\n        l1.foreach {\
    \ x => if (!s2.contains(x.toLong)) s2.add(x); s1.remove(x) }\n        s2.toList.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxitm2_ym.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ms1\e[0m = \e[33mnew\e[0m\
    \ mutable.TreeSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxitm2_ym.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ms2\e[0m = \e[33mnew\e[0m\
    \ mutable.TreeSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var set = new mutable.HashSet[Long]()\n\
    \        set.add(l1(0))\n        set.add(l1(1))\n        set.add(l2(1))\n    \
    \    set.add(l2(0))\n        set.filter{ elem => l1.contains(elem) && l2.contains(elem)\
    \ }.toList\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdz4cw5s.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mset\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var l3 = mutable.Set[Long]()\n       \
    \ l2.foreach(l1 => l3 = l3 + (l1 :: l3))\n        l3.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph0us7c74.scala:10:17 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36ml3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        val set1 = Set[Long]()\n        val set2\
    \ = Set[Long]()\n        l1 foreach { x => set1 += x }\n        l2 foreach { x\
    \ => set2 += x }\n        set1 intersect set2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_noetf9d.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        set1 intersect set2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Found:    scala.collection.mutable.Set[Long]\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var list1 = l1\n        var list2 = l2\n\
    \        var commonList = scala.collection.mutable.ListBuffer.empty[Long]\n  \
    \      var count1 = list1.size\n        var count2 = list2.size\n        while\
    \ ( count1 > 0 && count2 > 0) {\n            var smallest = ( list1.min() < (list2.min()\
    \ ))\n            if( smallest != commonList.contains(smallest)) {\n         \
    \       commonList += smallest\n                list1 -= smallest\n          \
    \      count1 -= 1\n                list2 -= smallest\n                count2\
    \ -= 1\n            } else {\n                smallest = ( list2.min() < (list1.min()\
    \ ))\n                if( smallest != commonList.contains(smallest)) {\n     \
    \               commonList += smallest\n                    list2 -= smallest\n\
    \                    count2 -= 1\n                } else {\n                 \
    \   smallest = ( list1.min() < (list2.min() ))\n                    if( smallest\
    \ != commonList.contains(smallest)) {\n                        commonList += smallest\n\
    \                        list1 -= smallest\n                        count1 -=\
    \ 1\n                    }\n                }\n            }\n        }\n    \
    \    commonList ++ list1 ++ list2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_83ucj23.scala:16:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mvar\e[0m \e[36msmallest\e[0m = ( list1.min()\
    \ < (list2.min() ))\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter ord of \e[33mmethod\e[0m \e\
    [35mmin\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m: (\e[33mimplicit \e\
    [0mord: Ordering[B]): Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_83ucj23.scala:19:22\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                list1 -=\
    \ smallest\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \    value -= is not a member of List[Long] - did you mean List[Long].!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp_83ucj23.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                list2 -= smallest\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m    value -= is not a member\
    \ of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- Error: /tmp/tmp_83ucj23.scala:24:38\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \         smallest = ( list2.min() < (list1.min() ))\n\e[31m\e[31m   |\e[0m  \
    \                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument\
    \ for parameter ord of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mtrait\e[0m \e\
    [35mIterableOnceOps\e[0m: (\e[33mimplicit \e[0mord: Ordering[B]): Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_83ucj23.scala:27:26 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    list2 -= smallest\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m    value -= is not\
    \ a member of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp_83ucj23.scala:30:42 -----------------------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m                    smallest = ( list1.min() < (list2.min()\
    \ ))\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmissing argument for parameter ord of \e[33mmethod\e[0m \e[35mmin\e\
    [0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m: (\e[33mimplicit \e["
  stdout: ''
  timestamp: 1659979444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var result : List[Long] = Nil\n      \
    \  val list1 = l1 sortBy (_ => 1) //sort ascending\n        val list2 = l2 sortBy\
    \ (_ => 1) //sort ascending\n        var i = 0\n        while (i < list1.length\
    \ && i < list2.length) {\n            if (list1(i) == list2(i)) {\n          \
    \      result += list1(i)\n                i += 1\n            } else if (list1(i)\
    \ < list2(i)) {\n                i += 1\n            } else {\n              \
    \  i += 1\n            }\n        }\n        while ((i < list1.length) || (i <\
    \ list2.length)) {\n            if (list1.length <= i) {\n                break\n\
    \            }\n            if (list2.length <= i) {\n                break\n\
    \            }\n            if (list1(i) > list2(i)) {\n                result\
    \ += list1(i)\n                i += 1\n            } else {\n                i\
    \ += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1bc63x3n.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                result += list1(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member\
    \ of List[Long] - did you mean List[Long].!=?\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp1bc63x3n.scala:26:16 ------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\
    \e[31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1bc63x3n.scala:29:16 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1bc63x3n.scala:32:23 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                result += list1(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member\
    \ of List[Long] - did you mean List[Long].!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        def getCommon(l1 : List[Long], l2 : List[Long])\
    \ : List[Long] = l1 ++ l2 filterNot {\n            case nd if l2.contains(nd)\
    \ => false\n            case nd => true\n        }\n        val li1 =  l1 toList\
    \ toSeq\n        val li2 =  l2 toList toSeq\n        li1 ++ li2 filterNot {\n\
    \            case nd if li1.contains(nd) => false\n            case nd => true\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu15hsnp9.scala:14:29 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mli1\e[0m =  l1 toList toSeq\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: toSeq\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpu15hsnp9.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mli2\e[0m =  l2 toList toSeq\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: toSeq\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpu15hsnp9.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        li1 ++ li2 filterNot {\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m        value ++ is not a member of Long\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var unique1 = l1.toSet\n        var unique2\
    \ = l2.toSet\n        unique1 -- unique2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdx2imjoz.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        unique1 -- unique2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    \e[1m\e[31mSet\e[0m[Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e\
    [0m[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        if (l1 == null || l2 == null) {\n    \
    \        Nil\n        }\n        else {\n            val set1 : mutable.Set[Long]\
    \ = mutable.Set.empty[Long]\n            val set2 : mutable.Set[Long] = mutable.Set.empty[Long]\n\
    \n            l1.foreach(x => set1 += x)\n\n            l2.foreach(x => set2 +=\
    \ x)\n\n            set1 diff set2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjz46h6y4.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mset1\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m   \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjz46h6y4.scala:14:43\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36mset1\e[0m : mutable.Set[\e[35mLong\e[0m] = mutable.Set.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjz46h6y4.scala:15:23\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mset2\e[0m : mutable.Set[\e[35mLong\e[0m] = mutable.Set.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpjz46h6y4.scala:15:43 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mset2\e[0m : mutable.Set[\e\
    [35mLong\e[0m] = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m   \
    \                                        ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979443
